<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2024/11/22/language/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%B7%9F%E8%B8%AA/"/>
      <url>2024/11/22/language/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%B7%9F%E8%B8%AA/</url>
      
        <content type="html"><![CDATA[<p>一些好的但是还没有上线（或发币）的项目跟踪</p><table><thead><tr><th>项目名称</th><th>项目描述</th><th>项目地址</th><th>个人备注</th></tr></thead><tbody><tr><td>optimism</td><td>layer 2解决方案</td><td><a href="https://optimism.io/">https://optimism.io/</a></td><td>uniswap等defi项目支持</td></tr><tr><td><strong>ZK Rollup</strong></td><td>layer 2解决方案</td><td><a href="https://zksync.io/">https://zksync.io/</a></td><td><a href="https://zhuanlan.zhihu.com/p/352515617">2021值得关注的l2</a></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令记录</title>
      <link href="2024/11/22/others/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
      <url>2024/11/22/others/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="docker命令">docker命令</h2><h3 id="删除本地所有没有被使用的卷：">删除本地所有没有被使用的卷：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure><p>WARNING! This will remove all local volumes not used by at least one container.</p><h3 id="查看本地的所有卷：">查看本地的所有卷：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><h3 id="删除某个volume卷">删除某个volume卷</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume rm docker_orderer.supply.com</span><br></pre></td></tr></table></figure><h3 id="查看所有的容器，包括没有运行中的">查看所有的容器，包括没有运行中的</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h3 id="查看某个容器的日志">查看某个容器的日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs ead00b30e8ec</span><br></pre></td></tr></table></figure><h3 id="停止容器">停止容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 46bc78ee1f8a e8df5432a918 be15203b7835</span><br></pre></td></tr></table></figure><h3 id="删除容器">删除容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm ead00b30e8ec 46bc78ee1f8a e8df5432a918 be15203b7835</span><br></pre></td></tr></table></figure><h3 id="进入docker容器">进入docker容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it f37c61b09023 /bin/sh</span><br></pre></td></tr></table></figure><h3 id="修改容器的环境变量">修改容器的环境变量</h3><p>在配置docker-compose某个容器的环境变量时出现了错误，但是容器已经运行了，如果重新运行则数据会丢失。所以需要修正此环境变量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">peer0.s1.supply.com:</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>    <span class="attr">container_name:</span> <span class="string">peer0.s1.supply.com</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>    <span class="attr">environment:</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#Generic</span> <span class="string">peer</span> <span class="string">variables*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">\-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#</span> <span class="string">the</span> <span class="string">following</span> <span class="string">setting</span> <span class="string">starts</span> <span class="string">chaincode</span> <span class="string">containers</span> <span class="string">on</span> <span class="string">the</span> <span class="string">same*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#</span> <span class="string">bridge</span> <span class="string">network</span> <span class="string">as</span> <span class="string">the</span> <span class="string">peers*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#</span> <span class="string">https://docs.docker.com/compose/networking/*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">\-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=_test</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">\-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#-</span> <span class="string">FABRIC_LOGGING_SPEC=DEBUG*</span></span><br></pre></td></tr></table></figure><p>如要修改<code>CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE</code>为<code>docker_test</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、进入容器</span></span><br><span class="line">docker exec -it f37c61b09023 /bin/sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、修改环境变量</span></span><br><span class="line">echo &quot;export CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test&quot; &gt;&gt; /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、重新启动容器即可</span></span><br></pre></td></tr></table></figure><h3 id="查看docker启动的网络">查看docker启动的网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><h2 id="docker-compose命令">docker-compose命令</h2><h3 id="使用docker-compose启动docker镜像">使用docker-compose启动docker镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> --f 指定文件, -d指定后台运行</span></span><br><span class="line">docker-compose --f docker-compose.yml up -d</span><br></pre></td></tr></table></figure><h3 id="使用docker-compose启动指定的名称的容器">使用docker-compose启动指定的名称的容器</h3><p>在一个<code>docker-compose.yaml</code>配置文件下可能有多个<code>serevice</code>，可以指定名称来启动其中的一个，命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up ca-tls</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle常用命令记录</title>
      <link href="2024/11/22/others/Gradle%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2024/11/22/others/Gradle%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Gradle常用命令记录">Gradle常用命令记录:</h2><h4 id="运行gradle-help-task-someTask来显示帮助，如：">运行<code>gradle help --task someTask</code>来显示帮助，如：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew help --task test</span><br></pre></td></tr></table></figure><h4 id="clean">clean</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew clean</span><br></pre></td></tr></table></figure><h4 id="build">build</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build</span><br></pre></td></tr></table></figure><h4 id="test">test</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew test</span><br></pre></td></tr></table></figure><h4 id="排除指定的task-exclude-task">排除指定的task<code>--exclude-task</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew clean build --exclude-task test</span><br></pre></td></tr></table></figure><h4 id="多模块指定模块运行task">多模块指定模块运行task</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./gradlew :my-subproject:taskName</span><br><span class="line">./gradlew my-subproject:taskName</span><br></pre></td></tr></table></figure><h4 id="测试失败继续执行">测试失败继续执行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew test --continue</span><br></pre></td></tr></table></figure><h4 id="检查，会执行test和linting">检查，会执行test和linting</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew check</span><br></pre></td></tr></table></figure><h4 id="显示当前的项目层次">显示当前的项目层次</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew project</span><br></pre></td></tr></table></figure><h4 id="列出所有的task">列出所有的task</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew tasks</span><br></pre></td></tr></table></figure><h4 id="列出项目所有的依赖：">列出项目所有的依赖：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew dependencies</span><br></pre></td></tr></table></figure><p>去<a href="https://docs.gradle.org/current/userguide/command_line_interface.html">官网</a>查看更多</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Homebrew配置为国内镜像</title>
      <link href="2024/11/22/others/Homebrew%E9%85%8D%E7%BD%AE%E4%B8%BA%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/"/>
      <url>2024/11/22/others/Homebrew%E9%85%8D%E7%BD%AE%E4%B8%BA%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<p>本人的Mac电脑按照<a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">清华大学开源软件镜像站</a>的设置时报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git</span><br><span class="line">fatal: cannot change to &#x27;/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask&#x27;: No such file or directory</span><br></pre></td></tr></table></figure><p>解决方案是先change到对应的目录下，在执行替换脚本，操作如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"></span><br><span class="line">cd $(brew --repo homebrew/core)</span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure><h2 id="卸载homebrew">卸载homebrew</h2><p>执行卸载脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;</span><br></pre></td></tr></table></figure><p>如果报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</span><br></pre></td></tr></table></figure><p>需要配置一下host；去往<a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a>，输入<a href="https://raw.githubusercontent.com">raw.githubusercontent.com</a>查看ip地址，然后配置host之后重试。</p><h2 id="安装bash-completion">安装bash_completion</h2><p>卸载homebrew后发现自动补全的功能也没有了，报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi awk: can&#x27;t open file /usr/local/etc/bash_completion</span><br></pre></td></tr></table></figure><p>解决方法是重新安装homebrew后，安装bash-completion：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install bash-completion</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Homebrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令记录</title>
      <link href="2024/11/22/others/Linux%20Shell%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
      <url>2024/11/22/others/Linux%20Shell%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="tar-解压，压缩，帮助：tar-h">tar(解压，压缩，帮助：tar -h)</h2><p>解压，<code>-C</code>标签指定解压到哪个目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xf -C ./test</span><br></pre></td></tr></table></figure><p>压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cf &lt;archive-filename&gt; [filenames...]</span><br></pre></td></tr></table></figure><h2 id="shasum（hash，帮助shasum-h）">shasum（hash，帮助shasum -h）</h2><p>生成hash，<code>-a</code>标签指定使用哪个算法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shasum -a 256 README.md</span><br></pre></td></tr></table></figure><h2 id="修改终端显示，不显示用户名和电脑名称">修改终端显示，不显示用户名和电脑名称</h2><p>修改<code>/etc/bashrc</code>：PS1='\w $ ’</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> more /etc/bashrc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> System-wide .bashrc file <span class="keyword">for</span> interactive bash(1) shells.</span></span><br><span class="line">if [ -z &quot;$PS1&quot; ]; then</span><br><span class="line">   return</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">PS1=<span class="string">&#x27;\h:\W \u\$ &#x27;</span></span></span><br><span class="line">PS1=&#x27;\w \$ &#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> Make bash check its window size after a process completes</span></span><br><span class="line">shopt -s checkwinsize</span><br><span class="line"></span><br><span class="line">[ -r &quot;/etc/bashrc_$TERM_PROGRAM&quot; ] &amp;&amp; . &quot;/etc/bashrc_$TERM_PROGRAM&quot;</span><br></pre></td></tr></table></figure><p>其他参数：</p><ul><li>\d ：代表日期，格式为weekday month date，例如：“Mon Aug 1”</li><li>\H ：完整的主机名称。例如：我的机器名称为：fc4.linux，则这个名称就是fc4.linux</li><li>\h ：仅取主机的第一个名字，如上例，则为fc4，.linux则被省略</li><li>\t ：显示时间为24小时格式，如：HH：MM：SS</li><li>\T ：显示时间为12小时格式\A ：显示时间为24小时格式：HH：MM</li><li>\u ：当前用户的账号名称\v ：BASH的版本信息</li><li>\w ：完整的工作目录名称。家目录会以 ~代替</li><li>\W ：利用basename取得工作目录名称，所以只会列出最后一个目录</li><li># ：下达的第几个命令</li><li>$ ：提示字符，如果是root时，提示符为：# ，普通用户则为：$</li></ul><h3 id="crontab（定时任务-man-crontab）">crontab（定时任务,man crontab）</h3><ul><li>查看：<code>crontab -l</code></li><li>编辑：<code>crontab -e</code></li></ul><p>crontab配置举例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 每天十点30分执行hello.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 分 时 日 月 星期 <span class="built_in">command</span></span></span><br><span class="line">30 10 * * * ～/hello.sh</span><br></pre></td></tr></table></figure><h3 id="grep">grep</h3><p>屏蔽grep命令本身</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep python |grep -v grep</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac安装多版本golang</title>
      <link href="2024/11/22/others/Mac%E5%AE%89%E8%A3%85%E5%A4%9A%E7%89%88%E6%9C%ACgolang/"/>
      <url>2024/11/22/others/Mac%E5%AE%89%E8%A3%85%E5%A4%9A%E7%89%88%E6%9C%ACgolang/</url>
      
        <content type="html"><![CDATA[<h2 id="起因">起因</h2><p>最近在运行一些源软件时，因为golang的版本问题而报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">compile: version &quot;go1.15.7&quot; does not match go tool version &quot;go1.16&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> golang.org/x/net/html/atom</span></span><br><span class="line">compile: version &quot;go1.15.7&quot; does not match go tool version &quot;go1.16&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> golang.org/x/text/internal/utf8internal</span></span><br><span class="line">compile: version &quot;go1.15.7&quot; does not match go tool version &quot;go1.16&quot;</span><br></pre></td></tr></table></figure><h2 id="安装不同版本的golang">安装不同版本的golang</h2><h3 id="首先安装gvm">首先安装gvm</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)</span><br></pre></td></tr></table></figure><p>安装完成之后重启终端。</p><h3 id="查看当前已经安装了哪些版本的go">查看当前已经安装了哪些版本的go</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install go@1.15</span><br></pre></td></tr></table></figure><p><em>注意：指定版本时可以先运行<code>brew search go</code>来查看有哪些版本，如果直接指定go1.15.7小版本可能报错。</em></p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL主从复制切换</title>
      <link href="2024/11/22/others/MYSQL%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%88%87%E6%8D%A2/"/>
      <url>2024/11/22/others/MYSQL%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>由于公司iaas人员在操作虚拟ip时手误，导致应该指向mysql主库的虚拟ip指向了从库。因为业务app使用的是虚拟ip链接的数据库，因此导致所有的业务数据都写入了从库，而主库的数据从此没有任何变化。</p><p>为了解决此问题，需要把原来的主库变成从库，从而继续保持mysql数据库的高可用。</p><h3 id="基本信息">基本信息</h3><p>旧主库ip：172.99.0.32</p><p>旧从库ip：172.99.0.31</p><h2 id="具体操作如下">具体操作如下</h2><h3 id="验证当前的主从复制状态">验证当前的主从复制状态</h3><p>旧的主库数据是否全部同步到从库，在原主库执行主从同步状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sys@172.99.0.32:(none) 17:54:52&gt;show processlist;</span><br><span class="line">+-------+------------+-------------------+------+-------------+--------+-----------------------------------------------------------------------+------------------+----------+</span><br><span class="line">| Id    | User       | Host              | db   | Command     | Time   | State                                                                 | Info             | Progress |</span><br><span class="line">+-------+------------+-------------------+------+-------------+--------+-----------------------------------------------------------------------+------------------+----------+</span><br><span class="line">| 11679 | rep   | 172.99.0.31:8609  | NULL | Binlog Dump | 279575 | Master has sent all binlog to slave; waiting for binlog to be updated | NULL             |    0.000 |</span><br><span class="line">+-------+------------+-------------------+------+-------------+--------+-----------------------------------------------------------------------+------------------+----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查看从库是否可以做主库">查看从库是否可以做主库</h3><p>主要是查看bin-log是否打开，结论：31服务器可以作为主库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sys@172.99.0.31:(none) 17:57:01&gt;show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| mysql-bin.000153 |  2786181 |              |                  |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查看从哪里进行主从复制">查看从哪里进行主从复制</h3><h4 id="查看旧主库最后一条bin-log位置">查看旧主库最后一条bin-log位置</h4><p>因为重新启动过，并且重新启动之后主库没有执行过sql，所以最新的bin-log并没有sql，因此查看上一个bin-log的最后的位置。</p><h5 id="把二进制的bin-log转换成人类语言">把二进制的bin-log转换成人类语言</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog --base64-output=decode-rows -v mysql-bin.000706 &gt; mysql-bin.000706.txt</span><br></pre></td></tr></table></figure><h5 id="查看bin-log最后的位置如下：">查看bin-log最后的位置如下：</h5><p><code>tail -200 mysql-bin.000706.txt</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">&#x2F;*!*&#x2F;;</span><br><span class="line"># at 32438411</span><br><span class="line"># at 32438848</span><br><span class="line"># at 32438939</span><br><span class="line">#220317 15:00:00 server id 533307  end_log_pos 32438848 Annotate_rows:</span><br><span class="line">#Q&gt; update job_log set</span><br><span class="line">#Q&gt; job_name&#x3D;&#39;detail_NoticeJob&#39;,</span><br><span class="line">#Q&gt; job_cron_expression&#x3D;&#39;0 0 1,10,15,21 * * ?&#39;,</span><br><span class="line">#Q&gt; create_time&#x3D;&#39;2022-03-17 15:00:00&#39;,</span><br><span class="line">#Q&gt; job_class_name&#x3D;&#39;com.hello.lease.job.NoticeJob&#39;,</span><br><span class="line">#Q&gt; staff_name&#x3D;&#39;系统操作&#39;,</span><br><span class="line">#Q&gt; update_time&#x3D;&#39;2022-03-17 15:00:00&#39;,</span><br><span class="line">#Q&gt; staff_id&#x3D;0,</span><br><span class="line">#Q&gt; job_msg&#x3D;&#39;通知-每日1、10、15、21点&#39;,</span><br><span class="line">#Q&gt; status&#x3D;&#39;end&#39;</span><br><span class="line">#Q&gt;  wher</span><br><span class="line">#220317 15:00:00 server id 533307  end_log_pos 32438939 Table_map: &#96;db&#96;.&#96;job_log&#96; mapped to number 3857</span><br><span class="line">#220317 15:00:00 server id 533307  end_log_pos 32439375 Update_rows: table id 3857 flags: STMT_END_F</span><br><span class="line">### UPDATE &#96;db&#96;.&#96;job_log&#96;</span><br><span class="line">### WHERE</span><br><span class="line">###   @1&#x3D;14424</span><br><span class="line">###   @2&#x3D;&#39;detail_NoticeJob&#39;</span><br><span class="line">###   @3&#x3D;&#39;0 0 1,10,15,21 * * ?&#39;</span><br><span class="line">###   @4&#x3D;&#39;com.hello.lease.job.NoticeJob&#39;</span><br><span class="line">###   @5&#x3D;&#39;通知-每日1、10、15、21点&#39;</span><br><span class="line">###   @6&#x3D;&#39;start&#39;</span><br><span class="line">###   @7&#x3D;0</span><br><span class="line">###   @8&#x3D;&#39;系统操作&#39;</span><br><span class="line">###   @9&#x3D;2022-03-17 15:00:00</span><br><span class="line">###   @10&#x3D;1647500400</span><br><span class="line">### SET</span><br><span class="line">###   @1&#x3D;14424</span><br><span class="line">###   @2&#x3D;&#39;detail_NoticeJob&#39;</span><br><span class="line">###   @3&#x3D;&#39;0 0 1,10,15,21 * * ?&#39;</span><br><span class="line">###   @4&#x3D;&#39;com.hello.lease.job.NoticeJob&#39;</span><br><span class="line">###   @5&#x3D;&#39;通知-每日1、10、15、21点&#39;</span><br><span class="line">###   @6&#x3D;&#39;end&#39;</span><br><span class="line">###   @7&#x3D;0</span><br><span class="line">###   @8&#x3D;&#39;系统操作&#39;</span><br><span class="line">###   @9&#x3D;2022-03-17 15:00:00</span><br><span class="line">###   @10&#x3D;1647500400</span><br><span class="line"># at 32439375</span><br><span class="line">#220317 15:00:00 server id 533307  end_log_pos 32439402 Xid &#x3D; 825866165</span><br><span class="line">COMMIT&#x2F;*!*&#x2F;;</span><br><span class="line">DELIMITER ;</span><br><span class="line"># End of log file</span><br></pre></td></tr></table></figure><h5 id="旧从库同步最后一条数据时的bin-log位置">旧从库同步最后一条数据时的bin-log位置</h5><p>根据主库的最后一条bin-log信息找到从库对应的bin-log位置如下：</p><p>mysql-bin.000703</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">&#x2F;*!*&#x2F;;</span><br><span class="line"># at 132131716</span><br><span class="line"># at 132131807</span><br><span class="line">#220317 15:00:00 server id 533307  end_log_pos 132131807        Table_map: &#96;db&#96;.&#96;job_log&#96; mapped to number 54116</span><br><span class="line">#220317 15:00:00 server id 533307  end_log_pos 132132243        Update_rows: table id 54116 flags: STMT_END_F</span><br><span class="line">### UPDATE &#96;db&#96;.&#96;job_log&#96;</span><br><span class="line">### WHERE</span><br><span class="line">###   @1&#x3D;14424</span><br><span class="line">###   @2&#x3D;&#39;detail_NoticeJob&#39;</span><br><span class="line">###   @3&#x3D;&#39;0 0 1,10,15,21 * * ?&#39;</span><br><span class="line">###   @4&#x3D;&#39;com.hello.lease.job.NoticeJob&#39;</span><br><span class="line">###   @5&#x3D;&#39;通知-每日1、10、15、21点&#39;</span><br><span class="line">###   @6&#x3D;&#39;start&#39;</span><br><span class="line">###   @7&#x3D;0</span><br><span class="line">###   @8&#x3D;&#39;系统操作&#39;</span><br><span class="line">###   @9&#x3D;2022-03-17 15:00:00</span><br><span class="line">###   @10&#x3D;1647500400</span><br><span class="line">### SET</span><br><span class="line">###   @1&#x3D;14424</span><br><span class="line">###   @2&#x3D;&#39;detail_NoticeJob&#39;</span><br><span class="line">###   @3&#x3D;&#39;0 0 1,10,15,21 * * ?&#39;</span><br><span class="line">###   @4&#x3D;&#39;com.hello.lease.job.NoticeJob&#39;</span><br><span class="line">###   @5&#x3D;&#39;通知-每日1、10、15、21点&#39;</span><br><span class="line">###   @6&#x3D;&#39;end&#39;</span><br><span class="line">###   @7&#x3D;0</span><br><span class="line">###   @8&#x3D;&#39;系统操作&#39;</span><br><span class="line">###   @9&#x3D;2022-03-17 15:00:00</span><br><span class="line">###   @10&#x3D;1647500400</span><br><span class="line"># at 132132243</span><br><span class="line">#220317 15:00:00 server id 533307  end_log_pos 132132270        Xid &#x3D; 49158632</span><br><span class="line">COMMIT&#x2F;*!*&#x2F;;</span><br><span class="line"># at 132132270</span><br></pre></td></tr></table></figure><h3 id="进行主从切换">进行主从切换</h3><h4 id="验证31上是否有主从复制的用户">验证31上是否有主从复制的用户</h4><p>如果没有需要新建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sys@172.99.0.31:mysql 16:07:25&gt;select user,host from user where user&#x3D;&#39;rep&#39;;</span><br><span class="line">+----------+------+</span><br><span class="line">| user     | host |</span><br><span class="line">+----------+------+</span><br><span class="line">| rep | %    |</span><br><span class="line">+----------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="停掉31的主从复制">停掉31的主从复制</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 停止同步</span><br><span class="line">stop slave;</span><br><span class="line"># 重置同步：https:<span class="operator">/</span><span class="operator">/</span>mariadb.com<span class="operator">/</span>kb<span class="operator">/</span>en<span class="operator">/</span>reset<span class="operator">-</span>replica<span class="operator">/</span></span><br><span class="line">RESET SLAVE;</span><br><span class="line"># 验证同步状态</span><br><span class="line"><span class="keyword">show</span> slave status \G</span><br></pre></td></tr></table></figure><h4 id="启动32的主从复制">启动32的主从复制</h4><p>MASTER_LOG_FILE和MASTER_LOG_POS的值是从上面的旧从库的bin-log中获取的。位置是旧主库的最后一条bin-log执行的sql的位置。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 添加主从同步配置</span><br><span class="line">CHANGE MASTER <span class="keyword">TO</span></span><br><span class="line">  MASTER_HOST<span class="operator">=</span><span class="string">&#x27;172.99.0.31&#x27;</span>,</span><br><span class="line">  MASTER_USER<span class="operator">=</span><span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">  MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  MASTER_PORT<span class="operator">=</span><span class="number">3308</span>,</span><br><span class="line">  MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;mysql-bin.000703&#x27;</span>,</span><br><span class="line">  MASTER_LOG_POS<span class="operator">=</span><span class="number">132132270</span>,</span><br><span class="line">  MASTER_CONNECT_RETRY<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"># 启动主从同步</span><br><span class="line"><span class="keyword">start</span> slave;</span><br><span class="line"></span><br><span class="line"># 验证同步状态</span><br><span class="line"><span class="keyword">show</span> slave status \G</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 主从复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle学习踩坑记录</title>
      <link href="2024/11/22/others/gradle%E5%AD%A6%E4%B9%A0%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
      <url>2024/11/22/others/gradle%E5%AD%A6%E4%B9%A0%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="gradle学习踩坑记录">gradle学习踩坑记录</h1><p>最近想学习一下Java11，使用gradle搭建了一个项目，但是在执行打包命令<code>./gradlew clean build</code>时报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not target platform: &#x27;Java SE 11&#x27; using tool chain: &#x27;JDK 8 (1.8)&#x27;</span><br></pre></td></tr></table></figure><p>原因是因为我本地的JAVA_HOME配置的JDK版本是1.8，但是项目中指定的编译版本为Java11：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sourceCompatibility = JavaVersion.VERSION_11</span><br><span class="line">targetCompatibility = JavaVersion.VERSION_11</span><br></pre></td></tr></table></figure><p>解决方式是在项目的根目录下新建gradle.properties文件，并写入以下配置，问题解决</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.gradle.java.home</span> = <span class="string">/Library/Java/JavaVirtualMachines/jdk-11.0.9.jdk/Contents/Home</span></span><br></pre></td></tr></table></figure><p>gradle的<a href="https://www.jetbrains.com/help/idea/gradle-jvm-selection.html#jdk_existing_project">官方文档</a>解释如下：</p><h3 id="Resolve-the-Gradle-JVM-version-for-the-existing-project">Resolve the Gradle JVM version for the existing project</h3><ol><li>IntelliJ IDEA checks the <code>gradle.properties</code> file for the appropriate Gradle JVM specified in <code>org.gradle.java.home</code> and uses it for the project.</li><li>Then it checks the <code>JAVA_HOME</code> environment variable.</li><li>Then it checks the closest appropriate JDK version for the existing Gradle version.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu20.04设置静态ip</title>
      <link href="2024/11/22/others/ubuntu20.04%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/"/>
      <url>2024/11/22/others/ubuntu20.04%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/</url>
      
        <content type="html"><![CDATA[<h2 id="设置静态IP">设置静态IP</h2><h3 id="修改-etc-netplan-01-network-manager-all-yaml文件如下：">修改<code>/etc/netplan/01-network-manager-all.yaml</code>文件如下：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Let NetworkManager manage all devices on this system</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">NetworkManager</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">        <span class="attr">wlp7s0:</span></span><br><span class="line">            <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.0</span><span class="number">.107</span><span class="string">/24</span>, ]</span><br><span class="line">            <span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line">            <span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line">            <span class="attr">gateway4:</span>  <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">            <span class="attr">nameservers:</span></span><br><span class="line">                <span class="attr">addresses:</span> [<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>, <span class="number">9.9</span><span class="number">.9</span><span class="number">.9</span>]</span><br></pre></td></tr></table></figure><p>其中的<code>wlp7s0</code>是网卡信息，可以通过<code>ifconfig</code>获得。</p><h3 id="设置生效：">设置生效：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure><h2 id="启动ssh">启动ssh</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install openssh-service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu如何挂载硬盘</title>
      <link href="2024/11/22/others/ubuntu%E5%A6%82%E4%BD%95%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/"/>
      <url>2024/11/22/others/ubuntu%E5%A6%82%E4%BD%95%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h2 id="查看已经挂载了哪些">查看已经挂载了哪些</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> df -l</span></span><br><span class="line">文件系统           1K-块     已用      可用 已用% 挂载点</span><br><span class="line">udev            16362980        0  16362980    0% /dev</span><br><span class="line">tmpfs            3285100     2364   3282736    1% /run</span><br><span class="line">/dev/nvme0n1p7 200537360 18016188 172264740   10% /</span><br><span class="line">tmpfs           16425488   408624  16016864    3% /dev/shm</span><br><span class="line">tmpfs               5120        4      5116    1% /run/lock</span><br><span class="line">tmpfs           16425488        0  16425488    0% /sys/fs/cgroup</span><br><span class="line">/dev/loop0         56832    56832         0  100% /snap/core18/1988</span><br><span class="line">/dev/loop1         66432    66432         0  100% /snap/gtk-common-themes/1514</span><br><span class="line">/dev/loop2         33152    33152         0  100% /snap/snapd/11402</span><br><span class="line">/dev/loop3         52352    52352         0  100% /snap/snap-store/518</span><br><span class="line">/dev/loop4         31872    31872         0  100% /snap/snapd/11036</span><br><span class="line">/dev/loop5        224256   224256         0  100% /snap/gnome-3-34-1804/66</span><br><span class="line">/dev/nvme0n1p1     98304    33555     64749   35% /boot/efi</span><br><span class="line">tmpfs            3285096       20   3285076    1% /run/user/125</span><br><span class="line">tmpfs            3285096       92   3285004    1% /run/user/1000</span><br><span class="line">/dev/loop6        101632   101632         0  100% /snap/core/10908</span><br><span class="line">/dev/loop7        435968   435968         0  100% /snap/pycharm-community/233</span><br><span class="line">/dev/loop8        680192   680192         0  100% /snap/intellij-idea-community/289</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查看有哪些">查看有哪些</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo fdisk -l</span></span><br><span class="line">Disk /dev/loop0：55.48 MiB，58159104 字节，113592 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop1：64.79 MiB，67915776 字节，132648 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop2：32.28 MiB，33841152 字节，66096 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop3：51.4 MiB，53522432 字节，104536 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop4：31.9 MiB，32595968 字节，63664 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop5：218.102 MiB，229629952 字节，448496 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop6：99.22 MiB，104030208 字节，203184 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop7：425.67 MiB，446328832 字节，871736 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/nvme0n1：931.53 GiB，1000204886016 字节，1953525168 个扇区</span><br><span class="line">Disk model: WDC WDS100T2B0C-00PXH0                  </span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line">磁盘标签类型：gpt</span><br><span class="line">磁盘标识符：C12B6754-9D12-4F54-92FA-086CE249C548</span><br><span class="line"></span><br><span class="line">设备                 起点       末尾      扇区   大小 类型</span><br><span class="line">/dev/nvme0n1p1       2048     206847    204800   100M EFI 系统</span><br><span class="line">/dev/nvme0n1p2     206848     239615     32768    16M Microsoft 保留</span><br><span class="line">/dev/nvme0n1p3     239616  408449302 408209687 194.7G Microsoft 基本数据</span><br><span class="line">/dev/nvme0n1p4  408451072  409597951   1146880   560M Windows 恢复环境</span><br><span class="line">/dev/nvme0n1p5  409597952 1134321663 724723712 345.6G Microsoft 基本数据</span><br><span class="line">/dev/nvme0n1p6 1134321664 1543921663 409600000 195.3G Microsoft 基本数据</span><br><span class="line">/dev/nvme0n1p7 1543921664 1953523711 409602048 195.3G Linux 文件系统</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sda：7.28 TiB，8001563222016 字节，15628053168 个扇区</span><br><span class="line">Disk model: HGST HUS728T8TAL</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 4096 字节</span><br><span class="line">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class="line">磁盘标签类型：gpt</span><br><span class="line">磁盘标识符：F654D976-A27E-49D1-B0FD-5DCB3914D51D</span><br><span class="line"></span><br><span class="line">设备             起点        末尾       扇区  大小 类型</span><br><span class="line">/dev/sda1          34       32767      32734   16M Microsoft 保留</span><br><span class="line">/dev/sda2       32768  4096032767 4096000000  1.9T Microsoft 基本数据</span><br><span class="line">/dev/sda3  4096032768  8192032767 4096000000  1.9T Microsoft 基本数据</span><br><span class="line">/dev/sda4  8192032768 15628050431 7436017664  3.5T Microsoft 基本数据</span><br><span class="line"></span><br><span class="line">分区 1 未起始于物理扇区边界。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop8：664.17 MiB，696426496 字节，1360208 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查看想要挂载的硬盘的uuid">查看想要挂载的硬盘的uuid</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lsblk -f</span></span><br><span class="line">NAME        FSTYPE   LABEL    UUID                                 FSAVAIL FSUSE% MOUNTPOINT</span><br><span class="line">loop0       squashfs                                                     0   100% /snap/core18/1988</span><br><span class="line">loop1       squashfs                                                     0   100% /snap/gtk-common-themes/1514</span><br><span class="line">loop2       squashfs                                                     0   100% /snap/snapd/11402</span><br><span class="line">loop3       squashfs                                                     0   100% /snap/snap-store/518</span><br><span class="line">loop4       squashfs                                                     0   100% /snap/snapd/11036</span><br><span class="line">loop5       squashfs                                                     0   100% /snap/gnome-3-34-1804/66</span><br><span class="line">loop6       squashfs                                                     0   100% /snap/core/10908</span><br><span class="line">loop7       squashfs                                                     0   100% /snap/pycharm-community/233</span><br><span class="line">loop8       squashfs                                                     0   100% /snap/intellij-idea-community/289</span><br><span class="line">sda                                                                               </span><br><span class="line">├─sda1                                                                            </span><br><span class="line">├─sda2      ntfs     数据     38C09128C090ECFE                                    </span><br><span class="line">├─sda3      ntfs     新加卷   2A9E99709E993573                                    </span><br><span class="line">└─sda4      ntfs     新加卷   C25E9EB25E9E9F2B                                    </span><br><span class="line">nvme0n1                                                                           </span><br><span class="line">├─nvme0n1p1 vfat              2E15-C03F                              63.2M    34% /boot/efi</span><br><span class="line">├─nvme0n1p2                                                                       </span><br><span class="line">├─nvme0n1p3 ntfs              A4AA2056AA2026F0                                    </span><br><span class="line">├─nvme0n1p4 ntfs              FE347AD2347A8D81                                    </span><br><span class="line">├─nvme0n1p5 ntfs     娱乐     E848526348523114                                    </span><br><span class="line">├─nvme0n1p6 ntfs     学习工作 EA1E592A1E58F155                                    </span><br><span class="line">└─nvme0n1p7 ext4              12354a11-9bf9-4882-a202-3e3e675b3158  164.3G     9% /</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>比如我想要挂载<code>/dev/sda4</code>的uuid为<code>C25E9EB25E9E9F2B</code></p><h2 id="修改-etc-fstab进行挂载">修改<code>/etc/fstab</code>进行挂载</h2><p>参考：<a href="https://blog.51cto.com/13570193/2070157">https://blog.51cto.com/13570193/2070157</a></p><p>比如我的添加了一行：<code>UUID=C25E9EB25E9E9F2B /data ntfs defaults 0 0</code></p><h2 id="重启">重启</h2><h2 id="验证">验证</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> df -h</span></span><br><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">udev             16G     0   16G    0% /dev</span><br><span class="line">tmpfs           3.2G  2.3M  3.2G    1% /run</span><br><span class="line">/dev/nvme0n1p7  192G   18G  165G   10% /</span><br><span class="line">tmpfs            16G     0   16G    0% /dev/shm</span><br><span class="line">tmpfs           5.0M  4.0K  5.0M    1% /run/lock</span><br><span class="line">tmpfs            16G     0   16G    0% /sys/fs/cgroup</span><br><span class="line">/dev/loop0       56M   56M     0  100% /snap/core18/1988</span><br><span class="line">/dev/loop1      100M  100M     0  100% /snap/core/10908</span><br><span class="line">/dev/loop2       33M   33M     0  100% /snap/snapd/11402</span><br><span class="line">/dev/loop4       52M   52M     0  100% /snap/snap-store/518</span><br><span class="line">/dev/loop3      426M  426M     0  100% /snap/pycharm-community/233</span><br><span class="line">/dev/loop5       32M   32M     0  100% /snap/snapd/11036</span><br><span class="line">/dev/loop6       65M   65M     0  100% /snap/gtk-common-themes/1514</span><br><span class="line">/dev/loop7      219M  219M     0  100% /snap/gnome-3-34-1804/66</span><br><span class="line">/dev/loop8      665M  665M     0  100% /snap/intellij-idea-community/289</span><br><span class="line">/dev/nvme0n1p1   96M   33M   64M   35% /boot/efi</span><br><span class="line">/dev/sda4       3.5T  211M  3.5T    1% /data</span><br><span class="line">tmpfs           3.2G   16K  3.2G    1% /run/user/125</span><br><span class="line">tmpfs           3.2G   24K  3.2G    1% /run/user/1000</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">UUID=80A467CBA467C270 /chia/temp1 ntfs defaults 0 0</span><br><span class="line">UUID=A4186E0A186DDBB4 /chia/temp2 ntfs defaults 0 0</span><br><span class="line">UUID=089E5CA89E5C8FD4 /chia/temp3 ntfs defaults 0 0</span><br><span class="line">UUID=38C09128C090ECFE /chia/data1 ntfs defaults 0 0</span><br><span class="line">UUID=2A9E99709E993573 /chia/data2 ntfs defaults 0 0</span><br><span class="line">UUID=C25E9EB25E9E9F2B /chia/data3 ntfs defaults 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu系统下nvidia显卡超频设置</title>
      <link href="2024/11/22/others/ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8Bnvidia%E6%98%BE%E5%8D%A1%E8%B6%85%E9%A2%91%E8%AE%BE%E7%BD%AE/"/>
      <url>2024/11/22/others/ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8Bnvidia%E6%98%BE%E5%8D%A1%E8%B6%85%E9%A2%91%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="必要条件是先安装nvidia的官方驱动">必要条件是先安装<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn">nvidia的官方驱动</a></h2><h3 id="卸载全部nvidia驱动">卸载全部nvidia驱动</h3><p><a href="https://az764295.vo.msecnd.net/stable/379476f0e13988d90fab105c5c19e7abc8b1dea8/VSCode-darwin-universal.zip">https://az764295.vo.msecnd.net/stable/379476f0e13988d90fab105c5c19e7abc8b1dea8/VSCode-darwin-universal.zip</a></p><h3 id="报错解决1：">报错解决1：</h3><h4 id="错误信息：">错误信息：</h4><p><code>ERROR: The Nouveau kernel driver is currently in use by your system. This driver is incompatible with the NVIDIA driver……</code></p><h4 id="解决方法：">解决方法：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建文件</span></span><br><span class="line">sudo vim /etc/modprobe.d/blacklist-nouveau.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加内容</span></span><br><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br></pre></td></tr></table></figure><p>更新使其生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure><p>重启机器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h3 id="报错解决2：">报错解决2：</h3><h4 id="错误信息：-v2">错误信息：</h4><p><code>Unable to find the development tool </code>cc<code> in your path; please make sure that you have the</code></p><p>或：</p><p><code>Unable to find the development tool </code>make<code> in your path; please make sure that you have t</code></p><h4 id="解决方法：-v2">解决方法：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc</span><br><span class="line">sudo apt install make</span><br></pre></td></tr></table></figure><h3 id="报错解决3">报错解决3:</h3><h4 id="错误信息：-v3">错误信息：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">An NVIDIA kernel module &#x27;nvidia-drm&#x27; appears to already be loaded in your kernel.  This may be because it is in use (for example, by an X server, a CUDA program, or the</span><br><span class="line">         NVIDIA Persistence Daemon), but this may also happen if your kernel was configured without support for module unloading.  Please be sure to exit any programs that may be</span><br><span class="line">         using the GPU(s) before attempting to upgrade your driver.  If no GPU-based programs are running, you know that your kernel supports module unloading, and you still</span><br><span class="line">         receive this message, then an error may have occurred that has corrupted an NVIDIA kernel module&#x27;s usage count, for which the simplest remedy is to reboot your computer.</span><br></pre></td></tr></table></figure><h4 id="解决方法：-v3">解决方法：</h4><p>卸载驱动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/nvidia-uninstall</span><br></pre></td></tr></table></figure><h3 id="安装完毕之后检查">安装完毕之后检查</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><h2 id="注意事项">注意事项</h2><p>在开始之前先打开ssh，并且设置静态ip否则可能无法进入桌面；如果无法进入桌面使用ssh链接然后把<code>/etc/X11/xorg.conf</code>文件删除之后重启即可。</p><p>参考：</p><p><a href="https://www.youtube.com/watch?v=5XaWVQ1GDVY">https://www.youtube.com/watch?v=5XaWVQ1GDVY</a></p><p><a href="https://bitcointalk.org/index.php?topic=2848723.0">https://bitcointalk.org/index.php?topic=2848723.0</a></p><p><a href="https://blog.csdn.net/liufunan/article/details/52090382">https://blog.csdn.net/liufunan/article/details/52090382</a></p><p><a href="https://askubuntu.com/questions/1251920/overclock-nvidia-gpu-to-achieve-undervolting">https://askubuntu.com/questions/1251920/overclock-nvidia-gpu-to-achieve-undervolting</a></p><h3 id="查看显卡信息：">查看显卡信息：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><h3 id="设置显卡功率">设置显卡功率</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置第一个显卡的功率为125w</span></span><br><span class="line">sudo nvidia-smi -i 0 -pl 125</span><br></pre></td></tr></table></figure><h3 id="开启超频">开启超频</h3><h4 id="生成xorg-conf文件">生成xorg.conf文件</h4><p>查看有没有<code>/etc/X11/xorg.conf</code>文件，如果没有则生成，命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果只有一张显卡，可以执行下面这一行。</span></span><br><span class="line">sudo nvidia-xconfig</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果是多个显卡，但是有一个显卡是用来视频输出的，则不要执行下面这一行。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo nvidia-xconfig --enable-all-gpus</span></span><br></pre></td></tr></table></figure><h4 id="设置-cool-bits-28">设置<code>--cool-bits=28</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nvidia-xconfig --cool-bits&#x3D;28</span><br><span class="line"># sudo nvidia-xconfig -a --cool-bits&#x3D;28</span><br></pre></td></tr></table></figure><p>具体的cool-bits的意思如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cool-bits的值的每一位都代表不同的含义，可以根据自己的需要组合，具体含义摘抄如下。</span><br><span class="line">Coolbits的值是所有位的组合成的二进制数对应的10进制数值：</span><br><span class="line">- 1 (bit0) 允许老的（Fermi核心）之前的显卡超频</span><br><span class="line">- 2 (bit1) 当使用不同显存的GPU需要设置成SLI时，可以设置这一位</span><br><span class="line">- 4 (bit2) 允许手动设置显卡风扇的转速</span><br><span class="line">- 8 (bit3) 允许超频，驱动版本要比337.12新，架构要比Fermi新</span><br><span class="line">- 16 (bit4) 允许超电压，驱动版本要比346.16新，架构要比Fermi新</span><br></pre></td></tr></table></figure><p>设置完成之后查看<code>/etc/X11/xorg.conf</code>文件，我的<code>Device</code>和<code>Screen</code>如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Section &quot;Device&quot;</span><br><span class="line">    Identifier     &quot;Device0&quot;</span><br><span class="line">    Driver         &quot;nvidia&quot;</span><br><span class="line">    VendorName     &quot;NVIDIA Corporation&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;Screen&quot;</span><br><span class="line">    Identifier     &quot;Screen0&quot;</span><br><span class="line">    Device         &quot;Device0&quot;</span><br><span class="line">    Monitor        &quot;Monitor0&quot;</span><br><span class="line">    DefaultDepth    24</span><br><span class="line">    Option         &quot;Coolbits&quot; &quot;28&quot;</span><br><span class="line">    SubSection     &quot;Display&quot;</span><br><span class="line">        Depth       24</span><br><span class="line">    EndSubSection</span><br></pre></td></tr></table></figure><p>需要把<code>Section &quot;Screen&quot;</code>下的<code>Option         &quot;Coolbits&quot; &quot;28&quot;</code>这一行移动到<code>Section Device</code>下面，如果不移动我的会导致显示器黑屏。移动之后如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Section &quot;Device&quot;</span><br><span class="line">    Identifier     &quot;Device0&quot;</span><br><span class="line">    Driver         &quot;nvidia&quot;</span><br><span class="line">    Option         &quot;Coolbits&quot; &quot;28&quot;</span><br><span class="line">    VendorName     &quot;NVIDIA Corporation&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;Screen&quot;</span><br><span class="line">    Identifier     &quot;Screen0&quot;</span><br><span class="line">    Device         &quot;Device0&quot;</span><br><span class="line">    Monitor        &quot;Monitor0&quot;</span><br><span class="line">    DefaultDepth    24</span><br><span class="line">    SubSection     &quot;Display&quot;</span><br><span class="line">        Depth       24</span><br><span class="line">    EndSubSection</span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure><h4 id="重启">重启</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h4 id="超频">超频</h4><h5 id="3070超频设置：">3070超频设置：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvidia-settings -c :0 -a &quot;[gpu:0]/GPUMemoryTransferRateOffset[4]=2500&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:0]/GPUGraphicsClockOffset[4]=-350&quot;</span><br></pre></td></tr></table></figure><h5 id="1660超频">1660超频</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">nvidia-settings -c :0 -a &quot;[gpu:0]/GPUMemoryTransferRateOffset[4]=1200&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:0]/GPUGraphicsClockOffset[4]=-80&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:1]/GPUMemoryTransferRateOffset[4]=1400&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:1]/GPUGraphicsClockOffset[4]=-100&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:2]/GPUMemoryTransferRateOffset[4]=1200&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:2]/GPUGraphicsClockOffset[4]=-80&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:3]/GPUMemoryTransferRateOffset[4]=1200&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:3]/GPUGraphicsClockOffset[4]=-80&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:4]/GPUMemoryTransferRateOffset[4]=1200&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:4]/GPUGraphicsClockOffset[4]=-80&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:5]/GPUMemoryTransferRateOffset[4]=1200&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:5]/GPUGraphicsClockOffset[4]=-80&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:6]/GPUMemoryTransferRateOffset[4]=1200&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:6]/GPUGraphicsClockOffset[4]=-80&quot;</span><br></pre></td></tr></table></figure><h2 id="ubuntu安装-deb软件">ubuntu安装.deb软件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 指定安装包安装</span></span><br><span class="line">sudo dpkg -i teamviewer_15.16.8_amd64.deb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果上面的命令报错说缺少依赖，则执行：</span></span><br><span class="line">sudo apt -f -y install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖之后，重新安装</span></span><br><span class="line">sudo dpkg -i teamviewer_15.16.8_amd64.deb</span><br></pre></td></tr></table></figure><h3 id="ubuntu更新已经安装的软件">ubuntu更新已经安装的软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查更新</span></span><br><span class="line">sudo apt update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出可更新软件</span></span><br><span class="line">apt list --upgradable</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新</span></span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> nvidia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库备份并添加主从复制</title>
      <link href="2024/11/22/others/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>2024/11/22/others/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>由于公司iaas人员在操作虚拟ip时手误，导致应该指向mysql主库的虚拟ip指向了从库。因为业务app使用的是虚拟ip链接的数据库，因此导致所有的业务数据都写入了从库，而主库的数据从此没有任何变化。</p><p>为了解决此问题，需要把原来的主库变成从库，从而继续保持mysql数据库的高可用；但是在处理的时候发现由于旧从库配置的bin-log超时时间为：<code>expire-logs-days  =  3</code>，这导致了3天前的bin-log已经因为过期而被清除。所以如果直接把旧的主库当作从库来进行主从复制，会导数据不一致。</p><p>因此最终需要把旧主库的数据全部清除，然后从旧从库导出所有数据再导入旧主库，最后再添加主从复制来达到此目的。</p><h3 id="基本信息">基本信息</h3><p>旧主库ip：172.99.0.32</p><p>旧从库ip：172.99.0.31</p><h2 id="具体操作如下">具体操作如下</h2><p>因为一共有三个数据库，查看数据库的data目录共200G以上的数据量，因此不能使用mysqldump来进行导入和导出备份。最终确定使用Percona XtraBackup工具进行备份和恢复数据。</p><h3 id="安装Percona-XtraBackup">安装<em>Percona XtraBackup</em></h3><p>参考<a href="https://www.percona.com/doc/percona-xtrabackup/2.4/installation/yum_repo.html">官方文档</a>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.Install the percona-release configuration tool</span></span><br><span class="line">yum install https://repo.percona.com/yum/percona-release-latest.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.Testing the repository</span></span><br><span class="line">yum list | grep percona</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.Enable the repository:</span></span><br><span class="line">percona-release enable-only tools release</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.Install Percona XtraBackup</span></span><br><span class="line">yum install percona-xtrabackup-24</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="错误处理">错误处理</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install https://repo.percona.com/yum/percona-release-latest.noarch.rpm</span></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Setting up Install Process</span><br><span class="line">percona-release-latest.noarch.rpm                                                                                                                                                    |  20 kB     00:00</span><br><span class="line">Examining /var/tmp/yum-root-3a5UYo/percona-release-latest.noarch.rpm: percona-release-1.0-27.noarch</span><br><span class="line">Marking /var/tmp/yum-root-3a5UYo/percona-release-latest.noarch.rpm to be installed</span><br><span class="line">Determining fastest mirrors</span><br><span class="line">YumRepo Error: All mirror URLs are not using ftp, http[s] or file.</span><br><span class="line"> Eg. Invalid release/repo/arch combination/</span><br><span class="line">removing mirrorlist with no valid mirrors: /var/cache/yum/x86_64/6/base/mirrorlist.txt</span><br><span class="line">Error: Cannot find a valid baseurl for repo: base</span><br></pre></td></tr></table></figure><p>解决方案：</p><ul><li>把源替换为清华大学源，<a href="https://mirror.tuna.tsinghua.edu.cn/help/centos-vault/">参考文档</a></li><li>查看当前系统的版本：<code>more /etc/issue</code></li><li>如果<code>sudo yum makecache</code>报错，先执行<code>yum clean all</code></li><li>如果<code>sudo yum makecache</code>依旧报错（[Errno 14] Peer cert cannot be verified or peer cert invalid），追加<code>sslverify=false</code>导<code>/etc/yum.conf</code>文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum makecache</span></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Determining fastest mirrors</span><br><span class="line">epel/metalink                                                                                                                                                                        | 4.4 kB     00:00</span><br><span class="line"> * epel: ftp.iij.ad.jp</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.8/os/x86_64/repodata/repomd.xml: [Errno 14] Peer cert cannot be verified or peer cert invalid</span><br><span class="line">Trying other mirror.</span><br><span class="line">It was impossible to connect to the Red Hat servers.</span><br><span class="line">This could mean a connectivity issue in your environment, such as the requirement to configure a proxy,</span><br><span class="line">or a transparent proxy that tampers with TLS security, or an incorrect system clock.</span><br><span class="line">Please collect information about the specific failure that occurs in your environment,</span><br><span class="line">using the instructions in: https://access.redhat.com/solutions/1527033 and open a ticket with Red Hat Support.</span><br><span class="line"></span><br><span class="line">Error: Cannot retrieve repository metadata (repomd.xml) for repository: base. Please verify its path and try again</span><br></pre></td></tr></table></figure><h3 id="使用Percona-XtraBackup">使用<em>Percona XtraBackup</em></h3><p>参考<a href="https://www.percona.com/doc/percona-xtrabackup/2.4/index.html">官方文档</a></p><h4 id="备份master">备份master</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --defaults-file=/data/mysql/mysql_3306/my_3306.cnf --host=127.0.0.1 --port=3306 --user=root --password=123456 /data/backup</span><br></pre></td></tr></table></figure><p>查看备份文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ll</span></span><br><span class="line">total 8</span><br><span class="line">drwxr-x--- 5 root root 4096 Mar 25 11:34 2022-03-25_10-56-55</span><br><span class="line">drwxr-x--- 7 root root 4096 Mar 25 15:10 2022-03-25_14-49-59</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ll 2022-03-25_14-49-59</span></span><br><span class="line">total 2108548</span><br><span class="line">-rw-r----- 1 root root        437 Mar 25 15:10 backup-my.cnf</span><br><span class="line">drwxr-x--- 2 root root      16384 Mar 25 15:10 db1</span><br><span class="line">drwxr-x--- 2 root root     176128 Mar 25 15:10 db2</span><br><span class="line">drwxr-x--- 2 root root       8192 Mar 25 15:10 db3</span><br><span class="line">-rw-r----- 1 root root   10656571 Mar 25 15:10 ib_buffer_pool</span><br><span class="line">-rw-r----- 1 root root 2147483648 Mar 25 14:50 ibdata1</span><br><span class="line">drwxr-x--- 2 root root       4096 Mar 25 15:10 mysql</span><br><span class="line">drwxr-x--- 2 root root       4096 Mar 25 15:10 performance_schema</span><br><span class="line">-rw-r----- 1 root root         46 Mar 25 15:10 xtrabackup_binlog_info</span><br><span class="line">-rw-r----- 1 root root        150 Mar 25 15:10 xtrabackup_checkpoints</span><br><span class="line">-rw-r----- 1 root root        630 Mar 25 15:10 xtrabackup_info</span><br><span class="line">-rw-r----- 1 root root     731648 Mar 25 15:10 xtrabackup_logfile</span><br></pre></td></tr></table></figure><h4 id="数据文件一致性">数据文件一致性</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --apply-log /data/backup/2022-03-25_14-49-59</span><br></pre></td></tr></table></figure><h4 id="数据恢复">数据恢复</h4><h5 id="把备份数据copy导32服务器">把备份数据copy导32服务器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r /data/backup/2022-03-25_14-49-59/ iaas@172.99.0.32:/data/backup_20220325</span><br></pre></td></tr></table></figure><h5 id="停止mysql">停止mysql</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line"></span><br><span class="line">mysqladmin --port=3306 -uroot -p12345 -h127.0.0.1 shutdown</span><br></pre></td></tr></table></figure><h5 id="备份和删除历史数据">备份和删除历史数据</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /data/mysql/mysql_3306 /data/mysql/mysql_3306_backup_20220325</span><br></pre></td></tr></table></figure><h5 id="创建新的数据文件夹">创建新的数据文件夹</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/mysql/mysql_3306</span><br></pre></td></tr></table></figure><h5 id="数据恢复-v2">数据恢复</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --defaults-file=/data/mysql/mysql_3306/my_3306.cnf --host=127.0.0.1 --port=3306 --user=root --password=123456 --copy-back /data/backup_20220325/2022-03-25_14-49-59</span><br></pre></td></tr></table></figure><h5 id="授权数据文件夹给mysql用户">授权数据文件夹给mysql用户</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /data/mysql</span><br><span class="line"></span><br><span class="line">chown -R mysql:mysql mysql_3306</span><br></pre></td></tr></table></figure><h5 id="启动数据库">启动数据库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /data/mysql/mysql_3306</span><br><span class="line">sh start.sh</span><br></pre></td></tr></table></figure><h4 id="添加主从复制配置">添加主从复制配置</h4><p>查看data/xtrabackup_binlog_pos_innodb获取主从同步的位置。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"># 添加主从配置</span><br><span class="line">CHANGE MASTER <span class="keyword">TO</span></span><br><span class="line">  MASTER_HOST<span class="operator">=</span><span class="string">&#x27;172.99.0.31&#x27;</span>,</span><br><span class="line">  MASTER_USER<span class="operator">=</span><span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">  MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  MASTER_PORT<span class="operator">=</span><span class="number">3306</span>,</span><br><span class="line">  MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;mysql-bin.003637&#x27;</span>,</span><br><span class="line">  MASTER_LOG_POS<span class="operator">=</span><span class="number">103905709</span>,</span><br><span class="line">  MASTER_CONNECT_RETRY<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"># 查看主从同步配置</span><br><span class="line"><span class="keyword">show</span> slave status \G</span><br><span class="line"># 启动主从同步</span><br><span class="line"><span class="keyword">start</span> slave;</span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line"><span class="keyword">show</span> slave status \G</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> slave status \G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master <span class="keyword">to</span> send event</span><br><span class="line">                  Master_Host: <span class="number">172.99</span><span class="number">.0</span><span class="number">.31</span></span><br><span class="line">                  Master_User: rep</span><br><span class="line">                  Master_Port: <span class="number">3306</span></span><br><span class="line">                Connect_Retry: <span class="number">10</span></span><br><span class="line">              Master_Log_File: mysql<span class="operator">-</span>bin<span class="number">.003637</span></span><br><span class="line">          Read_Master_Log_Pos: <span class="number">108431943</span></span><br><span class="line">               Relay_Log_File: relay<span class="operator">-</span>log<span class="number">.000002</span></span><br><span class="line">                Relay_Log_Pos: <span class="number">749241</span></span><br><span class="line">        Relay_Master_Log_File: mysql<span class="operator">-</span>bin<span class="number">.003637</span></span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB: mysql,test,information_schema</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: <span class="number">0</span></span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: <span class="number">0</span></span><br><span class="line">          Exec_Master_Log_Pos: <span class="number">105389363</span></span><br><span class="line">              Relay_Log_Space: <span class="number">2847004</span></span><br><span class="line">              Until_Condition: <span class="keyword">None</span></span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: <span class="number">0</span></span><br><span class="line">           Master_SSL_Allowed: <span class="keyword">No</span></span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: <span class="number">3177</span></span><br><span class="line">Master_SSL_Verify_Server_Cert: <span class="keyword">No</span></span><br><span class="line">                Last_IO_Errno: <span class="number">0</span></span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: <span class="number">0</span></span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: <span class="number">523306</span></span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">           Master_SSL_Crlpath:</span><br><span class="line">                   Using_Gtid: <span class="keyword">No</span></span><br><span class="line">                  Gtid_IO_Pos:</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><h2 id="错误记录">错误记录</h2><h3 id="xtrabackup-Can’t-change-dir-to-‘-var-lib-mysql’-Errcode-2-No-such-file-or-directory">xtrabackup: Can’t change dir to ‘/var/lib/mysql’ (Errcode: 2 - No such file or directory)</h3><h5 id="错误场景">错误场景</h5><p>在运行备份命令<code>innobackupex --defaults-file=/root/master/config-file.cnf --host=127.0.0.1 --port=3306 --user=root --password=123456 /root/backup</code>时报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost master]# innobackupex --defaults-file=/root/master/config-file.cnf --host=127.0.0.1 --port=3306 --user=root --password=123456 /root/backup</span><br><span class="line">xtrabackup: recognized server arguments: --log_bin --server-id=2481903306</span><br><span class="line">xtrabackup: recognized client arguments:</span><br><span class="line">220324 18:36:59 innobackupex: Starting the backup operation</span><br><span class="line"></span><br><span class="line">IMPORTANT: Please check that the backup run completes successfully.</span><br><span class="line">           At the end of a successful backup run innobackupex</span><br><span class="line">           prints &quot;completed OK!&quot;.</span><br><span class="line"></span><br><span class="line">220324 18:36:59  version_check Connecting to MySQL server with DSN &#x27;dbi:mysql:;mysql_read_default_group=xtrabackup;host=127.0.0.1;port=3306&#x27; as &#x27;root&#x27;  (using password: YES).</span><br><span class="line">220324 18:36:59  version_check Connected to MySQL server</span><br><span class="line">220324 18:36:59  version_check Executing a version check against the server...</span><br><span class="line">220324 18:36:59  version_check Done.</span><br><span class="line">220324 18:36:59 Connecting to MySQL server host: 127.0.0.1, user: root, password: set, port: 3306, socket: not set</span><br><span class="line">Using server version 10.1.32-MariaDB-1~jessie</span><br><span class="line">innobackupex version 2.4.24 based on MySQL server 5.7.35 Linux (x86_64) (revision id: b4ee263)</span><br><span class="line">xtrabackup: uses posix_fadvise().</span><br><span class="line">innobackupex: Can&#x27;t change dir to &#x27;/var/lib/mysql/&#x27; (Errcode: 2 - No such file or directory)</span><br><span class="line">xtrabackup: cannot my_setwd /var/lib/mysql/</span><br></pre></td></tr></table></figure><h5 id="解决方案">解决方案</h5><p>不可以在其他服务器上运行innobackupex命令对mysql进行备份</p><p>参考：<a href="https://serverfault.com/questions/685279/can-i-run-percona-xtrabackup-on-my-desktop">https://serverfault.com/questions/685279/can-i-run-percona-xtrabackup-on-my-desktop</a></p><h3 id="ERROR-Can’t-start-server-Bind-on-TCP-IP-port-Got-error-98-Address-already-in-use">[ERROR] Can’t start server: Bind on TCP/IP port. Got error: 98: Address already in use</h3><p>第一次启动数据库报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">220325 16:16:17 mysqld_safe Starting mysqld daemon with databases from &#x2F;data&#x2F;mysql&#x2F;mysql_3306&#x2F;data</span><br><span class="line">220325 16:16:17 [Note] &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqld (mysqld 10.0.28-MariaDB-enterprise) starting as process 19969 ...</span><br><span class="line">220325 16:16:17 [Note] InnoDB: Using mutexes to ref count buffer pool pages</span><br><span class="line">220325 16:16:17 [Note] InnoDB: The InnoDB memory heap is disabled</span><br><span class="line">220325 16:16:17 [Note] InnoDB: Mutexes and rw_locks use GCC atomic builtins</span><br><span class="line">220325 16:16:17 [Note] InnoDB: GCC builtin __sync_synchronize() is used for memory barrier</span><br><span class="line">220325 16:16:17 [Note] InnoDB: Compressed tables use zlib 1.2.3</span><br><span class="line">220325 16:16:17 [Note] InnoDB: Using Linux native AIO</span><br><span class="line">220325 16:16:17 [Note] InnoDB: Using CPU crc32 instructions</span><br><span class="line">220325 16:16:17 [Note] InnoDB: Initializing buffer pool, size &#x3D; 50.0G</span><br><span class="line">220325 16:16:19 [Note] InnoDB: Completed initialization of buffer pool</span><br><span class="line">220325 16:16:19 [Note] InnoDB: Highest supported file format is Barracuda.</span><br><span class="line">220325 16:16:20 [Note] InnoDB: 128 rollback segment(s) are active.</span><br><span class="line">220325 16:16:20 [Note] InnoDB:  Percona XtraDB (http:&#x2F;&#x2F;www.percona.com) 5.6.32-79.0 started; log sequence number 836023388696</span><br><span class="line">2022-03-25 16:16:20 7f6e1bfe8700 InnoDB: Loading buffer pool(s) from .&#x2F;&#x2F;ib_buffer_pool</span><br><span class="line">220325 16:16:20 [Note] Server socket created on IP: &#39;::&#39;.</span><br><span class="line">220325 16:16:20 [ERROR] Can&#39;t start server: Bind on TCP&#x2F;IP port. Got error: 98: Address already in use</span><br><span class="line">220325 16:16:20 [ERROR] Do you already have another mysqld server running on port: 3306 ?</span><br><span class="line">220325 16:16:20 [ERROR] Aborting</span><br><span class="line"></span><br><span class="line">220325 16:16:20 [Note] unregister_replicator OK</span><br><span class="line">220325 16:16:20 [Note] InnoDB: FTS optimize thread exiting.</span><br><span class="line">220325 16:16:20 [Note] InnoDB: Starting shutdown...</span><br><span class="line">2022-03-25 16:16:20 7f6e1bfe8700 InnoDB: Buffer pool(s) load completed at 220325 16:16:20</span><br><span class="line">2022-03-25 16:16:20 7f6e1bfe8700 InnoDB: Dumping buffer pool(s) to .&#x2F;&#x2F;ib_buffer_pool</span><br><span class="line">2022-03-25 16:16:20 7f6e1bfe8700 InnoDB: Buffer pool(s) dump completed at 220325 16:16:20</span><br><span class="line">220325 16:16:21 [Note] InnoDB: Waiting for page_cleaner to finish flushing of buffer pool</span><br><span class="line">220325 16:16:23 [Note] InnoDB: Shutdown completed; log sequence number 836023391393</span><br><span class="line">220325 16:16:23 [Note] &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqld: Shutdown complete</span><br><span class="line"></span><br><span class="line">220325 16:16:23 mysqld_safe mysqld from pid file &#x2F;data&#x2F;mysql&#x2F;mysql_3306&#x2F;data&#x2F;172-22-0-32.pid ended</span><br></pre></td></tr></table></figure><h4 id="解决方案-v2">解决方案</h4><p>查看占用3306端口的进程（<code>lsof -i TCP:3306</code>)，杀掉此进程之后再重新启动。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 主从复制 </tag>
            
            <tag> MySQL备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记-《你的第一本保险指南》</title>
      <link href="2024/11/22/others/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8A%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9C%AC%E4%BF%9D%E9%99%A9%E6%8C%87%E5%8D%97%E3%80%8B/"/>
      <url>2024/11/22/others/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8A%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9C%AC%E4%BF%9D%E9%99%A9%E6%8C%87%E5%8D%97%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1、破除误会，我们真的了解保险吗">1、破除误会，我们真的了解保险吗</h1><h2 id="我们对保险的认识：理赔似乎特别难">我们对保险的认识：理赔似乎特别难</h2><ul><li>发生的事故不在保险范围，不能赔付</li><li>客户未如实告知自身情况，不能赔付</li><li>条款过于严苛，不能赔付</li></ul><h2 id="什么是核保师与健康告知">什么是核保师与健康告知</h2><h3 id="健康告知">健康告知</h3><h4 id="健康告知问询">健康告知问询</h4><ul><li>健康问询：是否有疾病或住院记录等</li><li>职业问询：是否从事高危行业</li><li>生活问询：是否吸烟、酗酒（酒精依赖），是否有极限运动等危险性高的业余爱好等</li></ul><h4 id="核保结论">核保结论</h4><ul><li>结论一：标准体。恭喜，你完美地符合健康告知中的所有要求，可以直接投保，无须做补充告知</li><li>结论二：次标准体。可能有少数几条不符合健康告知，但考虑到基本在可接受范围内，保险公司就“勉为其难”地允许你投保了<ul><li>接受除外责任：保险公司考虑到投保人当前的健康状况，将特定疾病排除在责任范围之外</li><li>增加保费</li></ul></li><li>结论三：延期。保险公司考虑到你的某个健康问题，暂不接受你的本次投保申请，建议过一段时间再来试试</li><li>结论四：拒保</li></ul><h4 id="到底怎么健康告知？">到底怎么健康告知？</h4><p>说实话，当保险公司把重疾险、医疗险这类保障型产品放到网上销售的时候，其实只是想卖给标准体客户。</p><p>至于次标准体和非标准体客户，对不起，这类产品不是为他们准备的。</p><h2 id="买保险一定要返本吗？">买保险一定要返本吗？</h2><h3 id="当你想要返还的时候，你到底想要什么">当你想要返还的时候，你到底想要什么</h3><ul><li>第一，拿回保费。如果没有发生保险事故，请把我交的保费还给我</li><li>第二，获得赔偿。既然我购买了保险，总归是希望能派上用场。</li></ul><h3 id="追求保费返还，切莫因小失大">追求保费返还，切莫因小失大</h3><ul><li>反本保险一般会比不反本（消费型）保险更贵</li><li>在追求保费返还时，想一下自己购买保险的初心：当初你说要买保险的时候，到底是用来做什么的？保费和保额，哪个才是你的初心？</li></ul><h3 id="非要拿到保费，不妨这样选择">非要拿到保费，不妨这样选择</h3><ul><li>提前给付型重疾险：身患重疾或不幸身故，哪个提前发生，都可给付赔偿，但是代价依然是支付更多保费</li><li>保障终身只是保险产品的一个功能设置，而不应被视为一个优点，因为你为此支付了更多的保费</li></ul><h2 id="保险公司会不会破产">保险公司会不会破产</h2><h3 id="保险公司会破产，却不会完蛋">保险公司会破产，却不会完蛋</h3><ul><li>保险公司破产时，人寿保险合同及责任准备金，必须转让给其他经营有人寿保险业务的保险公司</li><li>保险保障基金：来源是81家财险公司和88家寿险公司，保险公司每年需向其缴纳一定数额的资金，这也是被写进《保险法》的强制性要求。</li></ul><h3 id="政府在做的，是拼命预防保险公司破产">政府在做的，是拼命预防保险公司破产</h3><p>一家保险公司从计划成立之初，就不得不接受一系列监管。这些监管措施和规定就像一道道防火墙，确保公司在正确轨道上运转。</p><ul><li>第一道防火墙是极高的公司设立标准</li><li>第二道防火墙是全面科学的偿付能力监管<ul><li>所谓偿付能力，指的是当保险公司遭遇极端情况时，是否仍有能力履行赔付责任。每个年度和季度，保险公司的精算、财务等专业人士都会编制公司偿付能力报告，涉及一系列数学模型和压力测试</li><li>根据偿付能力情况，保险公司会得到从优到差的评级，包括A、B、C、D4个等级。评级可以在保险公司官网的“公开信息查询”栏目查到，我们将它视为判断保险公司是否“靠谱”的一个重要标志。长期来看，只要评级稳定在A和B的公司，我们都可以放心购买其产品</li></ul></li><li>第三道防火墙是频率高、强度大的现场检查<ul><li>监管部门会随时进驻保险公司总公司和分公司，通过调取档案、查询系统等方式实施现场检查</li></ul></li><li>当然，上述的防火墙虽好，如果因为贪污腐败而让保险公司蒙混过关，这是我们无法改变的事情，暂时只能接受</li></ul><h3 id="如何选择一家保险公司？">如何选择一家保险公司？</h3><ul><li>对比不同保险公司的投诉情况</li><li>监管部门每年都会对各家保险公司的投诉情况进行通报、评分，并发布在官网上（比如保监会官网）</li><li>销售人员口碑如何，信息技术实力如何（比如官网和手机软件的使用体验），客服电话能否快速接通，诸如此类</li><li>最重要的是保险产品的性价比</li></ul><h1 id="2、购前指南：买保险的正确方法">2、购前指南：买保险的正确方法</h1><ul><li><p>买保险和吃麦当劳是一样的，保险产品一般都是很多保险组成的。</p></li><li><p>一份保险计划通常由一款主险和若干款附加险构成，主险就像一位大哥，带着一帮作为附加险的小弟。</p><ul><li>这种充分利用和客户接触的机会推销尽可能多的产品，是一种普遍的保险销售模式</li></ul></li><li><p>但是有时候，单点比套餐更好，毕竟保险公司定的产品并非根据我们的需求定，附加险可能并非我们需要的。</p></li></ul><h2 id="责任的多少、保额的高低、期限的长短，这三大因素直接决定了保险产品的价格。">责任的多少、保额的高低、期限的长短，这三大因素直接决定了保险产品的价格。</h2><h3 id="保额：真到用时方恨少">保额：真到用时方恨少</h3><h3 id="期限：从一天到一辈子">期限：从一天到一辈子</h3><h4 id="短期产品">短期产品</h4><ul><li>保险期限不超过一年</li><li>以一年为一期计，产品的定价就要参考当下被保险人的年龄来计算了。30岁时购买，价格可能是100元；5年后，价格可能就会涨到400元。这种随年龄增加而上涨的定价策略，叫作自然费率。客户每年交的钱，只负责承担当年的风险。</li></ul><h4 id="长期产品">长期产品</h4><ul><li>10年、20年甚至终身</li><li>定价方法遵循两个原则：一是均衡费率原则，二是保证费率原则</li><li>均衡费率，指的是保险公司将被保险人未来很长一段时间的风险，归并到一起进行定价，而不只是一年的风险<ul><li>比如，保到70岁或保终身，投保人未来几十年的疾病发生率或者死亡率被累计后算出保费，再按照20年或30年交费的方式进行均摊，价格就确定了</li><li>在这样一种模式下，长期产品的停售只意味着不接受新客户的购买，但并不影响已经投保的客户</li></ul></li><li>保证费率：指的是在你投保的一瞬间，价格便已确定，后期不会增加。对于长期重疾险来说，即使投保人未来的发病率上升，保险公司也不会涨价</li></ul><h4 id="长期产品和短期产品费用比较">长期产品和短期产品费用比较</h4><ul><li>整体来看，购买短期险费用要比长期险费用高</li><li>人到中年，就有可能无法购买短期险</li><li>人到老年，则根本不能购买短期险</li><li>对于已经有长期险庇护的人来说，额外购买一份一年期产品，可以在一定时间内增加保额</li><li>短期险在年轻时比较便宜</li></ul><h3 id="保险产品的价格由谁决定">保险产品的价格由谁决定</h3><h4 id="我们有哪些需求需要保险解决？">我们有哪些需求需要保险解决？</h4><ol><li>得了重疾，有钱治病</li><li>得了重疾，弥补治疗期间的收入</li><li>不幸身故，给爸妈留一笔养老费</li><li>意外受伤，解决医保不包含的费用</li></ol><h4 id="保险这种产品不是一次性的，它是陪伴你度过漫长人生的一种风险规划">保险这种产品不是一次性的，它是陪伴你度过漫长人生的一种风险规划</h4><h2 id="如何与保险业务员打交道">如何与保险业务员打交道</h2><p>保险公司会不遗余力地增加产品的“人情味”，比如将保险塑造成爱与责任的象征，让你把对子女、父母的爱寄托于保险产品之上，让购买行为更加顺理成章</p><h3 id="保险销售人员到底指的是谁">保险销售人员到底指的是谁</h3><ul><li>第一，保险代理人。全国约800万，他们代表各自所在的保险公司，只销售某一家保险公司的产品。</li><li>第二，保险经纪人。和代理人最大的不同是，经纪人代表的不是某一家保险公司，而是保险中介公司，他们可以销售多家保险公司产品</li><li>第三，银行理财经理</li><li>第四，互联网第三方平台</li></ul><h3 id="和业务员打交道，要遵循两个原则">和业务员打交道，要遵循两个原则</h3><h4 id="想一下我们有时候会不会因为下面的情况而买保险">想一下我们有时候会不会因为下面的情况而买保险</h4><ul><li>第一，卖保险的人是亲戚，抹不开面子，买吧。</li><li>第二，邻居都给孩子买的这个，我也买一个吧</li><li>第三，他答应我把佣金返还给我，省了不少钱，买吧。</li><li>第四，小伙子口才好，人也帅，卖的保险不会差。</li><li>第五，就算被骗一年才损失1000多块钱，买吧</li></ul><p>好面子、从众心理、贪图小便宜、忽略产品的本质，这类问题经常发生，也间接催生了一批不靠谱的保险业务员</p><h4 id="第一个原则：互相尊重，学会提问。">第一个原则：互相尊重，学会提问。</h4><ul><li>条款能给我看一下吗？</li><li>为什么我需要这款产品？</li><li>为什么这类产品你们家的最好？</li><li>能比较一下不同产品吗？</li><li>为什么要保终身？</li><li>为什么这个附加险值得购买？</li><li>如果你发现这位保险业务员面对你提出的一个个问题，要么答不出来，要么逻辑混乱，要么不分青红皂白地敌视及贬损其他保险公司，最好立即更换业务员</li></ul><h4 id="第二个原则：充分信任，要有主见">第二个原则：充分信任，要有主见</h4><h3 id="卖保险简单吗">卖保险简单吗</h3><ul><li><p>产品贵不贵（同类产品的定价和费率对比）？</p></li><li><p>到底有哪些保障（保险责任的解读）？</p></li><li><p>退保能拿到多少保费（保单现金价值的解读）？</p></li><li><p>买完后哪些信息可以修改（对保单保全功能的讲解）？</p></li><li><p>这个产品能实现多高收益（如何计算分红险、万能险、年金等产品的投资收益）？</p></li><li><p>缴费期限怎么选择（现金流贴现原理）？</p></li><li><p>保险条款里有没有所谓的坑（除外责任做重点说明）？</p></li><li><p>遇到纠纷的时候如何处理？</p></li></ul><p>如果他真的做了产品对比，但如果他推销的产品价格没有竞争力，该怎么办？他真的算清楚了产品收益，但客户觉得收益率不如想象的那么高，该怎么办？他真的一条一条地解释清楚除外责任，客户却产生“保险公司推卸责任”的情绪化误解，该怎么办？他因为客户的健康问题而拒绝其投保，之前的工作不就白忙活了吗？<br>这些假设似乎暗示了保险销售人员“能力越强越卖不出去产品”的观点，但我想表达的绝不是“知识无用论”，它们只是在一定程度上反映了当前保险销售领域存在的弊病。而这些极端的例子恰恰凸显了“你”的重要性。</p><h3 id="你的公司给你买保险了吗">你的公司给你买保险了吗</h3><h4 id="企业团体保险">企业团体保险</h4><p>团险通常由4个保险产品组成：</p><ul><li>定期寿险</li><li>重大疾病险</li><li>意外险</li><li>医疗险</li></ul><p>团险计划可以涵盖以下责任：</p><ol><li>罹患重大疾病：保额50万元（重大疾病险的重疾责任50万元）。</li><li>疾病导致身故：保额50万元（定期寿险身故责任50万元）。</li><li>意外导致身故：保额150万元（定期寿险身故责任50万元+意外险身故责任100万元）。</li><li>门诊责任：保额2万元（医疗险包含的门急诊医疗责任2万元）。</li><li>住院责任：保额30万元（医疗险包含的住院医疗责任30万元）。</li></ol><p>团险价格之所以“亲民”，主要原因如下：</p><ul><li>第一，团险可以简单类比为团购，买的人数多，节省了一部分管理成本，自然就能获得一定的优惠</li><li>第二，团险的主要销售对象是企业人力资源部，只要负责人拍板，100个员工就直接购买了，不用一个一个地宣传、介绍，间接降低了产品的销售费用，最终的实惠落在了每一位参保员工身上</li><li>第三，以企业名义投保，参保人员的工作环境和性质相对一致，外部风险可控，何况不少企业还有入职体检，可以很好解决客户的逆选择和健康问题</li></ul><h4 id="团险带来的“保险幻觉”">团险带来的“保险幻觉”</h4><p>一般公司团险的保险产品的保障期限都是一年，如果完全依赖公司保险，我们一旦离职就会面临保险“裸奔”的情况<br>所以，建议大家用客观的态度看待公司为员工购买的团险。它是一种极好的员工福利，它应该是员工自身已购保险的有力补充，却不能被当作全部。</p><h4 id="了解公司的团险政策">了解公司的团险政策</h4><ul><li>这份团险计划里有涵盖身故责任的产品吗？</li><li>如果有，保额是多少？</li><li>如果员工获得晋升，保额会随之提高吗？</li></ul><h1 id="03-重点关注：中产必备的“四大保险金刚”">03 重点关注：中产必备的“四大保险金刚”</h1><h2 id="重大疾病险：为了不被改变的人生">重大疾病险：为了不被改变的人生</h2><p>重疾险的诞生，本质上是为了解决收入中断的风险，站在患者及其家人的角度，为已在重病深渊的家庭提供雪中送炭般的经济补偿</p><h3 id="重疾险究竟保什么">重疾险究竟保什么</h3><h4 id="什么叫“重大疾病”？">什么叫“重大疾病”？</h4><p>保监会安排中国保险行业协会和中国医师协会，在2007年拿出了一版25种重疾标准，囊括所有高发重疾类型（其实，只要是重疾险就都包括这25种）</p><p>保监会设定的这25种重大疾病，其发生概率超过95%的疾病种类。</p><p>所以如果一个保险说他包含更多的重疾，然后让我们多花钱买它，其实没有太必要。</p><h4 id="什么叫“罹患”？">什么叫“罹患”？</h4><ul><li>第一，病情达到某个标准，相当于确诊即赔，比如恶性肿瘤</li><li>第二，投保人为治疗某种疾病而接受了某种治疗方法。比如心脏瓣膜手术</li><li>第三，某种状态持续了一段时间。比如脑中风后遗症</li></ul><h3 id="除了重大疾病，重疾险还保这些">除了重大疾病，重疾险还保这些</h3><p>当重疾险的责任只有重大疾病时，消费者理所当然地提出了一个振聋发聩的问题：如果我一辈子没得重疾，这保费岂不是白交了？</p><p>好，为了不让你白交，保险公司索性增加了很多其他责任，<strong>“顺便”提升了保费</strong>。买卖双方都高兴，这种商业模式堪称完美。</p><ul><li>在新增的责任里，第一类是“身故责任”。这种包含身故责任的重疾险，基本上都可以“提前给付”。<ul><li>这里的提前指的是重疾、身故二者中哪个先发生，就给付哪个。</li><li>提前给付不过是一种产品设计罢了，千万别觉得它是一项独特的优势。</li></ul></li><li>第二类新增责任是轻症和中症责任</li><li>第三类新增责任是针对重大疾病的花样赔付方式。比如重疾和轻症可以赔付多次，又比如挑出某几个病种额外赔付50%的保额，再比如投保后前10年享受保额额外增加50%。</li></ul><p>上面说的这些都是在<strong>增加保费的基础上</strong>增加了更多的责任，所以当保险公司说我们保的多的时候除非和别人价格一样，否则只是在骗我们花更多钱而已。</p><h3 id="重疾险的保额及其他">重疾险的保额及其他</h3><h4 id="如何确定保额">如何确定保额</h4><ul><li>患重疾后，患者普遍面临的是3~5年的治疗康复期</li><li>与此同时，重疾导致收入中断将为家庭带来更大的压力</li><li>因此，重疾险的<strong>保额应至少覆盖投保人3~5年的收入</strong></li><li>如年收入20万元的保额应该在60万以上</li><li>而且只要确保这款重疾险能提供60万元的重疾保额，有没有身故责任、多次赔付、投保人豁免，都无关紧要</li></ul><h4 id="重疾险应该保障多久和交多少年保费。">重疾险应该保障多久和交多少年保费。</h4><p>讨论这个问题有一个前提：我们选择的是长期产品。</p><p>对于重疾险、定期寿险，可以保终身或者保到70岁左右的长期产品，是我们的首选——不仅价格更划算，也不会出现保险中断的情况。</p><p>长期重疾险的<strong>缴费期</strong>往往有多种选择：</p><ul><li>趸交（一次性交完）</li><li>10年交</li><li>20年交</li><li>少数产品甚至还设计了30年交</li></ul><p><strong>保障期限</strong>：</p><p>保障期限的延长，会带来保费的升高；没办法，一个人年龄越大，罹患重疾的概率就越高。如果预算充足，保终身当然是最好的选择。</p><p>在确保保额充足的情况下，我们可以把保额拆成两个产品来实现，一个保到退休，另一个保终身</p><p>如：对于需要60万元重疾险保额的小王来说，可以选择买<strong>一份保终身的30万元保额</strong>的重疾险，再买<strong>一份保到70岁的30万元保额</strong>的重疾险。这比直接购买一份保终身的60万元保额的重疾险，花费更少</p><h2 id="定期寿险：解决人生中最大的风险">定期寿险：解决人生中最大的风险</h2><h3 id="谁适合买寿险">谁适合买寿险</h3><p>如果说重疾险的赌注是病，寿险的赌注就是命。定期寿险赌的则是一段时间的命。比如投保人于30年内身故，受益人即可获得理赔款。</p><p>一般的定期寿险，除了保障身故，还会把全残也视作与身故等同的责任。</p><ul><li>单身的人理应关心父母的养老问题</li><li>新婚的人会增加对另一半的考虑</li><li>有了孩子后，责任更重</li></ul><h4 id="意外险和寿险对比">意外险和寿险对比</h4><p>这里需要额外强调一点。谈到身故风险，很多人会联想到意外险，因为它不是也有身故保障吗？</p><p>“疾病”和“意外”为占比最大的两类死亡原因，分别为79.3%和18.9%。</p><p>所以，单纯购买意外险，是无法解决身故的风险的。</p><h3 id="如何选购定期寿险？">如何选购定期寿险？</h3><h4 id="确定保额是关键性的第一步">确定保额是关键性的第一步</h4><p>保额的高低，决定了投保人身故后他的妻子、父母或者孩子能拿到多少补偿。定期寿险的保额，主要取决于三个因素。</p><ul><li>一是个人和家庭的债务额度，比如房贷、车贷等，确保一方身故后，债务不转嫁到另一方或父母身上</li><li>二是家庭成员的基本生活成本。如果家庭每年的开销为20万元，那么身故理赔金至少应为100万元，以负担家庭未来5—10年的基本生活开销。</li><li>三是父母的养老支出，这笔费用的计算逻辑和上一个类似。</li></ul><h4 id="定期寿险还要考虑的问题是保障期限">定期寿险还要考虑的问题是保障期限</h4><p>到底要保到多大年龄呢？我个人建议，以退休年龄为标准，60岁或70岁皆可。</p><p>至于缴费年限的选择，我建议尽可能拉长，20年交或30年交皆可。缴费年限越长，年均保费越低，从而做到用尽可能少的钱去撬动尽可能高的保额。</p><h4 id="保额、保障期限和缴费年限都确定后，我们在选购具体产品时，还要格外关注三个方面：">保额、保障期限和缴费年限都确定后，我们在选购具体产品时，还要格外关注三个方面：</h4><ul><li>第一，核保是否宽松。这是最重要的，因为如果健康告知非常严格，想买也买不了，何谈其他？比如，有的定期寿险不接受乙肝小三阳患者，有的不接受高危职业从业者。所以我们一定要弄清楚投保要求再买，尽量避免理赔时的潜在纠纷，才能真正做到安心。</li><li>第二，除外责任多不多。前文在分析如何阅读保险条款的时候，专门强调要关注除外责任。比如，有的定期寿险明确指出，因为战争、军事暴乱导致的死亡，它们概不负责。那么，对于去中东、非洲等地区旅游或工作的中国人来说，这种定期寿险就得慎重考虑购买了。</li><li>第三，价格低不低。如果上面几条标准比较起来都差不多，问题就变简单了：哪个产品便宜就选择哪个。</li></ul><h2 id="商业医疗险：让高额医疗开支不再可怕">商业医疗险：让高额医疗开支不再可怕</h2><h3 id="社会医疗保险">社会医疗保险</h3><p>在用医保卡看病的过程中，我们都接触过一些陌生的名词，比如起付线、药品目录、自费药、报销额度等。</p><ul><li>起付线：的意思是，每年只有花到一定金额，才能开始报销，否则就都是自费</li><li>药品目录：指的是在医保系统中，对于医疗机构开具的药品做了不同分类，不同类型的药品报销额度也不一样，有的可全部报销，有的则只可报销一部分，还有的药全部要自费购买</li><li>销额度很好理解，即使药品、治疗等都在报销范围内，医保也不是无限制的报销，整体来看，每年的报销额度范围为20万~30万元；对于罹患重大疾病的患者来说，这一额度根本无法满足他们长期、昂贵的治疗需求。</li></ul><h3 id="医保不管的，让商业医疗保险来管">医保不管的，让商业医疗保险来管</h3><p>医疗险其实只包括两种产品</p><h4 id="第一种是包含门诊责任的商业医疗保险，可暂且称之为门诊医疗保险">第一种是包含门诊责任的商业医疗保险，可暂且称之为门诊医疗保险</h4><p>这种产品保额不高，一般是几千元。有的门诊医疗保险会设置一个免赔额，比如单次100元或者累计500元。免赔额和政府医保起付线是同一个概念，都是为了减少理赔支出，实际上也起到了降低保费的作用。</p><h4 id="第二种是包含住院责任的商业医疗保险，我们称之为住院医疗保险。">第二种是包含住院责任的商业医疗保险，我们称之为住院医疗保险。</h4><p>这类产品的保额就高多了，几十万元甚至上百万元都很常见。和门诊医疗保险相比，住院医疗保险是下文要重点介绍的产品。</p><p>能被称作风险的，必然意味着财务上的巨大影响。所以和几十万甚至上百万元的医疗支出相比，几千元的门诊、住院费用，真的称不上风险。</p><h3 id="买了重疾险，还要买医疗险吗">买了重疾险，还要买医疗险吗</h3><h4 id="重疾险和商业医疗最重要的区别，是保险公司的理赔方式不一样">重疾险和商业医疗最重要的区别，是保险公司的理赔方式不一样</h4><ul><li><p>重疾险有点儿像一锤子买卖，只要符合条款规定，保险公司就会把理赔款一次性打给你，无论是几万元还是几十万元。</p></li><li><p>商业医保就不一样了，花多少才能赔多少，保额仅代表可报销额度的上限，而你不一定能花掉这么多钱</p></li></ul><p>如果一个人罹患影响正常生活的重大疾病，那他主要面临的问题有两个：一是治疗费用太高，掏空家底；二是无法继续工作，失去收入。前者可以靠商业医疗保险解决，后者则只能靠重疾险解决，两类保险的功能不一样。</p><h4 id="重疾险和商业医疗保险在定价方面的区别">重疾险和商业医疗保险在定价方面的区别</h4><p>长期重疾险每年的保费是恒定的，商业医疗保险的保费则会随着被保险人年龄的增加而上调</p><h4 id="重疾险和商业医疗保险在续保方面的区别">重疾险和商业医疗保险在续保方面的区别</h4><p>目前市场上大多数医疗险都是一年期产品，如果第二年你想继续投保，得先看看保险条款是怎么规定的，通常有以下两种情况：</p><ul><li>第一种是，卖不卖给你，我说了算。投保人的续保申请须经保险人审核同意，投保人申请续保时，保险人有权对费率进行调整。</li><li>第二种规定是，只要这个产品还在销售，保险公司就肯定会卖给你。连续投保时，保险人不会因为某一被保险人的健康状况变化或历史理赔情况而单独调整该被保险人的连续投保费率。</li></ul><h2 id="意外险：不容忽视的“小”保险">意外险：不容忽视的“小”保险</h2><h3 id="意外险保什么、不保什么">意外险保什么、不保什么</h3><p>遭受外来的、突发的、非本意的、非疾病的使身体受到伤害的客观事件。自然死亡、疾病身故、猝死、自杀及自伤均不属于意外伤害。</p><p>在每份意外险的保险条款里，你都能看到这样的描述。这段话表达了两层意思：</p><ul><li><p>第一，外来的、突发的、非本意的、非疾病的使身体受到伤害的客观事件，属于意外；</p></li><li><p>第二，自然死亡、疾病身故、猝死、自杀及自伤，不属于意外。</p></li></ul><p>除了猝死，意外险还有一些“不保”：</p><ul><li>意外险通常不保高危职业从业者</li><li>除了特定人群“不保”，还有某类地区“不保”。关于意外医疗责任，保险条款中往往会有一个补充描述：只承担中华人民共和国国境内（不包括港澳台地区）医院产生的医疗费用和支出。</li><li>最后一个“不保”，是某些行为不保。被保险人从事潜水、跳伞、攀岩运动、探险活动、武术比赛、摔跤比赛、特技表演、赛马、赛车等高风险活动期间发生的意外，不在意外险的责任范围内</li></ul><h3 id="配置意外险的几条原则">配置意外险的几条原则</h3><h4 id="原则一：必须涵盖意外医疗责任。">原则一：必须涵盖意外医疗责任。</h4><p>意外导致的结果无非两种：伤残和死亡。因此，意外险保障的责任有三个必选项：身故、伤残、医疗。</p><p>意外受伤后，我们最大的需求就是医疗费用补偿。考虑到很多意外产生的医疗费用医保都无法报销，意外险的医疗责任就更重要了。</p><p>至于意外医疗的保额，一两万就足够了。如果是一两万元都治不好的意外受伤，一定已经严重到需要做手术或者长期住院治疗了，这时理赔的责任就可以交给上文提到的住院医疗保险了。</p><p>另外，你可能听说过住院津贴或住院保险金，它的作用是，投保人每住一天院，保险公司就会支付给他几百元钱，主要是为了弥补住院期间的收入损失，颇为贴心，本质上也属于意外医疗的责任范围。住院津贴属于锦上添花型保险，而且要花钱购买，所以有没有都无所谓。</p><h4 id="原则二：一般意外身故的保额应足够高。">原则二：一般意外身故的保额应足够高。</h4><p>在这里我要提醒大家注意某些保险公司的“套路”。当你看到一个类似于“百万身价意外险”的打折产品时，请一定弄清楚它所说的百万身价到底是什么意思。举个例子，有个产品页面是这么描述该产品的：</p><ul><li><p>一般意外身故：10万元</p></li><li><p>航空意外身故：100万元</p></li></ul><p>我更喜欢以下这类保险：</p><ul><li><p>一般意外身故：100万元</p></li><li><p>航空意外身故：200万元</p></li></ul><h4 id="原则三：不同人群的意外险，侧重点不一样。">原则三：不同人群的意外险，侧重点不一样。</h4><ul><li><p>对于职场白领来说，意外险既要有足够的身故补偿（用于弥补家庭经济损失），也要保证受伤后有钱治疗；</p></li><li><p>但对于孩子和老人来说，身故补偿就没有医疗费用补偿重要，毕竟他们不是家里的顶梁柱。</p></li><li><p>因此，孩子和老人的意外险，应侧重于考虑提升意外医疗的保额，而没有必要追求意外身故的高保额。</p></li></ul><h4 id="原则四：保障时间一年就够了。">原则四：保障时间一年就够了。</h4><p>之前在介绍一年期产品特征的时候我提过，意外险和医疗险大多会设计成短期险，这样一来，就可以随时按照意外发生率和医疗成本的波动进行价格调整。因此，每年各家公司的意外险层出不穷，可能去年买的产品，到了明年就没什么竞争力了，这时直接换一家公司购买就好。由于意外险的几个基本责任都没有等待期这一说，所以可以做到无缝衔接。</p><h1 id="04-优化配置：给保险升个级">04　优化配置：给保险升个级</h1><h2 id="像有钱人一样看病">像有钱人一样看病</h2><h3 id="高端医疗，高端在哪里？">高端医疗，高端在哪里？</h3><ul><li>第一，保额更高。几十万元甚至几百万元的保额都是小菜一碟，从几千万元到不设限，高端医疗的保额完全超乎你的想象。</li><li>第二，医院更多、更高端。从三甲医院的特需部、国际部，到私立医院、国际医院，而且不限中国地区，从亚太地区到全球，基本覆盖所有类型的医疗机构。</li><li>第三，保障更全面。除了传统的门诊、住院两大块之外，高端医疗险还包含分娩、牙科、眼科、体检等责任，要知道，这些治疗通常都在常规医疗险的除外项目里，一般医疗险都不管。</li><li>第四，增值服务更多。</li><li>第五，理赔体验更好。</li></ul><h2 id="保险能为我的养老做什么？">保险能为我的养老做什么？</h2><h3 id="该不该买养老保险？">该不该买养老保险？</h3><h3 id="可不可以把保险当作投资方式">可不可以把保险当作投资方式</h3><p>要回答上面两个问题，需要使用excel中的IRR公式计算内部收益率，如果内部收益率能够达到预期并且现在手头有钱就可以买。</p><p>比如年复利6%以上就能达到预期，否则不如买债券基金或者指数型基金。</p><h2 id="该去香港买保险吗？">该去香港买保险吗？</h2><p>略</p><h1 id="05-个性化定制：保险方案，你自己说了算">05 个性化定制：保险方案，你自己说了算</h1><h2 id="如何给孩子买保险">如何给孩子买保险</h2><h3 id="先别着急买商业保险">先别着急买商业保险</h3><p>和大人一样，孩子也是可以参加政府医保的。在配置商业保险之前，父母一定要参考当地的医保政策为孩子办理少儿医保。</p><p>少儿医保本质上是针对儿童罹患重大疾病提供的风险保障。</p><p>有没有医保也会影响孩子投保商业保险的价格。尤其是医疗险，被保险人有医保的医疗险价格更低。</p><h3 id="孩子会面临哪些风险">孩子会面临哪些风险</h3><ul><li>风险一：身患危重疾病<ul><li>孩子一旦患危重疾病，除了需要长期投入高额治疗费用，父母也可能为了照顾孩子而辞掉工作。</li><li>因此，重疾险和高保额住院医疗险是应该首先为孩子配置的保险。</li><li>重疾险的价值在于，罹患重疾后一次性获得定额赔偿，可作为自费治疗费用和家庭收入中断的补偿。</li><li>高额住院医疗险的价值在于应对高额的医疗费用，尤其是许多医保范围外的自费项目</li></ul></li><li>风险二：发生意外受伤</li><li>风险三：身患一般疾病</li></ul><h3 id="配置儿童商业保险">配置儿童商业保险</h3><h4 id="孩子不该买哪些保险">孩子不该买哪些保险</h4><ul><li>包含身故责任的意外险不在我们的讨论范围内</li><li>定期寿险、终身寿险也无需购买</li><li>除意义不大的身故责任外，为孩子购买教育金、养老金，优先级也不高</li></ul><p><strong>孩子真正需要的商业保险其实只有三款：重大疾病险、意外险、高额住院医疗险。</strong></p><h4 id="关于孩子的重疾险">关于孩子的重疾险</h4><p>请记住一个事实：少儿罹患重大疾病的概率非常低。这直接决定了儿童重疾险的价格十分便宜。因此，为孩子配置重疾险，一定要抓住价格优势，尽可能提高保额，拉长期限。都是100万元的终身重疾险保额，30多岁男性的购买价格，可以达到小孩子的两倍多。</p><p>孩子的重疾险应该买保终身或者70岁的，不要买保障30年，三十年之后孩子才三、四十岁，那时断保再新买保险会更贵。</p><h4 id="孩子最好的保险是父母">孩子最好的保险是父母</h4><p>父母自身的健康以及稳定、持续的赚钱能力，是孩子最重要的保险。</p><p><strong>总结一下为孩子配置保险的几个关键点。</strong></p><ol><li><p><strong>作为父母，先把自己的保险配置好，因为你才是孩子最大的“保险”；</strong></p></li><li><p><strong>在购买任何商业保险之前，先为孩子办理好当地的少儿医保，这是政府给予的福利，一定要充分利用；</strong></p></li><li><p><strong>结合自身预算，首先配置高保额的重大疾病险和住院医疗险，其他的保险则量力购买。</strong></p></li></ol><h2 id="如何给父母买保险">如何给父母买保险</h2><h3 id="一个不断妥协退让的过程">一个不断妥协退让的过程</h3><p>其实父母面临的风险非常简单，就是疾病引发的财务风险。</p><p>这样看来，给父母配置保险，主要考虑的应该是重疾险、医疗险和意外险。</p><p>年龄超过60岁的人想要投保重疾险和医疗险会有很多限制：</p><ul><li>第一，年龄限制。<ul><li>几乎所有重疾险和医疗险的投保年龄都在0~60岁。对重疾险而言，55岁的投保年龄上限是普遍规则。</li></ul></li><li>第二，保额限制。<ul><li>同样一份保险，30岁的人和50岁的人可享受的保额上限是不一样的。</li><li>以重疾险为例，如果在网上直接投保，30岁的被保险人的保额上限基本为50万~60万元，而50岁的被保险人的保额上限只有10万元。</li></ul></li><li>第三，保费倒挂。<ul><li>一位55岁的男性购买保额为10万元的重疾险，每年需要交3500元左右，交20年，总计7万元的支出和10万元的保额相比，差别不大。</li></ul></li><li>第四，健康告知不符。<ul><li>患有高血压、心脏病、糖尿病的老年人，可以直接和重大疾病险、住院医疗险说再见了</li><li>保险公司也意识到了这个问题，于是想了一个办法：双方各退一步。保险公司把保障范围缩小，限制也随之减少。但这个保障范围不能太小，得有存在的意义。</li><li>于是，防癌类保险应运而生。重疾险涵盖的几十种疾病，只保留第一项，即恶性肿瘤；住院医疗险涵盖的所有疾病的住院责任，也只保留一项，即癌症住院责任。</li><li>这种做法最大的好处，就是健康告知的内容大幅减少。只要不是易引发癌症的症状（肝部疾病、器官或组织的结节等），保险公司都不介意，高血压、糖尿病患者也可以投保。毕竟，高血压导致的急性心梗和糖尿病导致的终末期肾病或截肢，都不在防癌类保险的责任范围内。</li></ul></li></ul><h3 id="六分靠规划，四分靠心态">六分靠规划，四分靠心态</h3><p>哪怕有那么多的限制，我们还是可以购买意外险、防癌险、防癌医疗险和糖尿病特定疾病重疾险。</p><h4 id="如果你想简明扼要地掌握给父母买保险的技巧，请记住以下几点。">如果你想简明扼要地掌握给父母买保险的技巧，请记住以下几点。</h4><ul><li><p>第一，确保父母双方都有社会医疗保险。不管是城市的居民医保，还是农村的“新农合”，没有的话，赶紧先把社会医保办好。</p></li><li><p>第二，遇到疑难杂症，不少人会选择带父母来北上广等大城市就诊。所以，请提前研究好医保的异地结算流程，确保不让医保“白交”，这一点非常有必要。</p></li><li><p>第三，详细了解爸妈的身体健康情况，对症下药买保险。</p></li></ul><h2 id="如何给自己买保险">如何给自己买保险</h2><h3 id="18岁保险清单">18岁保险清单</h3><ul><li>学生团体保险：包含意外身故/伤残责任，意外医疗责任，住院医疗责任；预算为200元。</li><li>或自己投保：<ul><li>意外险：包含意外身故/伤残责任，意外医疗责任；预算为200元（保额为50万元）。</li><li>医疗险：包含疾病导致的住院医疗责任，预算为200元。</li></ul></li></ul><h4 id="18岁保障速览">18岁保障速览</h4><ul><li><p>身故补偿（仅限意外原因）：50万元。</p></li><li><p>意外医疗补偿：1万元（上限）。</p></li><li><p>住院医疗补偿：100万元（上限）。</p></li></ul><h3 id="22岁新增保险情况">22岁新增保险情况</h3><p>定期寿险A：受益人为父母，保额大约相当于父母5年的退休金；预算为每年500元（保额50万元，保障期30年，缴费期30年）。</p><h4 id="保障速览">保障速览</h4><ul><li><p>身故补偿（不限死亡原因）：50万元。</p></li><li><p>额外身故补偿（仅限意外原因）：50万元。</p></li><li><p>意外医疗补偿：1万元（上限）。</p></li><li><p>住院医疗补偿：100万元（上限）。</p></li></ul><h3 id="28岁新增保险情况"><strong>28岁</strong>新增保险情况</h3><ul><li><p>定期寿险B：受益人为法定受益人，保额约等于5倍年薪；</p></li><li><p>预算为每年1000元（保额80万元，保到60岁，缴费期30年）。</p></li><li><p>重大疾病险A：保额约等于购买时的3倍年薪；预算为每年5000元（保额50万元，保到70岁，缴费期30年）。</p></li></ul><h4 id="28岁保障速览">28岁保障速览</h4><ul><li><p>身故补偿（不限死亡原因）：130万元。</p></li><li><p>额外身故补偿（仅限意外原因）：50万元。</p></li><li><p>意外医疗补偿：1万元（上限）。</p></li><li><p>住院医疗补偿：100万元（上限）。</p></li><li><p>重大疾病补偿：50万元。</p></li></ul><h3 id="32岁新增保险情况"><strong>32岁</strong>新增保险情况</h3><ul><li><p>意外险：包含意外身故/伤残责任；预算为每年400元（保额100万元）。</p></li><li><p>减额定期寿险C：受益人为法定受益人，保额等于房贷总额；预算为每年2000元（保额150万元，保障期30年，缴费期20年）。（有房贷才买）</p></li><li><p>重大疾病险B：提升重疾保额；预算为每年5000元（保额30万元，保终身，缴费期30年）。</p></li></ul><h4 id="32岁保障速览"><strong>32岁</strong>保障速览</h4><ul><li><p>身故补偿（不限死亡原因）：130万元。</p></li><li><p>额外身故补偿（仅限意外原因）：150万元。</p></li><li><p>意外医疗补偿：1万元（上限）。</p></li><li><p>住院医疗补偿：100万元（上限）。</p></li><li><p>重大疾病补偿：80万元。</p></li></ul><h3 id="34岁"><strong>34岁</strong></h3><ul><li><p>意外险：包含意外身故/伤残责任，意外医疗责任；预算为每年200元（保额50万元）。</p></li><li><p>意外险：包含意外身故/伤残责任；预算为每年400元（保额100万元）。</p></li><li><p>医疗险：包含疾病导致的住院医疗责任；预算为每年200元。定期寿险A：受益人为父母，保额相当于父母5年的退休金；预算为每年500元（保额50万元，保障期30年，缴费期30年）。</p></li><li><p>定期寿险B：受益人为法定受益人，保额相当于自己5倍的年薪。预算为每年1000元（保额80万元，保到60岁，缴费期30年）。</p></li><li><p>减额定期寿险C：受益人为法定受益人，保额等于房贷总额；预算为每年2000元（保额150万元，保障期30年，缴费期20年）。</p></li><li><p>定期寿险D：受益人为子女，保额相当于孩子5年的生活费；预算为每年4000元（保额100万元，保到60岁，缴费期20年）。</p></li><li><p>重大疾病险A：保额相当于自己当时的3倍年薪；预算为每年5000元（保额50万元，保到70岁，缴费期30年）。重大疾病险B：提升重疾险保额；预算为每年5000元（保额30万元，保终身，缴费期30年）。</p></li><li><p>养老保险（60岁领取）：预算为每年60000元（每月5000元）。</p></li></ul><p>给自己买保险，不能一蹴而就，应随着人生进入不同阶段而分步实施。在这个过程中，我们需要对自己的情感进行再分配，说到底就是，回答“为谁买保险”的问题。比如，涉及医疗补偿的保险（如住院医疗险、重大疾病险），是为了让自己不至于被疾病掏空腰包；再比如，涉及身故补偿的保险（如定期寿险、意外险），是为了让家人能够继续维持原来的生活水准。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 保险 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2024/11/22/language/d%20/"/>
      <url>2024/11/22/language/d%20/</url>
      
        <content type="html"><![CDATA[<h1 id="runtime-cgo">runtime/cgo</h1><p>xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python总结</title>
      <link href="2024/11/22/language/Python%E6%80%BB%E7%BB%93/"/>
      <url>2024/11/22/language/Python%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="Jupyter">Jupyter</h2><h3 id="启动">启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><h3 id="ModuleNotFoundError-No-module-named-‘okex’">ModuleNotFoundError: No module named ‘okex’</h3><p>在导入本地文件夹的文件时报错如上，可以在import这个模块之前添加以下代码，然后再import</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module_path = os.path.abspath(os.path.join(<span class="string">&#x27;..&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;module_path=&quot;</span>, module_path)</span><br><span class="line"><span class="keyword">if</span> module_path <span class="keyword">not</span> <span class="keyword">in</span> sys.path:</span><br><span class="line">    sys.path.append(module_path)</span><br></pre></td></tr></table></figure><h3 id="AttributeError-module-‘util-file-util’-has-no-attribute-‘exists’"><a href="https://www.528btc.com/bk/160265922370218.html">AttributeError</a>: module ‘util.file_util’ has no attribute ‘exists’</h3><p>如果本地的python代码已经修改，如果不重启（刷新）jupyter会报错如上，刷新一下即可。</p><h2 id="Pydoc">Pydoc</h2><p>本地启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pydoc -p 6789</span><br></pre></td></tr></table></figure><h2 id="pip-install报错">pip install报错</h2><p>错误信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip3.9 install cytoolz</span></span><br><span class="line">Looking in indexes: http://mirrors.cloud.aliyuncs.com/pypi/simple/</span><br><span class="line">Collecting cytoolz</span><br><span class="line">  Downloading http://mirrors.cloud.aliyuncs.com/pypi/packages/58/67/1c60da8ba831bfefedb64c78b9f6820bdf58972797c95644ee3191daf27a/cytoolz-0.11.0.tar.gz (477 kB)</span><br><span class="line">     |████████████████████████████████| 477 kB 2.6 MB/s</span><br><span class="line">Requirement already satisfied: toolz&gt;=0.8.0 in /usr/local/lib/python3.9/site-packages (from cytoolz) (0.11.1)</span><br><span class="line">Using legacy &#x27;setup.py install&#x27; for cytoolz, since package &#x27;wheel&#x27; is not installed.</span><br><span class="line">Installing collected packages: cytoolz</span><br><span class="line">    Running setup.py install for cytoolz ... error</span><br><span class="line">    ERROR: Command errored out with exit status 1:</span><br><span class="line">     command: /usr/bin/python3.9 -u -c &#x27;import io, os, sys, setuptools, tokenize; sys.argv[0] = &#x27;&quot;&#x27;&quot;&#x27;/tmp/pip-install-x0b5qh9y/cytoolz_939a8fed01cc43dc979d68c8072b3af1/setup.py&#x27;&quot;&#x27;&quot;&#x27;; __file__=&#x27;&quot;&#x27;&quot;&#x27;/tmp/pip-install-x0b5qh9y/cytoolz_939a8fed01cc43dc979d68c8072b3af1/setup.py&#x27;&quot;&#x27;&quot;&#x27;;f = getattr(tokenize, &#x27;&quot;&#x27;&quot;&#x27;open&#x27;&quot;&#x27;&quot;&#x27;, open)(__file__) if os.path.exists(__file__) else io.StringIO(&#x27;&quot;&#x27;&quot;&#x27;from setuptools import setup; setup()&#x27;&quot;&#x27;&quot;&#x27;);code = f.read().replace(&#x27;&quot;&#x27;&quot;&#x27;\r\n&#x27;&quot;&#x27;&quot;&#x27;, &#x27;&quot;&#x27;&quot;&#x27;\n&#x27;&quot;&#x27;&quot;&#x27;);f.close();exec(compile(code, __file__, &#x27;&quot;&#x27;&quot;&#x27;exec&#x27;&quot;&#x27;&quot;&#x27;))&#x27; install --record /tmp/pip-record-sp17_zhm/install-record.txt --single-version-externally-managed --compile --install-headers /usr/local/include/python3.9/cytoolz</span><br><span class="line">         cwd: /tmp/pip-install-x0b5qh9y/cytoolz_939a8fed01cc43dc979d68c8072b3af1/</span><br><span class="line">    Complete output (63 lines):</span><br><span class="line">    [1/5] Cythonizing cytoolz/dicttoolz.pyx</span><br><span class="line">    [2/5] Cythonizing cytoolz/functoolz.pyx</span><br><span class="line">    [3/5] Cythonizing cytoolz/itertoolz.pyx</span><br><span class="line">    [4/5] Cythonizing cytoolz/recipes.pyx</span><br><span class="line">    [5/5] Cythonizing cytoolz/utils.pyx</span><br><span class="line">    /usr/local/lib/python3.9/site-packages/setuptools/dist.py:691: UserWarning: Usage of dash-separated &#x27;index-url&#x27; will not be supported in future versions. Please use the underscore name &#x27;index_url&#x27; instead</span><br><span class="line">      warnings.warn(</span><br><span class="line">    running install</span><br><span class="line">    running build</span><br><span class="line">    running build_py</span><br><span class="line">    creating build</span><br><span class="line">    creating build/lib.linux-x86_64-3.9</span><br><span class="line">    creating build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/__init__.py -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/_signatures.py -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/_version.py -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/compatibility.py -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/utils_test.py -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    creating build/lib.linux-x86_64-3.9/cytoolz/curried</span><br><span class="line">    copying cytoolz/curried/__init__.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/curried</span><br><span class="line">    copying cytoolz/curried/exceptions.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/curried</span><br><span class="line">    copying cytoolz/curried/operator.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/curried</span><br><span class="line">    copying cytoolz/dicttoolz.pyx -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/functoolz.pyx -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/itertoolz.pyx -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/recipes.pyx -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/utils.pyx -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/__init__.pxd -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/cpython.pxd -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/dicttoolz.pxd -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/functoolz.pxd -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/itertoolz.pxd -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/recipes.pxd -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/utils.pxd -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    creating build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/dev_skip_test.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_compatibility.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_curried.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_curried_toolzlike.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_dev_skip_test.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_dicttoolz.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_docstrings.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_doctests.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_embedded_sigs.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_functoolz.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_inspect_args.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_itertoolz.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_none_safe.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_recipes.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_serialization.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_signatures.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_tlz.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_utils.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    running build_ext</span><br><span class="line">    building &#x27;cytoolz.dicttoolz&#x27; extension</span><br><span class="line">    creating build/temp.linux-x86_64-3.9</span><br><span class="line">    creating build/temp.linux-x86_64-3.9/cytoolz</span><br><span class="line">    gcc -pthread -Wno-unused-result -Wsign-compare -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DNDEBUG -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -D_GNU_SOURCE -fPIC -fwrapv -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -D_GNU_SOURCE -fPIC -fwrapv -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -D_GNU_SOURCE -fPIC -fwrapv -fPIC -I/usr/include/python3.9 -c cytoolz/dicttoolz.c -o build/temp.linux-x86_64-3.9/cytoolz/dicttoolz.o</span><br><span class="line">    cytoolz/dicttoolz.c:19:10: fatal error: Python.h: No such file or directory</span><br><span class="line">     #include &quot;Python.h&quot;</span><br><span class="line">              ^~~~~~~~~~</span><br><span class="line">    compilation terminated.</span><br><span class="line">    error: command &#x27;/usr/bin/gcc&#x27; failed with exit code 1</span><br><span class="line">    ----------------------------------------</span><br><span class="line">ERROR: Command errored out with exit status 1: /usr/bin/python3.9 -u -c &#x27;import io, os, sys, setuptools, tokenize; sys.argv[0] = &#x27;&quot;&#x27;&quot;&#x27;/tmp/pip-install-x0b5qh9y/cytoolz_939a8fed01cc43dc979d68c8072b3af1/setup.py&#x27;&quot;&#x27;&quot;&#x27;; __file__=&#x27;&quot;&#x27;&quot;&#x27;/tmp/pip-install-x0b5qh9y/cytoolz_939a8fed01cc43dc979d68c8072b3af1/setup.py&#x27;&quot;&#x27;&quot;&#x27;;f = getattr(tokenize, &#x27;&quot;&#x27;&quot;&#x27;open&#x27;&quot;&#x27;&quot;&#x27;, open)(__file__) if os.path.exists(__file__) else io.StringIO(&#x27;&quot;&#x27;&quot;&#x27;from setuptools import setup; setup()&#x27;&quot;&#x27;&quot;&#x27;);code = f.read().replace(&#x27;&quot;&#x27;&quot;&#x27;\r\n&#x27;&quot;&#x27;&quot;&#x27;, &#x27;&quot;&#x27;&quot;&#x27;\n&#x27;&quot;&#x27;&quot;&#x27;);f.close();exec(compile(code, __file__, &#x27;&quot;&#x27;&quot;&#x27;exec&#x27;&quot;&#x27;&quot;&#x27;))&#x27; install --record /tmp/pip-record-sp17_zhm/install-record.txt --single-version-externally-managed --compile --install-headers /usr/local/include/python3.9/cytoolz Check the logs for full command output.</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install python39-devel</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.cnblogs.com/johnthegreat/p/13058230.html">redhat</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> language </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> language </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Redis自增特性创建唯一id生成器</title>
      <link href="2024/11/22/language/java/%E4%BD%BF%E7%94%A8redis%E8%87%AA%E5%A2%9E%E7%89%B9%E6%80%A7%E5%88%9B%E5%BB%BA%E5%94%AF%E4%B8%80id%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>2024/11/22/language/java/%E4%BD%BF%E7%94%A8redis%E8%87%AA%E5%A2%9E%E7%89%B9%E6%80%A7%E5%88%9B%E5%BB%BA%E5%94%AF%E4%B8%80id%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="需求说明">需求说明</h1><h2 id="产品要求实现一个订单编号，此编号规则如下">产品要求实现一个订单编号，此编号规则如下</h2><h3 id="订单编号规则：">订单编号规则：</h3><p>“字母” + “日期” + “自增ID”</p><h3 id="订单编号举例">订单编号举例</h3><p>比如业务A，在2020-08-04日有三个订单，那么订单编号如下：</p><ul><li>A202008040001</li><li>A202008040002</li><li>A202008040003</li></ul><p>比如业务A，在2020-08-05日有4个订单，那么订单编号如下：</p><ul><li>A202008050001</li><li>A202008050002</li><li>A202008050003</li><li>A202008050003</li></ul><p>通过上面的例子可以看到，后面的“自增ID”每天都会从1开始增加，在一个分布式系统中，要做到每天从1开始不重复并且自增的效果；想到的第一个实现方案就是redis的Incr命令（Redis Incr 命令将 key 中储存的数字值增一）。</p><h1 id="需求实现">需求实现</h1><h2 id="配置redis">配置redis</h2><h3 id="依赖redis相关jar包">依赖redis相关jar包</h3><p>因为此模块继承了spring-boot-starter-parent，所以不需要指定版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写配置redis的config">编写配置redis的config</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nicai.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.data.redis.RedisProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisClusterConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis集群配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/08/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RedisProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisClusterConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisProperties redisProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisClusterConfig</span><span class="params">(RedisProperties redisProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisProperties = redisProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread-safe factory of Redis connections配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> factory of Redis</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisConnectionFactory <span class="title">redisConnectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisClusterConfiguration redisClusterConfiguration = <span class="keyword">new</span> RedisClusterConfiguration(redisProperties.getCluster().getNodes());</span><br><span class="line">        redisClusterConfiguration.setPassword(redisProperties.getPassword());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JedisConnectionFactory(redisClusterConfiguration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建String类型的redis模板</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisConnectionFactory factory of Redis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String-focused extension of RedisTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate(redisConnectionFactory);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是配置范型的RedisTemplate，需要设置值的序列化规则为：<strong>StringRedisSerializer</strong>，原因可以参考此文章：<a href="https://blog.csdn.net/tyyh08/article/details/80267261">Spring Boot中使用RedisTemplate优雅的操作Redis，并且解决RedisTemplate泛型注入失败的问题</a></p><h3 id="测试redis的config代码">测试redis的config代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nicai.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.BaseAdminSpringTest;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.Constants;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/08/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = AdminApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisClusterConfigTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEST_KEY = Constants.REDIS_KEY_PREFIX + <span class="string">&quot;test:hello&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEST_VALUE = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStringRedisTemplateGetAndSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(TEST_KEY, TEST_VALUE);</span><br><span class="line">        String value = stringRedisTemplate.opsForValue().get(TEST_KEY);</span><br><span class="line">        Assert.assertEquals(TEST_VALUE, value);</span><br><span class="line">        stringRedisTemplate.delete(TEST_KEY);</span><br><span class="line">        Assert.assertNull(stringRedisTemplate.opsForValue().get(TEST_KEY));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIncr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String key = TEST_KEY;</span><br><span class="line">        ValueOperations&lt;String, String&gt; valueOperations = stringRedisTemplate.opsForValue();</span><br><span class="line">        valueOperations.set(key, <span class="string">&quot;1&quot;</span>, <span class="number">24</span>, TimeUnit.HOURS);</span><br><span class="line">        String initValue = valueOperations.get(key);</span><br><span class="line">        log.info(<span class="string">&quot;key=&#123;&#125;, init value=&#123;&#125;&quot;</span>, key, initValue);</span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;1&quot;</span>, initValue);</span><br><span class="line">        Long increment = valueOperations.increment(key);</span><br><span class="line">        log.info(<span class="string">&quot;key=&#123;&#125;, after increment=&#123;&#125;&quot;</span>, key, increment);</span><br><span class="line">        Assert.assertEquals(Long.valueOf(<span class="number">2</span>), increment);</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">        Assert.assertNull(valueOperations.get(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于redis编写唯一ID生成服务">基于redis编写唯一ID生成服务</h2><h3 id="添加抽象的唯一id生成服务">添加抽象的唯一id生成服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nicai.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.BooleanUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分布式ID生成服务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/08/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRedisDistributedIDGenerateService</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">AbstractRedisDistributedIDGenerateService</span>.<span class="title">Context</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化key时的默认值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DEFAULT_VALUE = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractRedisDistributedIDGenerateService</span><span class="params">(StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一个ID，直接从redis中获取自增后的值；</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 下一个ID, 如果redis出现异常则返回null，请使用者自行处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Optional&lt;Long&gt; <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从redis中获取自增id</span></span><br><span class="line">        Long id = incr(getKey());</span><br><span class="line">        <span class="keyword">return</span> Objects.isNull(id) ? Optional.empty() : Optional.of(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一个ID，根据传入的上下文和redis中自增后的值最终组装成下一个ID；</span></span><br><span class="line"><span class="comment">     * 获取之后会交给子类检查此ID是否重复，如果重复会从子类中获取最新的ID，然后更新redis中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 拼装id时需要的上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 下一个ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">nextId</span><span class="params">(T context)</span> </span>&#123;</span><br><span class="line">        Optional&lt;Long&gt; id = nextId();</span><br><span class="line">        <span class="comment">// 如果可以从redis中获取值，则说明redis服务正常，需要判重；否则直接从数据库中获取下一个id</span></span><br><span class="line">        String nextId = id.isPresent() ? ifDuplicatedThenUpdate(context, assemblyNextId(context, id.get())) :</span><br><span class="line">                getNewIdFromDbAndUpdateRedis(context, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;context=&#123;&#125;,redisIncrId=&#123;&#125; nextId=&#123;&#125;&quot;</span>, JSON.toJSONString(context), id, nextId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查获取到的ID是否重复</span></span><br><span class="line"><span class="comment">     * 如果重复则说明由于redis的一些原因导致的重复，返回最新的redis中应该存在的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextId 下一个ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果当前ID没有重复，则返回null，否则如果重复了则返回redis中应该有的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">checkIfDuplicated</span><span class="params">(String nextId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数据库获取下一个id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> duplicatedId 重复的id，此入参可能为null，子类需要自己处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据库获取下一个id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Long <span class="title">maxIdFromDatabase</span><span class="params">(String duplicatedId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子类根据redis当前的值自行组装最终的ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context    上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisValue redis当前的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最终的ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">assemblyNextId</span><span class="params">(T context, Long redisValue)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取redis自增的key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> redis自增的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">getKey</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用redis的自增方法</span></span><br><span class="line"><span class="comment">     * 如果key不存在则先设置key，再调用自增方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 需要自增的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 自增之后的值，如果redis出现异常则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">incr</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Long increment = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 先检查redis中是否有key,如果没有,先设置key并且设置过期时间</span></span><br><span class="line">            <span class="keyword">if</span> (BooleanUtil.isFalse(redisTemplate.hasKey(key))) &#123;</span><br><span class="line">                initOrUpdateValue(key, getKeyInitValue());</span><br><span class="line">            &#125;</span><br><span class="line">            increment = redisTemplate.opsForValue().increment(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;调用redis的自增方法异常，error_message=&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">&quot;key = &#123;&#125;, increment=&#123;&#125;&quot;</span>, key, increment);</span><br><span class="line">        <span class="keyword">return</span> increment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取初始化key时的value值，默认是0，自增之后id从1开始；</span></span><br><span class="line"><span class="comment">     * 如果子类想从其他数字开始则自己覆盖此方法即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 初始化key时的value值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">getKeyInitValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DEFAULT_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取key的超时时间，单位是小时，由子类设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 超时时间，单位小时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">getTimeOutHours</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否重复，如果重复则从别的渠道（由子类自己决定从哪个渠道）更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 拼装id时需要的上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextId  下一个id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果重复则返回新的nextId，否则返回入参传入的nextId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">ifDuplicatedThenUpdate</span><span class="params">(T context, String nextId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否重复，如果重复则从数据库中获取，否则直接返回当前值</span></span><br><span class="line">        <span class="keyword">return</span> checkIfDuplicated(nextId) ? getNewIdFromDbAndUpdateRedis(context, nextId) : nextId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数据库获取新id并更新redis中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 拼装id时需要的上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextId  下一个id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 根据数据库的id获得的新id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getNewIdFromDbAndUpdateRedis</span><span class="params">(T context, String nextId)</span> </span>&#123;</span><br><span class="line">        Long maxIdFromDatabase = maxIdFromDatabase(nextId);</span><br><span class="line">        String newId = assemblyNextId(context, maxIdFromDatabase);</span><br><span class="line">        log.warn(<span class="string">&quot;nextId=&#123;&#125; 在数据库中已经存在，maxIdFromDatabase=&#123;&#125; 重新获取新的newId=&#123;&#125;&quot;</span>, nextId, maxIdFromDatabase, newId);</span><br><span class="line">        initOrUpdateValue(getKey(), maxIdFromDatabase);</span><br><span class="line">        <span class="keyword">return</span> newId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化或者更新redis中的自增的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   redis中的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 需要设置的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initOrUpdateValue</span><span class="params">(String key, Long value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, String.valueOf(value), getTimeOutHours(), TimeUnit.HOURS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;设置redis值异常，value=&#123;&#125; error_message=&#123;&#125;&quot;</span>, value, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上下文；子类自己定义上下文，然后根据上下文的数据来最终组装ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 凭证编号上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AContext</span> <span class="keyword">implements</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 业务类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String businessType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加一个A服务的唯一id生成服务实现">添加一个A服务的唯一id生成服务实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nicai.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DatePattern;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.Constants;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.dao.ManualVoucherDAO;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.entity.ManualVoucherEntity;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.exception.AccountingException;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.service.AbstractRedisDistributedIDGenerateService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分布式唯一ID生成-A实现类</span></span><br><span class="line"><span class="comment"> * 编号规则：用途+日期+自增ID，如：A202007310001；A202007310002；A202008070001；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/08/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedIDGenerateServiceAImpl</span> <span class="keyword">extends</span> <span class="title">AbstractRedisDistributedIDGenerateService</span>&lt;<span class="title">AbstractRedisDistributedIDGenerateService</span>.<span class="title">AContext</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BUSINESS_TYPE = <span class="string">&quot;A:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ID长度不足4位时在前面填充的字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> FILLED_CHAR = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最后的自增ID的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INCREMENT_LENGTH = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期小时数，即在24小时候过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXPIRATION_HOURS = <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DistributedIDGenerateServiceAImpl</span><span class="params">(StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(redisTemplate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">checkIfDuplicated</span><span class="params">(String nextId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Long <span class="title">maxIdFromDatabase</span><span class="params">(String duplicatedId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">assemblyNextId</span><span class="params">(VoucherNumberContext context, Long redisValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.join(Constants.BLANK, context.getBusinessType(), getDatePeriod(),</span><br><span class="line">                StrUtil.fillBefore(String.valueOf(redisValue), FILLED_CHAR, INCREMENT_LENGTH));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.join(Constants.REDIS_KEY_DELIMITER, Constants.REDIS_KEY_PREFIX, BUSINESS_TYPE, getDatePeriod());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">getTimeOutHours</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EXPIRATION_HOURS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实现Redis分布式锁</title>
      <link href="2024/11/22/language/java/Java%E5%AE%9E%E7%8E%B0redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>2024/11/22/language/java/Java%E5%AE%9E%E7%8E%B0redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>在实际的业务中遇到用户账户充值、提现等业务，需要防止并发来达到账户余额变动的正确性。</p><p>旧的实现是通过mysql悲观锁来完成的，在充值和提现等账户余额会变化的功能操作之前，先使用用户账户ID做<code>for update</code>，来锁定用户账户。但是这种实现方式把所有的压力都放在数据库上面，随着业务的不断发展，数据库压力也越来越大，因此我对分布式锁进行了改造，使用redis来实现。</p><h2 id="具体实现">具体实现</h2><h3 id="分布式锁主逻辑">分布式锁主逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guozhe.core.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.rholder.retry.*;</span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Joiner;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.exception.AssetCommonException;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.utils.CommonPreconditions;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.utils.CommonUtil;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.utils.UUIDUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisCallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis分布式锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-09-11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis锁key的前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String REDIS_LOCK_PREFIX = <span class="string">&quot;CORE_LOCK&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis默认的分割字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String REDIS_DEFAULT_SPLIT = <span class="string">&quot;:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis的ttl命令如果有key没有失效时间的返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TTL_NO_EXPIRE_RESPONSE = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁尝试retryer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Retryer&lt;Boolean&gt; retryer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis锁的超时时长，单位秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> redisLockExpireSeconds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    RedisLock(RedisTemplate&lt;String, String&gt; redisTemplate, <span class="keyword">int</span> redisLockExpireSeconds) &#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="keyword">this</span>.redisLockExpireSeconds = redisLockExpireSeconds;</span><br><span class="line">        <span class="keyword">this</span>.retryer = getRetryer((<span class="keyword">this</span>.redisLockExpireSeconds * <span class="number">1000</span>) / <span class="number">100</span>, <span class="number">100L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用分布式redis锁</span></span><br><span class="line"><span class="comment">     * 默认每隔200毫秒尝试一次枷锁，一共尝试10次</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beforeLock      可以为null，加锁之前处理的逻辑，如果有返回值则直接返回，如果得到的是null则继续执行业务逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beforeBizCalled 可以为null，业务处理之前处理的逻辑，如果有返回值则直接返回，如果得到的是null则继续执行业务逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizCallable     业务处理逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> businessName    当前业务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key             redis加锁的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 业务处理结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AssetCommonException 有两种情况会抛此异常：</span></span><br><span class="line"><span class="comment">     *                              0、如果一直获取不到锁会抛此异常</span></span><br><span class="line"><span class="comment">     *                              1、如果业务处理包括beforeLock、beforeBizCalled、bizCallable时有异常，则直接转成此异常抛出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">lockAndCall</span><span class="params">(Callable&lt;T&gt; beforeLock, Callable&lt;T&gt; beforeBizCalled, Callable&lt;T&gt; bizCallable, String businessName, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CommonUtil.isNotNull(beforeLock)) &#123;</span><br><span class="line">            T result = call(beforeLock);</span><br><span class="line">            <span class="keyword">if</span> (CommonUtil.isNotNull(result)) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> String uuid = UUIDUtils.getUUID();</span><br><span class="line">        <span class="comment">// 此方法会阻塞线程往下运行，除非已经获得锁才会继续执行，否则一直尝试获取锁或者最终获取锁失败抛异常</span></span><br><span class="line">        retryLock(businessName, key, uuid);</span><br><span class="line">        <span class="keyword">return</span> lockSuccessDoBiz(beforeBizCalled, bizCallable, businessName, key, uuid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用分布式redis锁，只尝试加锁一次，</span></span><br><span class="line"><span class="comment">     * 需要自定义Retryer实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beforeLock      可以为null，加锁之前处理的逻辑，如果有返回值则直接返回，如果得到的是null则继续执行业务逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beforeBizCalled 可以为null，业务处理之前处理的逻辑，如果有返回值则直接返回，如果得到的是null则继续执行业务逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizCallable     业务处理逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> businessName    当前业务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key             redis加锁的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 业务处理结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AssetCommonException 有两种情况会抛此异常：</span></span><br><span class="line"><span class="comment">     *                              0、如果一直获取不到锁会抛此异常</span></span><br><span class="line"><span class="comment">     *                              1、如果业务处理包括beforeLock、beforeBizCalled、bizCallable时有异常，则直接转成此异常抛出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">lockAndCallNoRetry</span><span class="params">(Callable&lt;T&gt; beforeLock, Callable&lt;T&gt; beforeBizCalled, Callable&lt;T&gt; bizCallable, String businessName, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CommonUtil.isNotNull(beforeLock)) &#123;</span><br><span class="line">            T result = call(beforeLock);</span><br><span class="line">            <span class="keyword">if</span> (CommonUtil.isNotNull(result)) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> String uuid = UUIDUtils.getUUID();</span><br><span class="line">        <span class="comment">// 此方法不会阻塞线程，如果加锁成功则处理业务，否则直接返回null</span></span><br><span class="line">        <span class="keyword">if</span> (tryLock(businessName, key, uuid)) &#123;</span><br><span class="line">            <span class="keyword">return</span> lockSuccessDoBiz(beforeBizCalled, bizCallable, businessName, key, uuid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁成功之后的业务处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beforeBizCalled 可以为null，业务处理之前处理的逻辑，如果有返回值则直接返回，如果得到的是null则继续执行业务逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizCallable     业务处理逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> businessName    当前业务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key             redis加锁的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value           redis锁的value值，为了解锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;             自定义返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 业务处理结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">lockSuccessDoBiz</span><span class="params">(Callable&lt;T&gt; beforeBizCalled, Callable&lt;T&gt; bizCallable, String businessName, String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (CommonUtil.isNotNull(beforeBizCalled)) &#123;</span><br><span class="line">                T call = beforeBizCalled.call();</span><br><span class="line">                <span class="keyword">if</span> (CommonUtil.isNotNull(call)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> call;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            CommonPreconditions.checkArgument(CommonUtil.isNotNull(bizCallable), <span class="string">&quot;businessName=%s,key=%s业务处理逻辑为null&quot;</span>, businessName, key);</span><br><span class="line">            <span class="keyword">return</span> bizCallable.call();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssetCommonException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;&#123;&#125;业务处理完成，解锁key=&#123;&#125;,value=&#123;&#125;&quot;</span>, businessName, key, value);</span><br><span class="line">            unlocked(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行，如果成功则返回结果；如果有异常则抛出AssetCommonException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callable callable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;      自定义返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 业务处理结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">call</span><span class="params">(Callable&lt;T&gt; callable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> callable.call();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssetCommonException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取加锁的redis的key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 需要加锁的原始key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最终处理后的key字节数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">byte</span>[] getRedisKey(String key) &#123;</span><br><span class="line">        <span class="keyword">return</span> getRedisKeyString(key).getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取加锁的redis的key字符串,使用:把传入的字符串拼接起来</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> first 第一个字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rest  其他的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最终处理后的key字节数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">getRedisKeyString</span><span class="params">(String first, String... rest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Joiner.on(REDIS_DEFAULT_SPLIT).join(REDIS_LOCK_PREFIX, first, rest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁，删除redis中的key如果value的值和此实例的值一样的话</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   redis锁的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 锁的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unlocked</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] redisKey = getRedisKey(key);</span><br><span class="line">        redisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = connection.get(redisKey);</span><br><span class="line">            <span class="keyword">if</span> (Arrays.equals(value.getBytes(), bytes)) &#123;</span><br><span class="line">                connection.del(redisKey);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重试的多次尝试加锁,如果获取到锁则继续往下执行，否则会阻断线程直到获得锁或者抛异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> businessName 业务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key          redis锁的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value        锁的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AssetCommonException 如果加锁失败或者重复次数达到最大的尝试次数，则抛此异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">retryLock</span><span class="params">(String businessName, String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            retryer.call(() -&gt; tryLock(businessName, key, value));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RetryException e) &#123;</span><br><span class="line">            <span class="comment">// 重试失败说明没有获取到锁，所以直接抛异常不再往下执行</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssetCommonException(String.format(<span class="string">&quot;业务%s,key=%s正在处理中，请稍后重试&quot;</span>, businessName, key));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            <span class="comment">// 执行加锁时失败，有些未知原因，如redis连不上之类的，此时为了不影响业务接着往下执行</span></span><br><span class="line">            log.error(<span class="string">&quot;businessName=&#123;&#125;,key=&#123;&#125;执行redis加锁异常 errorMsg=&#123;&#125;&quot;</span>, businessName, key, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单次尝试加锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> businessName 业务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key          redis锁的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value        锁的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果加锁成功返回true，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String businessName, String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tryLock(businessName, key, value, <span class="keyword">this</span>.redisTemplate, <span class="keyword">this</span>.redisLockExpireSeconds);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单次尝试加锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> businessName 业务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key          redis锁的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value        锁的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果加锁成功返回true，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String businessName, String key, String value, RedisTemplate&lt;String, String&gt; redisTemplate, <span class="keyword">long</span> redisLockExpireSeconds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] redisKey = getRedisKey(key);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="comment">// 加锁，只有在key不存在的情况下才能加锁成功</span></span><br><span class="line">            <span class="keyword">boolean</span> result = connection.setNX(redisKey, value.getBytes());</span><br><span class="line">            <span class="keyword">if</span> (result) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;businessName=&#123;&#125; key=&#123;&#125; value=&#123;&#125;,设置锁的失效时间=&#123;&#125;s&quot;</span>, businessName, key, value, redisLockExpireSeconds);</span><br><span class="line">                <span class="comment">// 如果加锁成功设置锁的超时时间</span></span><br><span class="line">                connection.expire(redisKey, redisLockExpireSeconds);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                如果没有加锁成功，检查这个key是否有超时时间，如果没有超时时间则设置超时时间</span></span><br><span class="line"><span class="comment">                ttl的官方文档如下：</span></span><br><span class="line"><span class="comment">                Returns the remaining time to live of a key that has a timeout.</span></span><br><span class="line"><span class="comment">                In Redis 2.6 or older the command returns -1 if the key does not exist or if the key exist but has no associated expire.</span></span><br><span class="line"><span class="comment">                Starting with Redis 2.8 the return value in case of error changed:</span></span><br><span class="line"><span class="comment">                The command returns -2 if the key does not exist.</span></span><br><span class="line"><span class="comment">                The command returns -1 if the key exists but has no associated expire.</span></span><br><span class="line"><span class="comment">                测试环境redis_version:4.0.1 生产环境redis_version:4.0.13 @2019-09-20</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (TTL_NO_EXPIRE_RESPONSE == connection.ttl(redisKey)) &#123;</span><br><span class="line">                    connection.expire(redisKey, redisLockExpireSeconds);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有些业务不需要一直等待重试，如果第一次获取锁不成功则马上不处理即可；</span></span><br><span class="line"><span class="comment">     * 所以本方法即是</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> retryTimes    尝试枷锁次数 必须大于0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fixedWaitTime 固定等待时长,单位MILLISECONDS</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Retryer实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Retryer&lt;Boolean&gt; <span class="title">getRetryer</span><span class="params">(<span class="keyword">int</span> retryTimes, <span class="keyword">long</span> fixedWaitTime)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 加锁尝试retryer</span></span><br><span class="line"><span class="comment">         * 最多尝试10次，每次不成功等待100ms，所以最多等待一秒钟如果获取不到锁就不再尝试</span></span><br><span class="line"><span class="comment">         * 2019-09-11查询生产环境日志，放款接口处理时间几乎没有超过500ms，所以时间是够用的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> RetryerBuilder.&lt;Boolean&gt;newBuilder()</span><br><span class="line">                <span class="comment">// 每次尝试加锁失败后等待100ms</span></span><br><span class="line">                .withWaitStrategy(WaitStrategies.fixedWait(fixedWaitTime, TimeUnit.MILLISECONDS))</span><br><span class="line">                <span class="comment">// 最多尝试10次</span></span><br><span class="line">                .withStopStrategy(StopStrategies.stopAfterAttempt(retryTimes))</span><br><span class="line">                <span class="comment">// 如果返回false则继续重试</span></span><br><span class="line">                .retryIfResult(aBoolean -&gt; aBoolean == <span class="keyword">null</span> || !aBoolean).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="构建分布式锁">构建分布式锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guozhe.core.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.utils.CommonPreconditions;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.utils.CommonUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的redis分布式锁构建器</span></span><br><span class="line"><span class="comment"> * 必须设置RedisTemplate</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis锁的超时时长，单位秒;默认1s，客户端可以根据自身业务自己设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> redisLockExpireSeconds = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RedisLockBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RedisLockBuilder <span class="title">newBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisLockBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisLockBuilder <span class="title">redisTemplate</span><span class="params">(RedisTemplate&lt;String, String&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置加锁时长，默认1s，客户端可以根据自身业务自己设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconds 超时时间，单位秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前RedisLockBuilder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisLockBuilder <span class="title">redisLockExpireSeconds</span><span class="params">(<span class="keyword">int</span> seconds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisLockExpireSeconds = seconds;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisLock <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CommonPreconditions.checkArgument(CommonUtil.isNotNull(redisTemplate), <span class="string">&quot;构建redis分布式锁时，redisTemplate不允许为null&quot;</span>);</span><br><span class="line">        CommonPreconditions.checkArgument(redisLockExpireSeconds &gt; <span class="number">0</span>, <span class="string">&quot;构建redis分布式锁时，超时时间必须大于0seconds=%s&quot;</span>, <span class="keyword">this</span>.redisLockExpireSeconds);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisLock(redisTemplate, redisLockExpireSeconds);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何使用">如何使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guozhe.core.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Sets;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.manager.CoreCommonApiNotifyRecordManagerService;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.model.CoreCommonApiNotifyRecord;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.remote.BaseRemoteApiNotifyService;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.service.CommonApiNotifyService;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.service.ServiceLocator;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.utils.CommonPreconditions;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.utils.CommonUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.BooleanUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonApiNotifyServiceImpl</span> <span class="keyword">implements</span> <span class="title">CommonApiNotifyService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis加锁时key标示的业务名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String REDIS_LOCK_BUSINESS_NAME = <span class="string">&quot;COMMON_API_NOTIFY&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis加锁时的超时时长，为了防止业务方的接口处理时间过长导致并发，此处设置的时间比较长</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REDIS_LOCK_EXPIRE_SECONDS = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis分布式锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisLock redisLockService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CoreCommonApiNotifyRecordManagerService coreCommonApiNotifyRecordManagerService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonApiNotifyServiceImpl</span><span class="params">(RedisTemplate&lt;String, String&gt; redisTemplate, CoreCommonApiNotifyRecordManagerService coreCommonApiNotifyRecordManagerService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.coreCommonApiNotifyRecordManagerService = coreCommonApiNotifyRecordManagerService;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="keyword">this</span>.redisLockService = RedisLockBuilder.newBuilder().redisTemplate(redisTemplate).redisLockExpireSeconds(REDIS_LOCK_EXPIRE_SECONDS).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyWithLock</span><span class="params">(CoreCommonApiNotifyRecord record)</span> </span>&#123;</span><br><span class="line">        BaseRemoteApiNotifyService remoteApiNotifyService = getBaseRemoteApiNotifyService(record);</span><br><span class="line">        <span class="comment">// 此处是为了防止并发，如果本次通知成功或已经通知成功result是true;如果本次通知失败则返回false;如果正在处理则返回null</span></span><br><span class="line">        <span class="comment">// 此处不只是为了防并发，此处也有如果已经通知过了就不再通知的逻辑，因此在加锁之前和加锁之后业务处理之前都做检查</span></span><br><span class="line">        Boolean result = redisLockService.lockAndCallNoRetry(</span><br><span class="line">                () -&gt; checkIfNotified(record),</span><br><span class="line">                () -&gt; checkIfNotified(record),</span><br><span class="line">                () -&gt; remoteApiNotifyService.bizNotify(record),</span><br><span class="line">                REDIS_LOCK_BUSINESS_NAME,</span><br><span class="line">                String.valueOf(record.getId()));</span><br><span class="line">        <span class="keyword">if</span> (CommonUtil.isNull(result)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;API通知recordId=&#123;&#125;, coreLendRequestId=&#123;&#125;, businessType=&#123;&#125; 正在通知无需重复&quot;</span>, record.getId(), record.getCoreLendRequestId(), record.getBusinessType());</span><br><span class="line">        &#125;</span><br><span class="line">        executeResult(record, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么我们在使用Spring的时候应该使用构造方法注入bean</title>
      <link href="2024/11/22/language/java/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E6%9E%84%E9%80%A0%E5%99%A8%E6%B3%A8%E5%85%A5%E8%80%8C%E4%B8%8D%E6%98%AF@Autoware/"/>
      <url>2024/11/22/language/java/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E6%9E%84%E9%80%A0%E5%99%A8%E6%B3%A8%E5%85%A5%E8%80%8C%E4%B8%8D%E6%98%AF@Autoware/</url>
      
        <content type="html"><![CDATA[<h1 id="问题">问题</h1><p>对于使用Spring框架的java开发人员对下面的代码应该很熟悉：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> HelloService helloService;</span><br></pre></td></tr></table></figure><p>但是对于上面的代码，Sonar会提示：<code>Remove this annotation and use constructor injection instead.</code></p><p>翻译成中文即：移除<code>@Autowired</code>注解使用构造器注入方式替代。</p><p>IntelliJ IDEA也会提示<code>Field injection is not recommended</code></p><p>翻译成中文即：不推荐使用字段注入</p><h1 id="那么他们为什么这么建议呢？">那么他们为什么这么建议呢？</h1><h2 id="首先我们先看一下Spring有哪些注入bean的方式">首先我们先看一下Spring有哪些注入bean的方式</h2><ol><li>构造方法注入</li><li>set方法注入</li><li>字段注入，即<code>@Autowired</code>注解</li></ol><h2 id="如何使用这些方式">如何使用这些方式</h2><h3 id="构造方法注入">构造方法注入</h3><p>在Spring4.3版本之前，我们必须要在构造方法上加<code>@Autowired</code>注解；在新版本中如果当前类只有一个构造方法<code>@Autowired</code>注解就是可选的。</p><p>只有一个构造方法示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidationController</span><span class="params">(HelloService helloService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloService = helloService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个构造方法示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidationController</span><span class="params">(HelloService helloService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloService = helloService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidationController</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="set方法注入">set方法注入</h3><p>这种方式Spring会找到 <code>@Autowired</code> 注解并且调用set方法来注入所需的依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">getHelloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloService</span><span class="params">(HelloService helloService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloService = helloService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字段注入">字段注入</h3><p>通过基于字段的注入，Spring在使用<code>@Autowired</code>注释进行注释时，直接将所需的依赖项分配给字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="这些方式有什么优缺点">这些方式有什么优缺点</h2><p>既然要<em><strong>移除<code>@Autowired</code>注解使用构造器注入方式替代</strong></em>，那么我们主要讨一下这些方式的优缺点。</p><h3 id="字段注入方式的优点">字段注入方式的优点</h3><p>相比较另外两种方式，字段注入方式的代码量更少、更整齐、更简洁</p><h3 id="构造方法注入的优点">构造方法注入的优点</h3><h4 id="容易发现代码的坏味道">容易发现代码的坏味道</h4><p>set方法注入和字段注入会<em><strong>间接</strong></em>违反<strong>单一职责原则</strong>。</p><p>因为在一个类依赖很多其他类的时候，如果使用构造方法注入就会发现构造方法的参数太多，这会让开发人员反思这个类真的需要这么多依赖吗？当前类是不是职责过多？</p><p>而使用字段注入时，就会把一些例如sonar的提示屏蔽掉，让开发人员误以为这样做没有问题</p><h4 id="可以创建不可变类">可以创建不可变类</h4><p>在使用构造方法注入时因为构造方法是创建依赖对象的唯一方式，这非常有助于让我们创建不可变的对象。</p><p>想象一下创建一个bean之后你可以通过set方法随意修改此类的依赖，在出现问题时是很难定位的。</p><p><code>@Autowired</code>的源码有一段注释如下：<code>Fields are injected right after construction of a bean, before any config methods are invoked. Such a config field does not have to be public.</code><br>大意是使用<code>@Autowired</code>注解时，bean是在构造当前的bean之后，并且在任何的其他方法调用之前注入，因此无法设置成final类型的字段。</p><h4 id="更明显的声明所有的依赖">更明显的声明所有的依赖</h4><p>使用构造方法注入，在使用这个类时就会暴露给使用者说我要依赖构造方法中的类。</p><p>但是使用字段注入时，使用者其实并不知道这个类依赖了哪些类，除非我到此类中查看这个类有多少个字段是有<code>@Autowired</code>注解。</p><h4 id="不方便迁移">不方便迁移</h4><p>spring实现了DI（控制反转），但并非是DI本身；<br>使用构造方法注入时，除了在类上面有<code>@Service</code>、<code>@Component</code>等的注解，没有其他的Spring相关的更多的注解。</p><p>使用字段注入时，除了在类上面有<code>@Service</code>、<code>@Component</code>等的注解之外又使用了Spring的<code>@Autowired</code>注解，如果把此类迁移到其他没有spring的环境时是完成不了注入的。</p><h4 id="不方便测试">不方便测试</h4><p>在使用构造方法注入时，单元测试时开发人员可以直接传入一个mock的类或者其他的任何被测试类依赖的子类；</p><p>当然我们也可以使用set方式注入一个mock的类，但是如果代码修改了新增了一个依赖，那么我们很容易忘掉在测试代码中set新增的依赖，直到运行的时候我们才会看到可能有NPE异常爆出；但是构造方法就不必有这种烦恼，因为如果新增了一个依赖，测试方法会马上编译不通过。</p><p>使用字段注入，必须依赖Spring去帮助注入依赖的类</p><h1 id="总结">总结</h1><p>通过构造方法注入bean是我们更容易创建不可变类，代码更健壮、更具有可测试性、更容易避免NPE。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池无法捕获线程的异常踩坑复盘</title>
      <link href="2024/11/22/language/java/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%97%A0%E6%B3%95%E6%8D%95%E8%8E%B7%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BC%82%E5%B8%B8%E8%B8%A9%E5%9D%91%E5%A4%8D%E7%9B%98/"/>
      <url>2024/11/22/language/java/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%97%A0%E6%B3%95%E6%8D%95%E8%8E%B7%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BC%82%E5%B8%B8%E8%B8%A9%E5%9D%91%E5%A4%8D%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><h3 id="需求信息">需求信息</h3><p>最近在工作中有个需求，先在A服务页面增加一条数据，然后去B服务查询此数据的详细信息</p><h3 id="解决方案">解决方案</h3><p>为了使A服务的新增数据接口快速响应，在查询B服务数据详情的地方使用了线程池异步查询与更新。</p><h3 id="问题现象">问题现象</h3><p>在验证时发现数据库中的数据字段不全，经分析缺少的都是需要从B服务查询并更新的字段</p><h3 id="初步定位">初步定位</h3><p>猜测应该是查询B服务时出了一些异常，而由于不规范使用线程池导致异常没有抛出，直接打到了控制台，故A服务的日志系统并看不到错误日志。</p><h2 id="问题解决">问题解决</h2><ol><li>查询B服务数据详情时暂时去掉使用线程池，改为同步调用</li><li>增加容错定时任务，定时查询需要从B服务获取缺失字段的数据进行更新</li></ol><p>上线后观察，新增的数据不再有部分字段缺失的情况；问题解决。</p><h2 id="问题复盘">问题复盘</h2><h3 id="A服务线程池的使用">A服务线程池的使用</h3><p>线程池定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询B服务数据详情的线程池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService executorService = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0L</span>, TimeUnit.MICROSECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(), <span class="keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="string">&quot;queryDataDetail-%d&quot;</span>).build());</span><br></pre></td></tr></table></figure><p>线程池使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String contract)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 0、检查合同必须不存在</span></span><br><span class="line">    checkIfExist(contract);</span><br><span class="line">    <span class="comment">// 1、保存合同数据</span></span><br><span class="line">    Entity entity = saveData(contract);</span><br><span class="line">    <span class="comment">// 2、从B服务查询缺失信息</span></span><br><span class="line">    executorService.execute(() -&gt; queryDataDetail(entity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如此使用有何问题">如此使用有何问题</h3><p>我重新写了一个测试方法如下：</p><p>1、定义一个会一直抛异常的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引入SystemOutRule，监听程序日志输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Rule</span></span><br><span class="line"><span class="keyword">public</span> SystemOutRule systemOutRule = <span class="keyword">new</span> SystemOutRule().enableLog();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引入SystemOutRule，监听程序日志输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">runWithException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread thread = Thread.currentThread();</span><br><span class="line">    log.info(<span class="string">&quot;thread is &#123;&#125;&quot;</span>, thread);</span><br><span class="line">    log.info(<span class="string">&quot;eh=&#123;&#125;&quot;</span>, thread.getUncaughtExceptionHandler());</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NicaiException(<span class="string">&quot;出错啦！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、使用线程池调用上面的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(<span class="keyword">this</span>::runWithException);</span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">100L</span>);</span><br><span class="line">    <span class="comment">// 断言程序打印的日志不包含“出错啦！”</span></span><br><span class="line">    Assert.assertFalse(systemOutRule.getLog().contains(<span class="string">&quot;出错啦！&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、上面的单测断言是成功的，那么异常跑哪里去了？上面的单测在控制台的输出如下：</p><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master//image-20200807110851677.png" alt="image-20200807110851677"></p><p>4、可以看出上面的异常信息是直接输出到了控制台，而不是由程序输出到控制台，主要原因是主程序没有捕获到此异常导致的。（具体原因还没有深入）</p><h3 id="如何解决线程池的异常捕获问题">如何解决线程池的异常捕获问题</h3><p>上面的测试可以说明到为什么日志里面查不到错误日志，那么如何捕获线程里的异常呢？</p><h4 id="方法1-使用UncaughtExceptionHandler">方法1:使用UncaughtExceptionHandler</h4><p>1、在创建线程池的时候，设置传入的ThreadFactory的UncaughtExceptionHandler属性，此UncaughtExceptionHandler会处理线程中的异常；下面的例子我直接打印了出来异常原因和异常栈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runWithUncaughtExceptionHandler</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool(</span><br><span class="line">            <span class="keyword">new</span> ThreadFactoryBuilder()</span><br><span class="line">                    .setUncaughtExceptionHandler((t, e) -&gt; log.info(<span class="string">&quot;UncaughtExceptionHandler caught, error_message=&#123;&#125;&quot;</span>, e.getMessage(), e))</span><br><span class="line">                    .build());</span><br><span class="line">    executorService.execute(<span class="keyword">this</span>::runWithException);</span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">100L</span>);</span><br><span class="line">    Assert.assertTrue(systemOutRule.getLog().contains(<span class="string">&quot;出错啦！&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、上面的单测运行结果如下：（可以和上面的运行结果进行比对）</p><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master//image-20200807111728213.png" alt="image-20200807111728213"></p><p>3、从上面的运行结果可以看出异常信息是由程序捕获后再输出出来，这样就不会导致查不到异常日志了。</p><h4 id="方法2-使用guava扩展的FutureCallback">方法2:使用guava扩展的FutureCallback</h4><p>1、guava对jdk的线程做了一些扩展，其中一个就是FutureCallback，使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runWithGuavaThreadPool</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ListeningExecutorService executorService = MoreExecutors.listeningDecorator(Executors.newCachedThreadPool());</span><br><span class="line">    ListenableFuture&lt;String&gt; listenableFuture = executorService.submit(<span class="keyword">this</span>::runWithException);</span><br><span class="line">    Futures.addCallback(listenableFuture, <span class="keyword">new</span> FutureCallback&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;success! result = &#123;&#125;&quot;</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">            log.error(<span class="string">&quot;guava FutureCallback caught, error_message=&#123;&#125;&quot;</span>, t.getMessage(), t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, executorService);</span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">100L</span>);</span><br><span class="line">    Assert.assertTrue(systemOutRule.getLog().contains(<span class="string">&quot;出错啦！&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、上面的单测运行结果如下：</p><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master//image-20200807112535447.png" alt="image-20200807112535447"></p><h2 id="问题总结">问题总结</h2><p>1、通过上面的测试，优化A服务的线程池定义，使之在遇到异常时能够正常被捕获，能输出，方便问题定位；补偿定时任务也能对第一次查询异常进行容错，保证数据能够同步过来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询B服务数据详情的线程池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService executorService = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0L</span>, TimeUnit.MICROSECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(), <span class="keyword">new</span> ThreadFactoryBuilder()</span><br><span class="line">        .setUncaughtExceptionHandler((t, e) -&gt; log.error(<span class="string">&quot;查询数据详情的线程池异常,error_message=&#123;&#125;&quot;</span>, e.getMessage(), e))</span><br><span class="line">        .setNameFormat(<span class="string">&quot;queryDataDetail-%d&quot;</span>).build());</span><br></pre></td></tr></table></figure><p>2、当然此问题更深层的问题还没有完全解答</p><ul><li>为什么线程里的异常不会被捕获？</li><li>UncaughtExceptionHandler的运行原理是什么？</li><li>Guava的FutureCallback是如何运行的？</li></ul><p>3、<a href="https://github.com/guozhe001/my-tools/blob/master/my-learn/my-experience/src/test/java/com/nicai/experience/concurrency/ExceptionThreadTest.java">测试代码源码地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SUMMARY-供应链金融</title>
      <link href="2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/summary/"/>
      <url>2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/summary/</url>
      
        <content type="html"><![CDATA[<h2 id="项目背景">项目背景</h2><p>为了学习Fabric，模拟搭建一个供应链金融的区块链项目。</p><p>为了简单起见，此项目有以下四个组织：</p><ul><li>核心企业</li><li>一级供应商</li><li>二级供应商1</li><li>二级供应商2</li></ul><h2 id="操作步骤：">操作步骤：</h2><ol start="0"><li><a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/">设置环境变量</a></li><li><a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BA%E7%BD%91%E7%BB%9C/">创建网络</a></li><li><a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BAchannel/">创建channel</a></li><li><a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%BC%80%E5%8F%91%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/">开发智能合约</a></li><li><a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%88%B0channel/">部署智能合约到channel并进行交易</a></li><li>[交易与验证](file://部署智能合约到channel.md)：查看“部署supply-v8到alljoinchannel通道”部分</li><li><a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%9A%90%E7%A7%98%E4%BA%A4%E6%98%93/">隐秘交易</a></li><li><a href="https://github.com/guozhe001/supply-finance.git">源码地址</a></li></ol><h2 id="总结：">总结：</h2><p>本项目成功的在测试环境自己部署网络，自己写智能合约并进行调用；完成了入门练习。</p><h2 id="存在的问题：">存在的问题：</h2><h3 id="问题1">问题1</h3><p>目前此程序把所有的组织都加入了同一个渠道，所以账本是对所有组织都是公开的；现实生活中每个企业之间的交易应该都是私密的，不能被其他企业所见。</p><h4 id="解决方案1：">解决方案1：</h4><p>使用通道隔离，每两个需要交易的组织之间都创建一个通道。</p><p><strong>可行性：</strong> <em>初步判断此方法不可行，因为不同通道之间无法交易资产？如果可以交易需要从原来的channel销毁此资产，然后在新channel创建一个新的可被信任的新资产</em></p><h4 id="解决方案2：">解决方案2：</h4><p>使用私密资产交易的方式解决,参考文档<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/secured_asset_transfer/secured_private_asset_transfer_tutorial.html">Secured asset transfer in Fabric</a></p><p><strong>可行性：</strong> 可以，查看[隐秘交易](file://隐秘交易.md)</p><h3 id="问题2">问题2:</h3><p>同一个智能合约如何限制只能由指定的人调用？如本例中，发行方法应该只能由核心企业调用。</p><h3 id="解决方案">解决方案</h3><p>同一个智能合约可以由部署智能合约的成员调用，所以无法限制，除非智能合约里面写死。</p><p>在应收账款供应链金融的demo中，我们写的智能合约可以由任何人发行应收账款，但是这只是生成了私有的数据，别人认不认可是否跟发行应收账款的组织交易是链下解决的问题。</p><h3 id="问题3：">问题3：</h3><p>使用安全的方式交易资产之后，除了资产的拥有者之外其他任何人都无法知道资产的金额等私有信息。但是现实中的供应链金融应该是允许凭证资产的发行人知道资产归属是谁、资产的金额是多少；只有这样发行人才能够在凭证资产到期时进行还款。</p><h4 id="解决方案-v2">解决方案</h4><p>修改智能合约，待完成。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> 项目实践-供应链金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> 供应链金融 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建channel</title>
      <link href="2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BAchannel/"/>
      <url>2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BAchannel/</url>
      
        <content type="html"><![CDATA[<h2 id="2-创建Channel">2. 创建Channel</h2><p>参考：<a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/how_to/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84channel/">创建一个新的channel</a></p><h3 id="创建通道：">创建通道：</h3><p>运行下面的程序来为<code>coreandfirstchannel</code>通道创建一个“创建通道的交易”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile CoreAndFirstChannel -outputCreateChannelTx ./channel-artifacts/coreandfirstchannel.tx -channelID coreandfirstchannel</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 14:29:40.728 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2020-12-24 14:29:40.739 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/configtx/configtx.yaml</span><br><span class="line">2020-12-24 14:29:40.739 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 003 Generating new channel configtx</span><br><span class="line">2020-12-24 14:29:40.750 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 004 Writing new channel tx</span><br></pre></td></tr></table></figure><p>设置环境变量，以核心企业(<a href="http://core.supply.com">core.supply.com</a>)管理员身份操作<code>peer</code>CLI;然后使用下面的命令把交易发给order服务创建通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel create -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel -f ./channel-artifacts/coreandfirstchannel.tx --outputBlock ./channel-artifacts/coreandfirstchannel.block --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>正确执行之后的日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 15:59:28.470 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:28.490 CST [cli.common] readBlock -&gt; INFO 002 Expect block, but got status: &amp;&#123;NOT_FOUND&#125;</span><br><span class="line">2020-12-24 15:59:28.497 CST [channelCmd] InitCmdFactory -&gt; INFO 003 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:28.701 CST [cli.common] readBlock -&gt; INFO 004 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-24 15:59:28.708 CST [channelCmd] InitCmdFactory -&gt; INFO 005 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:28.917 CST [cli.common] readBlock -&gt; INFO 006 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-24 15:59:28.924 CST [channelCmd] InitCmdFactory -&gt; INFO 007 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:29.134 CST [cli.common] readBlock -&gt; INFO 008 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-24 15:59:29.141 CST [channelCmd] InitCmdFactory -&gt; INFO 009 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:29.349 CST [cli.common] readBlock -&gt; INFO 00a Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-24 15:59:29.357 CST [channelCmd] InitCmdFactory -&gt; INFO 00b Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 15:59:29.566 CST [cli.common] readBlock -&gt; INFO 00c Received block: 0</span><br></pre></td></tr></table></figure><p><strong>报错信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/supply-finance$     peer channel create -o localhost:8051  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel -f ./channel-artifacts/coreandfirstchannel.tx --outputBlock ./channel-artifacts/coreandfirstchannel.block --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line">2020-12-24 15:56:56.602 CST [comm.tls] ClientHandshake -&gt; ERRO 001 Client TLS handshake failed after 5.225381ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not orderer.supply.com remoteaddress=[::1]:8051</span><br><span class="line">2020-12-24 15:56:57.611 CST [comm.tls] ClientHandshake -&gt; ERRO 002 Client TLS handshake failed after 3.907471ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not orderer.supply.com remoteaddress=[::1]:8051</span><br><span class="line">2020-12-24 15:56:59.315 CST [comm.tls] ClientHandshake -&gt; ERRO 003 Client TLS handshake failed after 4.52302ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not orderer.supply.com remoteaddress=[::1]:8051</span><br><span class="line">Error: failed to create deliver client for orderer: orderer client failed to connect to localhost:8051: failed to create new connection: context deadline exceeded</span><br></pre></td></tr></table></figure><p><strong>错误原因：</strong><code>peer channel create -o localhost:8051 </code>命令<code>-o</code>应该传入order服务的地址和端口。</p><h2 id="把核心企业和一级供应商的peer加入通道">把核心企业和一级供应商的peer加入通道</h2><h3 id="核心企业的peer加入通道">核心企业的peer加入通道</h3><p>使用下面的命令将核心企业的peer加入通道（确认已经设置了核心企业的环境变量）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 16:46:40.206 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 16:46:40.235 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><p><strong>报错信息记录:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/supply-finance$     peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br><span class="line">2020-12-24 16:18:23.258 CST [comm.tls] ClientHandshake -&gt; ERRO 001 Client TLS handshake failed after 2.895228ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not localhost remoteaddress=[::1]:8051</span><br><span class="line">2020-12-24 16:18:24.266 CST [comm.tls] ClientHandshake -&gt; ERRO 002 Client TLS handshake failed after 4.537447ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not localhost remoteaddress=[::1]:8051</span><br><span class="line">2020-12-24 16:18:25.659 CST [comm.tls] ClientHandshake -&gt; ERRO 003 Client TLS handshake failed after 4.16728ms with error: x509: certificate is valid for peer0.core.supply.com, peer0, not localhost remoteaddress=[::1]:8051</span><br><span class="line">Error: error getting endorser client for channel: endorser client failed to connect to localhost:8051: failed to create new connection: context deadline exceeded</span><br></pre></td></tr></table></figure><p>**错误原因：**未知。</p><p>**解决方式：**把Profiles里面的Organizations信息统一修改，与环境变量保持一致</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Organizations:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">*GylCoreOrg1MSP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">*GylFOrg1MSP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">*GylSOrg1MSP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">*GylSOrg2MSP</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后把上面步骤中生成的加密材料信息、区块信息都删除，容器和volume全部删除；重新执行一遍。</p><h3 id="通过获取通道信息确认加入成功">通过获取通道信息确认加入成功</h3><h4 id="获取通道信息">获取通道信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel getinfo -c coreandfirstchannel</span><br></pre></td></tr></table></figure><p>可以看到如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 16:53:01.633 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;&quot;height&quot;:1,&quot;currentBlockHash&quot;:&quot;kXOOwW8prt0XPvgEGMDrzdt1nNH8T7qlObL9eT8FZ7c=&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="一级供应商加入通道">一级供应商加入通道</h3><p>设置环境变量，然后拉取通道的创世纪区块(因为是测试本次忽略)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch 0 ./channel-artifacts/coreandfirstchannel.block -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>加入通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 17:06:30.499 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 17:06:30.527 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><p><strong>报错信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/supply-finance$     peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br><span class="line">2020-12-24 17:01:05.904 CST [main] InitCmd -&gt; ERRO 001 Cannot run peer because cannot init crypto, specified path &quot;/Users/apple/code/open-source/blockchain/hyperledger/supply-finance/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp&quot; does not exist or cannot be accessed: stat /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp: no such file or directory</span><br></pre></td></tr></table></figure><p>**错误原因：**因为在设置环境变量时不是在<code>supply-finance</code>目录下设置的，所以设置的环境变量有问题，重新设置一下。</p><h3 id="设置锚节点">设置锚节点</h3><h4 id="为GylFOrg1MSP设置锚节点">为GylFOrg1MSP设置锚节点</h4><p>因为上面已经设置了一级供应商（GylFOrg1MSP）的环境变量，所以先设置GylFOrg1MSP的锚节点：</p><h5 id="拉取最新的channel配置区块">拉取最新的channel配置区块</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/coreandfirstchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 17:56:48.435 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 17:56:48.439 CST [cli.common] readBlock -&gt; INFO 002 Received block: 0</span><br><span class="line">2020-12-24 17:56:48.439 CST [channelCmd] fetch -&gt; INFO 003 Retrieving last config block: 0</span><br><span class="line">2020-12-24 17:56:48.442 CST [cli.common] readBlock -&gt; INFO 004 Received block: 0</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input coreandfirstchannel_config_block.pb --type common.Block --output coreandfirstchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config coreandfirstchannel_config_block.json &gt; coreandfirstchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp coreandfirstchannel_config.json coreandfirstchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylFOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq &#x27;.channel_group.groups.Application.groups.GylFOrg1MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.f1.supply.com&quot;,&quot;port&quot;: 8053&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; coreandfirstchannel_config_copy.json &gt; modified_coreandfirstchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input coreandfirstchannel_config.json --type common.Config --output coreandfirstchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_coreandfirstchannel_config.json --type common.Config --output modified_coreandfirstchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id coreandfirstchannel --original coreandfirstchannel_config.pb --updated modified_coreandfirstchannel_config.pb --output coreandfirstchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input coreandfirstchannel_config_update.pb --type common.ConfigUpdate --output coreandfirstchannel_config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;coreandfirstchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat coreandfirstchannel_config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; coreandfirstchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input coreandfirstchannel_config_update_in_envelope.json --type common.Envelope --output coreandfirstchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/coreandfirstchannel_config_update_in_envelope.pb -c coreandfirstchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 18:13:59.246 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 18:13:59.265 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 18:12:49.469 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Error: got unexpected status: BAD_REQUEST -- error applying config update to existing channel &#x27;coreandfirstchannel&#x27;: error authorizing update: ConfigUpdate for channel &#x27;channel1&#x27; but envelope for channel &#x27;coreandfirstchannel&#x27;</span><br></pre></td></tr></table></figure><p>**错误原因：**在修改配置的时候指定channel名称错误，修正重新执行一遍。</p><h5 id="验证，获取通道信息-peer-channel-getinfo-c-coreandfirstchannel">验证，获取通道信息:<code>peer channel getinfo -c coreandfirstchannel</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">supply-finance$</span><span class="bash">     peer channel getinfo -c coreandfirstchannel</span></span><br><span class="line">2020-12-24 18:19:31.275 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;&quot;height&quot;:2,&quot;currentBlockHash&quot;:&quot;h5CY6RfVNNg8kYWPZ+tZqdMIrGoXeoDSQFd0YfiBhRk=&quot;,&quot;previousBlockHash&quot;:&quot;kXOOwW8prt0XPvgEGMDrzdt1nNH8T7qlObL9eT8FZ7c=&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="为核心企业GylCoreOrg1MSP设置锚节点">为核心企业GylCoreOrg1MSP设置锚节点</h4><p>修改环境变量，然后拉取最新的channel配置区块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/coreandfirstchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块-v2">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input coreandfirstchannel_config_block.pb --type common.Block --output coreandfirstchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config coreandfirstchannel_config_block.json &gt; coreandfirstchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp coreandfirstchannel_config.json coreandfirstchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylCoreOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq &#x27;.channel_group.groups.Application.groups.GylCoreOrg1MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.core.supply.com&quot;,&quot;port&quot;: 8051&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; coreandfirstchannel_config_copy.json &gt; modified_coreandfirstchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input coreandfirstchannel_config.json --type common.Config --output coreandfirstchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_coreandfirstchannel_config.json --type common.Config --output modified_coreandfirstchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id coreandfirstchannel --original coreandfirstchannel_config.pb --updated modified_coreandfirstchannel_config.pb --output coreandfirstchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：-v2">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input coreandfirstchannel_config_update.pb --type common.ConfigUpdate --output coreandfirstchannel_config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;coreandfirstchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat coreandfirstchannel_config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; coreandfirstchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input coreandfirstchannel_config_update_in_envelope.json --type common.Envelope --output coreandfirstchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”-v2">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/coreandfirstchannel_config_update_in_envelope.pb -c coreandfirstchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 18:13:59.246 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-24 18:13:59.265 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息">验证，获取通道信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> peer channel getinfo -c coreandfirstchannel</span></span><br><span class="line">2020-12-24 18:24:51.015 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;&quot;height&quot;:3,&quot;currentBlockHash&quot;:&quot;e52oT2HAiTxyeh4a30kTx32xLJAKIWa7rm6PVOn8eoA=&quot;,&quot;previousBlockHash&quot;:&quot;h5CY6RfVNNg8kYWPZ+tZqdMIrGoXeoDSQFd0YfiBhRk=&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="部署测试chaincode来确认">部署测试chaincode来确认</h2><h3 id="打包">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package basic.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/fabric-samples/asset-transfer-basic/chaincode-go/ --lang golang --label basic_1.0</span><br></pre></td></tr></table></figure><p>运行完上面的命令，查看当前目录会发现多了<code>basic.tar.gz</code>包，说明打包成功。</p><h3 id="安装链码包">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install basic.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install basic.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>安装成功输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 18:51:45.793 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 001 Installed remotely: response:&lt;status:200 payload:&quot;\nJbasic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad\022\tbasic_1.0&quot; &gt;</span><br><span class="line">2020-12-24 18:51:45.793 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 002 Chaincode code package identifier: basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad</span><br></pre></td></tr></table></figure><h3 id="批准链码定义">批准链码定义</h3><h4 id="查看已经安装的chaincode">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Installed chaincodes on peer:</span><br><span class="line">Package ID: basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad, Label: basic_1.0</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v2">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name basic --version 1.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 19:02:47.351 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [d7e2224f63a1516ffeeed26ec5c8f69872141f5864b3602a1409679472692840] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name basic --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;approvals&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;GylCoreOrg1MSP&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;GylFOrg1MSP&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name basic --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 19:10:18.071 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [5b363e2e419dbb1307726fe44428e23ae1b0e5feaf86cb577383b6e8a68464d6] committed with status (VALID) at localhost:8053</span><br><span class="line">2020-12-24 19:10:18.094 CST [chaincodeCmd] ClientWait -&gt; INFO 002 txid [5b363e2e419dbb1307726fe44428e23ae1b0e5feaf86cb577383b6e8a68464d6] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name basic --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Committed chaincode definition for chaincode &#x27;basic&#x27; on channel &#x27;coreandfirstchannel&#x27;:</span><br><span class="line">Version: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [GylCoreOrg1MSP: true, GylFOrg1MSP: true]</span><br></pre></td></tr></table></figure><h3 id="调用链码">调用链码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n basic --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;InitLedger&quot;,&quot;Args&quot;:[]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>成功信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-25 17:26:22.583 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><h4 id="查询调用后的结果">查询调用后的结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C coreandfirstchannel -n basic -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>成功结果如下,说明channel部署成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;ID&quot;:&quot;asset1&quot;,&quot;color&quot;:&quot;blue&quot;,&quot;size&quot;:5,&quot;owner&quot;:&quot;Tomoko&quot;,&quot;appraisedValue&quot;:300&#125;,&#123;&quot;ID&quot;:&quot;asset2&quot;,&quot;color&quot;:&quot;red&quot;,&quot;size&quot;:5,&quot;owner&quot;:&quot;Brad&quot;,&quot;appraisedValue&quot;:400&#125;,&#123;&quot;ID&quot;:&quot;asset3&quot;,&quot;color&quot;:&quot;green&quot;,&quot;size&quot;:10,&quot;owner&quot;:&quot;Jin Soo&quot;,&quot;appraisedValue&quot;:500&#125;,&#123;&quot;ID&quot;:&quot;asset4&quot;,&quot;color&quot;:&quot;yellow&quot;,&quot;size&quot;:10,&quot;owner&quot;:&quot;Max&quot;,&quot;appraisedValue&quot;:600&#125;,&#123;&quot;ID&quot;:&quot;asset5&quot;,&quot;color&quot;:&quot;black&quot;,&quot;size&quot;:15,&quot;owner&quot;:&quot;Adriana&quot;,&quot;appraisedValue&quot;:700&#125;,&#123;&quot;ID&quot;:&quot;asset6&quot;,&quot;color&quot;:&quot;white&quot;,&quot;size&quot;:15,&quot;owner&quot;:&quot;Michel&quot;,&quot;appraisedValue&quot;:800&#125;]</span><br></pre></td></tr></table></figure><p><strong>错误信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:&quot;error in simulation: failed to execute transaction 207cf99d289ffe9deca6a320aba59cc155fae02d19d51c9cfebc9943ffc7794d: could not launch chaincode basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad: error starting container: error starting container: API error (404): network _test not found&quot;</span><br></pre></td></tr></table></figure><p>**错误原因：**因为chaincode的容器没有启动成功,直接指定容器启动报错如下：</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20201224192439225.png" alt="image-20201224192439225"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">/supply-finance$</span><span class="bash">     docker start bc47970e58a5</span></span><br><span class="line">Error response from daemon: network _test not found</span><br><span class="line">Error: failed to start containers: bc47970e58a5</span><br></pre></td></tr></table></figure><p><strong>问题解决：</strong></p><p>因为在<code>docker-compose.yml</code>文件中配置了下面的环境变量，在启动chaincode容器时会链接到这个网络。</p><p>之前的配置是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=$&#123;COMPOSE_PROJECT_NAME&#125;_test</span><br></pre></td></tr></table></figure><p>修改后重新启动，问题解决。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE&#x3D;docker_test</span><br></pre></td></tr></table></figure><p>为什么修改成docker_test呢，可以查看使用<code>docker-compose</code>命令启动容器时的日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating network &quot;docker_test&quot; with the default driver</span><br></pre></td></tr></table></figure><h2 id="核心企业、一级和二级供应商加入同一个channel">核心企业、一级和二级供应商加入同一个channel</h2><h3 id="创建通道：-v2">创建通道：</h3><p>运行下面的程序来为<code>alljoinchannel</code>通道创建一个“创建通道的交易”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile AllPlayChannel -outputCreateChannelTx ./channel-artifacts/alljoinchannel.tx -channelID alljoinchannel</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用下面的命令把交易发给order服务创建通道：</span></span><br><span class="line">peer channel create -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel -f ./channel-artifacts/alljoinchannel.tx --outputBlock ./channel-artifacts/alljoinchannel.block --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h2 id="加入通道">加入通道</h2><p>使用下面的命令将peer加入通道,所有节点都需要执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/alljoinchannel.block</span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过获取通道信息确认加入成功</span></span><br><span class="line">peer channel getinfo -c alljoinchannel</span><br></pre></td></tr></table></figure><h2 id="为各个组织设置锚节点">为各个组织设置锚节点</h2><h3 id="GylCoreOrg1MSP">GylCoreOrg1MSP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/alljoinchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到`channel-artifacts`然后把区块内容转换成json格式：</span></span><br><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_block.pb --type common.Block --output alljoinchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config alljoinchannel_config_block.json &gt; alljoinchannel_config.json</span><br><span class="line">cp alljoinchannel_config.json alljoinchannel_config_copy.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用`jq`工具添加各个组织的锚节点配置</span></span><br><span class="line">jq &#x27;.channel_group.groups.Application.groups.GylCoreOrg1MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.core.supply.com&quot;,&quot;port&quot;: 8051&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; alljoinchannel_config_copy.json &gt; modified_alljoinchannel_config.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</span></span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config.json --type common.Config --output alljoinchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_alljoinchannel_config.json --type common.Config --output modified_alljoinchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id alljoinchannel --original alljoinchannel_config.pb --updated modified_alljoinchannel_config.pb --output alljoinchannel_config_update.pb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把更新后的交易打包成一个更新通道配置的交易：</span></span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_update.pb --type common.ConfigUpdate --output alljoinchannel_config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;alljoinchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat alljoinchannel_config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; alljoinchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config_update_in_envelope.json --type common.Envelope --output alljoinchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进到上一级目录`<span class="built_in">cd</span> ..`，之后运行命令将交易提交给排序服务进行通道配置的更新：</span></span><br><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/alljoinchannel_config_update_in_envelope.pb -c alljoinchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证，获取通道信息:</span></span><br><span class="line">peer channel getinfo -c alljoinchannel</span><br></pre></td></tr></table></figure><h3 id="GylFOrg1MSP">GylFOrg1MSP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/alljoinchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到`channel-artifacts`然后把区块内容转换成json格式：</span></span><br><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_block.pb --type common.Block --output alljoinchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config alljoinchannel_config_block.json &gt; alljoinchannel_config.json</span><br><span class="line">cp alljoinchannel_config.json alljoinchannel_config_copy.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用`jq`工具添加各个组织的锚节点配置</span></span><br><span class="line">jq &#x27;.channel_group.groups.Application.groups.GylFOrg1MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.f1.supply.com&quot;,&quot;port&quot;: 8053&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; alljoinchannel_config_copy.json &gt; modified_alljoinchannel_config.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</span></span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config.json --type common.Config --output alljoinchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_alljoinchannel_config.json --type common.Config --output modified_alljoinchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id alljoinchannel --original alljoinchannel_config.pb --updated modified_alljoinchannel_config.pb --output alljoinchannel_config_update.pb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把更新后的交易打包成一个更新通道配置的交易：</span></span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_update.pb --type common.ConfigUpdate --output alljoinchannel_config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;alljoinchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat alljoinchannel_config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; alljoinchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config_update_in_envelope.json --type common.Envelope --output alljoinchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进到上一级目录`<span class="built_in">cd</span> ..`，之后运行命令将交易提交给排序服务进行通道配置的更新：</span></span><br><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/alljoinchannel_config_update_in_envelope.pb -c alljoinchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证，获取通道信息:</span></span><br><span class="line">peer channel getinfo -c alljoinchannel</span><br></pre></td></tr></table></figure><h3 id="GylSOrg1MSP">GylSOrg1MSP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/alljoinchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到`channel-artifacts`然后把区块内容转换成json格式：</span></span><br><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_block.pb --type common.Block --output alljoinchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config alljoinchannel_config_block.json &gt; alljoinchannel_config.json</span><br><span class="line">cp alljoinchannel_config.json alljoinchannel_config_copy.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用`jq`工具添加各个组织的锚节点配置</span></span><br><span class="line">jq &#x27;.channel_group.groups.Application.groups.GylSOrg1MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.s1.supply.com&quot;,&quot;port&quot;: 8055&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; alljoinchannel_config_copy.json &gt; modified_alljoinchannel_config.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</span></span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config.json --type common.Config --output alljoinchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_alljoinchannel_config.json --type common.Config --output modified_alljoinchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id alljoinchannel --original alljoinchannel_config.pb --updated modified_alljoinchannel_config.pb --output alljoinchannel_config_update.pb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把更新后的交易打包成一个更新通道配置的交易：</span></span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_update.pb --type common.ConfigUpdate --output alljoinchannel_config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;alljoinchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat alljoinchannel_config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; alljoinchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config_update_in_envelope.json --type common.Envelope --output alljoinchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进到上一级目录`<span class="built_in">cd</span> ..`，之后运行命令将交易提交给排序服务进行通道配置的更新：</span></span><br><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/alljoinchannel_config_update_in_envelope.pb -c alljoinchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证，获取通道信息:</span></span><br><span class="line">peer channel getinfo -c alljoinchannel</span><br></pre></td></tr></table></figure><h3 id="GylSOrg1MSP-v2">GylSOrg1MSP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/alljoinchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c alljoinchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到`channel-artifacts`然后把区块内容转换成json格式：</span></span><br><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_block.pb --type common.Block --output alljoinchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config alljoinchannel_config_block.json &gt; alljoinchannel_config.json</span><br><span class="line">cp alljoinchannel_config.json alljoinchannel_config_copy.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用`jq`工具添加各个组织的锚节点配置</span></span><br><span class="line">jq &#x27;.channel_group.groups.Application.groups.GylSOrg2MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.s2.supply.com&quot;,&quot;port&quot;: 8151&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; alljoinchannel_config_copy.json &gt; modified_alljoinchannel_config.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</span></span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config.json --type common.Config --output alljoinchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_alljoinchannel_config.json --type common.Config --output modified_alljoinchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id alljoinchannel --original alljoinchannel_config.pb --updated modified_alljoinchannel_config.pb --output alljoinchannel_config_update.pb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把更新后的交易打包成一个更新通道配置的交易：</span></span><br><span class="line">configtxlator proto_decode --input alljoinchannel_config_update.pb --type common.ConfigUpdate --output alljoinchannel_config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;alljoinchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat alljoinchannel_config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; alljoinchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input alljoinchannel_config_update_in_envelope.json --type common.Envelope --output alljoinchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进到上一级目录`<span class="built_in">cd</span> ..`，之后运行命令将交易提交给排序服务进行通道配置的更新：</span></span><br><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/alljoinchannel_config_update_in_envelope.pb -c alljoinchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证，获取通道信息:</span></span><br><span class="line">peer channel getinfo -c alljoinchannel</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> 项目实践-供应链金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> channel </tag>
            
            <tag> 供应链金融 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发智能合约</title>
      <link href="2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%BC%80%E5%8F%91%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
      <url>2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%BC%80%E5%8F%91%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="开发智能合约">开发智能合约</h1><p>本次的智能合约从<a href="https://github.com/hyperledger/fabric-samples.git">fabric-samples</a>的<code>asset-transfer-basic/chaincode-go</code>拷贝然后进行了修改。</p><p>智能合约代码<code>smartcontract.go</code>如下：本文档更新不及时，可到<a href="https://github.com/guozhe001/supply-finance.git">源码地址</a>查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line">package chaincode</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;encoding/json&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line"></span><br><span class="line">&quot;github.com/golang/protobuf/ptypes&quot;</span><br><span class="line">&quot;github.com/hyperledger/fabric-contract-api-go/contractapi&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// SmartContract provides functions for managing an Asset</span><br><span class="line">type SmartContract struct &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Asset describes basic details of what makes up a simple asset</span><br><span class="line">type Asset struct &#123;</span><br><span class="line">ID           string    `json:&quot;ID&quot;`</span><br><span class="line">Issuer       string    `json:&quot;issuer&quot;`</span><br><span class="line">Owner        string    `json:&quot;owner&quot;`</span><br><span class="line">Amount       int64     `json:&quot;amount&quot;`</span><br><span class="line">CreateDate   time.Time `json:&quot;createDate&quot;`</span><br><span class="line">EndDate      time.Time `json:&quot;endDate&quot;`</span><br><span class="line">ContractHash string    `json:&quot;contractHash&quot;`</span><br><span class="line">InvoiceHash  string    `json:&quot;invoiceHash&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// IssueVoucher 发行凭证</span><br><span class="line">func (s *SmartContract) IssueVoucher(ctx contractapi.TransactionContextInterface, assetID string, amount int64, owner string, contractHash string, invoiceHash string) error &#123;</span><br><span class="line">// 创建资产</span><br><span class="line">return s.CreateAssetAndSave(ctx, assetID, amount, &quot;核心企业&quot;, owner, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// CreateAssetAndSave 创建资产并保存</span><br><span class="line">func (s *SmartContract) CreateAssetAndSave(ctx contractapi.TransactionContextInterface, id string, amount int64, issuerName string, owner string, contractHash string, invoiceHash string) error &#123;</span><br><span class="line">asset, err := s.createAsset(ctx, id, amount, issuerName, owner, contractHash, invoiceHash)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">return s.PutState(ctx, asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// createAsset issues a new asset to the world state with given details.</span><br><span class="line">func (s *SmartContract) createAsset(ctx contractapi.TransactionContextInterface, id string, amount int64, issuerName string, owner string, contractHash string, invoiceHash string) (*Asset, error) &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, id)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">if exists &#123;</span><br><span class="line">return nil, fmt.Errorf(&quot;the asset %s already exists&quot;, id)</span><br><span class="line">&#125;</span><br><span class="line">now, err := getNow(ctx)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">asset := Asset&#123;ID: id, Issuer: issuerName, Amount: amount, Owner: owner, CreateDate: now,</span><br><span class="line">EndDate: now.AddDate(0, 6, 0), ContractHash: contractHash, InvoiceHash: invoiceHash&#125;</span><br><span class="line">return &amp;asset, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取当前时间</span><br><span class="line">func getNow(ctx contractapi.TransactionContextInterface) (time.Time, error) &#123;</span><br><span class="line">now, err := ctx.GetStub().GetTxTimestamp()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return time.Now(), err</span><br><span class="line">&#125;</span><br><span class="line">return ptypes.Timestamp(now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ReadAsset returns the asset stored in the world state with given id.</span><br><span class="line">func (s *SmartContract) ReadAsset(ctx contractapi.TransactionContextInterface, id string) (*Asset, error) &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">if assetJSON == nil &#123;</span><br><span class="line">return nil, fmt.Errorf(&quot;the asset %s does not exist&quot;, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var asset Asset</span><br><span class="line">err = json.Unmarshal(assetJSON, &amp;asset)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return &amp;asset, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// AssetExists returns true when asset with given ID exists in world state</span><br><span class="line">func (s *SmartContract) AssetExists(ctx contractapi.TransactionContextInterface, id string) (bool, error) &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return false, fmt.Errorf(&quot;failed to read from world state: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return assetJSON != nil, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// TransferAssetByID 根据资产ID转账</span><br><span class="line">func (s *SmartContract) TransferAssetByID(ctx contractapi.TransactionContextInterface, id string, newID string, newOwner string, amount int64, contractHash string, invoiceHash string) error &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, id)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">return s.TransferAsset(ctx, asset, newID, newOwner, amount, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// TransferAsset updates the owner field of asset with given id in world state.</span><br><span class="line">func (s *SmartContract) TransferAsset(ctx contractapi.TransactionContextInterface, asset *Asset, newID string, newOwner string, amount int64, contractHash string, invoiceHash string) error &#123;</span><br><span class="line">// 如果金额刚好等于凭证资产的金额，直接更新凭证资产的拥有者</span><br><span class="line">if asset.Amount == amount &#123;</span><br><span class="line">asset.Owner = newOwner</span><br><span class="line">return s.PutState(ctx, asset)</span><br><span class="line">&#125; else if asset.Amount &gt; amount &#123; // 如果凭证资产的金额大于转账的金额，则创建一个新的资产</span><br><span class="line">if newID == &quot;&quot; &#123;</span><br><span class="line">return fmt.Errorf(&quot;转账金额小于资产的金额时，newID必须不能为空&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// 创建新的资产并保存</span><br><span class="line">err := s.CreateAssetAndSave(ctx, newID, amount, asset.Issuer, newOwner, contractHash, invoiceHash)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">// 更新旧资产的金额</span><br><span class="line">asset.Amount = asset.Amount - amount</span><br><span class="line">return s.PutState(ctx, asset)</span><br><span class="line">&#125; else if asset.Amount &lt; amount &#123; // 如果资产的额度小于要转账的金额，则直接报错</span><br><span class="line">return fmt.Errorf(&quot;转账金额=%d,不能超过资产的金额=%d&quot;, amount, asset.Amount)</span><br><span class="line">&#125;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// PutState 更新资产</span><br><span class="line">func (s *SmartContract) PutState(ctx contractapi.TransactionContextInterface, asset *Asset) error &#123;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">return ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// DelState 删除资产</span><br><span class="line">func (s *SmartContract) DelState(ctx contractapi.TransactionContextInterface, assetID string) error &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, assetID)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line">if !exists &#123;</span><br><span class="line">return fmt.Errorf(&quot;assetID=%s的资产不存在&quot;, assetID)</span><br><span class="line">&#125;</span><br><span class="line">return ctx.GetStub().DelState(assetID)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// GetAllAssets returns all assets found in world state</span><br><span class="line">func (s *SmartContract) GetAllAssets(ctx contractapi.TransactionContextInterface) ([]*Asset, error) &#123;</span><br><span class="line">// range query with empty string for startKey and endKey does an</span><br><span class="line">// open-ended query of all assets in the chaincode namespace.</span><br><span class="line">resultsIterator, err := ctx.GetStub().GetStateByRange(&quot;&quot;, &quot;&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">defer resultsIterator.Close()</span><br><span class="line"></span><br><span class="line">var assets []*Asset</span><br><span class="line">for resultsIterator.HasNext() &#123;</span><br><span class="line">queryResponse, err := resultsIterator.Next()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var asset Asset</span><br><span class="line">err = json.Unmarshal(queryResponse.Value, &amp;asset)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">assets = append(assets, &amp;asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return assets, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> 项目实践-供应链金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> 供应链金融 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环境变量设置</title>
      <link href="2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>以下所有的命令均在<code>supply-finance</code>目录下执行</p><h3 id="环境变量设置：">环境变量设置：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$&#123;PWD&#125;/bin:$PATH</span><br><span class="line">export FABRIC_CFG_PATH=$&#123;PWD&#125;/config</span><br><span class="line">configtxgen --help</span><br></pre></td></tr></table></figure><h3 id="核心企业GylCoreOrg1MSP-Admin：">核心企业GylCoreOrg1MSP,Admin：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;GylCoreOrg1MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/users/Admin@core.supply.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:8051</span><br></pre></td></tr></table></figure><h3 id="一级供应商GylFOrg1MSP-Admin：">一级供应商GylFOrg1MSP,Admin：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;GylFOrg1MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/users/Admin@f1.supply.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:8053</span><br></pre></td></tr></table></figure><h3 id="二级供应商1GylSOrg1MSP-Admin：">二级供应商1GylSOrg1MSP,Admin：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;GylSOrg1MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/users/Admin@s1.supply.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:8055</span><br></pre></td></tr></table></figure><h3 id="二级供应商2GylSOrg2MSP-Admin：">二级供应商2GylSOrg2MSP,Admin：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;GylSOrg2MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/users/Admin@s2.supply.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:8151</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> 项目实践-供应链金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> peer </tag>
            
            <tag> 供应链金融 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建网络</title>
      <link href="2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BA%E7%BD%91%E7%BB%9C/"/>
      <url>2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="创建网络">创建网络</h1><p>一个生产的fabric网络应该由各个组织自己保存自己的加密材料，测试环境为了演示在本地生成所有组织的加密材料。</p><h2 id="生成加密材料">生成加密材料</h2><h3 id="创建配置文件">创建配置文件</h3><p>创建<code>supply-finance</code>文件夹，配置<code>config/crypto-config.yaml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">OrdererOrgs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Orderer</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">supply.com</span></span><br><span class="line">    <span class="attr">Specs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">Hostname:</span> <span class="string">orderer</span></span><br><span class="line"><span class="attr">PeerOrgs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">gyl_core_org1</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">core.supply.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">gyl_f_org1</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">f1.supply.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">gyl_s_org1</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">s1.supply.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">gyl_s_org2</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">s2.supply.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="使用配置文件生成加密材料">使用配置文件生成加密材料</h3><p>使用下面的命令生成加密材料：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cryptogen generate --config=config/crypto-config.yaml --output=&quot;./organizations&quot;</span><br></pre></td></tr></table></figure><h4 id="使用加密材料生成创世纪区块">使用加密材料生成创世纪区块</h4><p>使用下面的命令生成系统创世纪区块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile TestOrgsOrdererGenesis -channelID system-channel -outputBlock ./system-genesis-block/genesis.block</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">esis.block</span><br><span class="line">2020-12-24 15:41:52.702 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2020-12-24 15:41:52.716 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 002 orderer type: etcdraft</span><br><span class="line">2020-12-24 15:41:52.716 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 003 Orderer.EtcdRaft.Options unset, setting to tick_interval:&quot;500ms&quot; election_tick:10 heartbeat_tick:1 max_inflight_blocks:5 snapshot_interval_size:16777216</span><br><span class="line">2020-12-24 15:41:52.716 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 004 Loaded configuration: /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/config/configtx.yaml</span><br><span class="line">2020-12-24 15:41:52.723 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 005 Generating genesis block</span><br><span class="line">2020-12-24 15:41:52.723 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 006 Creating system channel genesis block</span><br><span class="line">2020-12-24 15:41:52.724 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 007 Writing genesis block</span><br></pre></td></tr></table></figure><p><strong>遇到的错误信息：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-24 15:39:28.696 CST [common.tools.configtxgen] main -&gt; FATA 005 Error on outputBlock: could not create bootstrapper: could not create channel group: could not create orderer group: cannot marshal metadata for orderer type etcdraft: cannot load client cert for consenter orderer.supply.com:8050: open /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/cryptogen/crypto-config/ordererOrganizations/supply.com/orderers/orderer.supply.com/tls/server.crt: no such file or directory</span><br></pre></td></tr></table></figure><p><strong>错误原因：</strong><code>$FABRIC_CFG_PATH/configtx.yaml</code>配置的加密文件地址不正确</p><h2 id="启动网络">启动网络</h2><p>各个组织的加密材料生成之后，在本地docker环境启动这些组织的peer节点。</p><h3 id="配置docker-compose-yml文件">配置docker-compose.yml文件</h3><p>在<code>supply-finance</code>目录下添加<code>docker/docker-compose.yml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright IBM Corp. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">orderer.supply.com:</span></span><br><span class="line">  <span class="attr">peer0.core.supply.com:</span></span><br><span class="line">  <span class="attr">peer0.f1.supply.com:</span></span><br><span class="line">  <span class="attr">peer0.s1.supply.com:</span></span><br><span class="line">  <span class="attr">peer0.s2.supply.com:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">orderer.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">orderer.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-orderer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LISTENADDRESS=0.0.0.0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LISTENPORT=8050</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_GENESISMETHOD=file</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_BOOTSTRAPFILE=/etc/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOCALMSPID=OrdererMSP</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LEDGERTYPE=file</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:8443</span></span><br><span class="line">      <span class="comment"># enabled TLS</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/fabric/tls/ca.crt]</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_CLUSTER_ROOTCAS=[/etc/hyperledger/fabric/tls/ca.crt]</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">orderer</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../system-genesis-block/genesis.block:/etc/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">orderer.supply.com:/var/hyperledger/production/orderer</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8050</span><span class="string">:8050</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.core.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.core.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#Generic peer variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line">      <span class="comment"># Peer specific variabes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.core.supply.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.core.supply.com:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.core.supply.com:8052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.core.supply.com:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.core.supply.com:8051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=GylCoreOrg1MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.core.supply.com:/var/hyperledger/production</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8051</span><span class="string">:8051</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.f1.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.f1.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#Generic peer variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line">      <span class="comment"># Peer specific variabes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.f1.supply.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.f1.supply.com:8053</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:8053</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.f1.supply.com:8054</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8054</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.f1.supply.com:8053</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=GylFOrg1MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.f1.supply.com:/var/hyperledger/production</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8053</span><span class="string">:8053</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.s1.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.s1.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#Generic peer variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line">      <span class="comment"># Peer specific variabes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.s1.supply.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.s1.supply.com:8055</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:8055</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.s1.supply.com:8056</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8056</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.s1.supply.com:8055</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=GylSOrg1MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.s1.supply.com:/var/hyperledger/production</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8055</span><span class="string">:8055</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.s2.supply.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.s2.supply.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#Generic peer variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line">      <span class="comment"># Peer specific variabes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.s2.supply.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.s2.supply.com:8151</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:8151</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.s2.supply.com:8152</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8152</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.s2.supply.com:8151</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.s2.supply.com:8151</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=GylSOrg2MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../organizations:/tmp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.s2.supply.com:/var/hyperledger/production</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8151</span><span class="string">:8151</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><h3 id="使用docker-compose-yml配置文件启动各组织的服务">使用docker-compose.yml配置文件启动各组织的服务</h3><p>命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f ./docker/docker-compose.yml up -d</span><br></pre></td></tr></table></figure><p>启动之后会在docker启动下面这些容器：</p><ul><li><a href="http://orderer.supply.com">orderer.supply.com</a>:排序节点</li><li><a href="http://peer0.core.supply.com">peer0.core.supply.com</a>:核心企业节点</li><li><a href="http://peer0.f1.supply.com">peer0.f1.supply.com</a>:一级供应商节点</li><li><a href="http://peer0.s1.supply.com">peer0.s1.supply.com</a>:二级供应商1节点</li><li><a href="http://peer0.s2.supply.com">peer0.s2.supply.com</a>:二级供应商2节点</li></ul>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> 项目实践-供应链金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> 供应链金融 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隐秘交易.md</title>
      <link href="2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%9A%90%E7%A7%98%E4%BA%A4%E6%98%93/"/>
      <url>2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%9A%90%E7%A7%98%E4%BA%A4%E6%98%93/</url>
      
        <content type="html"><![CDATA[<p>自己开发的智能合约在channel上的所有成员都可以看到，这不符合现实世界中的交易规则。理论上两个组织之间的交易是不允许别人看到的。所以这次我使用fabric-samples提供的<code>asset-transfer-secured-agreement</code>来作为我的供应链金融区块链项目的chaincode。</p><h2 id="部署链码">部署链码</h2><h3 id="打包">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package secured_supply.5.tar.gz --path ./asset-transfer-secured-agreement/chaincode-go --lang golang --label secured_supply_15.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-每个peer都要安装：">安装链码包,每个peer都要安装：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install secured_supply.5.tar.gz</span><br></pre></td></tr></table></figure><h3 id="批准链码定义">批准链码定义</h3><h4 id="查看已经安装的chaincode">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=secured_supply_22.0:e815ca2d270dea029bc6992952140b1288a440aba8c430853f72eee7d5de24a7</span><br></pre></td></tr></table></figure><h4 id="批准链码定义，每个peer都要执行此命令：">批准链码定义，每个peer都要执行此命令：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name secured_supply --version 23.0 --package-id $CC_PACKAGE_ID --sequence 23 --signature-policy &quot;OR(&#x27;GylCoreOrg1MSP.member&#x27;,&#x27;GylFOrg1MSP.member&#x27;,&#x27;GylSOrg1MSP.member&#x27;,&#x27;GylSOrg2MSP.member&#x27;)&quot; --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道">将链码定义提交到通道</h3><h4 id="检查channel上的成员是否已经批准了链码定义：">检查channel上的成员是否已经批准了链码定义：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name secured_supply --version 23.0 --sequence 23 --signature-policy &quot;OR(&#x27;GylCoreOrg1MSP.member&#x27;,&#x27;GylFOrg1MSP.member&#x27;,&#x27;GylSOrg1MSP.member&#x27;,&#x27;GylSOrg2MSP.member&#x27;)&quot; --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><h4 id="在所有组织都批准之后，执行下面的命令将链码定义提交到通道：">在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name secured_supply --version 23.0 --sequence 23 --signature-policy &quot;OR(&#x27;GylCoreOrg1MSP.member&#x27;,&#x27;GylFOrg1MSP.member&#x27;,&#x27;GylSOrg1MSP.member&#x27;,&#x27;GylSOrg2MSP.member&#x27;)&quot; --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name secured_supply --output json</span><br></pre></td></tr></table></figure><h2 id="调用链码">调用链码</h2><h3 id="创建资产">创建资产</h3><p><em><strong>资产的内容需要打个问号，因为这个资产在后面需要被交易，如果资产的内容不能够修改那么合同和发票的hash应该不在资产的详细信息里面，这里先放这里后面再改</strong></em></p><p><em><strong>发行者能否放在外面而不是资产里面？哪种方式比较好呢？</strong></em></p><p>在核心企业的节点创建一个资产如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PROPERTIES=$(echo -n &quot;&#123;\&quot;objectType\&quot;:\&quot;asset_properties\&quot;,\&quot;assetID\&quot;:\&quot;asset011\&quot;,\&quot;issuer\&quot;:\&quot;GylCoreOrg1MSP\&quot;,\&quot;amount\&quot;:1000,\&quot;createDate\&quot;:\&quot;2020-01-11T06:57:06.963617Z\&quot;,\&quot;endDate\&quot;:\&quot;2021-07-11T06:57:06.963617Z\&quot;,\&quot;salt\&quot;:\&quot;224cba6c547aecc76ab6acfac41d12dfd96e7165\&quot;&#125;&quot; | base64 | tr -d \\n)</span><br></pre></td></tr></table></figure><p>在核心企业的节点上调用chaincode，创建资产：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;CreateAsset&quot;,&quot;Args&quot;:[&quot;asset011&quot;, &quot;A new asset for GylCoreOrg1MSP&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_properties\&quot;:\&quot;$ASSET_PROPERTIES\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>在私有数据集中查询刚才创建的资产：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset011&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><p>成功结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset_properties&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset010&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;amount&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-01-11T06:57:06.963617Z&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-07-11T06:57:06.963617Z&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;salt&quot;</span>: <span class="string">&quot;224cba6c547aecc76ab6acfac41d12dfd96e7165&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询账本来查看公共记录，所有在channel上的成员都可以查询得到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset010&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>返回结果，channel上的成员只能看到资产的部分信息，详细信息是无法看到的。：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset010&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;A new asset for GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;enable&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parentID&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="资产拥有者更改资产的公共信息">资产拥有者更改资产的公共信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ChangePublicDescription&quot;,&quot;Args&quot;:[&quot;asset010&quot;,&quot;This asset is for sale&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>上面的方法，在核心企业的peer节点返回日志如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021-01-07 16:07:43.589 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p>其他的组织如果想要调用这个链码的方法更改信息，则会报错，因为属于核心企业的资产别人不可以更改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:&quot;a client from GylFOrg1MSP cannot update the description of a asset owned by GylCoreOrg1MSP&quot;</span><br></pre></td></tr></table></figure><h3 id="资产交易">资产交易</h3><h4 id="允许出售资产">允许出售资产</h4><p>现在核心企业要与一级供应商交易核心企业的资产。首先核心企业与一级供应商要在链下对价格达成共识，并且核心企业要把资产的详情也通过链下的通道发送给一级供应商。之后买卖双方就可以对价格达成共识了。</p><h5 id="核心企业将资产的价格设置为1000：">核心企业将资产的价格设置为1000：</h5><p>下面的trade_id是合同的hash值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n &quot;&#123;\&quot;asset_id\&quot;:\&quot;asset007\&quot;,\&quot;trade_id\&quot;:\&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14\&quot;,\&quot;price\&quot;:1000&#125;&quot; | base64)</span><br><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;AgreeToSell&quot;,&quot;Args&quot;:[&quot;asset007&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>查询核心企业的私有数据集合来读取同意的销售价格：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetSalesPrice&quot;,&quot;Args&quot;:[&quot;asset007&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h5 id="一级供应商出价1000">一级供应商出价1000</h5><p>在一级供应商出价之前，他需要先验证资产的信息是否正确。此链码中返回true即为正确。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> ASSET_PROPERTIES=$(<span class="built_in">echo</span> -n <span class="string">&quot;&#123;\&quot;object_type\&quot;:\&quot;asset_properties\&quot;,\&quot;asset_id\&quot;:\&quot;asset006\&quot;,\&quot;issuer\&quot;:\&quot;GylCoreOrg1MSP\&quot;,\&quot;amount\&quot;:1000,\&quot;createDate\&quot;:\&quot;2020-01-11T06:57:06.963617Z\&quot;,\&quot;endDate\&quot;:\&quot;2021-07-11T06:57:06.963617Z\&quot;,\&quot;salt\&quot;:\&quot;224cba6c547aecc76ab6acfac41d12dfd96e7165\&quot;&#125;&quot;</span> | base64 | tr -d \\n)</span></span><br><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;VerifyAssetProperties&quot;,&quot;Args&quot;:[&quot;asset007&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_properties\&quot;:\&quot;$ASSET_PROPERTIES\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>验证通过之后，就对资产出价：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n &quot;&#123;\&quot;asset_id\&quot;:\&quot;asset007\&quot;,\&quot;trade_id\&quot;:\&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14\&quot;,\&quot;price\&quot;:1000&#125;&quot; | base64)</span><br><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;AgreeToBuy&quot;,&quot;Args&quot;:[&quot;asset007&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>可以在一级供应商的隐私数据集中查询到出价信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetBidPrice&quot;,&quot;Args&quot;:[&quot;asset007&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p><strong>如果在其他组织上查询，会看到如下错误，说明出价卖出设置的价格信息是隐秘的：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during query. response: status:500 message:&quot;asset price does not exist: asset001&quot;</span><br></pre></td></tr></table></figure><h4 id="核心企业把资产转移给一级供应商">核心企业把资产转移给一级供应商</h4><p>核心企业和一级供应商对相同的价格达成共识之后，核心企业就可以把资产转移给一级供应商了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset007&quot;,&quot;GylFOrg1MSP&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_properties\&quot;:\&quot;$ASSET_PROPERTIES\&quot;,\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>查询公共数据的资产归属以验证交易成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset001&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="交易验证">交易验证</h3><p>除了交易双方其他人无法查看到资产详情</p><h5 id="验证一级供应商可以修改自己的资产的公共属性：">验证一级供应商可以修改自己的资产的公共属性：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ChangePublicDescription&quot;,&quot;Args&quot;:[&quot;asset005&quot;,&quot;This asset is not for sale now&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>然后通过所有四个组织查询资产ID为asset005的公共信息如下，说明一级供应商已经获得了修改权限并修改了这个资产的公共信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset005&quot;]&#125;&#x27;|jq</span><br><span class="line">&#123;</span><br><span class="line">  &quot;objectType&quot;: &quot;asset&quot;,</span><br><span class="line">  &quot;assetID&quot;: &quot;asset005&quot;,</span><br><span class="line">  &quot;ownerOrg&quot;: &quot;GylFOrg1MSP&quot;,</span><br><span class="line">  &quot;publicDescription&quot;: &quot;This asset is not for sale now&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="验证核心企业不可以再修改这个资产的公共信息">验证核心企业不可以再修改这个资产的公共信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ChangePublicDescription&quot;,&quot;Args&quot;:[&quot;asset005&quot;,&quot;This asset is not for sale again&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>结果报错如下，符合预期：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:&quot;a client from GylCoreOrg1MSP cannot update the description of a asset owned by GylFOrg1MSP&quot;</span><br></pre></td></tr></table></figure><h5 id="验证只有一级供应商才可以查询这个资产的私有信息">验证只有一级供应商才可以查询这个资产的私有信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset005&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>结果如下，验证通过：</p><p>再一级供应商的peer节点可以查询到资产的私有属性，其他组织的peer节点都报错：<code>Error: endorsement failure during query. response: status:500 message:&quot;asset private details does not exist in client org's collection: asset005&quot;</code></p><h2 id="资产拆分">资产拆分</h2><h3 id="调用拆分方法">调用拆分方法</h3><p>完成资产的拆分chaincode的更新之后，调用拆分的方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;SplitAsset&quot;,&quot;Args&quot;:[&quot;asset010&quot;, &quot;500&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="验证拆分结果">验证拆分结果</h3><h4 id="私有数据验证">私有数据验证</h4><h5 id="第一个资产：">第一个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;objectType&quot;: &quot;asset_properties&quot;,</span><br><span class="line">  &quot;assetID&quot;: &quot;asset0101&quot;,</span><br><span class="line">  &quot;issuer&quot;: &quot;GylCoreOrg1MSP&quot;,</span><br><span class="line">  &quot;amount&quot;: 500,</span><br><span class="line">  &quot;createDate&quot;: &quot;2020-01-11T06:57:06.963617Z&quot;,</span><br><span class="line">  &quot;endDate&quot;: &quot;2021-07-11T06:57:06.963617Z&quot;,</span><br><span class="line">  &quot;salt&quot;: &quot;224cba6c547aecc76ab6acfac41d12dfd96e7165&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二个资产：">第二个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset0102&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset_properties&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset0102&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;amount&quot;</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-01-11T06:57:06.963617Z&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-07-11T06:57:06.963617Z&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;salt&quot;</span>: <span class="string">&quot;224cba6c547aecc76ab6acfac41d12dfd96e7165&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="原始的资产：">原始的资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset010&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><p>结果如下，原始资产已经没有了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during query. response: status:500 message:&quot;asset private details does not exist in client org&#x27;s collection: asset010&quot;</span><br></pre></td></tr></table></figure><h4 id="公共数据验证">公共数据验证</h4><h5 id="第一个资产：-v2">第一个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><p>结果如下，channel上的所有的组织都可以看到相同的数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset0101&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;A new asset for GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;enable&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parentID&quot;</span>: <span class="string">&quot;asset010&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二个资产：-v2">第二个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset0102&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset0102&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;A new asset for GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;enable&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parentID&quot;</span>: <span class="string">&quot;asset010&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="原始的资产：-v2">原始的资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset010&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><p>结果如下，chaincode有问题，拆分资产之后原始资产的状态应该改变：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset010&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;已拆分&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;delete&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parentID&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拆分后的资产交易">拆分后的资产交易</h2><h4 id="核心允许出售资产，价格设置为500：">核心允许出售资产，价格设置为500：</h4><p>下面的trade_id是合同的hash值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n &quot;&#123;\&quot;asset_id\&quot;:\&quot;asset0101\&quot;,\&quot;trade_id\&quot;:\&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14\&quot;,\&quot;price\&quot;:500&#125;&quot; | base64)</span><br><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;AgreeToSell&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>查询核心企业的私有数据集合来读取同意的销售价格：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetSalesPrice&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h5 id="一级供应商出价500">一级供应商出价500</h5><p>在一级供应商出价之前，他需要先验证资产的信息是否正确。此链码中返回true即为正确。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PROPERTIES=$(echo -n &quot;&#123;\&quot;objectType\&quot;:\&quot;asset_properties\&quot;,\&quot;assetID\&quot;:\&quot;asset0101\&quot;,\&quot;issuer\&quot;:\&quot;GylCoreOrg1MSP\&quot;,\&quot;amount\&quot;:500,\&quot;createDate\&quot;:\&quot;2020-01-11T06:57:06.963617Z\&quot;,\&quot;endDate\&quot;:\&quot;2021-07-11T06:57:06.963617Z\&quot;,\&quot;salt\&quot;:\&quot;224cba6c547aecc76ab6acfac41d12dfd96e7165\&quot;&#125;&quot; | base64 | tr -d \\n)</span><br><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;VerifyAssetProperties&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_properties\&quot;:\&quot;$ASSET_PROPERTIES\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>验证通过之后，就对资产出价：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n &quot;&#123;\&quot;asset_id\&quot;:\&quot;asset0101\&quot;,\&quot;trade_id\&quot;:\&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14\&quot;,\&quot;price\&quot;:500&#125;&quot; | base64)</span><br><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;AgreeToBuy&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>可以在一级供应商的隐私数据集中查询到出价信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetBidPrice&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p><strong>如果在其他组织上查询，会看到如下错误，说明出价卖出设置的价格信息是隐秘的：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during query. response: status:500 message:&quot;asset price does not exist: asset001&quot;</span><br></pre></td></tr></table></figure><h4 id="核心企业把资产转移给一级供应商-v2">核心企业把资产转移给一级供应商</h4><p>核心企业和一级供应商对相同的价格达成共识之后，核心企业就可以把资产转移给一级供应商了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset0101&quot;,&quot;GylFOrg1MSP&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_properties\&quot;:\&quot;$ASSET_PROPERTIES\&quot;,\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>查询公共数据的资产归属以验证交易成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset0101&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;GylFOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;A new asset for GylCoreOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;enable&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parentID&quot;</span>: <span class="string">&quot;asset010&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交易验证-v2">交易验证</h3><p>除了交易双方其他人无法查看到资产详情</p><h5 id="验证一级供应商可以修改自己的资产的公共属性：-v2">验证一级供应商可以修改自己的资产的公共属性：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ChangePublicDescription&quot;,&quot;Args&quot;:[&quot;asset0101&quot;,&quot;This asset is not for sale now&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>修改成功之后重新查询资产的公共信息，验证通过：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset0101&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;GylFOrg1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;This asset is not for sale now&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;enable&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parentID&quot;</span>: <span class="string">&quot;asset010&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="验证核心企业不可以再修改这个资产的公共信息-v2">验证核心企业不可以再修改这个资产的公共信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ChangePublicDescription&quot;,&quot;Args&quot;:[&quot;asset0101&quot;,&quot;This asset is not for sale again&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>结果报错如下，符合预期：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:&quot;a client from GylCoreOrg1MSP cannot update the description of a asset owned by GylFOrg1MSP&quot;</span><br></pre></td></tr></table></figure><h5 id="验证只有一级供应商才可以查询这个资产的私有信息-v2">验证只有一级供应商才可以查询这个资产的私有信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>结果如下，验证通过：</p><p>在一级供应商的peer节点可以查询到资产的私有属性，其他组织的peer节点都报错：<code>Error: endorsement failure during query. response: status:500 message:&quot;asset private details does not exist in client org's collection: asset005&quot;</code></p><h2 id="一级供应商与二级供应商交易">一级供应商与二级供应商交易</h2><p>调用拆分的方法，将资产拆分成200和300：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;SplitAsset&quot;,&quot;Args&quot;:[&quot;asset0101&quot;, &quot;200&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="验证拆分结果-v2">验证拆分结果</h3><h4 id="私有数据验证-v2">私有数据验证</h4><h5 id="第一个资产：-v3">第一个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset01011&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><h5 id="第二个资产：-v3">第二个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><h5 id="原始的资产，原始资产已经没有了：">原始的资产，原始资产已经没有了：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><h4 id="公共数据验证-v2">公共数据验证</h4><h5 id="第一个资产：-v4">第一个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset01011&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><h5 id="第二个资产：-v4">第二个资产：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><h5 id="原始的资产，拆分资产之后原始资产的状态应该改变：">原始的资产，拆分资产之后原始资产的状态应该改变：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset0101&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><h2 id="拆分后的资产交易-v2">拆分后的资产交易</h2><h4 id="一级供应商允许出售资产，设置价格：">一级供应商允许出售资产，设置价格：</h4><p>下面的trade_id是合同的hash值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n &quot;&#123;\&quot;asset_id\&quot;:\&quot;asset01012\&quot;,\&quot;trade_id\&quot;:\&quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb\&quot;,\&quot;price\&quot;:300&#125;&quot; | base64)</span><br><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;AgreeToSell&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>查询核心企业的私有数据集合来读取同意的销售价格：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetSalesPrice&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h5 id="二级供应商2出价300">二级供应商2出价300</h5><p>在二级供应商2出价之前，他需要先验证资产的信息是否正确。此链码中返回true即为正确。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PROPERTIES=$(echo -n &quot;&#123;\&quot;objectType\&quot;:\&quot;asset_properties\&quot;,\&quot;assetID\&quot;:\&quot;asset01012\&quot;,\&quot;issuer\&quot;:\&quot;GylCoreOrg1MSP\&quot;,\&quot;amount\&quot;:300,\&quot;createDate\&quot;:\&quot;2020-01-11T06:57:06.963617Z\&quot;,\&quot;endDate\&quot;:\&quot;2021-07-11T06:57:06.963617Z\&quot;,\&quot;salt\&quot;:\&quot;224cba6c547aecc76ab6acfac41d12dfd96e7165\&quot;&#125;&quot; | base64 | tr -d \\n)</span><br><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;VerifyAssetProperties&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_properties\&quot;:\&quot;$ASSET_PROPERTIES\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>验证通过之后，就对资产出价：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n &quot;&#123;\&quot;asset_id\&quot;:\&quot;asset01012\&quot;,\&quot;trade_id\&quot;:\&quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb\&quot;,\&quot;price\&quot;:300&#125;&quot; | base64)</span><br><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;AgreeToBuy&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>可以在一级供应商的隐私数据集中查询到出价信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetBidPrice&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p><strong>如果在其他组织上查询，会看到如下错误，说明出价卖出设置的价格信息是隐秘的：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during query. response: status:500 message:&quot;asset price does not exist: asset001&quot;</span><br></pre></td></tr></table></figure><h4 id="一级供应商把资产转移给二级供应商2">一级供应商把资产转移给二级供应商2</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset01012&quot;,&quot;GylSOrg2MSP&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_properties\&quot;:\&quot;$ASSET_PROPERTIES\&quot;,\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>查询公共数据的资产归属以验证交易成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset01012&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;GylSOrg2MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;This asset is not for sale now&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;enable&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parentID&quot;</span>: <span class="string">&quot;asset0101&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交易验证-v3">交易验证</h3><p>除了交易双方其他人无法查看到资产详情</p><h5 id="验证二级级供应商2可以修改自己的资产的公共属性：">验证二级级供应商2可以修改自己的资产的公共属性：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ChangePublicDescription&quot;,&quot;Args&quot;:[&quot;asset01012&quot;,&quot;hello i am GylSOrg2MSP&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>修改成功之后重新查询资产的公共信息，验证通过：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset01012&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;GylSOrg2MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;hello i am GylSOrg2MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;enable&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parentID&quot;</span>: <span class="string">&quot;asset0101&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="验证只有二级级供应商2才可以查询这个资产的私有信息">验证只有二级级供应商2才可以查询这个资产的私有信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>结果如下，验证通过：</p><p>在一级供应商的peer节点可以查询到资产的私有属性，其他组织的peer节点都报错：<code>Error: endorsement failure during query. response: status:500 message:&quot;asset private details does not exist in client org's collection: asset005&quot;</code></p><h2 id="chaincode接口记录">chaincode接口记录</h2><h3 id="查询卖出的交易信息">查询卖出的交易信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;QueryAssetSaleAgreements&quot;,&quot;Args&quot;:[]&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="查询资产的公共信息">查询资产的公共信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><h3 id="查询私有资产信息">查询私有资产信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure><h3 id="查询一个资产公共信息的历史数据">查询一个资产公共信息的历史数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply -c &#x27;&#123;&quot;function&quot;:&quot;QueryAssetHistory&quot;,&quot;Args&quot;:[&quot;asset01012&quot;]&#125;&#x27;|jq</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> 项目实践-供应链金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> peer </tag>
            
            <tag> 供应链金融 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署新的智能合约到channel</title>
      <link href="2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%88%B0channel/"/>
      <url>2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%88%B0channel/</url>
      
        <content type="html"><![CDATA[<h1 id="部署新的智能合约到channel">部署新的智能合约到channel</h1><h2 id="部署V1版本">部署V1版本</h2><h3 id="打包">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_1.0</span><br></pre></td></tr></table></figure><p>运行完上面的命令，查看当前目录会发现多了<code>supply.tar.gz</code>包，说明打包成功。</p><h3 id="安装链码包">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>安装成功输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:12:37.540 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 001 Installed remotely: response:&lt;status:200 payload:&quot;\nKsupply_1.0:7f51b70454bfcc78087a784c84288a67bbad56786e4007c3a7106491a492ad3a\022\nsupply_1.0&quot; &gt;</span><br><span class="line">2020-12-28 17:12:37.542 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 002 Chaincode code package identifier: supply_1.0:7f51b70454bfcc78087a784c84288a67bbad56786e4007c3a7106491a492ad3a</span><br></pre></td></tr></table></figure><h3 id="批准链码定义">批准链码定义</h3><h4 id="查看已经安装的chaincode">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Installed chaincodes on peer:</span><br><span class="line">Package ID: basic_1.0:4ec191e793b27e953ff2ede5a8bcc63152cecb1e4c3f301a26e22692c61967ad, Label: basic_1.0</span><br><span class="line">Package ID: supply_1.0:7f51b70454bfcc78087a784c84288a67bbad56786e4007c3a7106491a492ad3a, Label: supply_1.0</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_1.0:7f51b70454bfcc78087a784c84288a67bbad56786e4007c3a7106491a492ad3a</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v2">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 1.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:14:07.090 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [5c192d72135019a4bd6d444231fc95d41b6c7391cbc80a98cb67618f5e7a85c6] committed with status (VALID) at localhost:8053</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name supply --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;approvals&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;GylCoreOrg1MSP&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;GylFOrg1MSP&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:14:57.631 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [1c5e194c62a24b9fe78d51bd7003fce369f01a0b3051f63ed5e1f9ee4f6cf48b] committed with status (VALID) at localhost:8051</span><br><span class="line">2020-12-28 17:14:57.631 CST [chaincodeCmd] ClientWait -&gt; INFO 002 txid [1c5e194c62a24b9fe78d51bd7003fce369f01a0b3051f63ed5e1f9ee4f6cf48b] committed with status (VALID) at localhost:8053</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Committed chaincode definition for chaincode &#x27;supply&#x27; on channel &#x27;coreandfirstchannel&#x27;:</span><br><span class="line">Version: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [GylCoreOrg1MSP: true, GylFOrg1MSP: true]</span><br></pre></td></tr></table></figure><h3 id="调用链码">调用链码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;IssueVoucher&quot;,&quot;Args&quot;:[&quot;100&quot;, &quot;一级供应商&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>成功信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-25 17:26:22.583 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: could not assemble transaction: ProposalResponsePayloads do not match - proposal response: version:1 response:&lt;status:200 &gt; payload:&quot;\n \266\367\033\202\030f\357\010\266zg\350\237\212\313 \342B\2041\316\351&gt;H\037\035\312\274J\021i\220\022\266\002\n\237\002\0227\n\n_lifecycle\022)\n&#x27;\n!namespaces/fields/supply/Sequence\022\002\010\t\022\343\001\n\006supply\022\330\001\n\003\n\0011\032\320\001\n\0011\032\312\001&#123;\&quot;ID\&quot;:\&quot;1\&quot;,\&quot;issuer\&quot;:\&quot;\346\240\270\345\277\203\344\274\201\344\270\232\&quot;,\&quot;owner\&quot;:\&quot;\346\240\270\345\277\203\344\274\201\344\270\232\&quot;,\&quot;amount\&quot;:100,\&quot;createDate\&quot;:\&quot;2020-12-28T09:24:44.871052163Z\&quot;,\&quot;endDate\&quot;:\&quot;2021-06-28T09:24:44.871052228Z\&quot;,\&quot;contractHash\&quot;:\&quot;test\&quot;,\&quot;invoiceHash\&quot;:\&quot;test\&quot;&#125;\032\003\010\310\001\&quot;\r\022\006supply\032\0031.0&quot; endorsement:&lt;endorser:&quot;\n\013GylFOrg1MSP\022\212\006-----BEGIN CERTIFICATE-----\nMIICETCCAbegAwIBAgIRAKxyUt8FsMI4LRaMcjh08ZgwCgYIKoZIzj0EAwIwbTEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xFjAUBgNVBAoTDWYxLnN1cHBseS5jb20xGTAXBgNVBAMTEGNhLmYx\nLnN1cHBseS5jb20wHhcNMjAxMjI1MDkxNzAwWhcNMzAxMjIzMDkxNzAwWjBYMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEcMBoGA1UEAxMTcGVlcjAuZjEuc3VwcGx5LmNvbTBZMBMGByqGSM49\nAgEGCCqGSM49AwEHA0IABIChG5EnW6enlGqH2F9EiWYbilBwfA+KgqqxnN56njS5\ngv368PElfoafV6jCrjA+p2OnbTI3gO2/RAwr2WBLB0+jTTBLMA4GA1UdDwEB/wQE\nAwIHgDAMBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIHNOBiXoFslrjdFMBMzU7pNe\nI5pmxxrQGrWTdgfI0cetMAoGCCqGSM49BAMCA0gAMEUCIQDEOKc114LvsauKzrMR\n7k6ipg0HPM1+W8JJt06Jeqd1vwIgBre+xg2g/rS7F5oZaJpECUf7ALV0fy9/Dhw0\nYDB3H+g=\n-----END CERTIFICATE-----\n&quot; signature:&quot;0D\002 9\020\212\014\220\302Ao_\226n`o\005\354B\263\316\346\330\347\010\217\205^X\&quot;\267d\320U\365\002 \t&lt;\024e\324\312X\036\346=\025.I*A\311\223\013\301\276\320\232\366\246tZm\341g\223\235|&quot; &gt;</span><br></pre></td></tr></table></figure><p>原因应该是代码中使用了Now（）来创建当前时间，两个peer的当前时间可能会有一点误差导致了校验不通过。</p><p>**解决方案：**使用<code>ctx.GetStub().GetTxTimestamp()</code>来获取时间，这样所有的节点创建的时间都是一致的，详见<a href="https://stackoverflow.com/questions/55289283/hyperledger-fabric-error-could-not-assemble-transaction-proposalresponsepaylo/61727958">参考文档</a></p><h2 id="更新智能合约">更新智能合约</h2><h3 id="打包-v2">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> peer lifecycle chaincode package supply.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/fabric-samples/asset-transfer-basic/chaincode-go/ --lang golang --label supply_1.0</span></span><br></pre></td></tr></table></figure><p>打包本地的代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.5.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_5.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v2">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.5.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.5.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><h3 id="批准链码定义-v3">批准链码定义</h3><h4 id="查看已经安装的chaincode-v2">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_5.0:0006888ea72e1b318238518b719382d440ab72f2d2c45b22e674f4828b7f7f9c</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v4">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 5.0 --package-id $CC_PACKAGE_ID --sequence 5 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:58:55.313 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [c4974d5c90ae4fb3bd31f179292d9943dd05aac47248f33e365d9f32ccb5ccb6] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v2">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name supply --version 5.0 --sequence 5 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;approvals&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;GylCoreOrg1MSP&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;GylFOrg1MSP&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 5.0 --sequence 5 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:51:08.452 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [87bc060e5ccdf4014cd4cf34bbbeb5d2ea10c4ff8ebb6f444d10580e2de2da50] committed with status (VALID) at localhost:8053</span><br><span class="line">2020-12-28 17:51:08.460 CST [chaincodeCmd] ClientWait -&gt; INFO 002 txid [87bc060e5ccdf4014cd4cf34bbbeb5d2ea10c4ff8ebb6f444d10580e2de2da50] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下,可以看到已经升级到2.0版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Committed chaincode definition for chaincode &#x27;supply&#x27; on channel &#x27;coreandfirstchannel&#x27;:</span><br><span class="line">Version: 2.0, Sequence: 2, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [GylCoreOrg1MSP: true, GylFOrg1MSP: true]</span><br></pre></td></tr></table></figure><h3 id="调用链码-v2">调用链码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;IssueVoucher&quot;,&quot;Args&quot;:[&quot;asset001&quot;, &quot;100&quot;, &quot;一级供应商&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 18:37:54.285 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p><strong>错误信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: could not assemble transaction: proposal response was not successful, error code 500, msg Incorrect number of params. Expected 2, received 1 - proposal response: version:1 response:&lt;status:200 &gt; payload:&quot;\n \177\017\350[\344G6\010V\331\332\377\354\216&amp;\035\317&amp;\251[N`\023\036\033\237\237A\005\3670\260\022\266\002\n\237\002\0227\n\n_lifecycle\022)\n&#x27;\n!namespaces/fields/supply/Sequence\022\002\010\016\022\343\001\n\006supply\022\330\001\n\003\n\0011\032\320\001\n\0011\032\312\001&#123;\&quot;ID\&quot;:\&quot;1\&quot;,\&quot;issuer\&quot;:\&quot;\346\240\270\345\277\203\344\274\201\344\270\232\&quot;,\&quot;owner\&quot;:\&quot;\346\240\270\345\277\203\344\274\201\344\270\232\&quot;,\&quot;amount\&quot;:100,\&quot;createDate\&quot;:\&quot;2020-12-28T10:02:30.578872398Z\&quot;,\&quot;endDate\&quot;:\&quot;2021-06-28T10:02:30.578872527Z\&quot;,\&quot;contractHash\&quot;:\&quot;test\&quot;,\&quot;invoiceHash\&quot;:\&quot;test\&quot;&#125;\032\003\010\310\001\&quot;\r\022\006supply\032\0033.0&quot; endorsement:&lt;endorser:&quot;\n\016GylCoreOrg1MSP\022\222\006-----BEGIN CERTIFICATE-----\nMIICFjCCAbygAwIBAgIQU43L5gjtXO+uCpRP2jG2AjAKBggqhkjOPQQDAjBxMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEYMBYGA1UEChMPY29yZS5zdXBwbHkuY29tMRswGQYDVQQDExJjYS5j\nb3JlLnN1cHBseS5jb20wHhcNMjAxMjI1MDkxNzAwWhcNMzAxMjIzMDkxNzAwWjBa\nMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2Fu\nIEZyYW5jaXNjbzEeMBwGA1UEAxMVcGVlcjAuY29yZS5zdXBwbHkuY29tMFkwEwYH\nKoZIzj0CAQYIKoZIzj0DAQcDQgAErf3R+7XpNQpmTsMO+iM4WS7IrOoafiPbAS7Q\nbuFFR3Qs4riIczgSmjh9rOA6I1q2q0CstLhfWDbqpf+8fXPUlKNNMEswDgYDVR0P\nAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwKwYDVR0jBCQwIoAguznqsTisa64dNvOR\nvPwP0KGklWohNpbSe7VgIghx4L8wCgYIKoZIzj0EAwIDSAAwRQIhALIw1VMzezCg\n9LONbO4+V+weY42HQLbShkTP/gCFnGRYAiARyLLSDJIC2wwzSvOHNdm+aDRtbqGC\nNJenP9hmEbYsTw==\n-----END CERTIFICATE-----\n&quot; signature:&quot;0E\002!\000\251\370K6S\020\373\242\321\000\211\312\0001\333\365&gt;\314\324\231\020&gt;u;+\243\303dD\023\221\237\002 z \224\236R\355Z\251\202\363\035\304\365\212\277\235\375?\376\030\371\236\220\354iG6\244\334M\315\331&quot; &gt;</span><br></pre></td></tr></table></figure><p>原因是因为下图，只有一个组织的链码更新到了最新的版本。</p><p>![截屏2020-12-28 18.03.06](/Users/apple/Desktop/截屏2020-12-28 18.03.06.png)</p><p>**解决方案：**原因是因为设置环境变量<code>CC_PACKAGE_ID</code>时只设置了一个组织的peer，导致旧的环境变量还在生效，重新操作一遍问题解决。</p><h4 id="查询调用后的结果">查询调用后的结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C coreandfirstchannel -n supply -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>成功结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 核心企业</span></span><br><span class="line">[&#123;&quot;ID&quot;:&quot;asset001&quot;,&quot;issuer&quot;:&quot;核心企业&quot;,&quot;owner&quot;:&quot;核心企业&quot;,&quot;amount&quot;:100,&quot;createDate&quot;:&quot;2020-12-28T10:37:54.271518Z&quot;,&quot;endDate&quot;:&quot;2021-06-28T10:37:54.271518Z&quot;,&quot;contractHash&quot;:&quot;test&quot;,&quot;invoiceHash&quot;:&quot;test&quot;&#125;]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一级供应商</span></span><br><span class="line">[&#123;&quot;ID&quot;:&quot;asset001&quot;,&quot;issuer&quot;:&quot;核心企业&quot;,&quot;owner&quot;:&quot;核心企业&quot;,&quot;amount&quot;:100,&quot;createDate&quot;:&quot;2020-12-28T10:37:54.271518Z&quot;,&quot;endDate&quot;:&quot;2021-06-28T10:37:54.271518Z&quot;,&quot;contractHash&quot;:&quot;test&quot;,&quot;invoiceHash&quot;:&quot;test&quot;&#125;]</span><br></pre></td></tr></table></figure><h3 id="调用交易方法">调用交易方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset001&quot;, &quot;一级供应商&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>再次查询：<code>peer chaincode query -C coreandfirstchannel -n supply -c '&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;'</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 核心企业</span></span><br><span class="line">[&#123;&quot;ID&quot;:&quot;asset001&quot;,&quot;issuer&quot;:&quot;核心企业&quot;,&quot;owner&quot;:&quot;一级供应商&quot;,&quot;amount&quot;:100,&quot;createDate&quot;:&quot;2020-12-28T10:37:54.271518Z&quot;,&quot;endDate&quot;:&quot;2021-06-28T10:37:54.271518Z&quot;,&quot;contractHash&quot;:&quot;test&quot;,&quot;invoiceHash&quot;:&quot;test&quot;&#125;]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一级供应商</span></span><br><span class="line">[&#123;&quot;ID&quot;:&quot;asset001&quot;,&quot;issuer&quot;:&quot;核心企业&quot;,&quot;owner&quot;:&quot;一级供应商&quot;,&quot;amount&quot;:100,&quot;createDate&quot;:&quot;2020-12-28T10:37:54.271518Z&quot;,&quot;endDate&quot;:&quot;2021-06-28T10:37:54.271518Z&quot;,&quot;contractHash&quot;:&quot;test&quot;,&quot;invoiceHash&quot;:&quot;test&quot;&#125;]</span><br></pre></td></tr></table></figure><p>交易之后owner变成了一级供应商，没有问题。</p><h2 id="问题记录：">问题记录：</h2><p>虽然智能合约的代码编写方式如下，但是第二行的<code>TransferAsset</code>并没有执行，可能是因为第一个创建交易（CreateAsset）还没有成功，所以第二个交易（TransferAsset）没有这个资产所以没有执行？待确认</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建资产</span></span><br><span class="line">s.CreateAsset(ctx, assetID, amount)</span><br><span class="line">s.TransferAsset(ctx, assetID, owner)</span><br></pre></td></tr></table></figure><h2 id="部署v6版本的supply">部署v6版本的supply</h2><h3 id="v6版本智能合约源码如下：">v6版本智能合约源码如下：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chaincode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/golang/protobuf/ptypes&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-contract-api-go/contractapi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmartContract provides functions for managing an Asset</span></span><br><span class="line"><span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asset describes basic details of what makes up a simple asset</span></span><br><span class="line"><span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">ID           <span class="keyword">string</span>    <span class="string">`json:&quot;ID&quot;`</span></span><br><span class="line">Issuer       <span class="keyword">string</span>    <span class="string">`json:&quot;issuer&quot;`</span></span><br><span class="line">Owner        <span class="keyword">string</span>    <span class="string">`json:&quot;owner&quot;`</span></span><br><span class="line">Amount       <span class="keyword">int64</span>     <span class="string">`json:&quot;amount&quot;`</span></span><br><span class="line">CreateDate   time.Time <span class="string">`json:&quot;createDate&quot;`</span></span><br><span class="line">EndDate      time.Time <span class="string">`json:&quot;endDate&quot;`</span></span><br><span class="line">ContractHash <span class="keyword">string</span>    <span class="string">`json:&quot;contractHash&quot;`</span></span><br><span class="line">InvoiceHash  <span class="keyword">string</span>    <span class="string">`json:&quot;invoiceHash&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IssueVoucher 发行凭证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">IssueVoucher</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>, amount <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建资产</span></span><br><span class="line">asset, err := s.createAsset(ctx, assetID, amount, <span class="string">&quot;核心企业&quot;</span>, <span class="string">&quot;核心企业&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createAsset issues a new asset to the world state with given details.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">createAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;the asset %s already exists&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line">now, err := getNow(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">asset := Asset&#123;ID: id, Issuer: issuerName, Amount: amount, Owner: owner, CreateDate: now,</span><br><span class="line">EndDate: now.AddDate(<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>), ContractHash: <span class="string">&quot;test&quot;</span>, InvoiceHash: <span class="string">&quot;test&quot;</span>&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNow</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">(time.Time, error)</span></span> &#123;</span><br><span class="line">now, err := ctx.GetStub().GetTxTimestamp()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> time.Now(), err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ptypes.Timestamp(now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAsset returns the asset stored in the world state with given id.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">ReadAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;failed to read from world state: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> assetJSON == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;the asset %s does not exist&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(assetJSON, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AssetExists returns true when asset with given ID exists in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">AssetExists</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">&quot;failed to read from world state: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assetJSON != <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAsset updates the owner field of asset with given id in world state.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果金额刚好等于凭证资产的金额，直接更新凭证资产的拥有者</span></span><br><span class="line"><span class="keyword">if</span> asset.Amount == amount &#123;</span><br><span class="line">asset.Owner = newOwner</span><br><span class="line">err = s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &gt; amount &#123; <span class="comment">// 如果凭证资产的金额大于转账的金额，则创建一个新的资产</span></span><br><span class="line"><span class="comment">// 创建新的资产并保存</span></span><br><span class="line">newAsset, err := s.createAsset(ctx, asset.ID+<span class="string">&quot;1&quot;</span>, amount, asset.Issuer, newOwner)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">err = s.PutState(ctx, newAsset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新旧资产的金额</span></span><br><span class="line">asset.Amount = asset.Amount - amount</span><br><span class="line">err = s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &lt; amount &#123; <span class="comment">// 如果资产的额度小于要转账的金额，则直接报错</span></span><br><span class="line">err = fmt.Errorf(<span class="string">&quot;转账金额=%d,不能超过资产的金额=%d&quot;</span>, amount, asset.Amount)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PutState 更新资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">PutState</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetAllAssets returns all assets found in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetAllAssets</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">([]*Asset, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// range query with empty string for startKey and endKey does an</span></span><br><span class="line"><span class="comment">// open-ended query of all assets in the chaincode namespace.</span></span><br><span class="line">resultsIterator, err := ctx.GetStub().GetStateByRange(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resultsIterator.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> assets []*Asset</span><br><span class="line"><span class="keyword">for</span> resultsIterator.HasNext() &#123;</span><br><span class="line">queryResponse, err := resultsIterator.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(queryResponse.Value, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">assets = <span class="built_in">append</span>(assets, &amp;asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assets, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="打包-v3">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.6.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_6.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v3">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.6.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.6.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><h3 id="批准链码定义-v5">批准链码定义</h3><h4 id="查看已经安装的chaincode-v3">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_6.0:18a7379ed3b12a57961a735880a71bea3dd242c741fa0970f779b5a338f848de</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v6">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 6.0 --package-id $CC_PACKAGE_ID --sequence 6 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:58:55.313 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [c4974d5c90ae4fb3bd31f179292d9943dd05aac47248f33e365d9f32ccb5ccb6] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v3">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name supply --version 6.0 --sequence 6 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;approvals&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;GylCoreOrg1MSP&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;GylFOrg1MSP&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 6.0 --sequence 6 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>成功结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 17:51:08.452 CST [chaincodeCmd] ClientWait -&gt; INFO 001 txid [87bc060e5ccdf4014cd4cf34bbbeb5d2ea10c4ff8ebb6f444d10580e2de2da50] committed with status (VALID) at localhost:8053</span><br><span class="line">2020-12-28 17:51:08.460 CST [chaincodeCmd] ClientWait -&gt; INFO 002 txid [87bc060e5ccdf4014cd4cf34bbbeb5d2ea10c4ff8ebb6f444d10580e2de2da50] committed with status (VALID) at localhost:8051</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功结果如下,可以看到已经升级到2.0版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Committed chaincode definition for chaincode &#x27;supply&#x27; on channel &#x27;coreandfirstchannel&#x27;:</span><br><span class="line">Version: 2.0, Sequence: 2, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [GylCoreOrg1MSP: true, GylFOrg1MSP: true]</span><br></pre></td></tr></table></figure><h3 id="调用链码-v3">调用链码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;IssueVoucher&quot;,&quot;Args&quot;:[&quot;asset002&quot;, &quot;1000&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 10:59:48.513 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p><strong>错误信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:&quot;the asset asset001 already exists&quot;</span><br></pre></td></tr></table></figure><p>**解决方案：**原因是以内资产ID为asset001的资产已经存在，修改资产ID参数即可。</p><h4 id="查询调用后的结果-v2">查询调用后的结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C coreandfirstchannel -n supply -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>成功结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset001&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-28T10:37:54.271518Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-28T10:37:54.271518Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset002&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T02:59:48.495257Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T02:59:48.495257Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="调用交易方法-v2">调用交易方法</h3><p>把凭证资产拆分一部分（200）给一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset002&quot;, &quot;一级供应商&quot;, &quot;200&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>再次查询：<code>peer chaincode query -C coreandfirstchannel -n supply -c '&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;'</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;ID&quot;: &quot;asset001&quot;,</span><br><span class="line">    &quot;issuer&quot;: &quot;核心企业&quot;,</span><br><span class="line">    &quot;owner&quot;: &quot;一级供应商&quot;,</span><br><span class="line">    &quot;amount&quot;: 100,</span><br><span class="line">    &quot;createDate&quot;: &quot;2020-12-28T10:37:54.271518Z&quot;,</span><br><span class="line">    &quot;endDate&quot;: &quot;2021-06-28T10:37:54.271518Z&quot;,</span><br><span class="line">    &quot;contractHash&quot;: &quot;test&quot;,</span><br><span class="line">    &quot;invoiceHash&quot;: &quot;test&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;ID&quot;: &quot;asset002&quot;,</span><br><span class="line">    &quot;issuer&quot;: &quot;核心企业&quot;,</span><br><span class="line">    &quot;owner&quot;: &quot;核心企业&quot;,</span><br><span class="line">    &quot;amount&quot;: 800,</span><br><span class="line">    &quot;createDate&quot;: &quot;2020-12-29T02:59:48.495257Z&quot;,</span><br><span class="line">    &quot;endDate&quot;: &quot;2021-06-29T02:59:48.495257Z&quot;,</span><br><span class="line">    &quot;contractHash&quot;: &quot;test&quot;,</span><br><span class="line">    &quot;invoiceHash&quot;: &quot;test&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;ID&quot;: &quot;asset0021&quot;,</span><br><span class="line">    &quot;issuer&quot;: &quot;核心企业&quot;,</span><br><span class="line">    &quot;owner&quot;: &quot;一级供应商&quot;,</span><br><span class="line">    &quot;amount&quot;: 200,</span><br><span class="line">    &quot;createDate&quot;: &quot;2020-12-29T03:02:49.495789Z&quot;,</span><br><span class="line">    &quot;endDate&quot;: &quot;2021-06-29T03:02:49.495789Z&quot;,</span><br><span class="line">    &quot;contractHash&quot;: &quot;test&quot;,</span><br><span class="line">    &quot;invoiceHash&quot;: &quot;test&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>交易之后，核心企业剩余800的凭证，一级供应商获得一个新的凭证。验证无误。</p><h2 id="部署v7版本的supply">部署v7版本的supply</h2><h3 id="v7版本智能合约源码如下：">v7版本智能合约源码如下：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chaincode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/golang/protobuf/ptypes&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-contract-api-go/contractapi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmartContract provides functions for managing an Asset</span></span><br><span class="line"><span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asset describes basic details of what makes up a simple asset</span></span><br><span class="line"><span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">ID           <span class="keyword">string</span>    <span class="string">`json:&quot;ID&quot;`</span></span><br><span class="line">Issuer       <span class="keyword">string</span>    <span class="string">`json:&quot;issuer&quot;`</span></span><br><span class="line">Owner        <span class="keyword">string</span>    <span class="string">`json:&quot;owner&quot;`</span></span><br><span class="line">Amount       <span class="keyword">int64</span>     <span class="string">`json:&quot;amount&quot;`</span></span><br><span class="line">CreateDate   time.Time <span class="string">`json:&quot;createDate&quot;`</span></span><br><span class="line">EndDate      time.Time <span class="string">`json:&quot;endDate&quot;`</span></span><br><span class="line">ContractHash <span class="keyword">string</span>    <span class="string">`json:&quot;contractHash&quot;`</span></span><br><span class="line">InvoiceHash  <span class="keyword">string</span>    <span class="string">`json:&quot;invoiceHash&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IssueVoucher 发行凭证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">IssueVoucher</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>, amount <span class="keyword">int64</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建资产</span></span><br><span class="line"><span class="keyword">return</span> s.CreateAssetAndSave(ctx, assetID, amount, <span class="string">&quot;核心企业&quot;</span>, owner, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateAssetAndSave 创建资产并保存</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">CreateAssetAndSave</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.createAsset(ctx, id, amount, issuerName, owner, contractHash, invoiceHash)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createAsset issues a new asset to the world state with given details.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">createAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;the asset %s already exists&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line">now, err := getNow(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">asset := Asset&#123;ID: id, Issuer: issuerName, Amount: amount, Owner: owner, CreateDate: now,</span><br><span class="line">EndDate: now.AddDate(<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>), ContractHash: contractHash, InvoiceHash: invoiceHash&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNow</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">(time.Time, error)</span></span> &#123;</span><br><span class="line">now, err := ctx.GetStub().GetTxTimestamp()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> time.Now(), err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ptypes.Timestamp(now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAsset returns the asset stored in the world state with given id.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">ReadAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;failed to read from world state: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> assetJSON == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;the asset %s does not exist&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(assetJSON, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AssetExists returns true when asset with given ID exists in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">AssetExists</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">&quot;failed to read from world state: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assetJSON != <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAssetByID 根据资产ID转账</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAssetByID</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.TransferAsset(ctx, asset, newOwner, amount, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAsset updates the owner field of asset with given id in world state.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果金额刚好等于凭证资产的金额，直接更新凭证资产的拥有者</span></span><br><span class="line"><span class="keyword">if</span> asset.Amount == amount &#123;</span><br><span class="line">asset.Owner = newOwner</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &gt; amount &#123; <span class="comment">// 如果凭证资产的金额大于转账的金额，则创建一个新的资产</span></span><br><span class="line"><span class="comment">// 创建新的资产并保存</span></span><br><span class="line">err := s.CreateAssetAndSave(ctx, asset.ID+<span class="string">&quot;1&quot;</span>, amount, asset.Issuer, newOwner, contractHash, invoiceHash)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新旧资产的金额</span></span><br><span class="line">asset.Amount = asset.Amount - amount</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &lt; amount &#123; <span class="comment">// 如果资产的额度小于要转账的金额，则直接报错</span></span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;转账金额=%d,不能超过资产的金额=%d&quot;</span>, amount, asset.Amount)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PutState 更新资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">PutState</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetAllAssets returns all assets found in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetAllAssets</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">([]*Asset, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// range query with empty string for startKey and endKey does an</span></span><br><span class="line"><span class="comment">// open-ended query of all assets in the chaincode namespace.</span></span><br><span class="line">resultsIterator, err := ctx.GetStub().GetStateByRange(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resultsIterator.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> assets []*Asset</span><br><span class="line"><span class="keyword">for</span> resultsIterator.HasNext() &#123;</span><br><span class="line">queryResponse, err := resultsIterator.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(queryResponse.Value, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">assets = <span class="built_in">append</span>(assets, &amp;asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assets, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="打包-v4">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.7.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_7.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v4">安装链码包</h3><p>一级供应商和核心企业都要安装：<br>核心企业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.7.tar.gz --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>一级供应商：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.7.tar.gz --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><h3 id="批准链码定义-v7">批准链码定义</h3><h4 id="查看已经安装的chaincode-v4">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_7.0:770f0c8f4fe3a348314f546594d402ccb3eb5f5779f12e7edee48f6ce474227b</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v8">批准链码定义</h4><p>核心企业和一级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 7.0 --package-id $CC_PACKAGE_ID --sequence 7 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v4">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID coreandfirstchannel --name supply --version 7.0 --sequence 7 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在两个组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID coreandfirstchannel --name supply --version 7.0 --sequence 7 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID coreandfirstchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v4">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shasum -a 256 CORE_AND_F1_CONTRACT.txt &gt; core_and_f1_contract_hash.txt</span><br><span class="line">shasum -a 256 CORE_AND_F1_INVOICE.txt &gt; CORE_AND_F1_INVOICE_hash.txt</span><br></pre></td></tr></table></figure><h4 id="发行凭证">发行凭证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;IssueVoucher&quot;,&quot;Args&quot;:[&quot;asset003&quot;, &quot;1000&quot;, &quot;一级供应商&quot;, &quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;, &quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h4 id="查询调用后的结果-v3">查询调用后的结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C coreandfirstchannel -n supply -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>成功结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset001&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-28T10:37:54.271518Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-28T10:37:54.271518Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset002&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T02:59:48.495257Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T02:59:48.495257Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset0021&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T03:02:49.495789Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T03:02:49.495789Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset003&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T06:20:30.868298Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T06:20:30.868298Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>ID为asset003的资产归属为一级供应商，金额无误。</p><h2 id="创建一级供应商与二级供应商之间的channel">创建一级供应商与二级供应商之间的channel</h2><h3 id="创建通道：">创建通道：</h3><p>运行下面的程序来为<code>firstandsecondchannel</code>通道创建一个“创建通道的交易”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile FirstAndSecondChannel -outputCreateChannelTx ./channel-artifacts/firstandsecondchannel.tx -channelID firstandsecondchannel</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:27:37.416 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2020-12-29 14:27:37.430 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/config/configtx.yaml</span><br><span class="line">2020-12-29 14:27:37.430 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 003 Generating new channel configtx</span><br><span class="line">2020-12-29 14:27:37.436 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 004 Writing new channel tx</span><br></pre></td></tr></table></figure><p>设置环境变量，以一级供应商管理员身份操作<code>peer</code>CLI，使用下面的命令把交易发给order服务创建通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel create -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c firstandsecondchannel -f ./channel-artifacts/firstandsecondchannel.tx --outputBlock ./channel-artifacts/firstandsecondchannel.block --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: got unexpected status: BAD_REQUEST -- error validating channel creation transaction for new channel &#x27;firstandsecondchannel&#x27;, could not successfully apply update to template configuration: error authorizing update: error validating DeltaSet: policy for [Group]  /Channel/Application not satisfied: implicit policy evaluation failed - 0 sub-policies were satisfied, but this policy requires 1 of the &#x27;Admins&#x27; sub-policies to be satisfied</span><br></pre></td></tr></table></figure><p><strong>错误原因和解决方案：</strong></p><p>由于配置文件里面配置的firstandsecondchannel里面包含一级供应商和两个二级供应商，而上面的命令是以核心企业的管理员身份运行的。所以有问题。切换成一级供应商的环境执行即可。</p><p>正确执行之后的日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:34:06.203 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:06.231 CST [cli.common] readBlock -&gt; INFO 002 Expect block, but got status: &amp;&#123;NOT_FOUND&#125;</span><br><span class="line">2020-12-29 14:34:06.244 CST [channelCmd] InitCmdFactory -&gt; INFO 003 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:06.450 CST [cli.common] readBlock -&gt; INFO 004 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-29 14:34:06.458 CST [channelCmd] InitCmdFactory -&gt; INFO 005 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:06.667 CST [cli.common] readBlock -&gt; INFO 006 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-29 14:34:06.676 CST [channelCmd] InitCmdFactory -&gt; INFO 007 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:06.885 CST [cli.common] readBlock -&gt; INFO 008 Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-29 14:34:06.892 CST [channelCmd] InitCmdFactory -&gt; INFO 009 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:07.099 CST [cli.common] readBlock -&gt; INFO 00a Expect block, but got status: &amp;&#123;SERVICE_UNAVAILABLE&#125;</span><br><span class="line">2020-12-29 14:34:07.108 CST [channelCmd] InitCmdFactory -&gt; INFO 00b Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:34:07.320 CST [cli.common] readBlock -&gt; INFO 00c Received block: 0</span><br></pre></td></tr></table></figure><h2 id="把一级供应商和二级供应商的peer加入通道">把一级供应商和二级供应商的peer加入通道</h2><h3 id="一级供应商的peer加入通道">一级供应商的peer加入通道</h3><p>使用下面的命令将peer加入通道</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/firstandsecondchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:35:00.679 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:35:00.724 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><h3 id="通过获取通道信息确认加入成功">通过获取通道信息确认加入成功</h3><h4 id="获取通道信息">获取通道信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel getinfo -c firstandsecondchannel</span><br></pre></td></tr></table></figure><p>可以看到如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:35:28.593 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;&quot;height&quot;:1,&quot;currentBlockHash&quot;:&quot;270CWtnSyXJmeGCxJx41sX7uTchRZpljYWKJ48dD434=&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="二级供应商1加入通道">二级供应商1加入通道</h3><p>设置环境变量，然后拉取通道的创世纪区块(因为是测试本次忽略)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch 0 ./channel-artifacts/coreandfirstchannel.block -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>加入通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/firstandsecondchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:47:03.684 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:47:03.722 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><p><strong>报错信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">supply-finance apple$ peer channel join -b ./channel-artifacts/coreandfirstchannel.block</span><br><span class="line">2020-12-29 14:43:56.186 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Error: proposal failed (err: rpc error: code = Unknown desc = error validating proposal: access denied: channel [] creator org [GylSOrg1M])</span><br></pre></td></tr></table></figure><p>**错误原因：**由于环境变量设置的有问题，<code>CORE_PEER_LOCALMSPID</code>设置成了<code>GylSOrg1M</code>，应该设置为<code>GylSOrg1MSP</code></p><h3 id="二级供应商2加入通道">二级供应商2加入通道</h3><p>设置环境变量，然后拉取通道的创世纪区块(因为是测试本次忽略)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch 0 ./channel-artifacts/coreandfirstchannel.block -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com -c coreandfirstchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>加入通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/firstandsecondchannel.block</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:52:12.969 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:52:13.010 CST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><h3 id="设置锚节点">设置锚节点</h3><h4 id="为GylFOrg1MSP设置锚节点">为GylFOrg1MSP设置锚节点</h4><h5 id="拉取最新的channel配置区块">拉取最新的channel配置区块</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/firstandsecondchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c firstandsecondchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:55:57.114 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:55:57.120 CST [cli.common] readBlock -&gt; INFO 002 Received block: 0</span><br><span class="line">2020-12-29 14:55:57.120 CST [channelCmd] fetch -&gt; INFO 003 Retrieving last config block: 0</span><br><span class="line">2020-12-29 14:55:57.125 CST [cli.common] readBlock -&gt; INFO 004 Received block: 0</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_block.pb --type common.Block --output firstandsecondchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config firstandsecondchannel_config_block.json &gt; firstandsecondchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp firstandsecondchannel_config.json firstandsecondchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylFOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq &#x27;.channel_group.groups.Application.groups.GylFOrg1MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.f1.supply.com&quot;,&quot;port&quot;: 8053&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; firstandsecondchannel_config_copy.json &gt; modified_firstandsecondchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input firstandsecondchannel_config.json --type common.Config --output firstandsecondchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_firstandsecondchannel_config.json --type common.Config --output modified_firstandsecondchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id firstandsecondchannel --original firstandsecondchannel_config.pb --updated modified_firstandsecondchannel_config.pb --output firstandsecondchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_update.pb --type common.ConfigUpdate --output firstandsecondchannel_config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;firstandsecondchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat firstandsecondchannel_config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; firstandsecondchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input firstandsecondchannel_config_update_in_envelope.json --type common.Envelope --output firstandsecondchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/firstandsecondchannel_config_update_in_envelope.pb -c firstandsecondchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:57:48.872 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 14:57:48.894 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息-peer-channel-getinfo-c-firstandsecondchannel">验证，获取通道信息:<code>peer channel getinfo -c firstandsecondchannel</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 14:58:15.937 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;&quot;height&quot;:2,&quot;currentBlockHash&quot;:&quot;4lhXvhRKDNxBsOIGL0H0A5QDdNkySgv/ehtUkobtW9Y=&quot;,&quot;previousBlockHash&quot;:&quot;270CWtnSyXJmeGCxJx41sX7uTchRZpljYWKJ48dD434=&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="为二级供应商1（GylSOrg1MSP）设置锚节点">为二级供应商1（GylSOrg1MSP）设置锚节点</h4><p>修改环境变量，拉取最新的channel配置区块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/firstandsecondchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c firstandsecondchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块-v2">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_block.pb --type common.Block --output firstandsecondchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config firstandsecondchannel_config_block.json &gt; firstandsecondchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp firstandsecondchannel_config.json firstandsecondchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylCoreOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq &#x27;.channel_group.groups.Application.groups.GylSOrg1MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.s1.supply.com&quot;,&quot;port&quot;: 8055&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; firstandsecondchannel_config_copy.json &gt; modified_firstandsecondchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input firstandsecondchannel_config.json --type common.Config --output firstandsecondchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_firstandsecondchannel_config.json --type common.Config --output modified_firstandsecondchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id firstandsecondchannel --original firstandsecondchannel_config.pb --updated modified_firstandsecondchannel_config.pb --output firstandsecondchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：-v2">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_update.pb --type common.ConfigUpdate --output firstandsecondchannel_config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;firstandsecondchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat firstandsecondchannel_config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; firstandsecondchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input firstandsecondchannel_config_update_in_envelope.json --type common.Envelope --output firstandsecondchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”-v2">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/firstandsecondchannel_config_update_in_envelope.pb -c firstandsecondchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 15:01:14.643 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 15:01:14.670 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息">验证，获取通道信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer channel getinfo -c firstandsecondchannel</span><br><span class="line">2020-12-29 15:01:26.952 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;&quot;height&quot;:3,&quot;currentBlockHash&quot;:&quot;DPXkm090OpH9ww862WmR4EktxT0NHEM2i3Py0yHAGPE=&quot;,&quot;previousBlockHash&quot;:&quot;4lhXvhRKDNxBsOIGL0H0A5QDdNkySgv/ehtUkobtW9Y=&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="为二级供应商2（GylSOrg2MSP）设置锚节点">为二级供应商2（GylSOrg2MSP）设置锚节点</h4><p>修改环境变量，拉取最新的channel配置区块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/firstandsecondchannel_config_block.pb -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -c firstandsecondchannel --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h5 id="修改通道配置区块-v3">修改通道配置区块</h5><p>切换到<code>channel-artifacts</code>然后把区块内容转换成json格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_block.pb --type common.Block --output firstandsecondchannel_config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config firstandsecondchannel_config_block.json &gt; firstandsecondchannel_config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> copy一份</span></span><br><span class="line">cp firstandsecondchannel_config.json firstandsecondchannel_config_copy.json</span><br></pre></td></tr></table></figure><p>使用<code>jq</code> 工具来添加GylCoreOrg1MSP组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq &#x27;.channel_group.groups.Application.groups.GylSOrg2MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.s2.supply.com&quot;,&quot;port&quot;: 8151&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; firstandsecondchannel_config_copy.json &gt; modified_firstandsecondchannel_config.json</span><br></pre></td></tr></table></figure><p>将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input firstandsecondchannel_config.json --type common.Config --output firstandsecondchannel_config.pb</span><br><span class="line">configtxlator proto_encode --input modified_firstandsecondchannel_config.json --type common.Config --output modified_firstandsecondchannel_config.pb</span><br><span class="line">configtxlator compute_update --channel_id firstandsecondchannel --original firstandsecondchannel_config.pb --updated modified_firstandsecondchannel_config.pb --output firstandsecondchannel_config_update.pb</span><br></pre></td></tr></table></figure><h5 id="把更新后的交易打包成一个更新通道配置的交易：-v3">把更新后的交易打包成一个更新通道配置的交易：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input firstandsecondchannel_config_update.pb --type common.ConfigUpdate --output firstandsecondchannel_config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;firstandsecondchannel&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat firstandsecondchannel_config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; firstandsecondchannel_config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input firstandsecondchannel_config_update_in_envelope.json --type common.Envelope --output firstandsecondchannel_config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><h5 id="提交“更新通道配置的交易”-v3">提交“更新通道配置的交易”</h5><p>进到上一级目录<code>cd ..</code>，之后运行命令将交易提交给排序服务进行通道配置的更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">peer channel update -f channel-artifacts/firstandsecondchannel_config_update_in_envelope.pb -c firstandsecondchannel -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p>执行成功的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-29 15:03:39.793 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-29 15:03:39.817 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><h5 id="验证，获取通道信息-v2">验证，获取通道信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer channel getinfo -c firstandsecondchannel</span><br><span class="line">2020-12-29 15:04:10.414 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;&quot;height&quot;:4,&quot;currentBlockHash&quot;:&quot;PWXXje7tci4mk1ggQ9QMVzkvkP3i+N8WslOGDXreIQ0=&quot;,&quot;previousBlockHash&quot;:&quot;DPXkm090OpH9ww862WmR4EktxT0NHEM2i3Py0yHAGPE=&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="部署supply-v7到二级供应商的peer节点">部署supply-v7到二级供应商的peer节点</h2><h3 id="打包-v5">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.7.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_7.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v5">安装链码包</h3><p>两个二级供应商都要安装：<br>二级供应商1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.7.tar.gz --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>二级供应商2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install supply.7.tar.gz --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><h3 id="批准链码定义-v9">批准链码定义</h3><h4 id="查看已经安装的chaincode-v5">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_7.0:770f0c8f4fe3a348314f546594d402ccb3eb5f5779f12e7edee48f6ce474227b</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v10">批准链码定义</h4><p>一级供应商和两个二级供应商都需要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID firstandsecondchannel --name supply --version 7.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v5">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID firstandsecondchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID firstandsecondchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID firstandsecondchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID firstandsecondchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt</span><br><span class="line">Error: proposal failed with status: 500 - channel &#x27;firstandsecondchannel&#x27; not found</span><br></pre></td></tr></table></figure><p>**错误原因：**由于批准的组织中包含核心企业，核心企业并没有加入<code>firstandsecondchannel</code>通道，所以报错。</p><h3 id="调用链码-v5">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><p>调用转账交易：TODO 问题来了，两个channel之间如何交换资产？这是个问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com -C firstandsecondchannel -n supply --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;IssueVoucher&quot;,&quot;Args&quot;:[&quot;asset003&quot;, &quot;1000&quot;, &quot;一级供应商&quot;, &quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;, &quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C firstandsecondchannel -n supply -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h2 id="核心企业、一级和二级供应商加入同一个channel">核心企业、一级和二级供应商加入同一个channel</h2><p>查看<a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BAchannel/">创建channel</a></p><h2 id="部署supply-v7到alljoinchannel通道">部署supply-v7到alljoinchannel通道</h2><h3 id="打包-v6">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> peer lifecycle chaincode package supply.7.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_7.0</span></span><br></pre></td></tr></table></figure><h3 id="安装链码包-v6">安装链码包</h3><p>每个peer都要安装：<code>peer lifecycle chaincode install supply.7.tar.gz</code></p><h3 id="批准链码定义-v11">批准链码定义</h3><h4 id="查看已经安装的chaincode-v6">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_7.0:770f0c8f4fe3a348314f546594d402ccb3eb5f5779f12e7edee48f6ce474227b</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v12">批准链码定义</h4><p>每个peer都要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 7.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v6">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 7.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v6">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9  CORE_AND_F1_INVOICE.txt</span><br><span class="line">93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14  CORE_AND_F1_CONTRACT.txt</span><br><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><h4 id="发行凭证-v2">发行凭证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;IssueVoucher&quot;,&quot;Args&quot;:[&quot;asset003&quot;, &quot;1000&quot;, &quot;一级供应商&quot;, &quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;, &quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h4 id="查询资产">查询资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset003&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T10:07:43.665003Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T10:07:43.665003Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商1交易">一级供应商与二级供应商1交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAssetByID&quot;,&quot;Args&quot;:[&quot;asset003&quot;, &quot;二级供应商1&quot;, &quot;500&quot;, &quot;76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a&quot;, &quot;792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h4 id="查询资产-v2">查询资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset003&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T10:07:43.665003Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T10:07:43.665003Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset0031&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;二级供应商1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T10:12:37.227293Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T10:12:37.227293Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商2交易">一级供应商与二级供应商2交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAssetByID&quot;,&quot;Args&quot;:[&quot;asset003&quot;, &quot;二级供应商2&quot;, &quot;300&quot;, &quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb&quot;, &quot;f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:&quot;the asset asset0031 already exists&quot;</span><br></pre></td></tr></table></figure><p>原因如下：如果同一个资产ID交易两次，则会出现资产ID重复的问题；代码bug。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err := s.CreateAssetAndSave(ctx, asset.ID+<span class="string">&quot;1&quot;</span>, amount, asset.Issuer, newOwner, contractHash, invoiceHash)</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商2交易-v2">一级供应商与二级供应商2交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAssetByID&quot;,&quot;Args&quot;:[&quot;asset0031&quot;, &quot;二级供应商2&quot;, &quot;300&quot;, &quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb&quot;, &quot;f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>查询资产，结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset003&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T10:07:43.665003Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T10:07:43.665003Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset0031&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;二级供应商1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T10:12:37.227293Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T10:12:37.227293Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset00311&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;二级供应商2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-29T10:17:26.148125Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-29T10:17:26.148125Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="部署supply-v8到alljoinchannel通道">部署supply-v8到alljoinchannel通道</h2><h3 id="源码">源码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chaincode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/golang/protobuf/ptypes&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-contract-api-go/contractapi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmartContract provides functions for managing an Asset</span></span><br><span class="line"><span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asset describes basic details of what makes up a simple asset</span></span><br><span class="line"><span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">ID           <span class="keyword">string</span>    <span class="string">`json:&quot;ID&quot;`</span></span><br><span class="line">Issuer       <span class="keyword">string</span>    <span class="string">`json:&quot;issuer&quot;`</span></span><br><span class="line">Owner        <span class="keyword">string</span>    <span class="string">`json:&quot;owner&quot;`</span></span><br><span class="line">Amount       <span class="keyword">int64</span>     <span class="string">`json:&quot;amount&quot;`</span></span><br><span class="line">CreateDate   time.Time <span class="string">`json:&quot;createDate&quot;`</span></span><br><span class="line">EndDate      time.Time <span class="string">`json:&quot;endDate&quot;`</span></span><br><span class="line">ContractHash <span class="keyword">string</span>    <span class="string">`json:&quot;contractHash&quot;`</span></span><br><span class="line">InvoiceHash  <span class="keyword">string</span>    <span class="string">`json:&quot;invoiceHash&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IssueVoucher 发行凭证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">IssueVoucher</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>, amount <span class="keyword">int64</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建资产</span></span><br><span class="line"><span class="keyword">return</span> s.CreateAssetAndSave(ctx, assetID, amount, <span class="string">&quot;核心企业&quot;</span>, owner, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateAssetAndSave 创建资产并保存</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">CreateAssetAndSave</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.createAsset(ctx, id, amount, issuerName, owner, contractHash, invoiceHash)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createAsset issues a new asset to the world state with given details.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">createAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, amount <span class="keyword">int64</span>, issuerName <span class="keyword">string</span>, owner <span class="keyword">string</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;the asset %s already exists&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line">now, err := getNow(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">asset := Asset&#123;ID: id, Issuer: issuerName, Amount: amount, Owner: owner, CreateDate: now,</span><br><span class="line">EndDate: now.AddDate(<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>), ContractHash: contractHash, InvoiceHash: invoiceHash&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNow</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">(time.Time, error)</span></span> &#123;</span><br><span class="line">now, err := ctx.GetStub().GetTxTimestamp()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> time.Now(), err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ptypes.Timestamp(now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAsset returns the asset stored in the world state with given id.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">ReadAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;failed to read from world state: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> assetJSON == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;the asset %s does not exist&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(assetJSON, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AssetExists returns true when asset with given ID exists in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">AssetExists</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">&quot;failed to read from world state: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assetJSON != <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAssetByID 根据资产ID转账</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAssetByID</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, newID <span class="keyword">string</span>, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.TransferAsset(ctx, asset, newID, newOwner, amount, contractHash, invoiceHash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAsset updates the owner field of asset with given id in world state.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset, newID <span class="keyword">string</span>, newOwner <span class="keyword">string</span>, amount <span class="keyword">int64</span>, contractHash <span class="keyword">string</span>, invoiceHash <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果金额刚好等于凭证资产的金额，直接更新凭证资产的拥有者</span></span><br><span class="line"><span class="keyword">if</span> asset.Amount == amount &#123;</span><br><span class="line">asset.Owner = newOwner</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &gt; amount &#123; <span class="comment">// 如果凭证资产的金额大于转账的金额，则创建一个新的资产</span></span><br><span class="line"><span class="keyword">if</span> newID == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;转账金额小于资产的金额时，newID必须不能为空&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建新的资产并保存</span></span><br><span class="line">err := s.CreateAssetAndSave(ctx, newID, amount, asset.Issuer, newOwner, contractHash, invoiceHash)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新旧资产的金额</span></span><br><span class="line">asset.Amount = asset.Amount - amount</span><br><span class="line"><span class="keyword">return</span> s.PutState(ctx, asset)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> asset.Amount &lt; amount &#123; <span class="comment">// 如果资产的额度小于要转账的金额，则直接报错</span></span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;转账金额=%d,不能超过资产的金额=%d&quot;</span>, amount, asset.Amount)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PutState 更新资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">PutState</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetAllAssets returns all assets found in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetAllAssets</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">([]*Asset, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// range query with empty string for startKey and endKey does an</span></span><br><span class="line"><span class="comment">// open-ended query of all assets in the chaincode namespace.</span></span><br><span class="line">resultsIterator, err := ctx.GetStub().GetStateByRange(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resultsIterator.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> assets []*Asset</span><br><span class="line"><span class="keyword">for</span> resultsIterator.HasNext() &#123;</span><br><span class="line">queryResponse, err := resultsIterator.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> asset Asset</span><br><span class="line">err = json.Unmarshal(queryResponse.Value, &amp;asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">assets = <span class="built_in">append</span>(assets, &amp;asset)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> assets, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="打包-v7">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.8.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_8.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v7">安装链码包</h3><p>每个peer都要安装：<code>peer lifecycle chaincode install supply.8.tar.gz</code></p><h3 id="批准链码定义-v13">批准链码定义</h3><h4 id="查看已经安装的chaincode-v7">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_8.0:797ec1d00145482b746640d0b8bb9bea64cb69dea3e95abb69a1195a19e34511</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v14">批准链码定义</h4><p>每个peer都要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 8.0 --package-id $CC_PACKAGE_ID --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v7">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name supply --version 8.0 --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 8.0 --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v7">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9  CORE_AND_F1_INVOICE.txt</span><br><span class="line">93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14  CORE_AND_F1_CONTRACT.txt</span><br><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><h4 id="发行凭证-v3">发行凭证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;IssueVoucher&quot;,&quot;Args&quot;:[&quot;asset001&quot;, &quot;1000&quot;, &quot;一级供应商&quot;, &quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;, &quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h4 id="查询资产-v3">查询资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset001&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-30T06:57:06.963617Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-30T06:57:06.963617Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商1交易-v2">一级供应商与二级供应商1交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAssetByID&quot;,&quot;Args&quot;:[&quot;asset001&quot;, &quot;asset0011&quot;, &quot;二级供应商1&quot;, &quot;500&quot;, &quot;76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a&quot;, &quot;792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h4 id="查询资产-v4">查询资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset001&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-30T06:57:06.963617Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-30T06:57:06.963617Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset0011&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;二级供应商1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-30T06:57:50.047189Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-30T06:57:50.047189Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="一级供应商与二级供应商2交易-v3">一级供应商与二级供应商2交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAssetByID&quot;,&quot;Args&quot;:[&quot;asset001&quot;, &quot;asset0012&quot;, &quot;二级供应商2&quot;, &quot;300&quot;, &quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb&quot;, &quot;f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>查询资产，结果如下<code>peer chaincode query -C alljoinchannel -n supply -c '&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;'</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset001&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;一级供应商&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-30T06:57:06.963617Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-30T06:57:06.963617Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset0011&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;二级供应商1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-30T06:57:50.047189Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-30T06:57:50.047189Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset0012&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;二级供应商2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-30T06:58:33.143818Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-30T06:58:33.143818Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="转账金额大于凭证资产的金额-期待错误">转账金额大于凭证资产的金额(期待错误)</h3><p>出现错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAssetByID&quot;,&quot;Args&quot;:[&quot;asset001&quot;, &quot;asset0013&quot;, &quot;二级供应商2&quot;, &quot;300&quot;, &quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb&quot;, &quot;f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468&quot;]&#125;&#x27;</span><br><span class="line">Error: endorsement failure during invoke. response: status:500 message:&quot;\350\275\254\350\264\246\351\207\221\351\242\235=300,\344\270\215\350\203\275\350\266\205\350\277\207\350\265\204\344\272\247\347\232\204\351\207\221\351\242\235=200&quot;</span><br></pre></td></tr></table></figure><p>错误信息解码如下：</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20201230151742496-20201230173424532.png" alt></p><h3 id="转账金额等于凭证资产的金额（变更owner，不产生新的凭证资产）">转账金额等于凭证资产的金额（变更owner，不产生新的凭证资产）</h3><p>一级供应商把剩余的200转给二级供应商2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;&#x2F;organizations&#x2F;ordererOrganizations&#x2F;supply.com&#x2F;orderers&#x2F;orderer.supply.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;f1.supply.com&#x2F;peers&#x2F;peer0.f1.supply.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;s1.supply.com&#x2F;peers&#x2F;peer0.s1.supply.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;s2.supply.com&#x2F;peers&#x2F;peer0.s2.supply.com&#x2F;tls&#x2F;ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;&#x2F;organizations&#x2F;peerOrganizations&#x2F;core.supply.com&#x2F;peers&#x2F;peer0.core.supply.com&#x2F;tls&#x2F;ca.crt -c &#39;&#123;&quot;function&quot;:&quot;TransferAssetByID&quot;,&quot;Args&quot;:[&quot;asset001&quot;, &quot;asset0013&quot;, &quot;二级供应商2&quot;, &quot;200&quot;, &quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb&quot;, &quot;f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468&quot;]&#125;&#39;</span><br></pre></td></tr></table></figure><p>查询资产，结果如下<code>peer chaincode query -C alljoinchannel -n supply -c '&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;'</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset001&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;二级供应商2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-30T06:57:06.963617Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-30T06:57:06.963617Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset0011&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;二级供应商1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-30T06:57:50.047189Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-30T06:57:50.047189Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset0012&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;issuer&quot;</span>: <span class="string">&quot;核心企业&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;二级供应商2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;amount&quot;</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">&quot;createDate&quot;</span>: <span class="string">&quot;2020-12-30T06:58:33.143818Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;endDate&quot;</span>: <span class="string">&quot;2021-06-30T06:58:33.143818Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;contractHash&quot;</span>: <span class="string">&quot;f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;invoiceHash&quot;</span>: <span class="string">&quot;f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>没有产生新的资产，而是把原来的资产的拥有者变更了。</p><p><em>注意：这样有个问题，合同hash和发票hash不应该还是原来的。</em></p><h2 id="部署supply-v9到alljoinchannel通道">部署supply-v9到alljoinchannel通道</h2><h3 id="源码-v2">源码</h3><p>与v8版本相比，增加删除资产的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DelState 删除资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">DelState</span><span class="params">(ctx contractapi.TransactionContextInterface, assetIds ...<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, assetID := <span class="keyword">range</span> assetIds &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, assetID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !exists &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;assetID=%s的资产不存在&quot;</span>, assetID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().DelState(assetID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="打包-v8">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.18.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance-chaincode/ --lang golang --label secured_supply_22.0</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v8">安装链码包</h3><p>每个peer都要安装：<code>peer lifecycle chaincode install supply.18.tar.gz</code></p><h3 id="批准链码定义-v15">批准链码定义</h3><h4 id="查看已经安装的chaincode-v8">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=secured_supply_22.0:e815ca2d270dea029bc6992952140b1288a440aba8c430853f72eee7d5de24a7</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v16">批准链码定义</h4><p>每个peer都要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name secured_supply --version 22.0 --package-id $CC_PACKAGE_ID --sequence 22 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v8">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name secured_supply --version 22.0 --sequence 22 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name secured_supply --version 22.0 --sequence 22 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name secured_supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v8">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9  CORE_AND_F1_INVOICE.txt</span><br><span class="line">93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14  CORE_AND_F1_CONTRACT.txt</span><br><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><h4 id="删除资产">删除资产</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;DelState&quot;,&quot;Args&quot;:[&quot;asset001 asset0011 asset0012 asset003 asset0031 asset00311&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p><strong>错误信息记录：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;DelState&quot;,&quot;Args&quot;:[&quot;asset001 asset0011 asset0012 asset003 asset0031 asset00311&quot;]&#125;&#x27;</span><br><span class="line">Error: endorsement failure during invoke. response: status:500 message:&quot;Error managing parameter param0. Conversion error. Value asset001 asset0011 asset0012 asset003 asset0031 asset00311 was not passed in expected format []string&quot;</span><br></pre></td></tr></table></figure><p>**错误原因：**因为方法使用的是可变长参数，但是不知道该怎么给他传参数</p><h2 id="部署supply-v9-1到alljoinchannel通道">部署supply-v9.1到alljoinchannel通道</h2><h3 id="源码-v3">源码</h3><p>与v9版本相比，修改删除资产的方法为删除单个资产</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DelState 删除资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">DelState</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, assetID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !exists &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;assetID=%s的资产不存在&quot;</span>, assetID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().DelState(assetID)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包-v9">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package supply.9.1.tar.gz --path /Users/apple/code/open-source/blockchain/hyperledger/supply-finance/chaincode-go/ --lang golang --label supply_9.1</span><br></pre></td></tr></table></figure><h3 id="安装链码包-v9">安装链码包</h3><p>每个peer都要安装：<code>peer lifecycle chaincode install supply.9.1.tar.gz</code></p><h3 id="批准链码定义-v17">批准链码定义</h3><h4 id="查看已经安装的chaincode-v9">查看已经安装的chaincode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>将链码的信息保存为一个变量，两个组织都需要定义此变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=supply_9.1:f733e8484c17cb415e38ac1fb14ed646622f2980762906c97d6e7e1c1a90f2c3</span><br></pre></td></tr></table></figure><h4 id="批准链码定义-v18">批准链码定义</h4><p>每个peer都要执行此命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 9.1 --package-id $CC_PACKAGE_ID --sequence 4 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="将链码定义提交到通道-v9">将链码定义提交到通道</h3><p>检查channel上的成员是否已经批准了链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name supply --version 9.1 --sequence 4 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>在所有组织都批准之后，执行下面的命令将链码定义提交到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:8050  --ordererTLSHostnameOverride orderer.supply.com --channelID alljoinchannel --name supply --version 9.1 --sequence 4 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID alljoinchannel --name supply --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem</span><br></pre></td></tr></table></figure><h3 id="调用链码-v9">调用链码</h3><p>调用链码之前先生成测试的合同hash值和发票hash值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">83c02ac2d48c863dab2ccf6870455aadfc2cec073b8db269b517c879d76aa6d9  CORE_AND_F1_INVOICE.txt</span><br><span class="line">93b46869be90a6b1f688357965f89b5a8a5e32bf13710fb4ad00e25cca0f0b14  CORE_AND_F1_CONTRACT.txt</span><br><span class="line">76307cd9d79c76a2a7894677692ce421ff1a31e32717a7de6f07deb5de395e7a  f1_and_s1_contract.txt</span><br><span class="line">792376c209f338959be4cf00c54dbf82662b90516082e23106faec4c43c69e49  f1_and_s1_invoice.txt</span><br><span class="line">f46555b7ddd1f8dd232bdc0dcbc5b1f34bdf1d4bb7c123a79a6ed628175f29bb  f1_and_s2_contract.txt</span><br><span class="line">f807fe6dc767be2e7021d41540114b33b30fa7784f6de5521251f23a3eb66468  f1_and_s2_invoice.txt</span><br></pre></td></tr></table></figure><h4 id="删除资产-v2">删除资产</h4><p>资产ID列表：“asset001 asset0011 asset0012 asset003 asset0031 asset00311”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;DelState&quot;,&quot;Args&quot;:[&quot;asset00311&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h4 id="删除之后查询：">删除之后查询：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C alljoinchannel -n supply -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>返回的资产列表为空，删除方法验证成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;Practice_SmartContract:InitLedger&quot;,&quot;Args&quot;:[]&#125;&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt --peerAddresses localhost:8055 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s1.supply.com/peers/peer0.s1.supply.com/tls/ca.crt --peerAddresses localhost:8151 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/s2.supply.com/peers/peer0.s2.supply.com/tls/ca.crt --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;Practice_SmartContract:SomeStubMethod&quot;,&quot;Args&quot;:[&quot;asset1&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C alljoinchannel -n secured_supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;Practice_SmartContract:InitLedger&quot;,&quot;Args&quot;:[]&#125;&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> 项目实践-供应链金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> chaincode </tag>
            
            <tag> peer </tag>
            
            <tag> 供应链金融 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fabric智能合约API学习</title>
      <link href="2024/11/22/blockchain/fabric/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6API%E5%AD%A6%E4%B9%A0/Fabric%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6API%E5%AD%A6%E4%B9%A0/"/>
      <url>2024/11/22/blockchain/fabric/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6API%E5%AD%A6%E4%B9%A0/Fabric%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6API%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>这篇文档通过学习之前写的chaincode来查看Fabric的智能合约相关的源码。并学习这些源码的功能。</p><h2 id="智能合约里面的方法如何定义的">智能合约里面的方法如何定义的</h2><p>智能合约中的每个导出的方法都必须有<code>contractapi.TransactionContextInterface</code>类型的参数，并且这个方法是被定义在<code>SmartContract</code>上的，如下面一个获取资产出价价格的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GetAssetBidPrice returns the bid price</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetAssetBidPrice</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> getAssetPrice(ctx, assetID, typeAssetBid)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>contractapi.TransactionContextInterface</code>的源码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TransactionContextInterface defines the interface which TransactionContext</span></span><br><span class="line"><span class="comment">// meets. This can be taken by transacton functions on a contract which has not set</span></span><br><span class="line"><span class="comment">// a custom transaction context to allow transaction functions to take an interface</span></span><br><span class="line"><span class="comment">// to simplify unit testing.</span></span><br><span class="line"><span class="comment">// 交易上下文接口，为了方便测试</span></span><br><span class="line"><span class="keyword">type</span> TransactionContextInterface <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// GetStub should provide a way to access the stub set by Init/Invoke</span></span><br><span class="line">  <span class="comment">// 获取由Init/Invoke设置的存根</span></span><br><span class="line">GetStub() shim.ChaincodeStubInterface</span><br><span class="line"><span class="comment">// GetClientIdentity should provide a way to access the client identity set by Init/Invoke</span></span><br><span class="line">  <span class="comment">// 获取由Init/Invoke设置的客户端身份</span></span><br><span class="line">GetClientIdentity() cid.ClientIdentity</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mock方式测试shim-ChaincodeStubInterface中的方法">mock方式测试<code>shim.ChaincodeStubInterface</code>中的方法</h3><p>接着看<code>shim.ChaincodeStubInterface</code>有哪些功能，源码在这里就不贴了，直接看测试用例,下面的测试用例的入口是<code>TestStart</code>，不包含尚未实现mock的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chaincode_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-chaincode-go/pkg/statebased&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-contract-api-go/contractapi&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;unsafe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/guozhe001/learn-contractapi-go/chaincode&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-chaincode-go/shim&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-chaincode-go/shimtest&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mockInitLedger</span><span class="params">(t *testing.T, stub *shimtest.MockStub)</span></span> &#123;</span><br><span class="line">assets := []chaincode.Asset&#123;</span><br><span class="line">&#123;ID: AssetId, Color: <span class="string">&quot;blue&quot;</span>, Size: <span class="number">5</span>, Owner: <span class="string">&quot;Tomoko&quot;</span>, AppraisedValue: <span class="number">300</span>&#125;,</span><br><span class="line">&#123;ID: <span class="string">&quot;asset2&quot;</span>, Color: <span class="string">&quot;red&quot;</span>, Size: <span class="number">5</span>, Owner: <span class="string">&quot;Brad&quot;</span>, AppraisedValue: <span class="number">400</span>&#125;,</span><br><span class="line">&#123;ID: <span class="string">&quot;asset3&quot;</span>, Color: <span class="string">&quot;green&quot;</span>, Size: <span class="number">10</span>, Owner: <span class="string">&quot;Jin Soo&quot;</span>, AppraisedValue: <span class="number">500</span>&#125;,</span><br><span class="line">&#123;ID: <span class="string">&quot;asset4&quot;</span>, Color: <span class="string">&quot;yellow&quot;</span>, Size: <span class="number">10</span>, Owner: <span class="string">&quot;Max&quot;</span>, AppraisedValue: <span class="number">600</span>&#125;,</span><br><span class="line">&#123;ID: <span class="string">&quot;asset5&quot;</span>, Color: <span class="string">&quot;black&quot;</span>, Size: <span class="number">15</span>, Owner: <span class="string">&quot;Adriana&quot;</span>, AppraisedValue: <span class="number">700</span>&#125;,</span><br><span class="line">&#123;ID: <span class="string">&quot;asset6&quot;</span>, Color: <span class="string">&quot;white&quot;</span>, Size: <span class="number">15</span>, Owner: <span class="string">&quot;Michel&quot;</span>, AppraisedValue: <span class="number">800</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">stub.MockTransactionStart(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">putState(t, stub, assets...)</span><br><span class="line">id := stub.GetTxID()</span><br><span class="line">timestamp, err := stub.GetTxTimestamp()</span><br><span class="line">channelID := stub.GetChannelID()</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotNil(t, timestamp)</span><br><span class="line">log.Printf(<span class="string">&quot;GetTxID()=%s, GetTxTimestamp()=%s, GetChannelID()=%s&quot;</span>, id, timestamp, channelID)</span><br><span class="line">stub.MockTransactionEnd(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">marshal</span><span class="params">(asset chaincode.Asset, t *testing.T)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"><span class="keyword">return</span> assetJSON</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#PutState()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">putState</span><span class="params">(t *testing.T, stub *shimtest.MockStub, assets ...chaincode.Asset)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, asset := <span class="keyword">range</span> assets &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;putState=%v&quot;</span>, asset)</span><br><span class="line">require.NoError(t, stub.PutState(asset.ID, marshal(asset, t)))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#GetState()</span></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#PutState()</span></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#DelState()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getState</span><span class="params">(assetId <span class="keyword">string</span>, t *testing.T, stub *shimtest.MockStub)</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取指定key的资产的世界状态</span></span><br><span class="line">state, err := stub.GetState(assetId)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">printAsset(t, state)</span><br><span class="line">newAssetID := <span class="string">&quot;temp001&quot;</span></span><br><span class="line">newAsset := chaincode.Asset&#123;ID: newAssetID, Color: <span class="string">&quot;blue&quot;</span>, Size: <span class="number">5</span>, Owner: <span class="string">&quot;Tomoko&quot;</span>, AppraisedValue: <span class="number">300</span>&#125;</span><br><span class="line"><span class="comment">// put一个新的资产</span></span><br><span class="line">putState(t, stub, newAsset)</span><br><span class="line"><span class="comment">// 查询新的资产</span></span><br><span class="line">newState, err := stub.GetState(newAssetID)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotNil(t, newState)</span><br><span class="line">printAsset(t, newState)</span><br><span class="line"><span class="comment">// 指定资产ID删除资产</span></span><br><span class="line">require.NoError(t, stub.DelState(newAssetID))</span><br><span class="line"><span class="comment">// 删除之后重新查询新的资产</span></span><br><span class="line">newStateAgain, err := stub.GetState(newAssetID)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.Nil(t, newStateAgain)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getHistoryForKey</span><span class="params">(assetId <span class="keyword">string</span>, t *testing.T, stub *shimtest.MockStub)</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取key的历史数据，目前mock还未实现</span></span><br><span class="line">history, err := stub.GetHistoryForKey(assetId)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"><span class="keyword">if</span> history != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> history.HasNext() &#123;</span><br><span class="line">next, err := history.Next()</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">marshal, err := json.Marshal(next)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">log.Printf(<span class="string">&quot;asset=%s history=%s&quot;</span>, assetId, marshal)</span><br><span class="line">&#125;</span><br><span class="line">history.Close()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printAsset</span><span class="params">(t *testing.T, state []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a chaincode.Asset</span><br><span class="line">require.NoError(t, json.Unmarshal(state, &amp;a))</span><br><span class="line">marshal, err := json.Marshal(a)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">log.Printf(<span class="string">&quot;result state json value = %s&quot;</span>, marshal)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#GetArgs()</span></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#GetStringArgs()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getArgs</span><span class="params">(t *testing.T, stub *shimtest.MockStub)</span></span> &#123;</span><br><span class="line">args := stub.GetArgs()</span><br><span class="line"><span class="keyword">for</span> _, arg := <span class="keyword">range</span> args &#123;</span><br><span class="line">log.Print(<span class="keyword">string</span>(arg))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stringArgs := stub.GetStringArgs()</span><br><span class="line"><span class="keyword">for</span> _, argString := <span class="keyword">range</span> stringArgs &#123;</span><br><span class="line">log.Print(argString)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#GetStateByRange(startKey, endKey string) (StateQueryIteratorInterface, error)</span></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#GetStateByRangeWithPagination(startKey, endKey string, pageSize int32, bookmark string) (StateQueryIteratorInterface, *pb.QueryResponseMetadata, error)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getStateByRange</span><span class="params">(t *testing.T, stub *shimtest.MockStub)</span></span> &#123;</span><br><span class="line"><span class="comment">// GetStateByRange不指定startKey和endKey，会返回全部的资产；谨慎使用</span></span><br><span class="line">states, err := stub.GetStateByRange(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">printStateQueryIteratorInterface(t, states)</span><br><span class="line"><span class="comment">// GetStateByRangeWithPagination 因为mockStub直接返回三个nil，所以无法在mock环境测试</span></span><br><span class="line">pagination, metadata, err := stub.GetStateByRangeWithPagination(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">5</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">log.Print(<span class="string">&quot;==========================================================================================&quot;</span>)</span><br><span class="line">log.Printf(<span class="string">&quot;GetStateByRangeWithPagination metadata=%v&quot;</span>, metadata)</span><br><span class="line">printStateQueryIteratorInterface(t, pagination)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printStateQueryIteratorInterface</span><span class="params">(t *testing.T, states shim.StateQueryIteratorInterface)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> states != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">for</span> states.HasNext() &#123;</span><br><span class="line">next, err := states.Next()</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">log.Print(next)</span><br><span class="line">&#125;</span><br><span class="line">states.Close()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#CreateCompositeKey(objectType string, attributes []string) (string, error)</span></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#SplitCompositeKey(compositeKey string) (string, []string, error)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createCompositeKey</span><span class="params">(t *testing.T, stub *shimtest.MockStub)</span></span> &#123;</span><br><span class="line">objectType := <span class="string">&quot;test&quot;</span></span><br><span class="line">attributes := []<span class="keyword">string</span>&#123;<span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>, <span class="string">&quot;param3&quot;</span>, <span class="string">&quot;end&quot;</span>&#125;</span><br><span class="line"><span class="comment">// 创建组合key，拼接了一下</span></span><br><span class="line">key, err := stub.CreateCompositeKey(objectType, attributes)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">log.Printf(<span class="string">&quot;key=%s&quot;</span>, key)</span><br><span class="line"><span class="comment">// 分割组合key，CreateCompositeKey的逆运算</span></span><br><span class="line">compositeKey, strings, err := stub.SplitCompositeKey(key)</span><br><span class="line">require.Equal(t, objectType, compositeKey)</span><br><span class="line">require.Equal(t, attributes, strings)</span><br><span class="line">newAsset := chaincode.Asset&#123;ID: key, Color: <span class="string">&quot;blue&quot;</span>, Size: <span class="number">5</span>, Owner: <span class="string">&quot;Tomoko&quot;</span>, AppraisedValue: <span class="number">300</span>&#125;</span><br><span class="line">putState(t, stub, newAsset)</span><br><span class="line">empty := []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 根据创建组合key的参数查询，后面的参数可以是空，这样会全部匹配出来</span></span><br><span class="line">states, err := stub.GetStateByPartialCompositeKey(objectType, empty)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotNil(t, states)</span><br><span class="line">printStateQueryIteratorInterface(t, states)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">AssetId        <span class="keyword">string</span> = <span class="string">&quot;asset1&quot;</span></span><br><span class="line">TestMSP        <span class="keyword">string</span> = <span class="string">&quot;TestMSP&quot;</span></span><br><span class="line">TestCollection <span class="keyword">string</span> = <span class="string">&quot;private_TestMSP&quot;</span></span><br><span class="line">Blank          <span class="keyword">string</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#SetStateValidationParameter(key string, ep []byte) error</span></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#GetStateValidationParameter(key string) ([]byte, error)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setStateValidationParameter</span><span class="params">(t *testing.T, stub *shimtest.MockStub)</span></span> &#123;</span><br><span class="line"><span class="comment">// 新建一个基于状态的背书策略</span></span><br><span class="line">endorsementPolicy, err := statebased.NewStateEP(<span class="literal">nil</span>)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"><span class="comment">// 向背书策略添加需要背书的公司</span></span><br><span class="line">require.NoError(t, endorsementPolicy.AddOrgs(statebased.RoleTypeMember, TestMSP))</span><br><span class="line">policy, err := endorsementPolicy.Policy()</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"><span class="comment">// SetStateValidationParameter设置基于状态的背书策略</span></span><br><span class="line">require.NoError(t, stub.SetStateValidationParameter(AssetId, policy))</span><br><span class="line"><span class="comment">// GetStateValidationParameter获取基于状态的背书策略</span></span><br><span class="line">parameter, err := stub.GetStateValidationParameter(AssetId)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">str := byteToString(parameter)</span><br><span class="line"><span class="comment">// 打印出来的StateValidationParameter有特殊字符，所以使用包含传入的字符的方式断言</span></span><br><span class="line">log.Printf(<span class="string">&quot;ID=%s, StateValidationParameter=%s&quot;</span>, AssetId, str)</span><br><span class="line">require.Contains(t, str, TestMSP)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#GetPrivateData(collection, key string) ([]byte, error)</span></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#GetPrivateDataHash(collection, key string) ([]byte, error) 获取私有数据的hash值，这个方法就算不是私有数据的所有者也可以调用，mock版本没有实现；</span></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#DelPrivateData(collection, key string) error 删除私有数据，mock版本没有实现；</span></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#SetPrivateDataValidationParameter(collection, key string, ep []byte) error 设置私有数据的</span></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#GetPrivateDataValidationParameter(collection, key string) ([]byte, error)</span></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#GetPrivateDataByRange(collection, startKey, endKey string) (StateQueryIteratorInterface, error) 根据范围查询私有数据</span></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#GetPrivateDataByPartialCompositeKey(collection, objectType string, keys []string) (StateQueryIteratorInterface, error)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getPrivateData</span><span class="params">(t *testing.T, stub *shimtest.MockStub)</span></span> &#123;</span><br><span class="line">key := <span class="string">&quot;private001&quot;</span></span><br><span class="line">privateAsset := chaincode.Asset&#123;ID: key, Color: <span class="string">&quot;blue&quot;</span>, Size: <span class="number">5</span>, Owner: <span class="string">&quot;Tomoko&quot;</span>, AppraisedValue: <span class="number">300</span>&#125;</span><br><span class="line">bytes, err := json.Marshal(privateAsset)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"><span class="comment">// 添加私有数据</span></span><br><span class="line">require.NoError(t, stub.PutPrivateData(TestCollection, key, bytes))</span><br><span class="line"><span class="comment">// 获取私有资产</span></span><br><span class="line">data, err := stub.GetPrivateData(TestCollection, key)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotNil(t, data)</span><br><span class="line">printAsset(t, data)</span><br><span class="line"><span class="comment">// 使用不存在的其他的collection获取私有资产，不会返回error，会返回nil数据</span></span><br><span class="line">data, err = stub.GetPrivateData(<span class="string">&quot;test_collections&quot;</span>, key)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.Nil(t, data)</span><br><span class="line"><span class="comment">// 使用其他的key获取不存在私有资产</span></span><br><span class="line">data, err = stub.GetPrivateData(TestCollection, AssetId)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.Nil(t, data)</span><br><span class="line"><span class="comment">// 查询公共资产数据,断言没有这个资产</span></span><br><span class="line">state, err := stub.GetState(key)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.Nil(t, state)</span><br><span class="line"></span><br><span class="line">endorsementPolicy, err := statebased.NewStateEP(<span class="literal">nil</span>)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NoError(t, endorsementPolicy.AddOrgs(statebased.RoleTypeMember, TestMSP))</span><br><span class="line">policy, err := endorsementPolicy.Policy()</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NoError(t, stub.SetPrivateDataValidationParameter(TestCollection, key, policy))</span><br><span class="line">parameter, err := stub.GetPrivateDataValidationParameter(TestCollection, key)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">str := byteToString(parameter)</span><br><span class="line"><span class="comment">// 打印出来的StateValidationParameter有特殊字符，所以使用包含传入的字符的方式断言</span></span><br><span class="line">log.Printf(<span class="string">&quot;ID=%s, StateValidationParameter=%s&quot;</span>, AssetId, str)</span><br><span class="line">require.Contains(t, str, TestMSP)</span><br><span class="line"><span class="comment">// GetPrivateDataHash(collection, key string) ([]byte, error) 获取私有数据的hash值，这个方法就算不是私有数据的所有者也可以调用，mock版本没有实现；</span></span><br><span class="line"><span class="comment">// DelPrivateData(collection, key string) error 删除私有数据，mock版本没有实现；</span></span><br><span class="line"><span class="comment">//require.NoError(t, stub.DelPrivateData(TestCollection, key))</span></span><br><span class="line"><span class="comment">//// 删除之后再次查询，断言已经没有此资产</span></span><br><span class="line"><span class="comment">//data, err = stub.GetPrivateData(TestCollection, key)</span></span><br><span class="line"><span class="comment">//require.NoError(t, err)</span></span><br><span class="line"><span class="comment">//require.Nil(t, state)</span></span><br><span class="line"><span class="comment">// GetPrivateDataByRange没有实现</span></span><br><span class="line"><span class="comment">//byRange, err := stub.GetPrivateDataByRange(TestCollection, Blank, Blank)</span></span><br><span class="line"><span class="comment">//require.NoError(t, err)</span></span><br><span class="line"><span class="comment">//require.NotNil(t, byRange)</span></span><br><span class="line"><span class="comment">//for byRange.HasNext() &#123;</span></span><br><span class="line"><span class="comment">//next, err := byRange.Next()</span></span><br><span class="line"><span class="comment">//require.NotNil(t, err)</span></span><br><span class="line"><span class="comment">//log.Print(next)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">byteToString</span><span class="params">(data []<span class="keyword">byte</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">str := (*<span class="keyword">string</span>)(unsafe.Pointer(&amp;data))</span><br><span class="line"><span class="keyword">return</span> *str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#ChaincodeStubInterface#GetCreator() ([]byte, error) 获取签约交易提议的人，签约提议的人也是这个交易的创建者; mockstub未实现</span></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#GetTransient() (map[string][]byte, error) 获取临时数据，这个方法只有设置了临时数据的peer才能查到数据，主要是为了做隐私保护的，详情参考隐秘的交易资产</span></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#GetBinding() ([]byte, error) TODO 待理解</span></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#GetDecorations() ([]byte, error) TODO 待理解,目前看是为了传递更多关于提议的的额外数据</span></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#GetSignedProposal() ([]byte, error) 获取提议</span></span><br><span class="line"><span class="comment">// ChaincodeStubInterface#SetEvent(name string, payload []byte) error  允许链码在提议的response设置一个事件。无论交易的有效性如何，事件都将在已提交的块中的交易内可用。一个交易只能包含一个事件，并且如果是链码调用另一个链码的情况，事件只能在最外层。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stubOthers</span><span class="params">(t *testing.T, stub *shimtest.MockStub)</span></span> &#123;</span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">byte</span>)</span><br><span class="line">tempAsset := chaincode.Asset&#123;ID: <span class="string">&quot;temp001&quot;</span>, Color: <span class="string">&quot;blue&quot;</span>, Size: <span class="number">5</span>, Owner: <span class="string">&quot;Tomoko&quot;</span>, AppraisedValue: <span class="number">300</span>&#125;</span><br><span class="line">m[<span class="string">&quot;temp_asset&quot;</span>], _ = json.Marshal(tempAsset)</span><br><span class="line">require.NoError(t, stub.SetTransient(m))</span><br><span class="line">transient, err := stub.GetTransient()</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotNil(t, transient)</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> transient &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;k=%s, v=%s&quot;</span>, k, v)</span><br><span class="line">&#125;</span><br><span class="line">decorations := stub.GetDecorations()</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> decorations &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;k=%s, v=%s&quot;</span>, k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试shim.ChaincodeStubInterface接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stubTest</span><span class="params">(t *testing.T, stub *shimtest.MockStub)</span></span> &#123;</span><br><span class="line">assetId := AssetId</span><br><span class="line">mockInitLedger(t, stub)</span><br><span class="line">stub.MockTransactionStart(<span class="string">&quot;test1&quot;</span>)</span><br><span class="line">getState(assetId, t, stub)</span><br><span class="line"><span class="comment">//getHistoryForKey(assetId, t, stub)</span></span><br><span class="line">getArgs(t, stub)</span><br><span class="line">stub.MockTransactionStart(<span class="string">&quot;test1&quot;</span>)</span><br><span class="line">getStateByRange(t, stub)</span><br><span class="line">createCompositeKey(t, stub)</span><br><span class="line">setStateValidationParameter(t, stub)</span><br><span class="line">getPrivateData(t, stub)</span><br><span class="line">stubOthers(t, stub)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试contractapi.Contract的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">contractTest</span><span class="params">(t *testing.T, ccc *contractapi.ContractChaincode, stub *shimtest.MockStub)</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;DefaultContract=%s&quot;</span>, ccc.DefaultContract)</span><br><span class="line">info := ccc.Info</span><br><span class="line">log.Printf(<span class="string">&quot;info=%v&quot;</span>, info)</span><br><span class="line">stub.MockTransactionStart(<span class="string">&quot;contract_test&quot;</span>)</span><br><span class="line"><span class="comment">// 如果调用一个不存在的方法，如果实现了GetUnknownTransaction接口，则会执行此接口返回的方法；否则不执行，并且也不会报错，但是如果有before方法是会执行的</span></span><br><span class="line">response := stub.MockInvoke(<span class="string">&quot;uuid_002&quot;</span>, [][]<span class="keyword">byte</span>&#123;[]<span class="keyword">byte</span>(<span class="string">&quot;Unknow&quot;</span>)&#125;)</span><br><span class="line">log.Printf(<span class="string">&quot;response=%#v, response.Status=%d, response.Payload=%s&quot;</span>, response, response.Status, byteToString(response.Payload))</span><br><span class="line"><span class="comment">// 调用一个被忽略的方法, 虽然IgnoredMe方法在智能合约中存在，但是因为合约满足IgnoreContractInterface接口然后把这个方法加入到了忽略列表中，所以最后还是调用的默认方法</span></span><br><span class="line">response = stub.MockInvoke(<span class="string">&quot;uuid_002&quot;</span>, [][]<span class="keyword">byte</span>&#123;[]<span class="keyword">byte</span>(<span class="string">&quot;IgnoredMe&quot;</span>)&#125;)</span><br><span class="line">log.Printf(<span class="string">&quot;response=%#v, response.Status=%d, response.Payload=%s&quot;</span>, response, response.Status, byteToString(response.Payload))</span><br><span class="line"><span class="comment">// 指定某个指定合约，调用一个不存在的方法，冒号前面的部分是智能合约名称，后面是方法名称</span></span><br><span class="line">response = stub.MockInvoke(<span class="string">&quot;uuid_002&quot;</span>, [][]<span class="keyword">byte</span>&#123;[]<span class="keyword">byte</span>(<span class="string">&quot;TestSmartContract:Unknow&quot;</span>)&#125;)</span><br><span class="line">log.Printf(<span class="string">&quot;response=%#v, response.Status=%d, response.Payload=%s&quot;</span>, response, response.Status, byteToString(response.Payload))</span><br><span class="line"><span class="comment">//invoke := ccc.Invoke(stub)</span></span><br><span class="line"><span class="comment">//log.Printf(&quot;response=%v&quot;, invoke)</span></span><br><span class="line">stub.MockTransactionEnd(<span class="string">&quot;uuid_001&quot;</span>)</span><br><span class="line">transactionSerializer := ccc.TransactionSerializer</span><br><span class="line">log.Printf(<span class="string">&quot;transactionSerializer=%v&quot;</span>, transactionSerializer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试入口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStart</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// 一个链码包中可以有多个智能合约</span></span><br><span class="line">assetChaincode, err := contractapi.NewChaincode(&amp;chaincode.SmartContract&#123;&#125;, &amp;TestSmartContract&#123;&#125;)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"><span class="comment">// NewMockStub</span></span><br><span class="line">stub := shimtest.NewMockStub(<span class="string">&quot;mockSub&quot;</span>, assetChaincode)</span><br><span class="line">stubTest(t, stub)</span><br><span class="line">contractTest(t, assetChaincode, stub)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TestSmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetUnknownTransaction returns the current set unknownTransaction, may be nil</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TestSmartContract)</span> <span class="title">GetUnknownTransaction</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">return</span> t.UnknownTransaction</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Default 如果不指定方法名称时指定的默认方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TestSmartContract)</span> <span class="title">UnknownTransaction</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;hello, i&#x27;m Default func in TestSmartContract！&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;i&#x27;m TestSmartContract, Bye!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在智能合约中添加了如下的一些方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// GetUnknownTransaction returns the current set unknownTransaction, may be nil</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetUnknownTransaction</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">return</span> s.UnknownTransaction</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Default 如果不指定方法名称时指定的默认方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">UnknownTransaction</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;hello, i&#x27;m Default func！&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Bye!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetBeforeTransaction returns the current set beforeTransaction, may be nil</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetBeforeTransaction</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">return</span> s.BeforeTransaction</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">BeforeTransaction</span><span class="params">(ctx contractapi.TransactionContextInterface)</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;i&#x27;m BeforeTransaction&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetAfterTransaction returns the current set afterTransaction, may be nil</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetAfterTransaction</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">return</span> s.AfterTransaction</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">AfterTransaction</span><span class="params">(ctx contractapi.TransactionContextInterface)</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;i&#x27;m AfterTransaction&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">IgnoredMe</span><span class="params">(ctx contractapi.TransactionContextInterface)</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Ignored Me!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetIgnoredFunctions</span><span class="params">()</span> []<span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">string</span>&#123;<span class="string">&quot;IgnoredMe&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试无法mock测试的shim-ChaincodeStubInterface方法">测试无法mock测试的<code>shim.ChaincodeStubInterface</code>方法</h3><p>一些其他的无法使用<code>shimtests</code>做mock测试的<code>shim.ChaincodeStubInterface</code>方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// SomeStubMethod stub其他的无法通过mock方式测试的方法练习</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">SomeStubMethod</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">stub := ctx.GetStub()</span><br><span class="line"><span class="comment">// stub.GetArgs()和stub.GetStringArgs()都是获取调用链码时的入参，第一个参数时方法名，后面的参数是这个方法的参数的信息,如下：</span></span><br><span class="line"><span class="comment">// 2021/01/25 08:06:32 stub.GetArgs(),i=0, arg=Practice_SmartContract:SomeStubMethod</span></span><br><span class="line"><span class="comment">//2021/01/25 08:06:32 stub.GetArgs(),i=1, arg=asset1</span></span><br><span class="line"><span class="keyword">for</span> i, arg := <span class="keyword">range</span> stub.GetArgs() &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;stub.GetArgs(),i=%d, arg=%s&quot;</span>, i, byteToString(arg))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i, arg := <span class="keyword">range</span> stub.GetStringArgs() &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;stub.GetStringArgs(),i=%d, arg=%s&quot;</span>, i, arg)</span><br><span class="line">&#125;</span><br><span class="line">binding, err := stub.GetBinding()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;stub.GetBinding()=%s&quot;</span>, byteToString(binding))</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> stub.GetDecorations() &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;stub.GetDecorations(), k=%s, v=%s&quot;</span>, k, byteToString(v))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// stub.GetCreator()返回的是证书，如过是组织s2.supply.com的管理员发起的交易，则此处获得的是：Admin@s2.supply.com-cert.pem</span></span><br><span class="line">creator, err := stub.GetCreator()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;stub.GetCreator()=%s&quot;</span>, byteToString(creator))</span><br><span class="line"><span class="comment">// 已经签名的提议，包含以下内容：</span></span><br><span class="line"><span class="comment">// 1.通道名称</span></span><br><span class="line"><span class="comment">// 2.链码名称</span></span><br><span class="line"><span class="comment">// 3.发起交易的组织名称</span></span><br><span class="line"><span class="comment">// 4.发起交易的人的证书</span></span><br><span class="line"><span class="comment">// 5.调用链码时的入参：方法名，参数等</span></span><br><span class="line"><span class="comment">// stub.GetSignedProposal().GetProposalBytes()的信息如下：</span></span><br><span class="line"><span class="comment">//2021/01/25 08:06:32 stub.GetSignedProposal().GetProposalBytes()=</span></span><br><span class="line"><span class="comment">//�</span></span><br><span class="line"><span class="comment">//v��������&quot;alljoinchannel*@252b6bbd22eeaf2193cdbc86fe7bd9fa257e33a6209a5da7d81dcc41b8bb1b9d:secured_supply�</span></span><br><span class="line"><span class="comment">//�</span></span><br><span class="line"><span class="comment">//GylSOrg2MSP�-----BEGIN CERTIFICATE-----</span></span><br><span class="line"><span class="comment">//MIICETCCAbegAwIBAgIRAJw2YUKkmyKusGHm33D7LhkwCgYIKoZIzj0EAwIwbTEL</span></span><br><span class="line"><span class="comment">//MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG</span></span><br><span class="line"><span class="comment">//cmFuY2lzY28xFjAUBgNVBAoTDXMyLnN1cHBseS5jb20xGTAXBgNVBAMTEGNhLnMy</span></span><br><span class="line"><span class="comment">//LnN1cHBseS5jb20wHhcNMjEwMTA3MDgzMTAwWhcNMzEwMTA1MDgzMTAwWjBYMQsw</span></span><br><span class="line"><span class="comment">//CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy</span></span><br><span class="line"><span class="comment">//YW5jaXNjbzEcMBoGA1UEAwwTQWRtaW5AczIuc3VwcGx5LmNvbTBZMBMGByqGSM49</span></span><br><span class="line"><span class="comment">//AgEGCCqGSM49AwEHA0IABJ6An5vHmug1YBIUXKuD50ZJ79TiwDkW5uEr2ZkXU5Em</span></span><br><span class="line"><span class="comment">//XwVlxwCOKpfqKOr1Xdk0DWMlAQPQIxeXktdVBJxFc4KjTTBLMA4GA1UdDwEB/wQE</span></span><br><span class="line"><span class="comment">//AwIHgDAMBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIGO9q5qcp089i7bDqwyxRYdg</span></span><br><span class="line"><span class="comment">//aX65Bvs4X5wCsXWbxj37MAoGCCqGSM49BAMCA0gAMEUCIQCRBC/uF8ooaLQzSDo6</span></span><br><span class="line"><span class="comment">//e5+4UbBqjSi5MUy3IYfVrM5tHQIgaGHKXcKZY7q0Txs6LsbtayW6kWPOAee6Z1W8</span></span><br><span class="line"><span class="comment">//top2VDc=</span></span><br><span class="line"><span class="comment">//-----END CERTIFICATE-----</span></span><br><span class="line"><span class="comment">//�w�&#125;dȧC&gt;�v�@�El�S����I</span></span><br><span class="line"><span class="comment">//G</span></span><br><span class="line"><span class="comment">//Esecured_supply/</span></span><br><span class="line"><span class="comment">//%Practice_SmartContract:SomeStubMethod</span></span><br><span class="line"><span class="comment">//asset1</span></span><br><span class="line">proposal, err := stub.GetSignedProposal()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;stub.GetSignedProposal()=%#v&quot;</span>, proposal)</span><br><span class="line">bytes := proposal.GetProposalBytes()</span><br><span class="line">log.Printf(<span class="string">&quot;stub.GetSignedProposal().GetProposalBytes()=%s&quot;</span>, byteToString(bytes))</span><br><span class="line">p := &amp;peer.Proposal&#123;&#125;</span><br><span class="line">err = proto.Unmarshal(bytes, p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;stub.GetSignedProposal().GetProposalBytes(),proto.Unmarshal=%#v&quot;</span>, p)</span><br><span class="line"><span class="comment">//headerBytes:= p.GetHeader()</span></span><br><span class="line"><span class="comment">//header := &amp;peer.ChaincodeHeaderExtension&#123;&#125;</span></span><br><span class="line"><span class="comment">//err = proto.Unmarshal(headerBytes, header)</span></span><br><span class="line"><span class="comment">//if err != nil &#123;</span></span><br><span class="line"><span class="comment">//return err</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//log.Printf(&quot;stub.GetSignedProposal().GetProposalBytes()-Proposal-GetHeader()=%#v&quot;, header)</span></span><br><span class="line"><span class="comment">//payloadBytes := p.GetPayload()</span></span><br><span class="line"><span class="comment">//payload := &amp;peer.ChaincodeProposalPayload&#123;&#125;</span></span><br><span class="line"><span class="comment">//err = proto.Unmarshal(payloadBytes, payload)</span></span><br><span class="line"><span class="comment">//if err != nil &#123;</span></span><br><span class="line"><span class="comment">//return err</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//log.Printf(&quot;stub.GetSignedProposal().GetProposalBytes()-Proposal-GetPayload()=%#v&quot;, payload)</span></span><br><span class="line">log.Printf(<span class="string">&quot;stub.GetSignedProposal().GetSignature()=%s&quot;</span>, byteToString(proposal.GetSignature()))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个Event</span></span><br><span class="line"><span class="keyword">if</span> err := stub.SetEvent(<span class="string">&quot;hello event&quot;</span>, []<span class="keyword">byte</span>(<span class="string">&quot;hello&quot;</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2021/01/25 10:22:57 stub.GetHistoryForKey(asset1), next=&amp;queryresult.KeyModification&#123;</span></span><br><span class="line"><span class="comment">//TxId:&quot;f251ce5352e294cd628fc0b5d09271ebe8253b41d66069c164195fe2783c3adc&quot;,</span></span><br><span class="line"><span class="comment">//Value:[]uint8&#123;0x7b, 0x22, 0x49, 0x44, 0x22, 0x3a, 0x22, 0x61, 0x73, 0x73, 0x65, 0x74, 0x31, 0x22, 0x2c</span></span><br><span class="line"><span class="comment">//, 0x22, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0x62, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x35, 0x2c, 0x22, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x3a, 0x22, 0x54, 0x6f, 0x6d, 0x6f, 0x6b, 0x6f, 0x22, 0x2c, 0x22, 0x61, 0x70, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x33, 0x30, 0x30, 0x7d&#125;,</span></span><br><span class="line"><span class="comment">//Timestamp:(*timestamp.Timestamp)(0xc00043d1a0),</span></span><br><span class="line"><span class="comment">//IsDelete:false, XXX_NoUnkeyedLiteral:struct &#123;&#125;&#123;&#125;,</span></span><br><span class="line"><span class="comment">//XXX_unrecognized:[]uint8(nil),</span></span><br><span class="line"><span class="comment">//XXX_sizecache:0&#125;</span></span><br><span class="line">assetHistory, err := stub.GetHistoryForKey(assetID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> assetHistory.Close()</span><br><span class="line"><span class="keyword">for</span> assetHistory.HasNext() &#123;</span><br><span class="line">next, err := assetHistory.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;stub.GetHistoryForKey(%s), next=%#v&quot;</span>, assetID, next)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">byteToString</span><span class="params">(data []<span class="keyword">byte</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">str := (*<span class="keyword">string</span>)(unsafe.Pointer(&amp;data))</span><br><span class="line"><span class="keyword">return</span> *str</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>shim包下面也有一个<code>GetMSPID</code>方法，具体如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// GetMSPID returns the local mspid of the peer by checking the CORE_PEER_LOCALMSPID</span></span><br><span class="line"><span class="comment">// env var and returns an error if the env var is not set</span></span><br><span class="line"><span class="comment">// 通过检查环境变量CORE_PEER_LOCALMSPID返回peer节点本地的mspid，如果没有设置这个环境变量则返回一个error</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetMSPID</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">mspid := os.Getenv(<span class="string">&quot;CORE_PEER_LOCALMSPID&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> mspid == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, errors.New(<span class="string">&quot;&#x27;CORE_PEER_LOCALMSPID&#x27; is not set&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mspid, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TODO 待整合到一起</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/golang/protobuf/ptypes&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-chaincode-go/pkg/statebased&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-chaincode-go/shim&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-contract-api-go/contractapi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">typeAssetForSale     = <span class="string">&quot;S&quot;</span></span><br><span class="line">typeAssetBid         = <span class="string">&quot;B&quot;</span></span><br><span class="line">typeAssetSaleReceipt = <span class="string">&quot;SR&quot;</span></span><br><span class="line">typeAssetBuyReceipt  = <span class="string">&quot;BR&quot;</span></span><br><span class="line">statusEnable         = <span class="string">&quot;enable&quot;</span></span><br><span class="line">statusDelete         = <span class="string">&quot;delete&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asset struct and properties must be exported (start with capitals) to work with contract api metadata</span></span><br><span class="line"><span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">ObjectType        <span class="keyword">string</span> <span class="string">`json:&quot;objectType&quot;`</span> <span class="comment">// ObjectType is used to distinguish different object types in the same chaincode namespace</span></span><br><span class="line">ID                <span class="keyword">string</span> <span class="string">`json:&quot;assetID&quot;`</span></span><br><span class="line">OwnerOrg          <span class="keyword">string</span> <span class="string">`json:&quot;ownerOrg&quot;`</span></span><br><span class="line">PublicDescription <span class="keyword">string</span> <span class="string">`json:&quot;publicDescription&quot;`</span></span><br><span class="line">Status            <span class="keyword">string</span> <span class="string">`json:&quot;status&quot;`</span></span><br><span class="line">ParentID          <span class="keyword">string</span> <span class="string">`json:&quot;parentID&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> receipt <span class="keyword">struct</span> &#123;</span><br><span class="line">price     <span class="keyword">int</span></span><br><span class="line">timestamp time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AssetProperties 资产属性</span></span><br><span class="line"><span class="keyword">type</span> AssetProperties <span class="keyword">struct</span> &#123;</span><br><span class="line">ObjectType <span class="keyword">string</span>    <span class="string">`json:&quot;objectType&quot;`</span> <span class="comment">// ObjectType is used to distinguish different object types in the same chaincode namespace</span></span><br><span class="line">ID         <span class="keyword">string</span>    <span class="string">`json:&quot;assetID&quot;`</span></span><br><span class="line">Issuer     <span class="keyword">string</span>    <span class="string">`json:&quot;issuer&quot;`</span></span><br><span class="line">Amount     <span class="keyword">int</span>       <span class="string">`json:&quot;amount&quot;`</span></span><br><span class="line">CreateDate time.Time <span class="string">`json:&quot;createDate&quot;`</span></span><br><span class="line">EndDate    time.Time <span class="string">`json:&quot;endDate&quot;`</span></span><br><span class="line">Salt       <span class="keyword">string</span>    <span class="string">`json:&quot;salt&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateAsset creates an asset and sets it as owned by the client&#x27;s org</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">CreateAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID, publicDescription <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取临时数据库的数据，返回一个map[string][]byte</span></span><br><span class="line">transientMap, err := ctx.GetStub().GetTransient()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;error getting transient: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asset properties must be retrieved from the transient field as they are private</span></span><br><span class="line">immutablePropertiesJSON, ok := transientMap[<span class="string">&quot;asset_properties&quot;</span>]</span><br><span class="line">fmt.Println(<span class="string">&quot;immutablePropertiesJSON:&quot;</span>, immutablePropertiesJSON)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;asset_properties key not found in the transient map&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> createAsset(ctx, immutablePropertiesJSON, assetID, publicDescription, <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateAsset creates an asset and sets it as owned by the client&#x27;s org</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, immutablePropertiesJSON []<span class="keyword">byte</span>, assetID, publicDescription <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">parentID <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// Get client org id and verify it matches peer org id.</span></span><br><span class="line"><span class="comment">// In this scenario, client is only authorized to read/write private data from its own peer.</span></span><br><span class="line">clientOrgID, err := getClientOrgID(ctx, <span class="literal">true</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;clientOrgID:&quot;</span>, clientOrgID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to get verified OrgID: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asset := Asset&#123;</span><br><span class="line">ObjectType:        <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">ID:                assetID,</span><br><span class="line">OwnerOrg:          clientOrgID,</span><br><span class="line">PublicDescription: publicDescription,</span><br><span class="line">Status:            statusEnable,</span><br><span class="line">ParentID:          parentID,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;asset:&quot;</span>, asset)</span><br><span class="line">assetBytes, err := json.Marshal(asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to create asset JSON: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = ctx.GetStub().PutState(asset.ID, assetBytes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to put asset in public data: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the endorsement policy such that an owner org peer is required to endorse future updates</span></span><br><span class="line">err = setAssetStateBasedEndorsement(ctx, asset.ID, clientOrgID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed setting state based endorsement for owner: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Persist private immutable asset properties to owner&#x27;s private data collection</span></span><br><span class="line">collection := buildCollectionName(clientOrgID)</span><br><span class="line">fmt.Println(<span class="string">&quot;collection:&quot;</span>, collection)</span><br><span class="line">err = ctx.GetStub().PutPrivateData(collection, asset.ID, immutablePropertiesJSON)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to put Asset private details: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// // verifyAssetProperties 验证资产属性的信息</span></span><br><span class="line"><span class="comment">// func verifyAssetProperties(immutablePropertiesJSON []byte, asset Asset) error &#123;</span></span><br><span class="line"><span class="comment">// assetProperties, err := getAssetProperties(immutablePropertiesJSON)</span></span><br><span class="line"><span class="comment">// if err != nil &#123;</span></span><br><span class="line"><span class="comment">// return err</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// // 资产的属性ID和资产ID相同</span></span><br><span class="line"><span class="comment">// if asset.ID != assetProperties.ID &#123;</span></span><br><span class="line"><span class="comment">// return fmt.Errorf(&quot;资产ID和资产属性ID必须相同&quot;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// // 资产的发行者就是资产的创建者，所有人都可以发行，但是别人认不认可这个组织发行的资产是另一回事</span></span><br><span class="line"><span class="comment">// if asset.OwnerOrg != assetProperties.Issuer &#123;</span></span><br><span class="line"><span class="comment">// return fmt.Errorf(&quot;资产的发行方必须是当前创建资产的组织&quot;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// // 理论上这里应该还有更多的校验，比如说创建时间和失效时间的验证</span></span><br><span class="line"><span class="comment">// return nil</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// ChangePublicDescription updates the assets public description. Only the current owner can update the public description</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">ChangePublicDescription</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>, newDescription <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, assetID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to get asset: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> changeOriginAssetInfo(ctx, *asset, <span class="string">&quot;&quot;</span>, newDescription)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AgreeToSell adds seller&#x27;s asking price to seller&#x27;s implicit private data collection</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">AgreeToSell</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, assetID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clientOrgID, err := getClientOrgID(ctx, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to get verified OrgID: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Verify that this clientOrgId actually owns the asset.</span></span><br><span class="line"><span class="keyword">if</span> clientOrgID != asset.OwnerOrg &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;a client from %s cannot sell an asset owned by %s&quot;</span>, clientOrgID, asset.OwnerOrg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> agreeToPrice(ctx, assetID, typeAssetForSale)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AgreeToBuy adds buyer&#x27;s bid price to buyer&#x27;s implicit private data collection</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">AgreeToBuy</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> agreeToPrice(ctx, assetID, typeAssetBid)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// agreeToPrice adds a bid or ask price to caller&#x27;s implicit private data collection</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">agreeToPrice</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>, priceType <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// In this scenario, client is only authorized to read/write private data from its own peer.</span></span><br><span class="line">clientOrgID, err := getClientOrgID(ctx, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to get verified OrgID: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">transMap, err := ctx.GetStub().GetTransient()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;error getting transient: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asset price must be retrieved from the transient field as they are private</span></span><br><span class="line">price, ok := transMap[<span class="string">&quot;asset_price&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;asset_price key not found in the transient map&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">collection := buildCollectionName(clientOrgID)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Persist the agreed to price in a collection sub-namespace based on priceType key prefix,</span></span><br><span class="line"><span class="comment">// to avoid collisions between private asset properties, sell price, and buy price</span></span><br><span class="line">assetPriceKey, err := ctx.GetStub().CreateCompositeKey(priceType, []<span class="keyword">string</span>&#123;assetID&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to create composite key: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The Price hash will be verified later, therefore always pass and persist price bytes as is,</span></span><br><span class="line"><span class="comment">// so that there is no risk of nondeterministic marshaling.</span></span><br><span class="line">err = ctx.GetStub().PutPrivateData(collection, assetPriceKey, price)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to put asset bid: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// VerifyAssetProperties  Allows a buyer to validate the properties of</span></span><br><span class="line"><span class="comment">// an asset against the owner&#x27;s implicit private data collection</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">VerifyAssetProperties</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">transMap, err := ctx.GetStub().GetTransient()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">&quot;error getting transient: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Asset properties must be retrieved from the transient field as they are private</span></span><br><span class="line">immutablePropertiesJSON, ok := transMap[<span class="string">&quot;asset_properties&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">&quot;asset_properties key not found in the transient map&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asset, err := s.ReadAsset(ctx, assetID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">&quot;failed to get asset: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加资产状态的验证</span></span><br><span class="line"><span class="keyword">if</span> (*asset).Status != statusEnable &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">&quot;资产不可以，不允许交易: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">collectionOwner := buildCollectionName(asset.OwnerOrg)</span><br><span class="line">immutablePropertiesOnChainHash, err := ctx.GetStub().GetPrivateDataHash(collectionOwner, assetID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">&quot;failed to read asset private properties hash from seller&#x27;s collection: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> immutablePropertiesOnChainHash == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">&quot;asset private properties hash does not exist: %s&quot;</span>, assetID)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hash := sha256.New()</span><br><span class="line">hash.Write(immutablePropertiesJSON)</span><br><span class="line">calculatedPropertiesHash := hash.Sum(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// verify that the hash of the passed immutable properties matches the on-chain hash</span></span><br><span class="line"><span class="keyword">if</span> !bytes.Equal(immutablePropertiesOnChainHash, calculatedPropertiesHash) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">&quot;hash %x for passed immutable properties %s does not match on-chain hash %x&quot;</span>,</span><br><span class="line">calculatedPropertiesHash,</span><br><span class="line">immutablePropertiesJSON,</span><br><span class="line">immutablePropertiesOnChainHash,</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAsset checks transfer conditions and then transfers asset state to buyer.</span></span><br><span class="line"><span class="comment">// TransferAsset can only be called by current owner</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>, buyerOrgID <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">clientOrgID, err := getClientOrgID(ctx, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to get verified OrgID: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">transMap, err := ctx.GetStub().GetTransient()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;error getting transient data: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">immutablePropertiesJSON, ok := transMap[<span class="string">&quot;asset_properties&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;asset_properties key not found in the transient map&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">priceJSON, ok := transMap[<span class="string">&quot;asset_price&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;asset_price key not found in the transient map&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> agreement Agreement</span><br><span class="line">err = json.Unmarshal(priceJSON, &amp;agreement)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to unmarshal price JSON: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asset, err := s.ReadAsset(ctx, assetID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to get asset: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加资产状态的验证</span></span><br><span class="line"><span class="keyword">if</span> (*asset).Status != statusEnable &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;资产不可以，不允许交易&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = verifyTransferConditions(ctx, asset, immutablePropertiesJSON, clientOrgID, buyerOrgID, priceJSON)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed transfer verification: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = transferAssetState(ctx, asset, immutablePropertiesJSON, clientOrgID, buyerOrgID, agreement.Price)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed asset transfer: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SplitAsset 拆分资产为两个资产，传入的amount是拆分后的其中一个资产的金额</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">SplitAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>, amount <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset, err := s.ReadAsset(ctx, assetID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">immutableProperties, err := getAssetPrivateProperties(ctx, assetID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">assetProperties, err := getAssetProperties(immutableProperties)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> assetProperties.Amount &lt;= amount &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;资产ID的金额为%d小于想要拆分的金额为%d，不允许拆分&quot;</span>, assetProperties.Amount, amount)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := splitAsset(ctx, assetProperties, assetID+<span class="string">&quot;1&quot;</span>, amount, *asset); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := splitAsset(ctx, assetProperties, assetID+<span class="string">&quot;2&quot;</span>, assetProperties.Amount-amount, *asset); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 拆分之后删除旧资产</span></span><br><span class="line">collection := buildCollectionName((*asset).OwnerOrg)</span><br><span class="line">err = ctx.GetStub().DelPrivateData(collection, asset.ID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to delete Asset private details from org: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改公共资产信息</span></span><br><span class="line">changeOriginAssetInfo(ctx, *asset, statusDelete, <span class="string">&quot;已拆分&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据transient获取的assetProperties的字节数组获取AssetProperties</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getAssetProperties</span><span class="params">(immutablePropertiesJSON []<span class="keyword">byte</span>)</span> <span class="params">(AssetProperties, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> assetProperties AssetProperties</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(immutablePropertiesJSON, &amp;assetProperties); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> assetProperties, fmt.Errorf(<span class="string">&quot;failed to unmarshal price JSON: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> assetProperties, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChangePublicDescription updates the assets public description. Only the current owner can update the public description</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeOriginAssetInfo</span><span class="params">(ctx contractapi.TransactionContextInterface, asset Asset, status <span class="keyword">string</span>, newDescription <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// No need to check client org id matches peer org id, rely on the asset ownership check instead.</span></span><br><span class="line">clientOrgID, err := getClientOrgID(ctx, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to get verified OrgID: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Auth check to ensure that client&#x27;s org actually owns the asset</span></span><br><span class="line"><span class="keyword">if</span> clientOrgID != asset.OwnerOrg &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;a client from %s cannot update the description of a asset owned by %s&quot;</span>, clientOrgID, asset.OwnerOrg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加资产状态的验证</span></span><br><span class="line"><span class="keyword">if</span> asset.Status != statusEnable &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;资产不可用，不允许修改&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> status != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">asset.Status = status</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> newDescription != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">asset.PublicDescription = newDescription</span><br><span class="line">&#125;</span><br><span class="line">updatedAssetJSON, err := json.Marshal(asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to marshal asset: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().PutState(asset.ID, updatedAssetJSON)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// splitAsset 从原始资产属性拆分成指定ID和金额的资产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">splitAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, originAssetProperties AssetProperties, newAssetID <span class="keyword">string</span>, newAmount <span class="keyword">int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">asset Asset)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">originAssetProperties.Amount = newAmount</span><br><span class="line">originAssetProperties.ID = newAssetID</span><br><span class="line">immutablePropertiesJSON, err := json.Marshal(originAssetProperties)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> createAsset(ctx, immutablePropertiesJSON, newAssetID, asset.PublicDescription, asset.ID)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// verifyTransferConditions checks that client org currently owns asset and that both parties have agreed on price</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">verifyTransferConditions</span><span class="params">(ctx contractapi.TransactionContextInterface,</span></span></span><br><span class="line"><span class="function"><span class="params">asset *Asset,</span></span></span><br><span class="line"><span class="function"><span class="params">immutablePropertiesJSON []<span class="keyword">byte</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">clientOrgID <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">buyerOrgID <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">priceJSON []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CHECK1: Auth check to ensure that client&#x27;s org actually owns the asset</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> clientOrgID != asset.OwnerOrg &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;a client from %s cannot transfer a asset owned by %s&quot;</span>, clientOrgID, asset.OwnerOrg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CHECK2: Verify that the hash of the passed immutable properties matches the on-chain hash</span></span><br><span class="line"></span><br><span class="line">collectionSeller := buildCollectionName(clientOrgID)</span><br><span class="line">immutablePropertiesOnChainHash, err := ctx.GetStub().GetPrivateDataHash(collectionSeller, asset.ID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to read asset private properties hash from seller&#x27;s collection: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> immutablePropertiesOnChainHash == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;asset private properties hash does not exist: %s&quot;</span>, asset.ID)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hash := sha256.New()</span><br><span class="line">hash.Write(immutablePropertiesJSON)</span><br><span class="line">calculatedPropertiesHash := hash.Sum(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// verify that the hash of the passed immutable properties matches the on-chain hash</span></span><br><span class="line"><span class="keyword">if</span> !bytes.Equal(immutablePropertiesOnChainHash, calculatedPropertiesHash) &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;hash %x for passed immutable properties %s does not match on-chain hash %x&quot;</span>,</span><br><span class="line">calculatedPropertiesHash,</span><br><span class="line">immutablePropertiesJSON,</span><br><span class="line">immutablePropertiesOnChainHash,</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CHECK3: Verify that seller and buyer agreed on the same price</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Get sellers asking price</span></span><br><span class="line">assetForSaleKey, err := ctx.GetStub().CreateCompositeKey(typeAssetForSale, []<span class="keyword">string</span>&#123;asset.ID&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to create composite key: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">sellerPriceHash, err := ctx.GetStub().GetPrivateDataHash(collectionSeller, assetForSaleKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to get seller price hash: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> sellerPriceHash == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;seller price for %s does not exist&quot;</span>, asset.ID)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get buyers bid price</span></span><br><span class="line">collectionBuyer := buildCollectionName(buyerOrgID)</span><br><span class="line">assetBidKey, err := ctx.GetStub().CreateCompositeKey(typeAssetBid, []<span class="keyword">string</span>&#123;asset.ID&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to create composite key: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TODO 疑问：这个方法是由资产拥有者调用的，那么资产拥有者怎么可以获取资产买方的出价信息呢？如果是从公共状态获取购买方的出价hash是没问题的，但是从购买方的私有数据集中获取出价hash很让人费解。</span></span><br><span class="line">buyerPriceHash, err := ctx.GetStub().GetPrivateDataHash(collectionBuyer, assetBidKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to get buyer price hash: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> buyerPriceHash == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;buyer price for %s does not exist&quot;</span>, asset.ID)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hash = sha256.New()</span><br><span class="line">hash.Write(priceJSON)</span><br><span class="line">calculatedPriceHash := hash.Sum(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Verify that the hash of the passed price matches the on-chain sellers price hash</span></span><br><span class="line"><span class="keyword">if</span> !bytes.Equal(calculatedPriceHash, sellerPriceHash) &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;hash %x for passed price JSON %s does not match on-chain hash %x, seller hasn&#x27;t agreed to the passed trade id and price&quot;</span>,</span><br><span class="line">calculatedPriceHash,</span><br><span class="line">priceJSON,</span><br><span class="line">sellerPriceHash,</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Verify that the hash of the passed price matches the on-chain buyer price hash</span></span><br><span class="line"><span class="keyword">if</span> !bytes.Equal(calculatedPriceHash, buyerPriceHash) &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;hash %x for passed price JSON %s does not match on-chain hash %x, buyer hasn&#x27;t agreed to the passed trade id and price&quot;</span>,</span><br><span class="line">calculatedPriceHash,</span><br><span class="line">priceJSON,</span><br><span class="line">buyerPriceHash,</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// transferAssetState performs the public and private state updates for the transferred asset</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">transferAssetState</span><span class="params">(ctx contractapi.TransactionContextInterface, asset *Asset, immutablePropertiesJSON []<span class="keyword">byte</span>, clientOrgID <span class="keyword">string</span>, buyerOrgID <span class="keyword">string</span>, price <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">asset.OwnerOrg = buyerOrgID</span><br><span class="line">updatedAsset, err := json.Marshal(asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = ctx.GetStub().PutState(asset.ID, updatedAsset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to write asset for buyer: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Change the endorsement policy to the new owner</span></span><br><span class="line">err = setAssetStateBasedEndorsement(ctx, asset.ID, buyerOrgID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed setting state based endorsement for new owner: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Transfer the private properties (delete from seller collection, create in buyer collection)</span></span><br><span class="line">collectionSeller := buildCollectionName(clientOrgID)</span><br><span class="line">err = ctx.GetStub().DelPrivateData(collectionSeller, asset.ID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to delete Asset private details from seller: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">collectionBuyer := buildCollectionName(buyerOrgID)</span><br><span class="line">err = ctx.GetStub().PutPrivateData(collectionBuyer, asset.ID, immutablePropertiesJSON)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to put Asset private properties for buyer: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete the price records for seller</span></span><br><span class="line">assetPriceKey, err := ctx.GetStub().CreateCompositeKey(typeAssetForSale, []<span class="keyword">string</span>&#123;asset.ID&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to create composite key for seller: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = ctx.GetStub().DelPrivateData(collectionSeller, assetPriceKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to delete asset price from implicit private data collection for seller: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete the price records for buyer</span></span><br><span class="line">assetPriceKey, err = ctx.GetStub().CreateCompositeKey(typeAssetBid, []<span class="keyword">string</span>&#123;asset.ID&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to create composite key for buyer: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = ctx.GetStub().DelPrivateData(collectionBuyer, assetPriceKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to delete asset price from implicit private data collection for buyer: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keep record for a &#x27;receipt&#x27; in both buyers and sellers private data collection to record the sale price and date.</span></span><br><span class="line"><span class="comment">// Persist the agreed to price in a collection sub-namespace based on receipt key prefix.</span></span><br><span class="line">receiptBuyKey, err := ctx.GetStub().CreateCompositeKey(typeAssetBuyReceipt, []<span class="keyword">string</span>&#123;asset.ID, ctx.GetStub().GetTxID()&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to create composite key for receipt: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">txTimestamp, err := ctx.GetStub().GetTxTimestamp()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to create timestamp for receipt: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timestamp, err := ptypes.Timestamp(txTimestamp)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">assetReceipt := receipt&#123;</span><br><span class="line">price:     price,</span><br><span class="line">timestamp: timestamp,</span><br><span class="line">&#125;</span><br><span class="line">receipt, err := json.Marshal(assetReceipt)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to marshal receipt: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = ctx.GetStub().PutPrivateData(collectionBuyer, receiptBuyKey, receipt)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to put private asset receipt for buyer: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">receiptSaleKey, err := ctx.GetStub().CreateCompositeKey(typeAssetSaleReceipt, []<span class="keyword">string</span>&#123;ctx.GetStub().GetTxID(), asset.ID&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to create composite key for receipt: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = ctx.GetStub().PutPrivateData(collectionSeller, receiptSaleKey, receipt)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to put private asset receipt for seller: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getClientOrgID gets the client org ID.</span></span><br><span class="line"><span class="comment">// The client org ID can optionally be verified against the peer org ID, to ensure that a client</span></span><br><span class="line"><span class="comment">// from another org doesn&#x27;t attempt to read or write private data from this peer.</span></span><br><span class="line"><span class="comment">// The only exception in this scenario is for TransferAsset, since the current owner</span></span><br><span class="line"><span class="comment">// needs to get an endorsement from the buyer&#x27;s peer.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getClientOrgID</span><span class="params">(ctx contractapi.TransactionContextInterface, verifyOrg <span class="keyword">bool</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// GetClientIdentity()获取客户端的身份，返回ClientIdentity接口，这个接口有如下方法：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GetID returns the ID associated with the invoking identity.  This ID</span></span><br><span class="line"><span class="comment">// is guaranteed to be unique within the MSP.</span></span><br><span class="line"><span class="comment">// * GetID() (string, error) 获取</span></span><br><span class="line"></span><br><span class="line">clientOrgID, err := ctx.GetClientIdentity().GetMSPID()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, fmt.Errorf(<span class="string">&quot;failed getting client&#x27;s orgID: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> verifyOrg &#123;</span><br><span class="line">err = verifyClientOrgMatchesPeerOrg(clientOrgID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> clientOrgID, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// verifyClientOrgMatchesPeerOrg checks the client org id matches the peer org id.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">verifyClientOrgMatchesPeerOrg</span><span class="params">(clientOrgID <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">peerOrgID, err := shim.GetMSPID()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed getting peer&#x27;s orgID: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> clientOrgID != peerOrgID &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;client from org %s is not authorized to read or write private data from an org %s peer&quot;</span>,</span><br><span class="line">clientOrgID,</span><br><span class="line">peerOrgID,</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setAssetStateBasedEndorsement adds an endorsement policy to a asset so that only a peer from an owning org</span></span><br><span class="line"><span class="comment">// can update or transfer the asset.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setAssetStateBasedEndorsement</span><span class="params">(ctx contractapi.TransactionContextInterface, assetID <span class="keyword">string</span>, orgToEndorse <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line">endorsementPolicy, err := statebased.NewStateEP(<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">err = endorsementPolicy.AddOrgs(statebased.RoleTypeMember, orgToEndorse)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to add org to endorsement policy: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">policy, err := endorsementPolicy.Policy()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to create endorsement policy bytes from org: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fmt.Printf(&quot;assetID=%s, orgToEndorse=%s, policy=%s, len(policy)=%d \n&quot;, assetID, orgToEndorse, policy, len(policy))</span></span><br><span class="line"><span class="comment">// fmt.Printf(&quot;assetID=%s, policy=%s, endorsementPolicy.ListOrgs=%s\n&quot;, assetID, string(policy[:]), endorsementPolicy.ListOrgs())</span></span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().SetStateValidationParameter(assetID, policy)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buildCollectionName</span><span class="params">(clientOrgID <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;_implicit_org_%s&quot;</span>, clientOrgID)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getClientImplicitCollectionName</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">clientOrgID, err := getClientOrgID(ctx, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, fmt.Errorf(<span class="string">&quot;failed to get verified OrgID: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = verifyClientOrgMatchesPeerOrg(clientOrgID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> buildCollectionName(clientOrgID), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">chaincode, err := contractapi.NewChaincode(<span class="built_in">new</span>(SmartContract))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicf(<span class="string">&quot;Error create transfer asset chaincode: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := chaincode.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicf(<span class="string">&quot;Error starting asset chaincode: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> chaincode-API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>contract_chaincode.go源码学习</title>
      <link href="2024/11/22/blockchain/fabric/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6API%E5%AD%A6%E4%B9%A0/contract_chaincode.go%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
      <url>2024/11/22/blockchain/fabric/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6API%E5%AD%A6%E4%B9%A0/contract_chaincode.go%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="Chaincode如何被启用">Chaincode如何被启用</h2><h3 id="定义智能合约">定义智能合约</h3><p>我们看下面的，名为<code>SmartContract</code>的结构，就是智能合约，你也可以起其他的名字，但是无论名字叫什么，智能合约都必须有一个内嵌的<code>contractapi.Contract</code>，我们看一下它的定义：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动智能合约的入口">启动智能合约的入口</h3><p>在每个chaincode中都必须有一个<code>main</code>方法，这个方法创建一个新的链码并调用它的<code>Start()</code>方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 通过NewChaincode()方法创建链码</span></span><br><span class="line">chaincode, err := contractapi.NewChaincode(<span class="built_in">new</span>(SmartContract))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicf(<span class="string">&quot;Error create transfer asset chaincode: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 调用链码的Start()方法来启动链码</span></span><br><span class="line"><span class="keyword">if</span> err := chaincode.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicf(<span class="string">&quot;Error starting asset chaincode: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="智能合约启动的源码">智能合约启动的源码</h3><p>让我们完整的看一下<code>contractapi</code>的源码，源码路径：<code>github.com/hyperledger/fabric-contract-api-go/contractapi/contract_chaincode.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright the Hyperledger Fabric contributors. All rights reserved.</span></span><br><span class="line"><span class="comment">// SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> contractapi</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"><span class="string">&quot;sort&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;unicode&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-chaincode-go/pkg/cid&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-chaincode-go/shim&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-contract-api-go/internal&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-contract-api-go/internal/utils&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-contract-api-go/metadata&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-contract-api-go/serializer&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-protos-go/peer&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> contractChaincodeContract <span class="keyword">struct</span> &#123;</span><br><span class="line">info                      metadata.InfoMetadata</span><br><span class="line">functions                 <span class="keyword">map</span>[<span class="keyword">string</span>]*internal.ContractFunction</span><br><span class="line">unknownTransaction        *internal.TransactionHandler</span><br><span class="line">beforeTransaction         *internal.TransactionHandler</span><br><span class="line">afterTransaction          *internal.TransactionHandler</span><br><span class="line">transactionContextHandler reflect.Type</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ContractChaincode a struct to meet the chaincode interface and provide routing of calls to contracts</span></span><br><span class="line"><span class="keyword">type</span> ContractChaincode <span class="keyword">struct</span> &#123;</span><br><span class="line">DefaultContract       <span class="keyword">string</span></span><br><span class="line">contracts             <span class="keyword">map</span>[<span class="keyword">string</span>]contractChaincodeContract</span><br><span class="line">metadata              metadata.ContractChaincodeMetadata</span><br><span class="line">Info                  metadata.InfoMetadata</span><br><span class="line">TransactionSerializer serializer.TransactionSerializer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SystemContractName the name of the system smart contract</span></span><br><span class="line"><span class="keyword">const</span> SystemContractName = <span class="string">&quot;org.hyperledger.fabric&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NewChaincode creates a new chaincode using contracts passed. The function parses each</span></span><br><span class="line"><span class="comment">// of the passed functions and stores details about their make-up to be used by the chaincode.</span></span><br><span class="line"><span class="comment">// Public functions of the contracts are stored and are made callable in the chaincode. The function</span></span><br><span class="line"><span class="comment">// will error if contracts are invalid e.g. public functions take in illegal types. A system contract is added</span></span><br><span class="line"><span class="comment">// to the chaincode which provides functionality for getting the metadata of the chaincode. The generated</span></span><br><span class="line"><span class="comment">// metadata is a JSON formatted MetadataContractChaincode containing each contract as a name and details</span></span><br><span class="line"><span class="comment">// of the public functions and types they take in/return. It also outlines version details for contracts and the</span></span><br><span class="line"><span class="comment">// chaincode. If these are blank strings this is set to latest. The names for parameters do not match those used</span></span><br><span class="line"><span class="comment">// in the functions, instead they are recorded as param0, param1, ..., paramN. If there exists a file</span></span><br><span class="line"><span class="comment">// contract-metadata/metadata.json then this will overwrite the generated metadata. The contents of this file must</span></span><br><span class="line"><span class="comment">// validate against the schema. The transaction serializer for the contract is set to be the JSONSerializer by</span></span><br><span class="line"><span class="comment">// default. This can be updated using by changing the TransactionSerializer property</span></span><br><span class="line"><span class="comment">// 使用传入的`ContractInterface`列表创建一个新的链码（说明链码并不是智能合约，链码包含了很多智能合约）。</span></span><br><span class="line"><span class="comment">// 该函数解析每个被传递过来的`ContractInterface`的函数，并存储有关链码将使用的其组成的详细信息。</span></span><br><span class="line"><span class="comment">// contracts的公共方法被存储并且可以在链码中调用这些公共方法。如果合约定义的不合法（如公共方法使用非法的类型）这个方法会报错。</span></span><br><span class="line"><span class="comment">// 一个系统合约已添加到链码中，该合约提供了获取链码元数据的功能。</span></span><br><span class="line"><span class="comment">// 生成的元数据是JSON格式的MetadataContractChaincode，其中包含每个合约的名称以及公共函数以及它们参数和返回的类型的详细信息。</span></span><br><span class="line"><span class="comment">// 它还概述了合同和链码的版本详细信息。 如果这些是空白字符串，则将其设置为最新。</span></span><br><span class="line"><span class="comment">// 元数据对于公共方法的描述的参数名称与原始定义的函数中使用的名称不匹配，而是记录为param0，param1，...，paramN。</span></span><br><span class="line"><span class="comment">// 如果存在contract-metadata/metadata.json文件，那么它将覆盖生成的元数据。 该文件的内容必须根据架构进行验证。</span></span><br><span class="line"><span class="comment">// 默认情况下，合约的交易序列化器设置为JSONSerializer。可以通过更改TransactionSerializer属性来更改。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewChaincode</span><span class="params">(contracts ...ContractInterface)</span> <span class="params">(*ContractChaincode, error)</span></span> &#123;</span><br><span class="line">ciMethods := getCiMethods()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// new一个ContractChaincode</span></span><br><span class="line">cc := <span class="built_in">new</span>(ContractChaincode)</span><br><span class="line">  <span class="comment">// 设置cc的contracts为一个空map</span></span><br><span class="line">cc.contracts = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]contractChaincodeContract)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历传入的合约列表</span></span><br><span class="line"><span class="keyword">for</span> _, contract := <span class="keyword">range</span> contracts &#123;</span><br><span class="line">additionalExcludes := []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 如果传入的合约类型是IgnoreContractInterface</span></span><br><span class="line"><span class="keyword">if</span> castContract, ok := contract.(IgnoreContractInterface); ok &#123;</span><br><span class="line">      <span class="comment">// 则把castContract中的需要忽略的方法赋值给additionalExcludes切片</span></span><br><span class="line">additionalExcludes = castContract.GetIgnoredFunctions()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向cc中添加合约，下面再看addContract方法都干了什么</span></span><br><span class="line">err := cc.addContract(contract, <span class="built_in">append</span>(ciMethods, additionalExcludes...))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建系统合约，并把系统合约添加到链码中</span></span><br><span class="line">sysC := <span class="built_in">new</span>(SystemContract)</span><br><span class="line">sysC.Name = SystemContractName</span><br><span class="line"></span><br><span class="line">cc.addContract(sysC, ciMethods) <span class="comment">// should never error as system contract is good</span></span><br><span class="line"><span class="comment">// 增加元数据</span></span><br><span class="line">err := cc.augmentMetadata()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">metadataJSON, _ := json.Marshal(cc.metadata)</span><br><span class="line"><span class="comment">// 把元数据设置到系统合约中</span></span><br><span class="line">sysC.setMetadata(<span class="keyword">string</span>(metadataJSON))</span><br><span class="line">  <span class="comment">// 设置链码的交易序列化器</span></span><br><span class="line">cc.TransactionSerializer = <span class="built_in">new</span>(serializer.JSONSerializer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> cc, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Start starts the chaincode in the fabric shim</span></span><br><span class="line"><span class="comment">// 在fabric shim中启动链码</span></span><br><span class="line"><span class="comment">// 至于shim是什么，先了解大概：shim包为链码提供API，这些API可以访问状态变量、交易上下文和调用其他的链码。</span></span><br><span class="line"><span class="comment">// shim包源码注释：</span></span><br><span class="line"><span class="comment">// Package shim provides APIs for the chaincode to access its state</span></span><br><span class="line"><span class="comment">// variables, transaction context and call other chaincodes.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cc *ContractChaincode)</span> <span class="title">Start</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Start(cc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Init is called during Instantiate transaction after the chaincode container</span></span><br><span class="line"><span class="comment">// has been established for the first time, passes off details of the request to Invoke</span></span><br><span class="line"><span class="comment">// for handling the request if a function name is passed, otherwise returns shim.Success</span></span><br><span class="line"><span class="comment">// 首次建立链码容器后，在实例化交易之前调用Init</span></span><br><span class="line"><span class="comment">// 如果一个方法名被传递了过来，则把请求的详情传递给Invoke方法来处理，否则返回shim.Success</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cc *ContractChaincode)</span> <span class="title">Init</span><span class="params">(stub shim.ChaincodeStubInterface)</span> <span class="title">peer</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line">nsFcn, _ := stub.GetFunctionAndParameters()</span><br><span class="line"><span class="keyword">if</span> nsFcn == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Success([]<span class="keyword">byte</span>(<span class="string">&quot;Default initiator successful.&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> cc.Invoke(stub)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke is called to update or query the ledger in a proposal transaction. Takes the</span></span><br><span class="line"><span class="comment">// args passed in the transaction and uses the first argument to identify the contract</span></span><br><span class="line"><span class="comment">// and function of that contract to be called. The remaining args are then used as</span></span><br><span class="line"><span class="comment">// parameters to that function. Args are converted from strings to the expected parameter</span></span><br><span class="line"><span class="comment">// types of the function before being passed using the set transaction serializer for the ContractChaincode.</span></span><br><span class="line"><span class="comment">// A transaction context is generated and is passed, if required, as the first parameter to the named function.</span></span><br><span class="line"><span class="comment">// Before and after functions are called before and after the named function passed if the contract defines such</span></span><br><span class="line"><span class="comment">// functions to exist. If the before function returns an error the named function is not called and its error</span></span><br><span class="line"><span class="comment">// is returned in shim.Error. If the after function returns an error then its value is returned</span></span><br><span class="line"><span class="comment">// to shim.Error otherwise the value returned from the named function is returned as shim.Success (formatted by</span></span><br><span class="line"><span class="comment">// the transaction serializer). If an unknown name is passed as part of the first arg a shim.Error is returned.</span></span><br><span class="line"><span class="comment">// If a valid name is passed but the function name is unknown then the contract with that name&#x27;s</span></span><br><span class="line"><span class="comment">// unknown function is called and its value returned as success or error depending on its return. If no</span></span><br><span class="line"><span class="comment">// unknown function is defined for the contract then shim.Error is returned by Invoke. In the case of</span></span><br><span class="line"><span class="comment">// unknown function names being passed (and the unknown handler returns an error) or the named function</span></span><br><span class="line"><span class="comment">// returning an error then the after function if defined is not called. If the named function or unknown</span></span><br><span class="line"><span class="comment">// function handler returns a non-error type then then the after transaction is sent this value. The same</span></span><br><span class="line"><span class="comment">// transaction context is passed as a pointer to before, after, named and unknown functions on each Invoke.</span></span><br><span class="line"><span class="comment">// If no contract name is passed then the default contract is used.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cc *ContractChaincode)</span> <span class="title">Invoke</span><span class="params">(stub shim.ChaincodeStubInterface)</span> <span class="title">peer</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line">  <span class="comment">// 获取方法和入参</span></span><br><span class="line">nsFcn, params := stub.GetFunctionAndParameters()</span><br><span class="line"><span class="comment">// 获取字符串&quot;:&quot;在nsFcn中最后一次出现的下标</span></span><br><span class="line">li := strings.LastIndex(nsFcn, 字符串<span class="string">&quot;:&quot;</span>在)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合约</span></span><br><span class="line"><span class="keyword">var</span> ns <span class="keyword">string</span></span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line"><span class="keyword">var</span> fn <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果nsFcn中不存在&quot;:&quot;，则说明没有指定合约名称</span></span><br><span class="line"><span class="keyword">if</span> li == <span class="number">-1</span> &#123;</span><br><span class="line">ns = cc.DefaultContract</span><br><span class="line">fn = nsFcn</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ns = nsFcn[:li]</span><br><span class="line">fn = nsFcn[li+<span class="number">1</span>:]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果合约名不在链码的合约里面，则报错</span></span><br><span class="line"><span class="keyword">if</span> _, ok := cc.contracts[ns]; !ok &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(fmt.Sprintf(<span class="string">&quot;Contract not found with name %s&quot;</span>, ns))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果方法为空，则报错</span></span><br><span class="line"><span class="keyword">if</span> fn == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(<span class="string">&quot;Blank function name passed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">originalFn := fn</span><br><span class="line">  <span class="comment">// 把fn强转成rune(int32类型的别名)</span></span><br><span class="line">fnRune := []<span class="keyword">rune</span>(fn)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果传入的方法名的首字母是小写的，则转换成大写</span></span><br><span class="line"><span class="keyword">if</span> unicode.IsLower(fnRune[<span class="number">0</span>]) &#123;</span><br><span class="line">fnRune[<span class="number">0</span>] = unicode.ToUpper(fnRune[<span class="number">0</span>])</span><br><span class="line">fn = <span class="keyword">string</span>(fnRune)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从链码的合约列表中获取合约</span></span><br><span class="line">nsContract := cc.contracts[ns]</span><br><span class="line"><span class="comment">// 通过反射new一个transactionContextHandler类型；这几行有点看不懂了，暂停一下TODO</span></span><br><span class="line">ctx := reflect.New(nsContract.transactionContextHandler)</span><br><span class="line">ctxIface := ctx.Interface().(SettableTransactionContextInterface)</span><br><span class="line">ctxIface.SetStub(stub)</span><br><span class="line"></span><br><span class="line">ci, _ := cid.New(stub)</span><br><span class="line">ctxIface.SetClientIdentity(ci)</span><br><span class="line"></span><br><span class="line">beforeTransaction := nsContract.beforeTransaction</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> beforeTransaction != <span class="literal">nil</span> &#123;</span><br><span class="line">_, _, errRes := beforeTransaction.Call(ctx, <span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> errRes != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(errRes.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> successReturn <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> successIFace <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> errorReturn error</span><br><span class="line"></span><br><span class="line">serializer := cc.TransactionSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, ok := nsContract.functions[fn]; !ok &#123;</span><br><span class="line">unknownTransaction := nsContract.unknownTransaction</span><br><span class="line"><span class="keyword">if</span> unknownTransaction == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(fmt.Sprintf(<span class="string">&quot;Function %s not found in contract %s&quot;</span>, originalFn, ns))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">successReturn, successIFace, errorReturn = unknownTransaction.Call(ctx, <span class="literal">nil</span>, serializer)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">var</span> transactionSchema *metadata.TransactionMetadata</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> cc.metadata.Contracts[ns].Transactions &#123;</span><br><span class="line"><span class="keyword">if</span> v.Name == fn &#123;</span><br><span class="line">transactionSchema = &amp;v</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">successReturn, successIFace, errorReturn = nsContract.functions[fn].Call(ctx, transactionSchema, &amp;cc.metadata.Components, serializer, params...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> errorReturn != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(errorReturn.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">afterTransaction := nsContract.afterTransaction</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> afterTransaction != <span class="literal">nil</span> &#123;</span><br><span class="line">_, _, errRes := afterTransaction.Call(ctx, successIFace, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> errRes != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(errRes.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> shim.Success([]<span class="keyword">byte</span>(successReturn))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cc *ContractChaincode)</span> <span class="title">addContract</span><span class="params">(contract ContractInterface, excludeFuncs []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 返回合同名称。当合同用于创建新的链码时，将调用此函数，然后使用返回的名称在调用Init/Invoke时在链码中标识合同。</span></span><br><span class="line"><span class="comment">// 此函数可以返回空白字符串，但这是未定义的行为。</span></span><br><span class="line">ns := contract.GetName()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果合约名称为空，则使用合约类型通过反射的方式获取合约的名称</span></span><br><span class="line"><span class="keyword">if</span> ns == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">ns = reflect.TypeOf(contract).Elem().Name()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果链码中已经包含了相同的合约名称，则抛异常</span></span><br><span class="line"><span class="keyword">if</span> _, ok := cc.contracts[ns]; ok &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Multiple contracts being merged into chaincode with name %s&quot;</span>, ns)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ccn := contractChaincodeContract&#123;&#125;</span><br><span class="line">ccn.transactionContextHandler = reflect.ValueOf(contract.GetTransactionContextHandler()).Elem().Type()</span><br><span class="line">transactionContextPtrHandler := reflect.ValueOf(contract.GetTransactionContextHandler()).Type()</span><br><span class="line">ccn.functions = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*internal.ContractFunction)</span><br><span class="line"><span class="comment">// GetInfo方法返回存储的合约的信息，这个信息会用于构建合约的元数据。如果此信息中的版本信息为空，则使用&quot;latest&quot;</span></span><br><span class="line"><span class="comment">// 如果信息中的title为空，则使用合约的GetName方法返回的名称，如果这个名称也为空，则使用合约的类型名</span></span><br><span class="line">ccn.info = contract.GetInfo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ccn.info.Version == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">ccn.info.Version = <span class="string">&quot;latest&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ccn.info.Title == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">ccn.info.Title = ns</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contractType := reflect.PtrTo(reflect.TypeOf(contract).Elem())</span><br><span class="line">contractValue := reflect.ValueOf(contract).Elem().Addr()</span><br><span class="line"><span class="comment">// returns the unknown function to be used for a contract.</span></span><br><span class="line"><span class="comment">// When the contract is used in creating a new chaincode this function is called</span></span><br><span class="line"><span class="comment">// and the unknown transaction returned is stored. The unknown function is then</span></span><br><span class="line"><span class="comment">// called in cases where an unknown function name is passed for a call to the</span></span><br><span class="line"><span class="comment">// contract via Init/Invoke of the chaincode. If nil is returned the</span></span><br><span class="line"><span class="comment">// chaincode uses its default handling for unknown function names</span></span><br><span class="line"><span class="comment">// 返回要用于合约的未知函数，当合约被用于创建一个新的链码时此方法被调用并且返回存储的未知的交易。</span></span><br><span class="line"><span class="comment">// 在链码通过Init/Invoke调用合约时，如果一个未知的方法名称被传入了则调用此未知方法</span></span><br><span class="line"><span class="comment">// 如果此方法返回nil。则chaincode使用一个默认值来处理未知的方法名</span></span><br><span class="line"><span class="comment">// 个人理解就是不指定方法名调用合约时的默认处理逻辑。</span></span><br><span class="line">ut := contract.GetUnknownTransaction()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ut != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">ccn.unknownTransaction, err = internal.NewTransactionHandler(ut, transactionContextPtrHandler, internal.TransactionHandlerTypeUnknown)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// returns the before function to be used for a contract.</span></span><br><span class="line"><span class="comment">// When the contract is used in creating a new chaincode this function is called</span></span><br><span class="line"><span class="comment">// and the before transaction returned is stored. The before function is then</span></span><br><span class="line"><span class="comment">// called before the named function on each Init/Invoke of that contract via the</span></span><br><span class="line"><span class="comment">// chaincode. When called the before function is passed no extra args, only the</span></span><br><span class="line"><span class="comment">// the transaction context (if specified to take it). If nil is returned</span></span><br><span class="line"><span class="comment">// then no before function is called on Init/Invoke.</span></span><br><span class="line"><span class="comment">// 返回需要对此合约使用的前置函数，当合约被用于创建一个新的链码时此方法被调用并且返回存储的前置交易。</span></span><br><span class="line"><span class="comment">// 然后通过链码在该合约使用Init/Invoke调用指定函数之前调用前置函数。</span></span><br><span class="line"><span class="comment">// 当调用before函数时，不传递任何额外的参数，仅传递事务上下文（如果指定使用它）。</span></span><br><span class="line"><span class="comment">// 如果此方法返回nil，则在调用Init/Invoke之前没有需要执行的函数。</span></span><br><span class="line">bt := contract.GetBeforeTransaction()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> bt != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">ccn.beforeTransaction, err = internal.NewTransactionHandler(bt, transactionContextPtrHandler, internal.TransactionHandlerTypeBefore)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取后置函数，在调用合约的指定方法之后调用此函数</span></span><br><span class="line">at := contract.GetAfterTransaction()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> at != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">ccn.afterTransaction, err = internal.NewTransactionHandler(at, transactionContextPtrHandler, internal.TransactionHandlerTypeAfter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">evaluateMethods := []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> eci, ok := contract.(EvaluationContractInterface); ok &#123;</span><br><span class="line"><span class="comment">// returns a list of function names that should be tagged in the</span></span><br><span class="line"><span class="comment">// metadata as &quot;evaluate&quot; to indicate to a user of the chaincode that they should query</span></span><br><span class="line"><span class="comment">// rather than invoke these functions</span></span><br><span class="line"><span class="comment">// 返回应该在元数据上打上&quot;求值&quot;标签的方法列表，来向链码的用户展示他们应该查询这个函数而不是调用它</span></span><br><span class="line"><span class="comment">// 个人理解：所以这些函数应该只是计算一些数据的，不会对账本产生影响。如果对账本产生影响又打上这个标签是不是很流氓？</span></span><br><span class="line">evaluateMethods = eci.GetEvaluateTransactions()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历合约中的所有的方法</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; contractType.NumMethod(); i++ &#123;</span><br><span class="line">typeMethod := contractType.Method(i)</span><br><span class="line">valueMethod := contractValue.Method(i)</span><br><span class="line"><span class="comment">// 如果此方法不再排除的列表中，则可以调用</span></span><br><span class="line"><span class="keyword">if</span> !utils.StringInSlice(typeMethod.Name, excludeFuncs) &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="comment">// 默认的调用方式是CallTypeSubmit</span></span><br><span class="line"><span class="keyword">var</span> callType internal.CallType = internal.CallTypeSubmit</span><br><span class="line"><span class="comment">// 如果在只用于计算的函数列表中，则调用方法修改为CallTypeEvaluate；</span></span><br><span class="line"><span class="comment">// 两次调用StringInSlice会遍历啊两个列表，是不是可以用map把这里优化一下呢？</span></span><br><span class="line"><span class="keyword">if</span> utils.StringInSlice(typeMethod.Name, evaluateMethods) &#123;</span><br><span class="line">callType = internal.CallTypeEvaluate</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建合约的方法</span></span><br><span class="line">ccn.functions[typeMethod.Name], err = internal.NewContractFunctionFromReflect(typeMethod, valueMethod, callType, transactionContextPtrHandler)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果合约方法的列表为空，则报错，一个合约中至少有一个公共方法</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(ccn.functions) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Contracts are required to have at least 1 (non-ignored) public method. Contract %s has none. Method names that have been ignored: %s&quot;</span>, ns, utils.SliceAsCommaSentence(excludeFuncs))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cc.contracts[ns] = ccn</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果链码的默认的合约为空，则把当前的合约设置为默认的合约；所以传入的第一个合约就是默认的合约</span></span><br><span class="line"><span class="keyword">if</span> cc.DefaultContract == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">cc.DefaultContract = ns</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 反射的方式获取元数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cc *ContractChaincode)</span> <span class="title">reflectMetadata</span><span class="params">()</span> <span class="title">metadata</span>.<span class="title">ContractChaincodeMetadata</span></span> &#123;</span><br><span class="line">reflectedMetadata := metadata.ContractChaincodeMetadata&#123;&#125;</span><br><span class="line">reflectedMetadata.Contracts = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]metadata.ContractMetadata)</span><br><span class="line">reflectedMetadata.Components.Schemas = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]metadata.ObjectMetadata)</span><br><span class="line">reflectedMetadata.Info = &amp;cc.Info</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> cc.Info.Version == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">reflectedMetadata.Info.Version = <span class="string">&quot;latest&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> cc.Info.Title == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">reflectedMetadata.Info.Title = <span class="string">&quot;undefined&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历链码的合约</span></span><br><span class="line"><span class="keyword">for</span> key, contract := <span class="keyword">range</span> cc.contracts &#123;</span><br><span class="line"><span class="comment">// 创建合约的元数据</span></span><br><span class="line">contractMetadata := metadata.ContractMetadata&#123;&#125;</span><br><span class="line">contractMetadata.Name = key</span><br><span class="line">infoCopy := contract.info</span><br><span class="line">contractMetadata.Info = &amp;infoCopy</span><br><span class="line"><span class="comment">// 如果这个合约是默认的合约，元数据的字段也设置为true</span></span><br><span class="line"><span class="keyword">if</span> cc.DefaultContract == key &#123;</span><br><span class="line">contractMetadata.Default = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历合约的所有方法，并创建方法的元数据，最后把这些方法的元数据加入到合约的元数据</span></span><br><span class="line"><span class="keyword">for</span> key, fn := <span class="keyword">range</span> contract.functions &#123;</span><br><span class="line">fnMetadata := fn.ReflectMetadata(key, &amp;reflectedMetadata.Components)</span><br><span class="line"></span><br><span class="line">contractMetadata.Transactions = <span class="built_in">append</span>(contractMetadata.Transactions, fnMetadata)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort.Slice(contractMetadata.Transactions, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> contractMetadata.Transactions[i].Name &lt; contractMetadata.Transactions[j].Name</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">reflectedMetadata.Contracts[key] = contractMetadata</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> reflectedMetadata</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cc *ContractChaincode)</span> <span class="title">augmentMetadata</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 读取元数据的文件，就是上面说的contract-metadata/metadata.json文件</span></span><br><span class="line">fileMetadata, err := metadata.ReadMetadataFile()</span><br><span class="line"><span class="comment">// 如果报错了并且报错信息不是因为文件不存在的错误，则把错误抛出去</span></span><br><span class="line"><span class="comment">// 优化建议：这里能不能使用不同的error类型来做这种判断呢，这么判断如果error信息更改了就必须两个地方同时修改</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; !strings.Contains(err.Error(), <span class="string">&quot;Failed to read metadata from file&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reflectedMetadata := cc.reflectMetadata()</span><br><span class="line"></span><br><span class="line">fileMetadata.Append(reflectedMetadata)</span><br><span class="line">err = fileMetadata.CompileSchemas()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 验证</span></span><br><span class="line">err = metadata.ValidateAgainstSchema(fileMetadata)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cc.metadata = fileMetadata</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getCiMethods 获取合约接口的方法描述的切片</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getCiMethods</span><span class="params">()</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">  <span class="comment">// 通过反射的方式获取这个类型</span></span><br><span class="line">contractInterfaceType := reflect.TypeOf((*ContractInterface)(<span class="literal">nil</span>)).Elem()</span><br><span class="line">ignoreContractInterfaceType := reflect.TypeOf((*IgnoreContractInterface)(<span class="literal">nil</span>)).Elem()</span><br><span class="line">evaluateContractInterfaceType := reflect.TypeOf((*EvaluationContractInterface)(<span class="literal">nil</span>)).Elem()</span><br><span class="line"></span><br><span class="line">interfaceTypes := []reflect.Type&#123;contractInterfaceType, ignoreContractInterfaceType, evaluateContractInterfaceType&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历这些反射的类型，把他们的方法描述添加到ciMethods切片中</span></span><br><span class="line"><span class="keyword">var</span> ciMethods []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">for</span> _, interfaceType := <span class="keyword">range</span> interfaceTypes &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; interfaceType.NumMethod(); i++ &#123;</span><br><span class="line">ciMethods = <span class="built_in">append</span>(ciMethods, interfaceType.Method(i).Name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ciMethods</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> chaincode-API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> API </tag>
            
            <tag> contractapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ClientIdentity接口练习</title>
      <link href="2024/11/22/blockchain/fabric/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6API%E5%AD%A6%E4%B9%A0/ClientIdentity%E6%8E%A5%E5%8F%A3%E7%BB%83%E4%B9%A0/"/>
      <url>2024/11/22/blockchain/fabric/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6API%E5%AD%A6%E4%B9%A0/ClientIdentity%E6%8E%A5%E5%8F%A3%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>学习<code>/github.com/hyperledger/fabric-chaincode-go/pkg/cid/interfaces.go</code>中的ClientIdentity接口，源码如下，比较简单：</p><h3 id="源码">源码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ClientIdentity represents information about the identity that submitted the</span></span><br><span class="line"><span class="comment">// transaction</span></span><br><span class="line"><span class="comment">// ClientIdentity表示提交交易的身份的信息</span></span><br><span class="line"><span class="keyword">type</span> ClientIdentity <span class="keyword">interface</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// GetID returns the ID associated with the invoking identity.  This ID</span></span><br><span class="line">   <span class="comment">// is guaranteed to be unique within the MSP.</span></span><br><span class="line">   <span class="comment">// 返回与调用者身份关联的ID。该ID在MSP中保证是唯一的。</span></span><br><span class="line">   GetID() (<span class="keyword">string</span>, error)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Return the MSP ID of the client</span></span><br><span class="line">   <span class="comment">// 获取客户端的MSP的ID</span></span><br><span class="line">   GetMSPID() (<span class="keyword">string</span>, error)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// GetAttributeValue returns the value of the client&#x27;s attribute named `attrName`.</span></span><br><span class="line">   <span class="comment">// If the client possesses the attribute, `found` is true and `value` equals the</span></span><br><span class="line">   <span class="comment">// value of the attribute.</span></span><br><span class="line">   <span class="comment">// If the client does not possess the attribute, `found` is false and `value`</span></span><br><span class="line">   <span class="comment">// equals &quot;&quot;.</span></span><br><span class="line">   <span class="comment">// 返回名为`attrName`的客户端的属性信息</span></span><br><span class="line">   <span class="comment">// 如果客户端有这个属性，返回值`found`等于true并且返回值`value`等于这个属性。</span></span><br><span class="line">   <span class="comment">// 如果这个客户端不拥有这个属性，`found`等于false并且`value`等于&quot;&quot;。</span></span><br><span class="line">   GetAttributeValue(attrName <span class="keyword">string</span>) (value <span class="keyword">string</span>, found <span class="keyword">bool</span>, err error)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// AssertAttributeValue verifies that the client has the attribute named `attrName`</span></span><br><span class="line">   <span class="comment">// with a value of `attrValue`; otherwise, an error is returned.</span></span><br><span class="line">   <span class="comment">// 验证客户端是否有名为`attrName`的属性，并且值为`attrValue`；如果没有或者值不一致则返回一个error</span></span><br><span class="line">   AssertAttributeValue(attrName, attrValue <span class="keyword">string</span>) error</span><br><span class="line"></span><br><span class="line">   <span class="comment">// GetX509Certificate returns the X509 certificate associated with the client,</span></span><br><span class="line">   <span class="comment">// or nil if it was not identified by an X509 certificate.</span></span><br><span class="line">   <span class="comment">// 返回与客户端关联的X509证书，如果没有被X509证书标识，则返回nil。</span></span><br><span class="line">   GetX509Certificate() (*x509.Certificate, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试代码：">测试代码：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-contract-api-go/contractapi&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ClientIdentityPractice ClientIdentity接口提供的方法练习</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">ClientIdentityPractice</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;ClientIdentityPractice==================start=====================&quot;</span>)</span><br><span class="line">clientIdentity := ctx.GetClientIdentity()</span><br><span class="line">id, err := clientIdentity.GetID()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;clientIdentity.GetID()=%s&quot;</span>, id)</span><br><span class="line">mspid, err := clientIdentity.GetMSPID()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;clientIdentity.GetMSPID()=%s&quot;</span>, mspid)</span><br><span class="line">certificate, err := clientIdentity.GetX509Certificate()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;clientIdentity.GetX509Certificate()=%#v&quot;</span>, certificate)</span><br><span class="line">value, found, err := clientIdentity.GetAttributeValue(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> found &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;clientIdentity.GetAttributeValue(\&quot;test\&quot;)=%s&quot;</span>, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := clientIdentity.AssertAttributeValue(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;hello&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;clientIdentity.AssertAttributeValue(\&quot;test\&quot;, \&quot;hello\&quot;) error!&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Println(<span class="string">&quot;ClientIdentityPractice===================end======================&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试日志">测试日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2021&#x2F;01&#x2F;25 03:42:33 ClientIdentityPractice&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;start&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2021&#x2F;01&#x2F;25 03:42:33 clientIdentity.GetID()&#x3D;eDUwOTo6Q049QWRtaW5AczIuc3VwcGx5LmNvbSxMPVNhbiBGcmFuY2lzY28sU1Q9Q2FsaWZvcm5pYSxDPVVTOjpDTj1jYS5zMi5zdXBwbHkuY29tLE89czIuc3VwcGx5LmNvbSxMPVNhbiBGcmFuY2lzY28sU1Q9Q2FsaWZvcm5pYSxDPVVT</span><br><span class="line">2021&#x2F;01&#x2F;25 03:42:33 clientIdentity.GetMSPID()&#x3D;GylSOrg2MSP</span><br><span class="line">2021&#x2F;01&#x2F;25 03:42:33 clientIdentity.GetX509Certificate()&#x3D;&amp;x509.Certificate&#123;Raw:[]uint8&#123;0x30, 0x82, 0x2, 0x11, 0x30, 0x82, 0x1, 0xb7, 0xa0, 0x3, 0x2, 0x1, 0x2, 0x2, 0x11, 0x0, 0x9c, 0x36, 0x61, 0x42, 0xa4, 0x9b, 0x22, 0xae, 0xb0, 0x61, 0xe6, 0xdf, 0x70, 0xfb, 0x2e, 0x19, 0x30, 0xa, 0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x4, 0x3, 0x2, 0x30, 0x6d, 0x31, 0xb, 0x30, 0x9, 0x6, 0x3, 0x55, 0x4, 0x6, 0x13, 0x2, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x6, 0x3, 0x55, 0x4, 0x8, 0x13, 0xa, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f, 0x72, 0x6e, 0x69, 0x61, 0x31, 0x16, 0x30, 0x14, 0x6, 0x3, 0x55, 0x4, 0x7, 0x13, 0xd, 0x53, 0x61, 0x6e, 0x20, 0x46, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x31, 0x16, 0x30, 0x14, 0x6, 0x3, 0x55, 0x4, 0xa, 0x13, 0xd, 0x73, 0x32, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x31, 0x19, 0x30, 0x17, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x10, 0x63, 0x61, 0x2e, 0x73, 0x32, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x1e, 0x17, 0xd, 0x32, 0x31, 0x30, 0x31, 0x30, 0x37, 0x30, 0x38, 0x33, 0x31, 0x30, 0x30, 0x5a, 0x17, 0xd, 0x33, 0x31, 0x30, 0x31, 0x30, 0x35, 0x30, 0x38, 0x33, 0x31, 0x30, 0x30, 0x5a, 0x30, 0x58, 0x31, 0xb, 0x30, 0x9, 0x6, 0x3, 0x55, 0x4, 0x6, 0x13, 0x2, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x6, 0x3, 0x55, 0x4, 0x8, 0x13, 0xa, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f, 0x72, 0x6e, 0x69, 0x61, 0x31, 0x16, 0x30, 0x14, 0x6, 0x3, 0x55, 0x4, 0x7, 0x13, 0xd, 0x53, 0x61, 0x6e, 0x20, 0x46, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x31, 0x1c, 0x30, 0x1a, 0x6, 0x3, 0x55, 0x4, 0x3, 0xc, 0x13, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x40, 0x73, 0x32, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x59, 0x30, 0x13, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x3, 0x1, 0x7, 0x3, 0x42, 0x0, 0x4, 0x9e, 0x80, 0x9f, 0x9b, 0xc7, 0x9a, 0xe8, 0x35, 0x60, 0x12, 0x14, 0x5c, 0xab, 0x83, 0xe7, 0x46, 0x49, 0xef, 0xd4, 0xe2, 0xc0, 0x39, 0x16, 0xe6, 0xe1, 0x2b, 0xd9, 0x99, 0x17, 0x53, 0x91, 0x26, 0x5f, 0x5, 0x65, 0xc7, 0x0, 0x8e, 0x2a, 0x97, 0xea, 0x28, 0xea, 0xf5, 0x5d, 0xd9, 0x34, 0xd, 0x63, 0x25, 0x1, 0x3, 0xd0, 0x23, 0x17, 0x97, 0x92, 0xd7, 0x55, 0x4, 0x9c, 0x45, 0x73, 0x82, 0xa3, 0x4d, 0x30, 0x4b, 0x30, 0xe, 0x6, 0x3, 0x55, 0x1d, 0xf, 0x1, 0x1, 0xff, 0x4, 0x4, 0x3, 0x2, 0x7, 0x80, 0x30, 0xc, 0x6, 0x3, 0x55, 0x1d, 0x13, 0x1, 0x1, 0xff, 0x4, 0x2, 0x30, 0x0, 0x30, 0x2b, 0x6, 0x3, 0x55, 0x1d, 0x23, 0x4, 0x24, 0x30, 0x22, 0x80, 0x20, 0x63, 0xbd, 0xab, 0x9a, 0x9c, 0xa7, 0x4f, 0x3d, 0x8b, 0xb6, 0xc3, 0xab, 0xc, 0xb1, 0x45, 0x87, 0x60, 0x69, 0x7e, 0xb9, 0x6, 0xfb, 0x38, 0x5f, 0x9c, 0x2, 0xb1, 0x75, 0x9b, 0xc6, 0x3d, 0xfb, 0x30, 0xa, 0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x4, 0x3, 0x2, 0x3, 0x48, 0x0, 0x30, 0x45, 0x2, 0x21, 0x0, 0x91, 0x4, 0x2f, 0xee, 0x17, 0xca, 0x28, 0x68, 0xb4, 0x33, 0x48, 0x3a, 0x3a, 0x7b, 0x9f, 0xb8, 0x51, 0xb0, 0x6a, 0x8d, 0x28, 0xb9, 0x31, 0x4c, 0xb7, 0x21, 0x87, 0xd5, 0xac, 0xce, 0x6d, 0x1d, 0x2, 0x20, 0x68, 0x61, 0xca, 0x5d, 0xc2, 0x99, 0x63, 0xba, 0xb4, 0x4f, 0x1b, 0x3a, 0x2e, 0xc6, 0xed, 0x6b, 0x25, 0xba, 0x91, 0x63, 0xce, 0x1, 0xe7, 0xba, 0x67, 0x55, 0xbc, 0xb6, 0x8a, 0x76, 0x54, 0x37&#125;, RawTBSCertificate:[]uint8&#123;0x30, 0x82, 0x1, 0xb7, 0xa0, 0x3, 0x2, 0x1, 0x2, 0x2, 0x11, 0x0, 0x9c, 0x36, 0x61, 0x42, 0xa4, 0x9b, 0x22, 0xae, 0xb0, 0x61, 0xe6, 0xdf, 0x70, 0xfb, 0x2e, 0x19, 0x30, 0xa, 0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x4, 0x3, 0x2, 0x30, 0x6d, 0x31, 0xb, 0x30, 0x9, 0x6, 0x3, 0x55, 0x4, 0x6, 0x13, 0x2, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x6, 0x3, 0x55, 0x4, 0x8, 0x13, 0xa, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f, 0x72, 0x6e, 0x69, 0x61, 0x31, 0x16, 0x30, 0x14, 0x6, 0x3, 0x55, 0x4, 0x7, 0x13, 0xd, 0x53, 0x61, 0x6e, 0x20, 0x46, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x31, 0x16, 0x30, 0x14, 0x6, 0x3, 0x55, 0x4, 0xa, 0x13, 0xd, 0x73, 0x32, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x31, 0x19, 0x30, 0x17, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x10, 0x63, 0x61, 0x2e, 0x73, 0x32, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x1e, 0x17, 0xd, 0x32, 0x31, 0x30, 0x31, 0x30, 0x37, 0x30, 0x38, 0x33, 0x31, 0x30, 0x30, 0x5a, 0x17, 0xd, 0x33, 0x31, 0x30, 0x31, 0x30, 0x35, 0x30, 0x38, 0x33, 0x31, 0x30, 0x30, 0x5a, 0x30, 0x58, 0x31, 0xb, 0x30, 0x9, 0x6, 0x3, 0x55, 0x4, 0x6, 0x13, 0x2, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x6, 0x3, 0x55, 0x4, 0x8, 0x13, 0xa, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f, 0x72, 0x6e, 0x69, 0x61, 0x31, 0x16, 0x30, 0x14, 0x6, 0x3, 0x55, 0x4, 0x7, 0x13, 0xd, 0x53, 0x61, 0x6e, 0x20, 0x46, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x31, 0x1c, 0x30, 0x1a, 0x6, 0x3, 0x55, 0x4, 0x3, 0xc, 0x13, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x40, 0x73, 0x32, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x59, 0x30, 0x13, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x3, 0x1, 0x7, 0x3, 0x42, 0x0, 0x4, 0x9e, 0x80, 0x9f, 0x9b, 0xc7, 0x9a, 0xe8, 0x35, 0x60, 0x12, 0x14, 0x5c, 0xab, 0x83, 0xe7, 0x46, 0x49, 0xef, 0xd4, 0xe2, 0xc0, 0x39, 0x16, 0xe6, 0xe1, 0x2b, 0xd9, 0x99, 0x17, 0x53, 0x91, 0x26, 0x5f, 0x5, 0x65, 0xc7, 0x0, 0x8e, 0x2a, 0x97, 0xea, 0x28, 0xea, 0xf5, 0x5d, 0xd9, 0x34, 0xd, 0x63, 0x25, 0x1, 0x3, 0xd0, 0x23, 0x17, 0x97, 0x92, 0xd7, 0x55, 0x4, 0x9c, 0x45, 0x73, 0x82, 0xa3, 0x4d, 0x30, 0x4b, 0x30, 0xe, 0x6, 0x3, 0x55, 0x1d, 0xf, 0x1, 0x1, 0xff, 0x4, 0x4, 0x3, 0x2, 0x7, 0x80, 0x30, 0xc, 0x6, 0x3, 0x55, 0x1d, 0x13, 0x1, 0x1, 0xff, 0x4, 0x2, 0x30, 0x0, 0x30, 0x2b, 0x6, 0x3, 0x55, 0x1d, 0x23, 0x4, 0x24, 0x30, 0x22, 0x80, 0x20, 0x63, 0xbd, 0xab, 0x9a, 0x9c, 0xa7, 0x4f, 0x3d, 0x8b, 0xb6, 0xc3, 0xab, 0xc, 0xb1, 0x45, 0x87, 0x60, 0x69, 0x7e, 0xb9, 0x6, 0xfb, 0x38, 0x5f, 0x9c, 0x2, 0xb1, 0x75, 0x9b, 0xc6, 0x3d, 0xfb&#125;, RawSubjectPublicKeyInfo:[]uint8&#123;0x30, 0x59, 0x30, 0x13, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x3, 0x1, 0x7, 0x3, 0x42, 0x0, 0x4, 0x9e, 0x80, 0x9f, 0x9b, 0xc7, 0x9a, 0xe8, 0x35, 0x60, 0x12, 0x14, 0x5c, 0xab, 0x83, 0xe7, 0x46, 0x49, 0xef, 0xd4, 0xe2, 0xc0, 0x39, 0x16, 0xe6, 0xe1, 0x2b, 0xd9, 0x99, 0x17, 0x53, 0x91, 0x26, 0x5f, 0x5, 0x65, 0xc7, 0x0, 0x8e, 0x2a, 0x97, 0xea, 0x28, 0xea, 0xf5, 0x5d, 0xd9, 0x34, 0xd, 0x63, 0x25, 0x1, 0x3, 0xd0, 0x23, 0x17, 0x97, 0x92, 0xd7, 0x55, 0x4, 0x9c, 0x45, 0x73, 0x82&#125;, RawSubject:[]uint8&#123;0x30, 0x58, 0x31, 0xb, 0x30, 0x9, 0x6, 0x3, 0x55, 0x4, 0x6, 0x13, 0x2, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x6, 0x3, 0x55, 0x4, 0x8, 0x13, 0xa, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f, 0x72, 0x6e, 0x69, 0x61, 0x31, 0x16, 0x30, 0x14, 0x6, 0x3, 0x55, 0x4, 0x7, 0x13, 0xd, 0x53, 0x61, 0x6e, 0x20, 0x46, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x31, 0x1c, 0x30, 0x1a, 0x6, 0x3, 0x55, 0x4, 0x3, 0xc, 0x13, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x40, 0x73, 0x32, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x63, 0x6f, 0x6d&#125;, RawIssuer:[]uint8&#123;0x30, 0x6d, 0x31, 0xb, 0x30, 0x9, 0x6, 0x3, 0x55, 0x4, 0x6, 0x13, 0x2, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x6, 0x3, 0x55, 0x4, 0x8, 0x13, 0xa, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f, 0x72, 0x6e, 0x69, 0x61, 0x31, 0x16, 0x30, 0x14, 0x6, 0x3, 0x55, 0x4, 0x7, 0x13, 0xd, 0x53, 0x61, 0x6e, 0x20, 0x46, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x31, 0x16, 0x30, 0x14, 0x6, 0x3, 0x55, 0x4, 0xa, 0x13, 0xd, 0x73, 0x32, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x31, 0x19, 0x30, 0x17, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x10, 0x63, 0x61, 0x2e, 0x73, 0x32, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x63, 0x6f, 0x6d&#125;, Signature:[]uint8&#123;0x30, 0x45, 0x2, 0x21, 0x0, 0x91, 0x4, 0x2f, 0xee, 0x17, 0xca, 0x28, 0x68, 0xb4, 0x33, 0x48, 0x3a, 0x3a, 0x7b, 0x9f, 0xb8, 0x51, 0xb0, 0x6a, 0x8d, 0x28, 0xb9, 0x31, 0x4c, 0xb7, 0x21, 0x87, 0xd5, 0xac, 0xce, 0x6d, 0x1d, 0x2, 0x20, 0x68, 0x61, 0xca, 0x5d, 0xc2, 0x99, 0x63, 0xba, 0xb4, 0x4f, 0x1b, 0x3a, 0x2e, 0xc6, 0xed, 0x6b, 0x25, 0xba, 0x91, 0x63, 0xce, 0x1, 0xe7, 0xba, 0x67, 0x55, 0xbc, 0xb6, 0x8a, 0x76, 0x54, 0x37&#125;, SignatureAlgorithm:10, PublicKeyAlgorithm:3, PublicKey:(*ecdsa.PublicKey)(0xc0003f4980), Version:3, SerialNumber:207641924046541125914056390919893757465, Issuer:pkix.Name&#123;Country:[]string&#123;&quot;US&quot;&#125;, Organization:[]string&#123;&quot;s2.supply.com&quot;&#125;, OrganizationalUnit:[]string(nil), Locality:[]string&#123;&quot;San Francisco&quot;&#125;, Province:[]string&#123;&quot;California&quot;&#125;, StreetAddress:[]string(nil), PostalCode:[]string(nil), SerialNumber:&quot;&quot;, CommonName:&quot;ca.s2.supply.com&quot;, Names:[]pkix.AttributeTypeAndValue&#123;pkix.AttributeTypeAndValue&#123;Type:asn1.ObjectIdentifier&#123;2, 5, 4, 6&#125;, Value:&quot;US&quot;&#125;, pkix.AttributeTypeAndValue&#123;Type:asn1.ObjectIdentifier&#123;2, 5, 4, 8&#125;, Value:&quot;California&quot;&#125;, pkix.AttributeTypeAndValue&#123;Type:asn1.ObjectIdentifier&#123;2, 5, 4, 7&#125;, Value:&quot;San Francisco&quot;&#125;, pkix.AttributeTypeAndValue&#123;Type:asn1.ObjectIdentifier&#123;2, 5, 4, 10&#125;, Value:&quot;s2.supply.com&quot;&#125;, pkix.AttributeTypeAndValue&#123;Type:asn1.ObjectIdentifier&#123;2, 5, 4, 3&#125;, Value:&quot;ca.s2.supply.com&quot;&#125;&#125;, ExtraNames:[]pkix.AttributeTypeAndValue(nil)&#125;, Subject:pkix.Name&#123;Country:[]string&#123;&quot;US&quot;&#125;, Organization:[]string(nil), OrganizationalUnit:[]string(nil), Locality:[]string&#123;&quot;San Francisco&quot;&#125;, Province:[]string&#123;&quot;California&quot;&#125;, StreetAddress:[]string(nil), PostalCode:[]string(nil), SerialNumber:&quot;&quot;, CommonName:&quot;Admin@s2.supply.com&quot;, Names:[]pkix.AttributeTypeAndValue&#123;pkix.AttributeTypeAndValue&#123;Type:asn1.ObjectIdentifier&#123;2, 5, 4, 6&#125;, Value:&quot;US&quot;&#125;, pkix.AttributeTypeAndValue&#123;Type:asn1.ObjectIdentifier&#123;2, 5, 4, 8&#125;, Value:&quot;California&quot;&#125;, pkix.AttributeTypeAndValue&#123;Type:asn1.ObjectIdentifier&#123;2, 5, 4, 7&#125;, Value:&quot;San Francisco&quot;&#125;, pkix.AttributeTypeAndValue&#123;Type:asn1.ObjectIdentifier&#123;2, 5, 4, 3&#125;, Value:&quot;Admin@s2.supply.com&quot;&#125;&#125;, ExtraNames:[]pkix.AttributeTypeAndValue(nil)&#125;, NotBefore:time.Time&#123;wall:0x0, ext:63745605060, loc:(*time.Location)(nil)&#125;, NotAfter:time.Time&#123;wall:0x0, ext:64060965060, loc:(*time.Location)(nil)&#125;, KeyUsage:1, Extensions:[]pkix.Extension&#123;pkix.Extension&#123;Id:asn1.ObjectIdentifier&#123;2, 5, 29, 15&#125;, Critical:true, Value:[]uint8&#123;0x3, 0x2, 0x7, 0x80&#125;&#125;, pkix.Extension&#123;Id:asn1.ObjectIdentifier&#123;2, 5, 29, 19&#125;, Critical:true, Value:[]uint8&#123;0x30, 0x0&#125;&#125;, pkix.Extension&#123;Id:asn1.ObjectIdentifier&#123;2, 5, 29, 35&#125;, Critical:false, Value:[]uint8&#123;0x30, 0x22, 0x80, 0x20, 0x63, 0xbd, 0xab, 0x9a, 0x9c, 0xa7, 0x4f, 0x3d, 0x8b, 0xb6, 0xc3, 0xab, 0xc, 0xb1, 0x45, 0x87, 0x60, 0x69, 0x7e, 0xb9, 0x6, 0xfb, 0x38, 0x5f, 0x9c, 0x2, 0xb1, 0x75, 0x9b, 0xc6, 0x3d, 0xfb&#125;&#125;&#125;, ExtraExtensions:[]pkix.Extension(nil), UnhandledCriticalExtensions:[]asn1.ObjectIdentifier(nil), ExtKeyUsage:[]x509.ExtKeyUsage(nil), UnknownExtKeyUsage:[]asn1.ObjectIdentifier(nil), BasicConstraintsValid:true, IsCA:false, MaxPathLen:-1, MaxPathLenZero:false, SubjectKeyId:[]uint8(nil), AuthorityKeyId:[]uint8&#123;0x63, 0xbd, 0xab, 0x9a, 0x9c, 0xa7, 0x4f, 0x3d, 0x8b, 0xb6, 0xc3, 0xab, 0xc, 0xb1, 0x45, 0x87, 0x60, 0x69, 0x7e, 0xb9, 0x6, 0xfb, 0x38, 0x5f, 0x9c, 0x2, 0xb1, 0x75, 0x9b, 0xc6, 0x3d, 0xfb&#125;, OCSPServer:[]string(nil), IssuingCertificateURL:[]string(nil), DNSNames:[]string(nil), EmailAddresses:[]string(nil), IPAddresses:[]net.IP(nil), URIs:[]*url.URL(nil), PermittedDNSDomainsCritical:false, PermittedDNSDomains:[]string(nil), ExcludedDNSDomains:[]string(nil), PermittedIPRanges:[]*net.IPNet(nil), ExcludedIPRanges:[]*net.IPNet(nil), PermittedEmailAddresses:[]string(nil), ExcludedEmailAddresses:[]string(nil), PermittedURIDomains:[]string(nil), ExcludedURIDomains:[]string(nil), CRLDistributionPoints:[]string(nil), PolicyIdentifiers:[]asn1.ObjectIdentifier(nil)&#125;</span><br><span class="line">2021&#x2F;01&#x2F;25 03:42:33 clientIdentity.AssertAttributeValue(&quot;test&quot;, &quot;hello&quot;) error!</span><br></pre></td></tr></table></figure><h3 id="测试日志分析">测试日志分析</h3><h4 id="clientIdentity-GetID">clientIdentity.GetID()</h4><h5 id="源码-v2">源码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id := fmt.Sprintf(<span class="string">&quot;x509::%s::%s&quot;</span>, getDN(&amp;c.cert.Subject), getDN(&amp;c.cert.Issuer))</span><br><span class="line"><span class="keyword">return</span> base64.StdEncoding.EncodeToString([]<span class="keyword">byte</span>(id)), <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>解码日志输出的base64编码的内容<code>eDUwOTo6Q049QWRtaW5AczIuc3VwcGx5LmNvbSxMPVNhbiBGcmFuY2lzY28sU1Q9Q2FsaWZvcm5pYSxDPVVTOjpDTj1jYS5zMi5zdXBwbHkuY29tLE89czIuc3VwcGx5LmNvbSxMPVNhbiBGcmFuY2lzY28sU1Q9Q2FsaWZvcm5pYSxDPVVT</code>结果如下，主要是证书里面的摘要信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x509::CN=Admin@s2.supply.com,L=San Francisco,ST=California,C=US::CN=ca.s2.supply.com,O=s2.supply.com,L=San Francisco,ST=California,C=US</span><br></pre></td></tr></table></figure><h4 id="clientIdentity-GetAttributeValue-“test”">clientIdentity.GetAttributeValue(“test”)</h4><p><code>log.Printf(&quot;clientIdentity.GetAttributeValue(\&quot;test\&quot;)=%s&quot;, value)</code>这行日志没有打印，是因为没有查询到这个属性。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> chaincode-API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> API </tag>
            
            <tag> ClientIdentity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ledger(账本)</title>
      <link href="2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/Ledger/"/>
      <url>2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/Ledger/</url>
      
        <content type="html"><![CDATA[<p>本文档来自于<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/ledger/ledger.html">Ledger</a>，为了提高学习效率而做了简化。</p><h2 id="The-Ledger">The Ledger</h2><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/ledger.diagram.1.png" alt="ledger.diagram.1"></p><ul><li>Ledger：由World State和Blockchain组成</li><li>World State：是保存账本state的当前状态的数据库（个人理解：可以类比比特币的UTXO）</li><li>Blockchain：记录所有导致当前World State发生的更改的事务日志（个人理解：与比特币的区块链基本一致）</li></ul><h2 id="World-State">World State</h2><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/ledger.diagram.3.png" alt="ledger.diagram.3"></p><ul><li>世界状态是一些事实的键值对</li><li>世界状态是通过数据库实现的</li><li>应用程序提交改变世界状态的交易，这些交易最终被提交到账本的区块链</li><li>世界状态记录的事实都有版本，供Hyperledger Fabric内部使用，并且每次状态更改时都会递增</li><li>当首次创建分类帐时，世界状态为空</li></ul><h2 id="Blockchain">Blockchain</h2><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/ledger.diagram.2.png" alt="ledger.diagram.2"></p><ul><li>Blockchain是有关世界状态中的state是如何到达其当前状态的事实的历史记录</li><li>Fabric中的Blockchain是由文件实现</li><li>Blockchain由Block组成</li><li>Block包含Block header、Block data和Block metadata</li><li>Block header中包含Block data的hash值和上一个区块的hash值</li><li>Block data中包含交易列表</li></ul><h2 id="Blocks">Blocks</h2><ul><li><strong>Block Header</strong><ul><li><strong>Block number</strong>: 从零开始的数字，创世区块是0，每次追加一个新的区块这个Block number自增1</li><li><strong>Current Block Hash</strong>: 当前区块包含的所有的交易的hash值</li><li><strong>Previous Block Header Hash</strong>: 上一个区块的Block Header中的hash值</li></ul></li></ul><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/ledger.diagram.4.png" alt="ledger.diagram.4"></p><ul><li><p><strong>Block Data</strong></p><p>Block Data包含已经排好序的交易列表，这些交易在排序服务创建区块时写入到Block Data</p></li><li><p><strong>Block Metadata</strong></p><ul><li>Block Metadata包含区块创建者的证书和签名，用于通过网络节点验证块。</li><li>区块提交者将每个交易的有效/无效指示符添加到Block Metadata的bitmap中</li><li>直到（包括）该块为止的累积状态的哈希值，以便检测状态派生（这是为了在提交之前验证状态有没有被其他的交易更改）</li></ul></li></ul><h2 id="Transactions">Transactions</h2><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/ledger.diagram.5.png" alt="ledger.diagram.5"></p><p>每个交易都包含以下四部分：</p><ul><li><p><strong>Header</strong></p><p>取得有关交易的一些基本元数据-例如相关链码的名称及其版本。</p></li><li><p><strong>Signature</strong></p><p>包含客户端应用程序的签名；此字段用于检查交易明细是否未被篡改，因为它需要应用程序的私钥来生成。</p></li><li><p><strong>Proposal</strong></p><p>保存编码后的应用程序提供给智能合约的输入参数，使用这些参数来创建更新账本的提议。当智能合约运行时，该提议提供了一组输入参数，这些输入参数与当前的世界状态一起确定了新的世界状态。</p></li><li><p><strong>Response</strong></p><p>获取世界状态的前后值，作为读写集（RW-set）。它是智能合约的输出，如果交易成功通过验证，它将应用于账本来更新世界状态。</p></li><li><p><strong>Endorsements</strong></p><p>这是满足背书策略的组织的签名列表。交易响应包含了背书列表，并且只有满足交易背书策略的背书列表才会存在在此，如果不满足背书策略则不在此记录，因为也不会更新世界状态。</p></li></ul><h2 id="World-State-database-options">World State database options</h2><p>The world state is physically implemented as a database, to provide simple and efficient storage and retrieval of ledger states. As we’ve seen, ledger states can have simple or compound values, and to accommodate this, the world state database implementation can vary, allowing these values to be efficiently implemented. Options for the world state database currently include LevelDB and CouchDB.</p><p>世界状态在物理上是使用数据库实现的，以提供简单有效的存储和账本状态检索。如我们所见，账本状态可以具有简单值或复合值，为了适应这种情况，世界状态数据库的实现方式可能会有所不同，从而可以有效地实现这些情况。世界状态数据库的选项当前包括LevelDB和CouchDB。</p><p>LevelDB is the default and is particularly appropriate when ledger states are simple key-value pairs. A LevelDB database is co-located with the peer node – it is embedded within the same operating system process.</p><p>LevelDB是默认值，当账本状态为简单键/值对时尤其适用。LevelDB数据库与peer节点位于同一位置都嵌入在同一操作系统进程中。</p><p>CouchDB is a particularly appropriate choice when ledger states are structured as JSON documents because CouchDB supports the rich queries and update of richer data types often found in business transactions. Implementation-wise, CouchDB runs in a separate operating system process, but there is still a 1:1 relation between a peer node and a CouchDB instance. All of this is invisible to a smart contract. See <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/couchdb_as_state_database.html">CouchDB as the StateDatabase</a> for more information on CouchDB.</p><p>当账本状态被构造为JSON格式的文档时，CouchDB是一个特别合适的选择，因为CouchDB支持丰富的查询和业务交易中经常发生的丰富数据类型的更新。在实现方面，CouchDB在单独的操作系统进程中运行，但是peer节点和CouchDB实例之间仍然存在1比1的关系。</p><p>In LevelDB and CouchDB, we see an important aspect of Hyperledger Fabric – it is <em>pluggable</em>. The world state database could be a relational data store, or a graph store, or a temporal database. This provides great flexibility in the types of ledger states that can be efficiently accessed, allowing Hyperledger Fabric to address many different types of problems.</p><p>在LevelDB和CouchDB中，我们看到了Hyperledger Fabric的重要方面–它是插件化的。世界状态数据库可以是关系数据存储，图形存储或时态数据库。这为可以有效访问的账本状态类型提供了极大的灵活性，从而使Hyperledger Fabric可以解决许多不同类型的问题。</p><h2 id="Example-Ledger-Basic-Asset-Transfer">Example Ledger: Basic Asset Transfer</h2><p>使用同一个身份创建四个资产，账本会变成下面这样：</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/ledger.diagram.6.png" alt="ledger.diagram.6"></p><h2 id="Namespaces">Namespaces</h2><p>Even though we have presented the ledger as though it were a single world state and single blockchain, that’s a little bit of an over-simplification. In reality, each chaincode has its own world state that is separate from all other chaincodes. World states are in a namespace so that only smart contracts within the same chaincode can access a given namespace.</p><p>即使我们已经将账本呈现为一个单一的世界状态和单个区块链，但这还是有点过分简化了。实际上，每个链码都有其自己的世界状态，该状态与所有其他链码分开。世界状态位于名称空间中，因此只有相同链码内的智能合约才能访问给定的名称空间。</p><p>A blockchain is not namespaced. It contains transactions from many different smart contract namespaces. You can read more about chaincode namespaces in this <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/developapps/chaincodenamespace.html">topic</a>.</p><p>区块链没有命名空间。它包含来自许多不同的智能合约命名空间的交易。您可以在<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/developapps/chaincodenamespace.html">Chaincode namespace</a>中阅读有关链码名称空间的更多信息。</p><h2 id="Channels">Channels</h2><p>In Hyperledger Fabric, each <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/channels.html">channel</a> has a completely separate ledger. This means a completely separate blockchain, and completely separate world states, including namespaces. It is possible for applications and smart contracts to communicate between channels so that ledger information can be accessed between them.</p><p>在Hyperledger Fabric中，每个通道都有一个完全独立的账本。这意味着完全独立的区块链，以及完全独立的世界状态以及名称空间。应用程序和智能合约可以在通道之间进行通信，以便可以在它们之间访问分类帐信息。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> Key Concepts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> Ledger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Membership Service Provider (MSP)</title>
      <link href="2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/MSP/"/>
      <url>2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/MSP/</url>
      
        <content type="html"><![CDATA[<h2 id="Why-do-I-need-an-MSP-（为什么我需要MSP）">Why do I need an MSP?（为什么我需要MSP）</h2><p>Because Fabric is a permissioned network, blockchain participants need a way to prove their identity to the rest of the network in order to transact on the network. If you’ve read through the documentation on <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/identity/identity.html">Identity</a> you’ve seen how a Public Key Infrastructure (PKI) can provide verifiable identities through a chain of trust. How is that chain of trust used by the blockchain network?</p><p>因为Fabric是一个许可形式的网络，区块链参与者需要一种向网络其他成员证明自己身份的方法，以便在网络上进行交易。如果你已经阅读了 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/identity/identity.html">Identity</a> 文档，你已经看到PKI如何通过信任链提供可验证的身份。区块链网络如何使用该信任链？</p><p>Certificate Authorities issue identities by generating a public and private key which forms a key-pair that can be used to prove identity. Because a private key can never be shared publicly, a mechanism is required to enable that proof which is where the MSP comes in. For example, a peer uses its private key to digitally sign, or endorse, a transaction. The MSP on the ordering service contains the peer’s public key which is then used to verify that the signature attached to the transaction is valid. The private key is used to produce a signature on a transaction that only the corresponding public key, that is part of an MSP, can match. Thus, the MSP is the mechanism that allows that identity to be trusted and recognized by the rest of the network without ever revealing the member’s private key.</p><p>证书颁发机构通过生成公钥和私钥来颁发身份，该公钥和私钥形成可用于证明身份的密钥对。由于永远不能公开共享私钥，因此需要一种机制来证明他是谁，然后MSP就是做这件事的。例如一个peer节点是用他自己的私钥来签名或者背书一个交易。排序服务的MSP包含了peer节点的公钥，该公钥随后用于验证附加到交易的签名是否有效。私钥用于在交易上产生签名，只有相应的公钥（MSP的一部分）才能匹配该签名。因此，MSP是一种允许身份由网络的其余部分信任和识别，而无需透露成员的私钥的机制。</p><p>Recall from the credit card scenario in the Identity topic that the Certificate Authority is like a card provider — it dispenses many different types of verifiable identities. An MSP, on the other hand, determines which credit card providers are accepted at the store. In this way, the MSP turns an identity (the credit card) into a role (the ability to buy things at the store).</p><p>从“身份”主题中的信用卡业务情景中回想起，证书颁发机构就像发卡组织一样-它分配了许多不同类型的可验证身份。另一方面，MSP确定商店接受哪些信用卡发卡组织。这样，MSP将身份（信用卡）转变为角色（在商店购买商品的能力）。</p><p>This ability to turn verifiable identities into roles is fundamental to the way Fabric networks function, since it allows organizations, nodes, and channels the ability establish MSPs that determine who is allowed to do what at the organization, node, and channel level.</p><p>这种将可验证身份转换为角色的能力是Fabric网络运行方式的基础，因为它允许组织，节点和渠道具备建立MSP的能力，从而确定允许谁在组织，节点和渠道级别上做什么。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/membership.msp.diagram.png" alt="membership.msp.diagram"></p><p><em>Identities are similar to your credit cards that are used to prove you can pay. The MSP is similar to the list of accepted credit cards.</em></p><p>Consider a consortium of banks that operate a blockchain network. Each bank operates peer and ordering nodes, and the peers endorse transactions submitted to the network. However, each bank would also have departments and account holders. The account holders would belong to each organization, but would not run nodes on the network. They would only interact with the system from their mobile or web application. So how does the network recognize and differentiate these identities? A CA was used to create the identities, but like the card example, those identities can’t just be issued, they need to be recognized by the network. MSPs are used to define the organizations that are trusted by the network members. MSPs are also the mechanism that provide members with a set of roles and permissions within the network. Because the MSPs defining these organizations are known to the members of a network, they can then be used to validate that network entities that attempt to perform actions are allowed to.</p><p>考虑一个经营区块链网络的银行联盟。每个银行都操作peer节点和排序节点，并且peer节点认可提交给网络的交易。但是每个银行也同样有部门和账户持有者。帐户持有者将属于各自的组织，但不会在网络上运行节点。他们只能通过其移动或Web应用程序与系统进行交互。那么网络如何识别和区分这些身份呢？可以使用CA来创建身份，但是就像卡片示例一样，不能仅仅是颁发了身份，还必须由网络来识别这些身份。MSP用于定义网络成员信任的组织。MSP还是一个机制，这个机制为成员提供网络中的一组角色和权限。由于MSP定义的这些组织对网络成员而言是已知的，因此它们可以用于验证允许尝试执行操作的网络实体。</p><p>Finally, consider if you want to join an <em>existing</em> network, you need a way to turn your identity into something that is recognized by the network. The MSP is the mechanism that enables you to participate on a permissioned blockchain network. To transact on a Fabric network a member needs to:</p><ol><li>Have an identity issued by a CA that is trusted by the network.</li><li>Become a member of an <em>organization</em> that is recognized and approved by the network members. The MSP is how the identity is linked to the membership of an organization. Membership is achieved by adding the member’s public key (also known as certificate, signing cert, or signcert) to the organization’s MSP.</li><li>Add the MSP to either a <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#consortium">consortium</a> on the network or a channel.</li><li>Ensure the MSP is included in the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/policies/policies.html">policy</a> definitions on the network.</li></ol><p>最后，考虑如果你想要加入一个现有网络，你需要一个方法来将你的身份转换为网络可识别的内容。MSP是使您能够参与许可的区块链网络的机制。为了在Fabric的网络上进行交易，一个成员需要：</p><ol><li>具有由网络信任的CA颁发的身份。</li><li>成为由网络成员认可并批准的组织的成员。MSP是将身份链接到组织成员的方式。成员资格是通过将成员的公钥（也称为证书，签名证书或signcert）添加到组织的MSP中来实现的。</li><li>将MSP添加到网络上的联盟或通道上。</li><li>确保MSP包含在网络上定义的策略。</li></ol><h2 id="What-is-an-MSP">What is an MSP?</h2><p>Despite its name, the Membership Service Provider does not actually provide anything. Rather, the implementation of the MSP requirement is a set of folders that are added to the configuration of the network and is used to define an organization both inwardly (organizations decide who its admins are) and outwardly (by allowing other organizations to validate that entities have the authority to do what they are attempting to do). Whereas Certificate Authorities generate the certificates that represent identities, the MSP contains a list of permissioned identities.</p><p>The MSP identifies which Root CAs and Intermediate CAs are accepted to define the members of a trust domain by listing the identities of their members, or by identifying which CAs are authorized to issue valid identities for their members.</p><p>But the power of an MSP goes beyond simply listing who is a network participant or member of a channel. It is the MSP that turns an identity into a <strong>role</strong> by identifying specific privileges an actor has on a node or channel. Note that when a user is registered with a Fabric CA, a role of admin, peer, client, orderer, or member must be associated with the user. For example, identities registered with the “peer” role should, naturally, be given to a peer. Similarly, identities registered with the “admin” role should be given to organization admins. We’ll delve more into the significance of these roles later in the topic.</p><p>In addition, an MSP can allow for the identification of a list of identities that have been revoked — as discussed in the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/identity/identity.html">Identity</a> documentation — but we will talk about how that process also extends to an MSP.</p><h2 id="MSP-domains">MSP domains</h2><p>MSPs occur in two domains in a blockchain network:</p><ul><li>Locally on an actor’s node (<strong>local MSP</strong>)</li><li>In channel configuration (<strong>channel MSP</strong>)</li></ul><p>The key difference between local and channel MSPs is not how they function – both turn identities into roles – but their <strong>scope</strong>. Each MSP lists roles and permissions at a particular level of administration.</p><p>本地MSP和通道MSP之间的主要区别不是它们的功能（两者都将身份转换为角色），而是它们的范围。每个MSP都列出特定管理级别的角色和权限。</p><h3 id="Local-MSPs">Local MSPs</h3><p><strong>Local MSPs are defined for clients and for nodes (peers and orderers)</strong>. Local MSPs define the permissions for a node (who are the peer admins who can operate the node, for example). The local MSPs of clients (the account holders in the banking scenario above), allow the user to authenticate itself in its transactions as a member of a channel (e.g. in chaincode transactions), or as the owner of a specific role into the system such as an organization admin, for example, in configuration transactions.</p><p><strong>Local MSPs</strong>是为客户端和节点（peers和订orderers）定义的。本地MSP定义了一个节点的权限（例如谁是peer的管理员，谁可以操作这个节点）。客户端的本地MSP（上述银行业务场景中的帐户持有人）允许用户在自身交易中作为通道成员进行身份验证（例如在链码中交易中），或者作为系统中特定角色（例如组织管理员）的所有者，例如，在配置事务中。</p><p><strong>Every node must have a local MSP defined</strong>, as it defines who has administrative or participatory rights at that level (peer admins will not necessarily be channel admins, and vice versa). This allows for authenticating member messages outside the context of a channel and to define the permissions over a particular node (who has the ability to install chaincode on a peer, for example). Note that one or more nodes can be owned by an organization. An MSP defines the organization admins. And the organization, the admin of the organization, the admin of the node, and the node itself should all have the same root of trust.</p><p><strong>每个节点都需要定义一个本地的MSP</strong>，因为它定义了在该级别具有管理或参与权的人（peer管理员不一定是通道管理员，反之亦然）。这允许在通道上下文之外对成员消息进行身份验证，并定义对特定节点的权限（如谁有能力在peer上安装链码）。请注意，一个组织可以拥有一个或多个节点。MSP定义组织管理员。组织、组织的管理员、节点的管理员以及节点本身都应具有相同的根CA。</p><p>An orderer local MSP is also defined on the file system of the node and only applies to that node. Like peer nodes, orderers are also owned by a single organization and therefore have a single MSP to list the actors or nodes it trusts.</p><p>在排序者节点的文件系统上也定义了本地MSP，它仅适用于该节点。就像peer节点一样，排序者由单个组织拥有，因此有一个MSP列出其信任的参与者或节点。</p><h3 id="Channel-MSPs">Channel MSPs</h3><p>In contrast, <strong>channel MSPs define administrative and participatory rights at the channel level</strong>. Peers and ordering nodes on an application channel share the same view of channel MSPs, and will therefore be able to correctly authenticate the channel participants. This means that if an organization wishes to join the channel, an MSP incorporating the chain of trust for the organization’s members would need to be included in the channel configuration. Otherwise transactions originating from this organization’s identities will be rejected. Whereas local MSPs are represented as a folder structure on the file system, channel MSPs are described in a channel configuration.</p><p>相反，<strong>通道MSP在通道级别定义了管理权和参与权</strong>。应用程序通道上的peer节点和排序节点共享通道MSP的相同视图，因此将能够正确地验证通道参与者。这意味着如果组织希望加入通道，则需要在通道配置中包含一个包含组织成员信任链的MSP。否则，来自该组织身份的交易将被拒绝。本地MSP在文件系统上表示为文件夹结构，而通道MSP则在通道配置中描述。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/ChannelMSP.png" alt="ChannelMSP"></p><p><em>Snippet from a channel config.json file that includes two organization MSPs.</em></p><p><strong>Channel MSPs identify who has authorities at a channel level</strong>. The channel MSP defines the <em>relationship</em> between the identities of channel members (which themselves are MSPs) and the enforcement of channel level policies. Channel MSPs contain the MSPs of the organizations of the channel members.</p><p>**通道MSP识别谁拥有通道级别的权限。**通道MSP定义了通道成员身份（本身就是MSP）和通道级策略执行之间的关系。通道MSP包含通道成员组织的MSP。</p><p><strong>Every organization participating in a channel must have an MSP defined for it</strong>. In fact, it is recommended that there is a one-to-one mapping between organizations and MSPs. The MSP defines which members are empowered to act on behalf of the organization. This includes configuration of the MSP itself as well as approving administrative tasks that the organization has role, such as adding new members to a channel. If all network members were part of a single organization or MSP, data privacy is sacrificed. Multiple organizations facilitate privacy by segregating ledger data to only channel members. If more granularity is required within an organization, the organization can be further divided into organizational units (OUs) which we describe in more detail later in this topic.</p><p>**每个参与渠道的组织都必须为其定义MSP。**实际上，建议组织与MSP之间存在一对一的映射。MSP定义了哪些成员有权代表组织行事。这包括MSP本身的配置以及批准组织所扮演的管理任务，例如将新成员添加到渠道。如果所有网络成员都是单个组织或MSP的一部分，则会牺牲数据隐私。多个组织通过将账本数据仅隔离到通道成员来促成隐私。如果在组织内需要更多的粒度，则可以将组织进一步划分为组织单位（OU），我们将在本主题的后面部分对此进行详细介绍。</p><p><strong>The system channel MSP includes the MSPs of all the organizations that participate in an ordering service.</strong> An ordering service will likely include ordering nodes from multiple organizations and collectively these organizations run the ordering service, most importantly managing the consortium of organizations and the default policies that are inherited by the application channels.</p><p>**系统通道MSP包括加入排序服务的所有组织的MSP。**排序服务可能会包括来自多个组织的排序节点，并且这些组织共同运行排序服务，最重要的是管理组织联盟和应用程序通道继承的默认策略。</p><p><strong>Local MSPs are only defined on the file system of the node or user</strong> to which they apply. Therefore, physically and logically there is only one local MSP per node. However, as channel MSPs are available to all nodes in the channel, they are logically defined once in the channel configuration. However, <strong>a channel MSP is also instantiated on the file system of every node in the channel and kept synchronized via consensus</strong>. So while there is a copy of each channel MSP on the local file system of every node, logically a channel MSP resides on and is maintained by the channel or the network.</p><p>**本地MSP仅在它们应用到的节点或用户的文件系统上定义。**因此，在物理上和逻辑上每个节点只有一个本地MSP。但是，由于通道MSP可用于通道中的所有节点，因此它们在通道配置中被逻辑定义一次。但是，<strong>通道MSP也会在该通道中每个节点的文件系统上实例化，并通过共识保持同步</strong>。因此，尽管每个节点的本地文件系统上都有每个通道MSP的副本，但从逻辑上讲，通道MSP驻留在通道或网络上并由通道或网络维护。</p><p>The following diagram illustrates how local and channel MSPs coexist on the network:</p><p>下图说明了本地和通道MSP在网络上如何共存：</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/membership.diagram.2.png" alt="membership.diagram.2"></p><p><em>The MSPs for the peer and orderer are local, whereas the MSPs for a channel (including the network configuration channel, also known as the system channel) are global, shared across all participants of that channel. In this figure, the network system channel is administered by ORG1, but another application channel can be managed by ORG1 and ORG2. The peer is a member of and managed by ORG2, whereas ORG1 manages the orderer of the figure. ORG1 trusts identities from RCA1, whereas ORG2 trusts identities from RCA2. It is important to note that these are administration identities, reflecting who can administer these components. So while ORG1 administers the network, ORG2.MSP does exist in the network definition.</em></p><h2 id="What-role-does-an-organization-play-in-an-MSP-（组织在MSP中扮演什么角色？）">What role does an organization play in an MSP?（组织在MSP中扮演什么角色？）</h2><p>An <strong>organization</strong> is a logical managed group of members. This can be something as big as a multinational corporation or a small as a flower shop. What’s most important about organizations (or <strong>orgs</strong>) is that they manage their members under a single MSP. The MSP allows an identity to be linked to an organization. Note that this is different from the organization concept defined in an X.509 certificate, which we mentioned above.</p><p>组织是成员的逻辑托管组。它可以像跨国公司一样大，也可以像花店一样小。对于组织而言最重要的是他们在单个MSP下管理成员。MSP允许将身份链接到组织。请注意，这与我们上面提到的X.509证书中定义的组织概念不同。</p><p>The exclusive relationship between an organization and its MSP makes it sensible to name the MSP after the organization, a convention you’ll find adopted in most policy configurations. For example, organization <code>ORG1</code> would likely have an MSP called something like <code>ORG1-MSP</code>. In some cases an organization may require multiple membership groups — for example, where channels are used to perform very different business functions between organizations. In these cases it makes sense to have multiple MSPs and name them accordingly, e.g., <code>ORG2-MSP-NATIONAL</code> and <code>ORG2-MSP-GOVERNMENT</code>, reflecting the different membership roots of trust within <code>ORG2</code> in the <code>NATIONAL</code> sales channel compared to the <code>GOVERNMENT</code> regulatory channel.</p><p>由于组织及其MSP之间的排他关系，因此用组织名称来命名MSP是很明智的，这是大多数策略配置中都会采用的约定。例如组织<code>ORG1</code> 会有一个名为<code>ORG1-MSP</code>的MSP。 在某些情况下组织可能需要多个成员组；例如，在组织之间使用通道执行非常不同的业务功能的情况。在这些情况下，拥有多个MSP并相应地命名它们是很有意义的，，例如<code>ORG2-MSP-NATIONAL</code>和<code>ORG2-MSP-GOVERNMENT</code>，体现出<code>ORG2</code>内部在交易通道和监管通道的两个不同的信任根源。</p><h3 id="Organizational-Units-OUs-and-MSPs（组织单位（OU）和MSP）">Organizational Units (OUs) and MSPs（组织单位（OU）和MSP）</h3><p>An organization can also be divided into multiple <strong>organizational units</strong>, each of which has a certain set of responsibilities, also referred to as <code>affiliations</code>. Think of an OU as a department inside an organization. For example, the <code>ORG1</code> organization might have both <code>ORG1.MANUFACTURING</code> and <code>ORG1.DISTRIBUTION</code> OUs to reflect these separate lines of business. When a CA issues X.509 certificates, the <code>OU</code> field in the certificate specifies the line of business to which the identity belongs. A benefit of using OUs like this is that these values can then be used in policy definitions in order to restrict access or in smart contracts for attribute-based access control. Otherwise, separate MSPs would need to be created for each organization.</p><p>一个组织也可以分为多个组织单位，每个组织单位都有一定的职责集，也称为从属关系。将OU视为组织内部的一个部门。例如，<code>ORG1</code>组织可能同时具有<code>ORG1.MANUFACTURING</code>和<code>ORG1.DISTRIBUTION</code> 两个组织单位，以反映这些单独的业务线。当CA颁发X.509证书时，证书中的<code>OU</code>字段会指定身份所属的业务范围。使用这样的OU的好处是，可将其用于策略定义中以限制访问，或用于基于属性的访问控制的智能合约中。否则，将需要为每个组织创建单独的MSP。</p><p>Specifying OUs is optional. If OUs are not used, all of the identities that are part of an MSP — as identified by the Root CA and Intermediate CA folders — will be considered members of the organization.</p><p>指定OU是可选的。如果不使用OU，则MSP部分的所有身份（由根CA和中级CA文件夹标识）将被视为组织的成员。</p><h3 id="Node-OU-Roles-and-MSPs">Node OU Roles and MSPs</h3><p>Additionally, there is a special kind of OU, sometimes referred to as a <code>Node OU</code>, that can be used to confer a role onto an identity. These Node OU roles are defined in the <code>$FABRIC_CFG_PATH/msp/config.yaml</code> file and contain a list of organizational units whose members are considered to be part of the organization represented by this MSP. This is particularly useful when you want to restrict the members of an organization to the ones holding an identity (signed by one of MSP designated CAs) with a specific Node OU role in it. For example, with node OU’s you can implement a more granular endorsement policy that requires Org1 peers to endorse a transaction, rather than any member of Org1.</p><p>此外，还有一种特殊的OU，有时也称为节点OU，可用于将角色赋予身份。这些节点OU角色在<code>$FABRIC_CFG_PATH/msp/config.yaml</code>文件中定义，并且包含一个组织单位列表，其成员被视为此MSP代表的组织的一部分。当您希望将组织的成员限制为持有具有特定Node OU角色的身份（由MSP指定的CA之一签名）的成员时，此功能特别有用。例如，通过节点OU，您可以实施更精细的认可政策，该政策要求Org1peer认可交易，而不是Org1的任何成员。</p><p>In order to use the Node OU roles, the “identity classification” feature must be enabled for the network. When using the folder-based MSP structure, this is accomplished by enabling “Node OUs” in the config.yaml file which resides in the root of the MSP folder:</p><p>为了使用节点OU角色，必须为网络启用“身份分类”功能。当使用基于文件夹的MSP结构时，可通过启用位于MSP文件夹根目录中的config.yaml文件中的 “Node OUs”来实现</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">NodeOUs:</span></span><br><span class="line">  <span class="attr">Enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ClientOUIdentifier:</span></span><br><span class="line">    <span class="attr">Certificate:</span> <span class="string">cacerts/ca.sampleorg-cert.pem</span></span><br><span class="line">    <span class="attr">OrganizationalUnitIdentifier:</span> <span class="string">client</span></span><br><span class="line">  <span class="attr">PeerOUIdentifier:</span></span><br><span class="line">    <span class="attr">Certificate:</span> <span class="string">cacerts/ca.sampleorg-cert.pem</span></span><br><span class="line">    <span class="attr">OrganizationalUnitIdentifier:</span> <span class="string">peer</span></span><br><span class="line">  <span class="attr">AdminOUIdentifier:</span></span><br><span class="line">    <span class="attr">Certificate:</span> <span class="string">cacerts/ca.sampleorg-cert.pem</span></span><br><span class="line">    <span class="attr">OrganizationalUnitIdentifier:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">OrdererOUIdentifier:</span></span><br><span class="line">    <span class="attr">Certificate:</span> <span class="string">cacerts/ca.sampleorg-cert.pem</span></span><br><span class="line">    <span class="attr">OrganizationalUnitIdentifier:</span> <span class="string">orderer</span></span><br></pre></td></tr></table></figure><p>In the example above, there are 4 possible Node OU <code>ROLES</code> for the MSP:</p><ul><li>client</li><li>peer</li><li>admin</li><li>orderer</li></ul><p>This convention allows you to distinguish MSP roles by the OU present in the CommonName attribute of the X509 certificate. The example above says that any certificate issued by cacerts/ca.sampleorg-cert.pem in which OU=client will identified as a client, OU=peer as a peer, etc. Starting with Fabric v1.4.3, there is also an OU for the orderer and for admins. The new admins role means that you no longer have to explicitly place certs in the admincerts folder of the MSP directory. Rather, the <code>admin</code> role present in the user’s signcert qualifies the identity as an admin user.</p><p>此约定允许您通过X509证书的CommonName属性中存在的OU区分MSP角色。上面的示例表明，由cacerts/ca.sampleorg-cert.pem颁发的证书中，OU=client 将被标识为客户端，OU=peer 将被标识为peer。从Fabric v1.4.3开始，排序者和管理员也有对应的OU。新的管理员角色意味着您不再需要将证书明确放置在MSP目录的admincerts文件夹中；而是用户签名证书中的管理员角色可以将身份标识为管理员用户。</p><p>These Role and OU attributes are assigned to an identity when the Fabric CA or SDK is used to <code>register</code> a user with the CA. It is the subsequent <code>enroll</code> user command that generates the certificates in the users’ <code>/msp</code> folder.</p><p>当使用Fabric的CA或SDK向CA注册用户时，这些角色和OU属性将分配给一个身份。随后使用用户命令<code>enroll</code> 在用户 <code>/msp</code> 文件夹中生成证书。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/ca-msp-visualization.png" alt="ca-msp-visualization"></p><p>The resulting ROLE and OU attributes are visible inside the X.509 signing certificate located in the <code>/signcerts</code> folder. The <code>ROLE</code> attribute is identified as <code>hf.Type</code> and refers to an actor’s role within its organization, (specifying, for example, that an actor is a <code>peer</code>). See the following snippet from a signing certificate shows how the Roles and OUs are represented in the certificate.</p><p>生成的ROLE和OU属性在<code>/signcerts</code> 文件夹中的X.509签名证书中可以看到。<code>ROLE</code>属性标识为<code>hf.Type</code>，是指参与者在其组织中的角色(例如指定是一个<code>peer</code>)。请参阅签名证书中的以下片段，以显示角色和OU如何在证书中表示。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/signcert.png" alt="signcert"></p><p><strong>Note:</strong> For Channel MSPs, just because an actor has the role of an administrator it doesn’t mean that they can administer particular resources. The actual power a given identity has with respect to administering the system is determined by the <em>policies</em> that manage system resources. For example, a channel policy might specify that <code>ORG1-MANUFACTURING</code> administrators, meaning identities with a role of <code>admin</code> and a Node OU of <code>ORG1-MANUFACTURING</code>, have the rights to add new organizations to the channel, whereas the <code>ORG1-DISTRIBUTION</code> administrators have no such rights.</p><p>**注意：**对于通道MSP，仅仅因为参与者具有管理员角色，并不意味着他们可以管理特定资源。给定身份在管理系统方面的实际能力由管理系统资源的策略确定。例如，渠道策略可能指定<code>ORG1-MANUFACTURING</code>管理员，即具有<code>admin</code>角色和<code>ORG1-MANUFACTURING</code>的节点OU的身份，有权向频道添加新组织，而<code>ORG1-DISTRIBUTION</code>管理员则无此权利。</p><p>Finally, OUs could be used by different organizations in a consortium to distinguish each other. But in such cases, the different organizations have to use the same Root CAs and Intermediate CAs for their chain of trust, and assign the OU field to identify members of each organization. When every organization has the same CA or chain of trust, this makes the system more centralized than what might be desirable and therefore deserves careful consideration on a blockchain network.</p><p>最后，联盟中的不同组织可以使用OU来区分彼此。但是在这种情况下，不同的组织必须为它们的信任链使用相同的根CA和中间CA，并分配OU字段以标识每个组织的成员。当每个组织都具有相同的CA或信任链时，这会使系统比可能需要的系统更加集中，因此在区块链网络上值得仔细考虑。</p><h2 id="MSP-Structure">MSP Structure</h2><p>Let’s explore the MSP elements that render the functionality we’ve described so far.</p><p>让我们探索MSP的元素呈现我们到目前为止所描述的功能。</p><p>A local MSP folder contains the following sub-folders:</p><p>本地MSP文件夹包含以下子文件夹：</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/membership.diagram.6.png" alt="membership.diagram.6"></p><p><em>The figure above shows the subfolders in a local MSP on the file system</em></p><p><em>上图显示了文件系统上本地MSP中的子文件夹</em></p><ul><li><p><strong>config.yaml:</strong> Used to configure the identity classification feature in Fabric by enabling “Node OUs” and defining the accepted roles.</p><p>用于通过启用“Node OUs”并定义接受的角色来在Fabric中配置身份分类功能。</p></li><li><p><strong>cacerts:</strong> This folder contains a list of self-signed X.509 certificates of the Root CAs trusted by the organization represented by this MSP. There must be at least one Root CA certificate in this MSP folder.</p><p>此文件夹包含由此MSP代表的组织信任的根CA的自签名X.509证书的列表。此MSP文件夹中至少必须有一个根CA证书。</p><p>This is the most important folder because it identifies the CAs from which all other certificates must be derived to be considered members of the corresponding organization to form the chain of trust.</p><p>这是最重要的文件夹，它标识了必须从中导出所有其他证书的CA，才能将其视为相应组织的成员以形成信任链。</p></li><li><p><strong>intermediatecerts:</strong> This folder contains a list of X.509 certificates of the Intermediate CAs trusted by this organization. Each certificate must be signed by one of the Root CAs in the MSP or by any Intermediate CA whose issuing CA chain ultimately leads back to a trusted Root CA.</p><p>此文件夹包含此组织信任的中间CA的X.509证书的列表。每个证书必须由MSP中的一个根CA签名，或由其发行CA链最终引回到受信任的根CA的任何中间CA。</p><p>An intermediate CA may represent a different subdivision of the organization (like <code>ORG1-MANUFACTURING</code> and <code>ORG1-DISTRIBUTION</code> do for <code>ORG1</code>), or the organization itself (as may be the case if a commercial CA is leveraged for the organization’s identity management). In the latter case intermediate CAs can be used to represent organization subdivisions. <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/msp.html">Here</a> you may find more information on best practices for MSP configuration. Notice, that it is possible to have a functioning network that does not have an Intermediate CA, in which case this folder would be empty.</p><p>中间CA可能代表组织的不同部门（例如<code>ORG1</code>的<code>ORG1-MANUFACTURING</code>和<code>ORG1-DISTRIBUTION</code>），或者是组织本身（如果利用商业CA来进行组织的身份管理，可能就是这种情况）。在后一种情况下，中间CA可以用来表示组织细分。请注意，一个正常运行的网络可能没有中间，在这种情况下，此文件夹将为空。</p><p>Like the Root CA folder, this folder defines the CAs from which certificates must be issued to be considered members of the organization.</p><p>与“根CA”文件夹类似，此文件夹定义的证书必须是由当前组织的成员所颁发的。</p></li><li><p><strong>admincerts (Deprecated from Fabric v1.4.3 and higher):</strong> This folder contains a list of identities that define the actors who have the role of administrators for this organization. In general, there should be one or more X.509 certificates in this list.</p><p>该文件夹包含一个身份列表，这些身份定义了哪些参与者具有该组织的管理员角色。通常，此列表中应该有一个或多个X.509证书。</p><p><strong>Note:</strong> Prior to Fabric v1.4.3, admins were defined by explicitly putting certs in the <code>admincerts</code> folder in the local MSP directory of your peer. <strong>With Fabric v1.4.3 or higher, certificates in this folder are no longer required.</strong> Instead, it is recommended that when the user is registered with the CA, that the <code>admin</code> role is used to designate the node administrator. Then, the identity is recognized as an <code>admin</code> by the Node OU role value in their signcert. As a reminder, in order to leverage the admin role, the “identity classification” feature must be enabled in the config.yaml above by setting “Node OUs” to <code>Enable: true</code>. We’ll explore this more later.</p><p><strong>注意：</strong> 在Fabric v1.4.3之前，通过显式将证书放入peer的本地MSP目录下的<code>admincerts</code>文件夹中来定义管理员。对于Fabric v1.4.3或更高版本，不再需要此文件夹中的证书。相反，建议在向CA注册用户后，使用admin角色指定节点管理员。然后通过其签名证书中的节点OU角色值将身份识别为管理员。提醒一下，为了利用管理员角色，必须在上面的config.yaml中通过将“Node OUs”设置为<code>Enable：true</code>来启用“身份分类”功能。我们将在以后进行探讨。</p><p>And as a reminder, for Channel MSPs, just because an actor has the role of an administrator it doesn’t mean that they can administer particular resources. The actual power a given identity has with respect to administering the system is determined by the <em>policies</em> that manage system resources. For example, a channel policy might specify that <code>ORG1-MANUFACTURING</code> administrators have the rights to add new organizations to the channel, whereas the <code>ORG1-DISTRIBUTION</code> administrators have no such rights.</p><p>提醒一下，对于通道MSP，仅仅因为参与者具有管理员角色，并不意味着他们可以管理特定资源。给定身份在管理系统方面的实际能力由管理系统资源的策略确定。例如，通道政策可能指定<code>ORG1-MANUFACTURING</code>管理员有权向该渠道添加新组织，而<code>ORG1-DISTRIBUTION</code>管理员没有这种权利。</p></li><li><p><strong>keystore: (private Key)</strong> This folder is defined for the local MSP of a peer or orderer node (or in a client’s local MSP), and contains the node’s private key. This key is used to sign data — for example to sign a transaction proposal response, as part of the endorsement phase.</p><p>此文件夹是为peer节点或orderer节点的本地MSP（或在客户端的本地MSP中）定义的，它包含节点的私钥。这个私钥用于签名数据 - 例如在背书阶段签署交易建议响应。</p><p>This folder is mandatory for local MSPs, and must contain exactly one private key. Obviously, access to this folder must be limited only to the identities of users who have administrative responsibility on the peer.</p><p>对于本地MSP，此文件夹是必需的，并且必须仅包含一个私钥。显然，对此文件夹的访问必须仅限于对peer具有管理责任的用户的身份。</p><p>The <strong>channel MSP</strong> configuration does not include this folder, because channel MSPs solely aim to offer identity validation functionalities and not signing abilities.</p><p>通道MSP配置不包括此文件夹，因为通道MSP仅旨在提供身份验证功能而不是签名功能。</p><p><strong>Note:</strong> If you are using a <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/hsm.html">Hardware Security Module(HSM)</a> for key management, this folder is empty because the private key is generated by and stored in the HSM.</p><p><strong>注意：</strong> 如果你使用<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/hsm.html">硬件级别的安全模块(HSM)</a> 来管理key，这个文件夹是空的因为私钥已经被生成并存储在HSM。</p></li><li><p><strong>signcert:</strong> For a peer or orderer node (or in a client’s local MSP) this folder contains the node’s certificate issued by CA. The certificate represents the node’s identity, and this certificate’s corresponding <strong>private key</strong> can be used to generate signatures which may be verified by anyone with a copy of this certificate.</p><p>对于peer节点ordered节点（或在客户端的本地MSP中），此文件夹包含CA颁发的节点的证书。该证书代表节点的身份，并且该证书的相应私钥可用于生成签名，任何拥有此证书副本的人都可以对其进行验证。</p><p>This folder is mandatory for local MSPs, and must contain exactly one <strong>public key</strong>. Obviously, access to this folder must be limited only to the identities of users who have administrative responsibility on the peer.</p><p>此文件夹对于本地MSP是必需的，并且必须仅包含一个公共密钥。显然，对此文件夹的访问必须仅限于对peer具有管理责任的用户的身份。</p><p>Configuration of a <strong>channel MSP</strong> does not include this folder, as channel MSPs solely aim to offer identity validation functionalities and not signing abilities.</p><p>通道MSP的配置不包括此文件夹，因为通道MSP仅旨在提供身份验证功能而不是签名功能。</p></li><li><p><strong>tlscacerts:</strong> This folder contains a list of self-signed X.509 certificates of the Root CAs trusted by this organization <strong>for secure communications between nodes using TLS</strong>. An example of a TLS communication would be when a peer needs to connect to an orderer so that it can receive ledger updates.</p><p>此文件夹包含此组织信任的根CA的自签名X.509证书列表，以使用TLS在节点之间进行安全通信。TLS通信的一个示例是peer需要连接到ordered以便接收账本更新。</p><p>MSP TLS information relates to the nodes inside the network — the peers and the orderers, in other words, rather than the applications and administrations that consume the network.</p><p>MSP TLS信息与网络内部的节点有关（peers和orderers），换句话说，而不是消耗网络的应用程序和管理。</p><p>There must be at least one TLS Root CA certificate in this folder. For more information about TLS, see <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/enable_tls.html">Securing Communication with Transport Layer Security (TLS)</a>.</p><p>此文件夹中至少必须有一个TLS根CA证书， 有关TLS的更多信息请查看 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/enable_tls.html">Securing Communication with Transport Layer Security (TLS)</a>。</p></li><li><p><strong>tlsintermediatecacerts:</strong> This folder contains a list intermediate CA certificates CAs trusted by the organization represented by this MSP <strong>for secure communications between nodes using TLS</strong>. This folder is specifically useful when commercial CAs are used for TLS certificates of an organization. Similar to membership intermediate CAs, specifying intermediate TLS CAs is optional.</p><p>此文件夹包含此MSP代表的组织信任的中间CA证书CA列表，<strong>用于使用TLS的节点之间的安全通信</strong>。当组织使用商业CA作为TLS证书时，此文件夹特别有用。与成员资格中间CA相似，指定中间TLS CA是可选的。</p></li><li><p><strong>operationscerts:</strong> This folder contains the certificates required to communicate with the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/operations_service.html">Fabric Operations Service</a> API.</p><p>该文件夹包含与 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/operations_service.html">Fabric Operations Service</a> API通信所需的证书。</p></li></ul><p>A channel MSP includes the following additional folder:</p><p>通道MSP包括以下额外的文件夹：</p><ul><li><p><strong>Revoked Certificates:</strong> If the identity of an actor has been revoked, identifying information about the identity — not the identity itself — is held in this folder. For X.509-based identities, these identifiers are pairs of strings known as Subject Key Identifier (SKI) and Authority Access Identifier (AKI), and are checked whenever the certificate is being used to make sure the certificate has not been revoked.</p><p>如果参与者的身份已被撤销，则有关该身份的识别信息（而不是身份本身）将保存在此文件夹中。对于基于X.509的身份，这些标识符是称为Subject Key Identifier（SKI）和授权访问标识符（AKI）的字符串对，并在使用证书时进行检查，以确保证书未被吊销。</p><p>This list is conceptually the same as a CA’s Certificate Revocation List (CRL), but it also relates to revocation of membership from the organization. As a result, the administrator of a channel MSP can quickly revoke an actor or node from an organization by advertising the updated CRL of the CA. This “list of lists” is optional. It will only become populated as certificates are revoked.</p><p>此列表在概念上与CA的证书吊销列表（CRL）相同，但也与组织的成员资格吊销有关。结果，通道MSP的管理员可以通过发布CA的更新的CRL来快速从组织撤消参与者或节点。此“列表”是可选的。仅当证书被吊销时，它才会被填充。</p></li></ul><p>If you’ve read this doc as well as our doc on <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/identity/identity.html">Identity</a>, you should now have a pretty good grasp of how identities and MSPs work in Hyperledger Fabric. You’ve seen how a PKI and MSPs are used to identify the actors collaborating in a blockchain network. You’ve learned how certificates, public/private keys, and roots of trust work, in addition to how MSPs are physically and logically structured.</p><p>如果你已经阅读过我们的<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/identity/identity.html">Identity</a>文档，您现在应该对身份和MSP在Hyperledger Fabric中的工作方式有了很好的了解。您已经了解了如何使用PKI和MSP来识别在区块链网络中进行协作的参与者。您已经了解了证书、公钥/私钥和信任根的工作原理，以及MSP的物理和逻辑结构。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> Key Concepts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> MSP </tag>
            
            <tag> Membership Service Provider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Smart Contracts and Chaincode</title>
      <link href="2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/Smart%20Contracts%20and%20Chaincode/"/>
      <url>2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/Smart%20Contracts%20and%20Chaincode/</url>
      
        <content type="html"><![CDATA[<p>官方文档：<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/smartcontract/smartcontract.html">Smart Contracts and Chaincode</a></p><p>TODO</p><p>下图展示Fabric是如何处理验证成功的交易和验证不成功的交易的。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/smartcontract.diagram.04.png" alt="smartcontract.diagram.04"></p><p><em>All transactions have an identifier, a proposal, and a response signed by a set of organizations. All transactions are recorded on the blockchain, whether valid or invalid, but only valid transactions contribute to the world state.</em></p><h2 id="Intercommunication">Intercommunication</h2><p>A Smart Contract can call other smart contracts both within the same channel and across different channels. It this way, they can read and write world state data to which they would not otherwise have access due to smart contract namespaces.</p><p>There are limitations to this inter-contract communication, which are described fully in the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/developapps/chaincodenamespace.html#cross-chaincode-access">chaincode namespace</a> topic.</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> Key Concepts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> Smart Contracts and Chaincode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Peers</title>
      <link href="2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/Peers/"/>
      <url>2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/Peers/</url>
      
        <content type="html"><![CDATA[<p>官方文档：<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/peers/peers.html">Peers</a></p><h1 id="Peers">Peers</h1><p>A blockchain network is comprised primarily of a set of <em>peer nodes</em> (or, simply, <em>peers</em>). Peers are a fundamental element of the network because they host ledgers and smart contracts. Recall that a ledger immutably records all the transactions generated by smart contracts (which in Hyperledger Fabric are contained in a <em>chaincode</em>, more on this later). Smart contracts and ledgers are used to encapsulate the shared <em>processes</em> and shared <em>information</em> in a network, respectively. These aspects of a peer make them a good starting point to understand a Fabric network.</p><p>区块链网络主要由一组peer节点组成（简称peers）。peers是网络的基本元素，是因为它们托管账本和智能合约。回想一下，账本一成不变地记录了智能合约生成的所有交易。智能合约和账本分别用于封装网络中的共享程序和共享信息。peers的这些方面使它们成为了解Fabric网络的良好起点。</p><p>Other elements of the blockchain network are of course important: ledgers and smart contracts, orderers, policies, channels, applications, organizations, identities, and membership, and you can read more about them in their own dedicated sections. This section focusses on peers, and their relationship to those other elements in a Fabric network.</p><p>组成区块链网络的其他元素当然也很重要：账本和智能合约、orderers、策略、通道、应用程序、组织、身份识别，以及联盟成员，您可以在他们自己的专用部分中阅读有关它们的更多信息。本节重点介绍peers及其与Fabric网络中其他元素的关系。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/peers.diagram.1.png" alt="peers.diagram.1"></p><p><em>A blockchain network is comprised of peer nodes, each of which can hold copies of ledgers and copies of smart contracts. In this example, the network N consists of peers P1, P2 and P3, each of which maintain their own instance of the distributed ledger L1. P1, P2 and P3 use the same chaincode, S1, to access their copy of that distributed ledger</em>.</p><p><em>智能合约的网络是由peer节点构成，每个peer节点都托管账本的副本以及智能合约的副本。略。。。</em></p><p>Peers can be created, started, stopped, reconfigured, and even deleted. They expose a set of APIs that enable administrators and applications to interact with the services that they provide. We’ll learn more about these services in this section.</p><p>Peers可以被删除、启动、停止、重新配置甚至删除。它们暴露了一组API，使管理员和应用程序可以与其提供的服务进行交互。我们将在本节中详细了解这些服务。</p><h2 id="A-word-on-terminology（术语）">A word on terminology（术语）</h2><p>Fabric implements <strong>smart contracts</strong> with a technology concept it calls <strong>chaincode</strong> — simply a piece of code that accesses the ledger, written in one of the supported programming languages. In this topic, we’ll usually use the term <strong>chaincode</strong>, but feel free to read it as <strong>smart contract</strong> if you’re more used to that term. It’s the same thing! If you want to learn more about chaincode and smart contracts, check out our <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/smartcontract/smartcontract.html">documentation on smart contracts and chaincode</a>.</p><p>Fabric通过称为链码的技术概念实现智能合约，<strong>chaincode</strong>是用一种使用Fabric支持的编程语言编写的访问账本的一段代码。在本主题中，我们通常使用<strong>chaincode</strong>一词，但如果您更习惯<strong>smart contract</strong>术语，也可以将其作为智能合约阅读。It’s the same thing! If you want to learn more about chaincode and smart contracts, check out our <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/smartcontract/smartcontract.html">documentation on smart contracts and chaincode</a>.</p><h2 id="Ledgers-and-Chaincode">Ledgers and Chaincode</h2><p>Let’s look at a peer in a little more detail. We can see that it’s the peer that hosts both the ledger and chaincode. More accurately, the peer actually hosts <em>instances</em> of the ledger, and <em>instances</em> of chaincode. Note that this provides a deliberate redundancy in a Fabric network — it avoids single points of failure. We’ll learn more about the distributed and decentralized nature of a blockchain network later in this section.</p><p>让我们再详细的看一下peer。我们可以看到peer既托管了账本也托管了链码。更准确地说，peer实际上托管账本实例和链码实例。请注意，这在Fabric网络中提供了有意的冗余-避免了单点故障。在本节的后面，我们将详细了解区块链网络的分布式和分散式性质。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/peers.diagram.2.png" alt="peers.diagram.2"></p><p><em>A peer hosts instances of ledgers and instances of chaincodes. In this example, P1 hosts an instance of ledger L1 and an instance of chaincode S1. There can be many ledgers and chaincodes hosted on an individual peer.</em></p><p>Because a peer is a <em>host</em> for ledgers and chaincodes, applications and administrators must interact with a peer if they want to access these resources. That’s why peers are considered the most fundamental building blocks of a Fabric network. When a peer is first created, it has neither ledgers nor chaincodes. We’ll see later how ledgers get created, and how chaincodes get installed, on peers.</p><p>因为peer托管了账本和链码，因此应用程序和系统管理员如果想要获取这些资源必须与peer进行交互。这就是为什么将peer视为Fabric网络的最基本组成部分。当peer在一开始被创建时，它既没有账本也没有链码。我们会在后面看到在peers上账本是如何创建的以及链码是如何安装的。</p><h3 id="Multiple-Ledgers">Multiple Ledgers</h3><p>A peer is able to host more than one ledger, which is helpful because it allows for a flexible system design. The simplest configuration is for a peer to manage a single ledger, but it’s absolutely appropriate for a peer to host two or more ledgers when required.</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/peers.diagram.3.png" alt="peers.diagram.3"></p><p><em>A peer hosting multiple ledgers. Peers host one or more ledgers, and each ledger has zero or more chaincodes that apply to them. In this example, we can see that the peer P1 hosts ledgers L1 and L2. Ledger L1 is accessed using chaincode S1. Ledger L2 on the other hand can be accessed using chaincodes S1 and S2.</em></p><p><em>peer托管了一个或多个账本，并且托管了0个或更多的链码</em></p><p>Although it is perfectly possible for a peer to host a ledger instance without hosting any chaincodes which access that ledger, it’s rare that peers are configured this way. The vast majority of peers will have at least one chaincode installed on it which can query or update the peer’s ledger instances. It’s worth mentioning in passing that, whether or not users have installed chaincodes for use by external applications, peers also have special <strong>system chaincodes</strong> that are always present. These are not discussed in detail in this topic.</p><p>尽管对等点完全有可能托管一个账本实例而不托管任何访问该账本的链码，但很少有peer以这种方式配置。绝大多数对等点将至少安装一个链码，可以查询或更新peer的账本实例。值得一提的是，无论用户是否安装了供外部应用程序使用的链码，peer都有始终存在的特殊的系统链码。这些将不在本主题中详细讨论。</p><h3 id="Multiple-Chaincodes">Multiple Chaincodes</h3><p>There isn’t a fixed relationship between the number of ledgers a peer has and the number of chaincodes that can access that ledger. A peer might have many chaincodes and many ledgers available to it.</p><p>Peer拥有的账本数量与可以访问该账本的链码数量之间的关系不是固定的。一个peer可能有许多可用的链码和分类帐。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/peers.diagram.4.png" alt="peers.diagram.4"></p><p><em>An example of a peer hosting multiple chaincodes. Each ledger can have many chaincodes which access it. In this example, we can see that peer P1 hosts ledgers L1 and L2, where L1 is accessed by chaincodes S1 and S2, and L2 is accessed by S1 and S3. We can see that S1 can access both L1 and L2.</em></p><p><em>如上图所示，既可以有多个链码访问同一个账本；也可以一个链码访问多个账本。</em></p><p>We’ll see a little later why the concept of <strong>channels</strong> in Fabric is important when hosting multiple ledgers or multiple chaincodes on a peer.</p><p>我们稍后再看到当在peer上托管多个分类帐或多个链码时，Fabric中的通道概念重要的原因。</p><h2 id="Applications-and-Peers">Applications and Peers</h2><p>We’re now going to show how applications interact with peers to access the ledger. Ledger-query interactions involve a simple three-step dialogue between an application and a peer; ledger-update interactions are a little more involved, and require two extra steps. We’ve simplified these steps a little to help you get started with Fabric, but don’t worry — what’s most important to understand is the difference in application-peer interactions for ledger-query compared to ledger-update transaction styles.</p><p>现在，我们将展示应用程序如何与peer交互以访问账本。账本查询交互包括应用程序和peer之间简单的三步对话；账本更新的交互要复杂得多，并且需要两个额外的步骤。我们已简化了这些步骤，以帮助您开始使用Fabric，但请放心，最重要的是要了解账本查询与账本更新两种交易方式之间的应用程序和peer交互的差异。</p><p>Applications always connect to peers when they need to access ledgers and chaincodes. The Fabric Software Development Kit (SDK) makes this easy for programmers — its APIs enable applications to connect to peers, invoke chaincodes to generate transactions, submit transactions to the network that will get ordered, validated and committed to the distributed ledger, and receive events when this process is complete.</p><p>当应用程序需要访问账本和链码时总是与peer链接。Fabric的SDK让这变得简单，它的API可以让应用程序链接到peers，调用链码来生成交易，提交交易到网络并且获得排序，验证和提交到分布式账本以及当这些程序结束时接收事件。</p><p>Through a peer connection, applications can execute chaincodes to query or update a ledger. The result of a ledger query transaction is returned immediately, whereas ledger updates involve a more complex interaction between applications, peers and orderers. Let’s investigate this in a little more detail.</p><p>通过连接到一个peer，应用程序可以执行链码来查询或者更新账本。账本的查询交易结果将立即返回，但是账本的更新将涉及应用程序、peers和orderers之间的更复杂的的交互。让我们对此进行更详细的研究。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/peers.diagram.6.png" alt="peers.diagram.6"></p><p><em>Peers, in conjunction with orderers, ensure that the ledger is kept up-to-date on every peer. In this example, application A connects to P1 and invokes chaincode S1 to query or update the ledger L1. P1 invokes S1 to generate a proposal response that contains a query result or a proposed ledger update. Application A receives the proposal response and, for queries, the process is now complete. For updates, A builds a transaction from all of the responses, which it sends to O1 for ordering. O1 collects transactions from across the network into blocks, and distributes these to all peers, including P1. P1 validates the transaction before committing to L1. Once L1 is updated, P1 generates an event, received by A, to signify completion.</em></p><p>查询时有图中的1、2、3三个步骤。更新时需要额外的4、5两个步骤的操作。</p><ul><li>1 应用程序链接到peer</li><li>2 应用程序（带着交易提议）调用链码</li><li>2.1 peer（带着交易提议）调用托管在peer上的链码</li><li>2.2 链码生成查询或更新的提议响应</li><li>3 peer把提议响应返回给应用程序</li><li>4 应用程序请求排序节点对交易进行排序</li><li>4.1 排序节点把排好序并打包在区块中交易发送给peers</li><li>4.2 peer使用交易区块更新本地的账本</li><li>5 peer发出账本更新的事件</li></ul><p>A peer can return the results of a query to an application immediately since all of the information required to satisfy the query is in the peer’s local copy of the ledger. Peers never consult with other peers in order to respond to a query from an application. Applications can, however, connect to one or more peers to issue a query; for example, to corroborate a result between multiple peers, or retrieve a more up-to-date result from a different peer if there’s a suspicion that information might be out of date. In the diagram, you can see that ledger query is a simple three-step process.</p><p>peer可以马上把查询结果返回给应用程序是因为查询的所有信息都存在于peer节点的本地账本副本中。Peers从不与其他peer协商以响应来自应用程序的查询。但是应用程序可以链接一个或多个peer来发出查询，例如，在多个peer之间确认结果，或者如果怀疑信息可能已过时，则从另一个peer检索最新结果。</p><p>An update transaction starts in the same way as a query transaction, but has two extra steps. Although ledger-updating applications also connect to peers to invoke a chaincode, unlike with ledger-querying applications, an individual peer cannot perform a ledger update at this time, because other peers must first agree to the change — a process called <strong>consensus</strong>. Therefore, peers return to the application a <strong>proposed</strong> update — one that this peer would apply subject to other peers’ prior agreement. The first extra step — step four — requires that applications send an appropriate set of matching proposed updates to the entire network of peers as a transaction for commitment to their respective ledgers. This is achieved by the application by using an <strong>orderer</strong> to package transactions into blocks, and distributing them to the entire network of peers, where they can be verified before being applied to each peer’s local copy of the ledger. As this whole ordering processing takes some time to complete (seconds), the application is notified asynchronously, as shown in step five.</p><p>Later in this section, you’ll learn more about the detailed nature of this ordering process — and for a really detailed look at this process see the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/txflow.html">Transaction Flow</a> topic.</p><h2 id="Peers-and-Channels">Peers and Channels</h2><p>Although this section is about peers rather than channels, it’s worth spending a little time understanding how peers interact with each other, and with applications, via <em>channels</em> — a mechanism by which a set of components within a blockchain network can communicate and transact <em>privately</em>.</p><p>尽管本部分介绍的是peer而不是通道，但是值得花一些时间来了解peer如何通过通道与其他peer以及应用程序进行交互。通道是一种机制，区块链网络中的一组组件可以通过该机制进行私下通信和交易。</p><p>These components are typically peer nodes, orderer nodes and applications and, by joining a channel, they agree to collaborate to collectively share and manage identical copies of the ledger associated with that channel. Conceptually, you can think of channels as being similar to groups of friends (though the members of a channel certainly don’t need to be friends!). A person might have several groups of friends, with each group having activities they do together. These groups might be totally separate (a group of work friends as compared to a group of hobby friends), or there can be some crossover between them. Nevertheless, each group is its own entity, with “rules” of a kind.</p><p>这些组件通常是peer节点，orderer节点和应用程序，通过加入通道，它们同意协作以共同共享和管理与该通道关联的账本的相同副本。从概念上讲，您可以将通道视为与朋友组相似。一个人可能有多组朋友，每组都有他们一起做的活动。这些组可能完全分开，它们之间也可能会有交叉。但是，每个组都是其自己的实体，具有某种“规则”。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/peers.diagram.5.png" alt="peers.diagram.5"></p><p><em>Channels allow a specific set of peers and applications to communicate with each other within a blockchain network. In this example, application A can communicate directly with peers P1 and P2 using channel C. You can think of the channel as a pathway for communications between particular applications and peers. (For simplicity, orderers are not shown in this diagram, but must be present in a functioning network.)</em></p><p><em>在区块链网络中通道允许指定的一组peer和应用程序进行通信。</em></p><p>We see that channels don’t exist in the same way that peers do — it’s more appropriate to think of a channel as a logical structure that is formed by a collection of physical peers. <em>It is vital to understand this point — peers provide the control point for access to, and management of, channels</em>.</p><p>通道是一组物理peer的逻辑结构，peer提供了对通道的访问与管理权限。</p><h2 id="Peers-and-Organizations">Peers and Organizations</h2><p>Now that you understand peers and their relationship to ledgers, chaincodes and channels, you’ll be able to see how multiple organizations come together to form a blockchain network.</p><p>Blockchain networks are administered by a collection of organizations rather than a single organization. Peers are central to how this kind of distributed network is built because they are owned by — and are the connection points to the network for — these organizations.</p><p>区块链网络由多个组织管理，而不是单个组织管理。peers对于这种分布式网络的构建至关重要因为他们属于他们的组织，并且他们是他们组织的网络连接点。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/peers.diagram.8.png" alt="peers.diagram.8"></p><p><em>Peers in a blockchain network with multiple organizations. The blockchain network is built up from the peers owned and contributed by the different organizations. In this example, we see four organizations contributing eight peers to form a network. The channel C connects five of these peers in the network N — P1, P3, P5, P7 and P8. The other peers owned by these organizations have not been joined to this channel, but are typically joined to at least one other channel. Applications that have been developed by a particular organization will connect to their own organization’s peers as well as those of different organizations. Again, for simplicity, an orderer node is not shown in this diagram.</em></p><p>It’s really important that you can see what’s happening in the formation of a blockchain network. <em>The network is both formed and managed by the multiple organizations who contribute resources to it.</em> Peers are the resources that we’re discussing in this topic, but the resources an organization provides are more than just peers. There’s a principle at work here — the network literally does not exist without organizations contributing their individual resources to the collective network. Moreover, the network grows and shrinks with the resources that are provided by these collaborating organizations.</p><p>区块链由向其贡献资源的多个组织组成和管理。</p><p>You can see that (other than the ordering service) there are no centralized resources — in the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/peers/peers.html#Peer8">example above</a>, the network, <strong>N</strong>, would not exist if the organizations did not contribute their peers. This reflects the fact that the network does not exist in any meaningful sense unless and until organizations contribute the resources that form it. Moreover, the network does not depend on any individual organization — it will continue to exist as long as one organization remains, no matter which other organizations may come and go. This is at the heart of what it means for a network to be decentralized.</p><p>Applications in different organizations, as in the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/peers/peers.html#Peer8">example above</a>, may or may not be the same. That’s because it’s entirely up to an organization as to how its applications process their peers’ copies of the ledger. This means that both application and presentation logic may vary from organization to organization even though their respective peers host exactly the same ledger data.</p><p>如上例所示，不同组织中的应用程序可能相同，也可能不同。</p><p>Applications connect either to peers in their organization, or peers in another organization, depending on the nature of the ledger interaction that’s required. For ledger-query interactions, applications typically connect to their own organization’s peers. For ledger-update interactions, we’ll see later why applications need to connect to peers representing <em>every</em> organization that is required to endorse the ledger update.</p><p>应用程序可以连接到自己组织的peer节点，也可以连接到其他组织的peer节点，具体取决于所需的账本交互的性质。对于账本查询交互，应用程序通常会连接到自己组织的peer节点。对于账本更新交互，我们将在后面看到为什么应用程序需要连接到代表认可账本更新所需的每个组织的peer。</p><h2 id="Peers-and-Identity">Peers and Identity</h2><p>Now that you’ve seen how peers from different organizations come together to form a blockchain network, it’s worth spending a few moments understanding how peers get assigned to organizations by their administrators.</p><p>Peers have an identity assigned to them via a digital certificate from a particular certificate authority. You can read lots more about how X.509 digital certificates work elsewhere in this guide but, for now, think of a digital certificate as being like an ID card that provides lots of verifiable information about a peer. <em>Each and every peer in the network is assigned a digital certificate by an administrator from its owning organization</em>.</p><p>Peers具有通过特定证书颁发机构通过数字证书分配给他们的身份。***。网络中的每个peer节点都由其所属组织的管理员分配的数字证书。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/peers.diagram.9.png" alt="peers.diagram.9"></p><p><em>When a peer connects to a channel, its digital certificate identifies its owning organization via a channel MSP. In this example, P1 and P2 have identities issued by CA1. Channel C determines from a policy in its channel configuration that identities from CA1 should be associated with Org1 using ORG1.MSP. Similarly, P3 and P4 are identified by ORG2.MSP as being part of Org2.</em></p><p><em>当peer连接到通道时，其数字证书通过通道MSP标识其归属的组织。</em></p><p>Whenever a peer connects using a channel to a blockchain network, <em>a policy in the channel configuration uses the peer’s identity to determine its rights.</em> The mapping of identity to organization is provided by a component called a <em>Membership Service Provider</em> (MSP) — it determines how a peer gets assigned to a specific role in a particular organization and accordingly gains appropriate access to blockchain resources. Moreover, a peer can be owned only by a single organization, and is therefore associated with a single MSP. We’ll learn more about peer access control later in this section, and there’s an entire section on MSPs and access control policies elsewhere in this guide. But for now, think of an MSP as providing linkage between an individual identity and a particular organizational role in a blockchain network.</p><p>每当peer使用通道连接到区块链网络时，通道配置中的策略都会使用peer的身份来确定其权利。***</p><p>To digress for a moment, peers as well as <em>everything that interacts with a blockchain network acquire their organizational identity from their digital certificate and an MSP</em>. Peers, applications, end users, administrators and orderers must have an identity and an associated MSP if they want to interact with a blockchain network. <em>We give a name to every entity that interacts with a blockchain network using an identity — a principal.</em> You can learn lots more about principals and organizations elsewhere in this guide, but for now you know more than enough to continue your understanding of peers!</p><p>Peers以及与区块链网络交互的所有事物均从其数字证书和MSP获取其组织身份。***</p><p>Finally, note that it’s not really important where the peer is physically located — it could reside in the cloud, or in a data centre owned by one of the organizations, or on a local machine — it’s the digital certificate associated with it that identifies it as being owned by a particular organization. In our example above, P3 could be hosted in Org1’s data center, but as long as the digital certificate associated with it is issued by CA2, then it’s owned by Org2.</p><p>最后，注意peer的物理位置不是很重要，它可以部署在云上，也可以部署在本地物理机上；不管它在哪里，之相关联的数字证书将其标识为特定组织所拥有。***</p><h2 id="Peers-and-Orderers">Peers and Orderers</h2><p>We’ve seen that peers form the basis for a blockchain network, hosting ledgers and smart contracts which can be queried and updated by peer-connected applications. However, the mechanism by which applications and peers interact with each other to ensure that every peer’s ledger is kept consistent with each other is mediated by special nodes called <em>orderers</em>, and it’s to these nodes we now turn our attention.</p><p>An update transaction is quite different from a query transaction because a single peer cannot, on its own, update the ledger — updating requires the consent of other peers in the network. A peer requires other peers in the network to approve a ledger update before it can be applied to a peer’s local ledger. This process is called <em>consensus</em>, which takes much longer to complete than a simple query. But when all the peers required to approve the transaction do so, and the transaction is committed to the ledger, peers will notify their connected applications that the ledger has been updated. You’re about to be shown a lot more detail about how peers and orderers manage the consensus process in this section.</p><p>更新交易与查询交易是有很大区别的，因为单独的peer不可以自己完成更新账本的工作。更新账本的操作需要网络中其他peer的同意。peer需要网络中的其他peer批准账本更新，然后才能将其应用于peer上的本地账本。此过程称为共识，与简单的查询相比，此过程需要更长的时间才能完成。但是，当所有需要批准交易的peer节点都批准了该交易并将交易提交到账本时，peer将通知其连接的应用程序账本已更新。在本部分中，您将获得有关peers和peers如何管理共识过程的更多详细信息。</p><p>Specifically, applications that want to update the ledger are involved in a 3-phase process, which ensures that all the peers in a blockchain network keep their ledgers consistent with each other.</p><p>具体来说，想要更新账本的应用程序需要3个阶段的过程，这确保了区块链网络中的所有peer保持账本彼此一致。</p><ul><li><p>In the first phase, applications work with a subset of <em>endorsing peers</em>, each of which provide an endorsement of the proposed ledger update to the application, but do not apply the proposed update to their copy of the ledger.</p><p>在第一个阶段，应用程序与一些背书peer节点一起工作，每个背书peer节点都向应用程序提供对提议的账本更新的背书，但不将提议的更新应用于其账本的副本。</p></li><li><p>In the second phase, these separate endorsements are collected together as transactions and packaged into blocks.</p><p>在第二阶段，这些单独的背书将作为交易收集在一起，并打包成块。</p></li><li><p>In the third and final phase, these blocks are distributed back to every peer where each transaction is validated before being committed to that peer’s copy of the ledger.</p><p>在第三阶段（也是最后阶段），这些区块会重新分配给每个peer节点，在此之前，每个交易均经过验证，然后再提交给该peer的账本副本。</p></li></ul><p>As you will see, orderer nodes are central to this process, so let’s investigate in a little more detail how applications and peers use orderers to generate ledger updates that can be consistently applied to a distributed, replicated ledger.</p><p>如您所见，排序者节点是此过程的核心，因此，让我们更详细地研究一下应用程序和peer如何使用排序服务来生成账本更新，该更新可始终应用于分布式复制分类帐。</p><h3 id="Phase-1-Proposal">Phase 1: Proposal</h3><p>Phase 1 of the transaction workflow involves an interaction between an application and a set of peers — it does not involve orderers. Phase 1 is only concerned with an application asking different organizations’ endorsing peers to agree to the results of the proposed chaincode invocation.</p><p>交易流程的第一阶段涉及应用程序与一组peer之间的交互-它不涉及排序者。第一阶段只关心应用程序要求不同组织的背书节点同意提议的链码调用的结果。</p><p>To start phase 1, applications generate a transaction proposal which they send to each of the required set of peers for endorsement. Each of these <em>endorsing peers</em> then independently executes a chaincode using the transaction proposal to generate a transaction proposal response. It does not apply this update to the ledger, but rather simply signs it and returns it to the application. Once the application has received a sufficient number of signed proposal responses, the first phase of the transaction flow is complete. Let’s examine this phase in a little more detail.</p><p>为了开始第一阶段，应用程序生成一个交易提议，然后发送这个交易提议到每个需要背书的peer列表。然后每个背书节点使用交易提议执行链码来生成交易提议响应。它不会将此更新应用于账本，而只是对其进行签名并将其返回给应用程序。一旦应用程序收到足够数量的已签名提案响应后，交易流程的第一阶段就完成了。让我们更详细地研究这个阶段。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/peers.diagram.10.png" alt="peers.diagram.10"></p><p><em>Transaction proposals are independently executed by peers who return endorsed proposal responses. In this example, application A1 generates transaction T1 proposal P which it sends to both peer P1 and peer P2 on channel C. P1 executes S1 using transaction T1 proposal P generating transaction T1 response R1 which it endorses with E1. Independently, P2 executes S1 using transaction T1 proposal P generating transaction T1 response R2 which it endorses with E2. Application A1 receives two endorsed responses for transaction T1, namely E1 and E2.</em></p><p><em>交易提议被每个peer节点独立的执行然后返回背书提议响应。</em></p><p>Initially, a set of peers are chosen by the application to generate a set of proposed ledger updates. Which peers are chosen by the application? Well, that depends on the <em>endorsement policy</em> (defined for a chaincode), which defines the set of organizations that need to endorse a proposed ledger change before it can be accepted by the network. This is literally what it means to achieve consensus — every organization who matters must have endorsed the proposed ledger change <em>before</em> it will be accepted onto any peer’s ledger.</p><p>最初应用程序选择一组peer节点来生成一组提议的账本更新。应用程序会选择哪些peer节点呢？这取决于（为链码定义的）背书策略，该策略定义了一个需要在网络接受之前批准提议的账本更新的组织列表。从字面上看，这是达成共识的意思 – 每个重要的组织都必须已经批准提议的账本更新，然后该更改才会被接受到其他peer的账本中。</p><p>A peer endorses a proposal response by adding its digital signature, and signing the entire payload using its private key. This endorsement can be subsequently used to prove that this organization’s peer generated a particular response. In our example, if peer P1 is owned by organization Org1, endorsement E1 corresponds to a digital proof that “Transaction T1 response R1 on ledger L1 has been provided by Org1’s peer P1!”.</p><p>peer节点通过添加数字签名来认可提议响应，并且使用它的私钥对整个负载的数据进行签名。这个背书随后可以被用于证明这个组织的peer生成了响应。***</p><p>Phase 1 ends when the application receives signed proposal responses from sufficient peers. We note that different peers can return different and therefore inconsistent transaction responses to the application <em>for the same transaction proposal</em>. It might simply be that the result was generated at different times on different peers with ledgers at different states, in which case an application can simply request a more up-to-date proposal response. Less likely, but much more seriously, results might be different because the chaincode is <em>non-deterministic</em>. Non-determinism is the enemy of chaincodes and ledgers and if it occurs it indicates a serious problem with the proposed transaction, as inconsistent results cannot, obviously, be applied to ledgers. An individual peer cannot know that their transaction result is non-deterministic — transaction responses must be gathered together for comparison before non-determinism can be detected. (Strictly speaking, even this is not enough, but we defer this discussion to the transaction section, where non-determinism is discussed in detail.)</p><p>当应用程序收到足够的peer签署的提议响应时，阶段一就结束了。对于同一交易提议，客户端应用程序可能收到不一致的交易响应。这可能只是简单的因为结果是在不同的时间、不同的peer节点使用不同的账本状态下生成的，在这种情况下，应用程序可以简单地请求最新的提议响应。可能性较小但是更严重的是，结果可能会因为链码是不确定的而有所不同。非确定性是链码和账本的敌人，如果发生，则表明提议交易存在严重问题，因为不一致的结果显然不能应用于账本。单个peer无法知道其交易结果是不确定的 – 必须先收集交易响应以进行比较，然后才能检测到不确定性。（严格说来，这还不够，但是我们将讨论推迟到交易部分，在此部分将详细讨论不确定性。）</p><p>At the end of phase 1, the application is free to discard inconsistent transaction responses if it wishes to do so, effectively terminating the transaction workflow early. We’ll see later that if an application tries to use an inconsistent set of transaction responses to update the ledger, it will be rejected.</p><p>在阶段一结束时，应用程序可以随意丢弃不一致的交易响应，从而有效地尽早终止交易流程。稍后我们将看到，如果应用程序尝试使用一组不一致的交易响应来更新账本，它将被拒绝。</p><h3 id="Phase-2-Ordering-and-packaging-transactions-into-blocks">Phase 2: Ordering and packaging transactions into blocks</h3><p>The second phase of the transaction workflow is the packaging phase. The orderer is pivotal to this process — it receives transactions containing endorsed transaction proposal responses from many applications, and orders the transactions into blocks. For more details about the ordering and packaging phase, check out our <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/orderer/ordering_service.html#phase-two-ordering-and-packaging-transactions-into-blocks">conceptual information about the ordering phase</a>.</p><p>交易流程的第二个阶段是打包阶段。排序者对于此过程至关重要-它从许多应用程序接收包含背书的交易提议响应的交易，并将交易排序打包成区块。***</p><h3 id="Phase-3-Validation-and-commit">Phase 3: Validation and commit</h3><p>At the end of phase 2, we see that orderers have been responsible for the simple but vital processes of collecting proposed transaction updates, ordering them, and packaging them into blocks, ready for distribution to the peers.</p><p>The final phase of the transaction workflow involves the distribution and subsequent validation of blocks from the orderer to the peers, where they can be committed to the ledger. Specifically, at each peer, every transaction within a block is validated to ensure that it has been consistently endorsed by all relevant organizations before it is committed to the ledger. Failed transactions are retained for audit, but are not committed to the ledger.</p><p>交易流程的最后阶段涉及从排序者到peer节点的区块分配和后续验证，在这个阶段可以将它们提交到账本。具体来说，每个peer节点对区块中的每个交易都进行验证，以确保在将其提交到账本之前所有相关组织都一致认可该交易。失败的交易将保留以进行审核，但不会提交到分类账。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/peers.diagram.12.png" alt="peers.diagram.12"></p><p><em>The second role of an orderer node is to distribute blocks to peers. In this example, orderer O1 distributes block B2 to peer P1 and peer P2. Peer P1 processes block B2, resulting in a new block being added to ledger L1 on P1. In parallel, peer P2 processes block B2, resulting in a new block being added to ledger L1 on P2. Once this process is complete, the ledger L1 has been consistently updated on peers P1 and P2, and each may inform connected applications that the transaction has been processed.</em></p><p><em>排序者节点的第二个指责是将区块分发到peer节点。</em></p><p>Phase 3 begins with the orderer distributing blocks to all peers connected to it. Peers are connected to orderers on channels such that when a new block is generated, all of the peers connected to the orderer will be sent a copy of the new block. Each peer will process this block independently, but in exactly the same way as every other peer on the channel. In this way, we’ll see that the ledger can be kept consistent. It’s also worth noting that not every peer needs to be connected to an orderer — peers can cascade blocks to other peers using the <strong>gossip</strong> protocol, who also can process them independently. But let’s leave that discussion to another time!</p><p>第三阶段开始于排序者分发区块到链接它的所有peer节点上。peer节点链接到通道上的排序节点，这样当一个新的区块生成是，所有的链接到排序节点的peer都会收到一个新区块的副本。每个peer都使用与通道上的其他节点一样的方式来独立处理这个区块。通过这种方式账本就可以保持一致了。还值得注意的是，并非每个peer节点都需要连接到排序者 – peer节点可以使用八卦协议将块级联到其他peer，这些peer也可以独立处理区块。</p><p>Upon receipt of a block, a peer will process each transaction in the sequence in which it appears in the block. For every transaction, each peer will verify that the transaction has been endorsed by the required organizations according to the <em>endorsement policy</em> of the chaincode which generated the transaction. For example, some transactions may only need to be endorsed by a single organization, whereas others may require multiple endorsements before they are considered valid. This process of validation verifies that all relevant organizations have generated the same outcome or result. Also note that this validation is different than the endorsement check in phase 1, where it is the application that receives the response from endorsing peers and makes the decision to send the proposal transactions. In case the application violates the endorsement policy by sending wrong transactions, the peer is still able to reject the transaction in the validation process of phase 3.</p><p>收到区块之后后，peer节点将按照区块块中的顺序处理每个交易。对于每笔交易，每个peer节点都将根据产生交易的链码的背书政策来验证该交易是否已被所需的组织背书。例如，某些交易可能只需要由单个组织背书，而其他交易可能需要多个背书才能被视为有效。这个验证过程验证所有相关的组织都生成相同的产物或结果。另请注意，此验证与第一阶段中的背书检查不同，第一阶段的背书检查是应用程序在接收到来自背书节点的响应并做出发送提议交易的决定。如果应用程序发送了错误的交易违反了背书策略，在第三阶段的验证程序中peer节点仍然有能力拒绝此交易。</p><p>If a transaction has been endorsed correctly, the peer will attempt to apply it to the ledger. To do this, a peer must perform a ledger consistency check to verify that the current state of the ledger is compatible with the state of the ledger when the proposed update was generated. This may not always be possible, even when the transaction has been fully endorsed. For example, another transaction may have updated the same asset in the ledger such that the transaction update is no longer valid and therefore can no longer be applied. In this way, the ledger is kept consistent across each peer in the channel because they each follow the same rules for validation.</p><p>如果交易已被正确的认可，则peer节点将尝试将其应用于账本。为此，peer节点必须执行账本一致性检查，以验证生成提议的更新时账本的状态与当前账本的状态一致。即使交易已得到完全认可，这也不总是一致的。例如，另一笔交易可能已更新账本中的同一资产，因此该交易更新不再有效，因此无法再应用。这样，账本在通道中的每个peer节点之间保持一致，因为它们都遵循相同的验证规则。</p><p>After a peer has successfully validated each individual transaction, it updates the ledger. Failed transactions are not applied to the ledger, but they are retained for audit purposes, as are successful transactions. This means that peer blocks are almost exactly the same as the blocks received from the orderer, except for a valid or invalid indicator on each transaction in the block.</p><p>在peer节点成功验证了每个单独的交易后，它将更新分类帐。失败的交易不会被应用于账本，但保留它们以进行审计，就像成功交易一样。这意味着peer节点的区块<strong>几乎</strong>与从排序者接收到的区块完全相同，除了该块中每个交易的有效或无效指示符。</p><p>We also note that phase 3 does not require the running of chaincodes — this is done only during phase 1, and that’s important. It means that chaincodes only have to be available on endorsing nodes, rather than throughout the blockchain network. This is often helpful as it keeps the logic of the chaincode confidential to endorsing organizations. This is in contrast to the output of the chaincodes (the transaction proposal responses) which are shared with every peer in the channel, whether or not they endorsed the transaction. This specialization of endorsing peers is designed to help scalability and confidentiality.</p><p>我们还注意到，第3阶段不需要运行Chaincode，这仅在第1阶段才做，这一点很重要。这意味着链码仅在背书节点上可用，而不是在整个区块链网络上可用。这通常很有用，因为它可以使背书组织的链码逻辑保持私密。这与链码的输出（交易提议响应）相反，链码的输出与通道中的每个peer节点共享，无论他们是否认可交易。这种背书节点的专业化旨在帮助提高可伸缩性和机密性。</p><p>Finally, every time a block is committed to a peer’s ledger, that peer generates an appropriate <em>event</em>. <em>Block events</em> include the full block content, while <em>block transaction events</em> include summary information only, such as whether each transaction in the block has been validated or invalidated. <em>Chaincode</em> events that the chaincode execution has produced can also be published at this time. Applications can register for these event types so that they can be notified when they occur. These notifications conclude the third and final phase of the transaction workflow.</p><p>最后，每次将一个区块提交给peer节点的账本之后，该peer节点都会生成一个适当的<em>event</em>。</p><ul><li><em>Block events</em> 包含所有的区块内容，</li><li><em>block transaction events</em> 只包含摘要信息（例如区块中的每笔交易是否已通过验证或无效）</li><li><em>Chaincode</em> events 链码执行时产生的<em>Chaincode</em> events也可以在此时发布</li></ul><p>应用程序可以注册这些事件类型，以便在事件发生时得到通知。这些通知结束了交易流程的第三阶段也就是最后阶段。</p><p>In summary, phase 3 sees the blocks which are generated by the orderer consistently applied to the ledger. The strict ordering of transactions into blocks allows each peer to validate that transaction updates are consistently applied across the blockchain network.</p><p>总结来说，第三阶段将看到排序者生成的区块一致的应用于账本。严格的将交易排序然后打包到区块使每个peer节点验证交易更新被一致应用到blockchain网络中。</p><h3 id="Orderers-and-Consensus">Orderers and Consensus</h3><p>This entire transaction workflow process is called <em>consensus</em> because all peers have reached agreement on the order and content of transactions, in a process that is mediated by orderers. Consensus is a multi-step process and applications are only notified of ledger updates when the process is complete — which may happen at slightly different times on different peers.</p><p>整个交易流程被称为共识，是因为在排序节点的调解下所有peer节点都已就交易的顺序和内容达成共识。共识是一个多步骤的过程，只有在该过程完成后，才将账本更新通知应用程序 – 在不同的peer上，发生时间可能略有不同。</p><p>We will discuss orderers in a lot more detail in a future orderer topic, but for now, think of orderers as nodes which collect and distribute proposed ledger updates from applications for peers to validate and include on the ledger.</p><p>That’s it! We’ve now finished our tour of peers and the other components that they relate to in Fabric. We’ve seen that peers are in many ways the most fundamental element — they form the network, host chaincodes and the ledger, handle transaction proposals and responses, and keep the ledger up-to-date by consistently applying transaction updates to it.</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> Key Concepts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> Peers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Private data</title>
      <link href="2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/Private%20data/"/>
      <url>2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/Private%20data/</url>
      
        <content type="html"><![CDATA[<p>官方文档：<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private-data/private-data.html">Private data</a></p><h2 id="What-is-a-private-data-collection">What is a private data collection?</h2><p>A collection is the combination of two elements:</p><ol><li><strong>The actual private data</strong>, sent peer-to-peer <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/gossip.html">via gossip protocol</a> to only the organization(s) authorized to see it. This data is stored in a private state database on the peers of authorized organizations, which can be accessed from chaincode on these authorized peers. The ordering service is not involved here and does not see the private data. Note that because gossip distributes the private data peer-to-peer across authorized organizations, it is required to set up anchor peers on the channel, and configure CORE_PEER_GOSSIP_EXTERNALENDPOINT on each peer, in order to bootstrap cross-organization communication.</li><li><strong>A hash of that data</strong>, which is endorsed, ordered, and written to the ledgers of every peer on the channel. The hash serves as evidence of the transaction and is used for state validation and can be used for audit purposes.</li></ol><p>The following diagram illustrates the ledger contents of a peer authorized to have private data and one which is not.</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/PrivateDataConcept-2.png" alt="PrivateDataConcept-2"></p><p>Collection members may decide to share the private data with other parties if they get into a dispute or if they want to transfer the asset to a third party. The third party can then compute the hash of the private data and see if it matches the state on the channel ledger, proving that the state existed between the collection members at a certain point in time.</p><p>In some cases, you may decide to have a set of collections each comprised of a single organization. For example an organization may record private data in their own collection, which could later be shared with other channel members and referenced in chaincode transactions. We’ll see examples of this in the sharing private data topic below.</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> Key Concepts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> Private data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Policies(策略)</title>
      <link href="2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/Policies/"/>
      <url>2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/Policies/</url>
      
        <content type="html"><![CDATA[<h2 id="What-is-a-policy">What is a policy</h2><p>At its most basic level, a policy is a set of rules that define the structure for how decisions are made and specific outcomes are reached. To that end, policies typically describe a <strong>who</strong> and a <strong>what</strong>, such as the access or rights that an individual has over an <strong>asset</strong>. We can see that policies are used throughout our daily lives to protect assets of value to us, from car rentals, health, our homes, and many more.</p><p>在最基本的级别上，策略是一组规则，这些规则定义了如何制定决策和达到特定结果的结构。为此，策略通常描述<strong>WHO</strong>和<strong>WHAT</strong>，例如个人对<strong>ASSET</strong>的访问或权利。我们可以看到，策略在我们的日常生活中一直被用来保护对我们有价值的资产，使其免受汽车租赁，医疗，房屋等的侵害。</p><p>For example, an insurance policy defines the conditions, terms, limits, and expiration under which an insurance payout will be made. The policy is agreed to by the policy holder and the insurance company, and defines the rights and responsibilities of each party.</p><p>例如，保险单定义了将要支付保险金的条件，条款，限额和有效期。该保单经保单持有人和保险公司同意，并定义了双方的权利和责任。</p><p>Whereas an insurance policy is put in place for risk management, in Hyperledger Fabric, policies are the mechanism for infrastructure management. Fabric policies represent how members come to agreement on accepting or rejecting changes to the network, a channel, or a smart contract. Policies are agreed to by the consortium members when a network is originally configured, but they can also be modified as the network evolves. For example, they describe the criteria for adding or removing members from a channel, change how blocks are formed, or specify the number of organizations required to endorse a smart contract. All of these actions are described by a policy which defines who can perform the action. Simply put, everything you want to do on a Fabric network is controlled by a policy.</p><p>尽管已为风险管理制定了保险单，但在Hyperledger Fabric中，风险管理是基础架构管理的机制。Fabric的策略代表成员如何就接受或拒绝对网络，渠道或智能合约的更改达成协议。最初配置网络时，策略是由联盟成员同意的，但是也可以随着网络的发展而修改策略。例如，它们描述了在通道中添加或删除成员，更改区块的形成方式或指定认可智能合约所需的组织数量的标准。所有这些动作均由定义了谁可以执行该动作的策略来描述。简而言之，您要在Fabric网络上执行的所有操作均受策略控制。</p><h2 id="Why-are-policies-needed">Why are policies needed</h2><p>Policies are one of the things that make Hyperledger Fabric different from other blockchains like Ethereum or Bitcoin. In those systems, transactions can be generated and validated by any node in the network. The policies that govern the network are fixed at any point in time and can only be changed using the same process that governs the code. Because Fabric is a permissioned blockchain whose users are recognized by the underlying infrastructure, those users have the ability to decide on the governance of the network before it is launched, and change the governance of a running network.</p><p>策略是使Hyperledger Fabric与以太坊或比特币等其他区块链不同的原因之一。在比特币或以太坊系统中，交易可以由网络上的任意节点生成和验证。支配网络的策略在任何时间都是固定的，并且只能使用支配代码的相同过程进行更改。由于Fabric是许可的区块链，其用户被基础架构所识别，因此这些用户具有在启动网络之前决定网络治理的能力，并且也具有更改运行中网络的治理的能力。</p><p>Policies allow members to decide which organizations can access or update a Fabric network, and provide the mechanism to enforce those decisions. Policies contain the lists of organizations that have access to a given resource, such as a user or system chaincode. They also specify how many organizations need to agree on a proposal to update a resource, such as a channel or smart contracts. Once they are written, policies evaluate the collection of signatures attached to transactions and proposals and validate if the signatures fulfill the governance agreed to by the network.</p><p>策略允许成员决定哪些组织可以访问或更新一个Fabric网络，并提供执行这些决定的机制。策略包含对给定的资源的有访问权限的组织的列表，比如一个用户或者系统链码。策略还指定有多少组织需要就更新资源（例如通道或智能合约）的提案达成协议。一旦写入，策略将评估附加在交易和提议中的签名的集合，并验证签名是否满足网络所同意的治理。</p><h2 id="How-are-policies-implemented-throughout-Fabric">How are policies implemented throughout Fabric</h2><p>Policies are implemented at different levels of a Fabric network. Each policy domain governs different aspects of how a network operates.</p><p>策略是在Fabric网络的不同级别上实现的。每个策略域管理网络运行的不同方面。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/FabricPolicyHierarchy-2.png" alt="FabricPolicyHierarchy-2"></p><p><em>A visual representation of the Fabric policy hierarchy.</em></p><p><em>Fabric策略层次结构的直观表示。</em></p><h3 id="System-channel-configuration">System channel configuration</h3><p>Every network begins with an ordering <strong>system channel</strong>. There must be exactly one ordering system channel for an ordering service, and it is the first channel to be created. The system channel also contains the organizations who are the members of the ordering service (ordering organizations) and those that are on the networks to transact (consortium organizations).</p><p>每个网络都从一个排序系统通道开始。对排序服来说，必须有一个确定的排序系统通道，并且他是第一个需要创建的通道。系统通道还包含作为排序服务成员的组织（排序组织）和在网络上进行交易的组织（联盟组织）。</p><p>The policies in the ordering system channel configuration blocks govern the consensus used by the ordering service and define how new blocks are created. The system channel also governs which members of the consortium are allowed to create new channels.</p><p>排序系统通道配置区块中的策略控制排序服务使用的共识，并定义如何创建新区块。系统通道也控制联盟中的哪些成员允许创建新的通道。</p><h3 id="Application-channel-configuration">Application channel configuration</h3><p>Application <em>channels</em> are used to provide a private communication mechanism between organizations in the consortium.</p><p>应用程序通道用于在联盟中的组织之间提供专用的通信机制。</p><p>The policies in an application channel govern the ability to add or remove members from the channel. Application channels also govern which organizations are required to approve a chaincode before the chaincode is defined and committed to a channel using the Fabric chaincode lifecycle. When an application channel is initially created, it inherits all the ordering service parameters from the orderer system channel by default. However, those parameters (and the policies governing them) can be customized in each channel.</p><p>应用程序通道中的策略控制了从通道中添加或者移除成员的能力。应用程序通道也控制了在使用Fabric链码生命周期定义链码并将其提交给通道之前，需要哪些成员需要。最初创建应用程序通道时，默认情况下它将从排序系统通道继承所有排序服务参数。但是，可以在每个通道中自定义这些参数（以及控制它们的策略）。</p><h3 id="Access-control-lists-ACLs">Access control lists (ACLs)</h3><p>Network administrators will be especially interested in the Fabric use of ACLs, which provide the ability to configure access to resources by associating those resources with existing policies. These “resources” could be functions on system chaincode (e.g., “GetBlockByNumber” on the “qscc” system chaincode) or other resources (e.g.,who can receive Block events). ACLs refer to policies defined in an application channel configuration and extends them to control additional resources. The default set of Fabric ACLs is visible in the <code>configtx.yaml</code> file under the <code>Application: &amp;ApplicationDefaults</code> section but they can and should be overridden in a production environment. The list of resources named in <code>configtx.yaml</code> is the complete set of all internal resources currently defined by Fabric.</p><p>网络管理员可能对Fabric使用的AC特别感兴趣，ACL可以通过将资源与现有策略相关联来配置对资源的访问。这些“资源”可以是系统链码上的功能（如，在“ qscc”系统链码上的“ GetBlockByNumber”）或其他资源（如谁可以接收Block事件）。ACL引用在应用程序通道配置中定义的策略，并将其扩展以控制其他资源。默认的Fabric ACL集在<code>configtx.yaml</code>文件里的 <code>Application: &amp;ApplicationDefaults</code> 部分下的可见，但是可以并且应该在生产环境中覆盖它们。<code>configtx.yaml</code>中命名的资源列表是Fabric当前定义的所有内部资源的完整集合。</p><p>In that file, ACLs are expressed using the following format:</p><p>在该文件中，ACL使用以下格式表示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ACL policy for chaincode to chaincode invocation</span></span><br><span class="line"><span class="attr">peer/ChaincodeToChaincode:</span> <span class="string">/Channel/Application/Readers</span></span><br></pre></td></tr></table></figure><p>Where <code>peer/ChaincodeToChaincode</code> represents the resource being secured and <code>/Channel/Application/Readers</code> refers to the policy which must be satisfied for the associated transaction to be considered valid.</p><p>其中 <code>peer/ChaincodeToChaincode</code> 表示受保护的资源， <code>/Channel/Application/Readers</code>是指必须满足的策略，关联交易才被视为有效。</p><p>For a deeper dive into ACLS, refer to the topic in the Operations Guide on <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/access_control.html">ACLs</a>.</p><p>要深入了解ACLS，请参阅<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/access_control.html">ACLs</a>的操作指南中的主题。</p><h3 id="Smart-contract-endorsement-policies（智能合约的背书策略）">Smart contract endorsement policies（智能合约的背书策略）</h3><p>Every smart contract inside a chaincode package has an endorsement policy that specifies how many peers belonging to different channel members need to execute and validate a transaction against a given smart contract in order for the transaction to be considered valid. Hence, the endorsement policies define the organizations (through their peers) who must “endorse” (i.e., approve of) the execution of a proposal.</p><p>链码包里面的每个智能合约都有一个背书策略，这个背书策略指定了需要多少个来自不同通道成员的peer节点需要针对给定的智能合约执行和验证交易，以便该交易被视为有效。因此，背书政策定义了必须“背书”（即批准）提案执行的组织（通过其peer）。</p><h3 id="Modification-policies（修改政策）">Modification policies（修改政策）</h3><p>There is one last type of policy that is crucial to how policies work in Fabric, the <code>Modification policy</code>. Modification policies specify the group of identities required to sign (approve) any configuration <em>update</em>. It is the policy that defines how the policy is updated. Thus, each channel configuration element includes a reference to a policy which governs its modification.</p><p>最后一种策略对于Fabric中的策略工作至关重要，即<code>Modification policy</code>。修改策略指定了任何配置更新时需要签名（批准）的一组身份。该策略定义了如何更新策略。因此，每个通道配置元素都包含一个对管理其修改的策略的引用。</p><h2 id="The-Fabric-policy-domains">The Fabric policy domains</h2><p>While Fabric policies are flexible and can be configured to meet the needs of a network, the policy structure naturally leads to a division between the domains governed by either the Ordering Service organizations or the members of the consortium. In the following diagram you can see how the default policies implement control over the Fabric policy domains below.</p><p>虽然Fabric的策略是灵活的，可以配置为满足网络需求，但是策略结构自然会导致由排序服务组织或联盟成员管理的域之间的划分。在下图中你会看到默认策略是如何实现对结构策略域的控制。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/FabricPolicyHierarchy-4.png" alt="FabricPolicyHierarchy-4"></p><p><em>A more detailed look at the policy domains governed by the Orderer organizations and consortium organizations.</em></p><p><em>更详细地了解由订购者组织和财团组织管理的策略域。</em></p><p>A fully functional Fabric network can feature many organizations with different responsibilities. The domains provide the ability to extend different privileges and roles to different organizations by allowing the founders of the ordering service the ability to establish the initial rules and membership of the consortium. They also allow the organizations that join the consortium to create private application channels, govern their own business logic, and restrict access to the data that is put on the network.</p><p>功能齐全的Fabric网络可以使许多个组织承担不同的职责。域通过允许排序服务的创建者建立联盟的初始规则和成员资格的能力来提供将不同的特权和角色扩展到不同组织的能力。域还允许加入该联盟的组织创建私有应用程序通道，管理他们自己的业务逻辑，并限制对网络上放置的数据的访问。</p><p>The system channel configuration and a portion of each application channel configuration provides the ordering organizations control over which organizations are members of the consortium, how blocks are delivered to channels, and the consensus mechanism used by the nodes of the ordering service.</p><p>系统通道配置和每个应用程序通道配置的一部分为排序组织提供了控制，这些组织可以控制哪些组织是联盟的成员，如何将区块交付到渠道以及排序服务的节点所使用的共识机制。</p><p>The system channel configuration provides members of the consortium the ability to create channels. Application channels and ACLs are the mechanism that consortium organizations use to add or remove members from a channel and restrict access to data and smart contracts on a channel.</p><p>系统通道提供了哪些联盟的成员有能力创建通道。系统通道和ACL是联盟组织用于在通道中添加或删除成员并限制对通道上数据和智能合约的访问的机制。</p><h2 id="How-do-you-write-a-policy-in-Fabric">How do you write a policy in Fabric</h2><p>If you want to change anything in Fabric, the policy associated with the resource describes <strong>who</strong> needs to approve it, either with an explicit sign off from individuals, or an implicit sign off by a group. In the insurance domain, an explicit sign off could be a single member of the homeowners insurance agents group. And an implicit sign off would be analogous to requiring approval from a majority of the managerial members of the homeowners insurance group. This is particularly useful because the members of that group can change over time without requiring that the policy be updated. In Hyperledger Fabric, explicit sign offs in policies are expressed using the <code>Signature</code> syntax and implicit sign offs use the <code>ImplicitMeta</code> syntax.</p><p>如果要更改Fabric中的任何内容，则与资源相关联的策略描述了谁需要批准它，可以是个人的显示签名，也可以是组的隐式签名。在保险领域，显示签名可以是房主保险代理人组的单个成员。隐式签名类似于要求房主保险集团的大多数管理人员批准。这特别有用，因为该组的成员可以随时间变化而无需更新策略。在Hyperledger Fabric中，策略中的显式签名使用<code>Signature</code>语法表示，而隐式签名使用<code>ImplicitMeta</code>语法。</p><h3 id="Signature-policies">Signature policies</h3><p><code>Signature</code> policies define specific types of users who must sign in order for a policy to be satisfied such as <code>OR('Org1.peer', 'Org2.peer')</code>. These policies are considered the most versatile because they allow for the construction of extremely specific rules like: “An admin of org A and 2 other admins, or 5 of 6 organization admins”. The syntax supports arbitrary combinations of <code>AND</code>, <code>OR</code> and <code>NOutOf</code>. For example, a policy can be easily expressed by using <code>AND('Org1.member', 'Org2.member')</code> which means that a signature from at least one member in Org1 AND one member in Org2 is required for the policy to be satisfied.</p><p><code>Signature</code> 策略定义了必须由指定类型的用户签名才能满足策略，例如 <code>OR('Org1.peer', 'Org2.peer')</code>。这些策略被认为是最通用的，因为它们允许构建极其特定的规则，例如：“组织A的一个管理员和2个其他管理员，或6个组织中的5个管理员”。</p><h3 id="ImplicitMeta-policies">ImplicitMeta policies</h3><p><code>ImplicitMeta</code> policies are only valid in the context of channel configuration which is based on a tiered hierarchy of policies in a configuration tree. ImplicitMeta policies aggregate the result of policies deeper in the configuration tree that are ultimately defined by Signature policies. They are <code>Implicit</code> because they are constructed implicitly based on the current organizations in the channel configuration, and they are <code>Meta</code> because their evaluation is not against specific MSP principals, but rather against other sub-policies below them in the configuration tree.</p><p><code>ImplicitMeta</code> 策略仅在通道配置的上下文中有效，该配置基于配置树中策略的分层层次结构。<code> ImplicitMeta</code>策略将在配置树中更深的策略的结果汇总在一起，这些策略最终由签名策略定义。它们是<code>Implicit</code>的，因为它们是基于渠道配置中的当前组织隐式构造的，之所以称为<code>Meta</code>，是因为它们的评估不是针对特定的MSP主体，而是针对配置树中位于其下方的其他子策略。</p><p>The following diagram illustrates the tiered policy structure for an application channel and shows how the <code>ImplicitMeta</code> channel configuration admins policy, named <code>/Channel/Admins</code>, is resolved when the sub-policies named <code>Admins</code> below it in the configuration hierarchy are satisfied where each check mark represents that the conditions of the sub-policy were satisfied.</p><p>下图说明了应用程序通道的分层策略结构,并显示名为 <code>/Channel/Admins</code>的 <code>ImplicitMeta</code> 通道配置管理员策略，当满足配置层次结构中位于其下方的名为<code>Admins</code>的子策略时，将解决此问题，其中每个复选标记表示已满足该子策略的条件。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/FabricPolicyHierarchy-6.png" alt="FabricPolicyHierarchy-6"></p><p>As you can see in the diagram above, <code>ImplicitMeta</code> policies, Type = 3, use a different syntax, <code>&quot;&lt;ANY|ALL|MAJORITY&gt; &lt;SubPolicyName&gt;&quot;</code>, for example:</p><p>如上图所示，<code>ImplicitMeta</code> 策略， Type = 3，使用不同的语法<code>&quot;&lt;ANY|ALL|MAJORITY&gt; &lt;SubPolicyName&gt;&quot;</code>，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;MAJORITY sub policy: Admins&#96;</span><br></pre></td></tr></table></figure><p>The diagram shows a sub-policy <code>Admins</code>, which refers to all the <code>Admins</code> policy below it in the configuration tree. You can create your own sub-policies and name them whatever you want and then define them in each of your organizations.</p><p>该图显示了一个子策略<code>Admins</code>，它引用配置树中其下方的所有<code>Admins</code>策略。您可以创建自己的子策略，并根据需要命名它们，然后在你的每个组织中对其进行定义。</p><p>As mentioned above, a key benefit of an <code>ImplicitMeta</code> policy such as <code>MAJORITY Admins</code> is that when you add a new admin organization to the channel, you do not have to update the channel policy. Therefore <code>ImplicitMeta</code> policies are considered to be more flexible as the consortium members change. The consortium on the orderer can change as new members are added or an existing member leaves with the consortium members agreeing to the changes, but no policy updates are required. Recall that <code>ImplicitMeta</code> policies ultimately resolve the <code>Signature</code> sub-policies underneath them in the configuration tree as the diagram shows.</p><p>如上所述，<code>ImplicitMeta</code>策略（例如<code>MAJORITY Admins</code>）的主要优势在于，当您向通道添加新的管理员组织时，不必更新频道策略。因此，随着联盟成员的变化，<code>ImplicitMeta</code>策略被认为更加灵活。当添加新成员或现有成员离开时，排序者上的联盟可以更改，联盟成员同意更改，但是不需要更新策略。回想一下，<code>ImplicitMeta</code>策略最终在配置树中解决了其下方的<code>Signature</code>子策略，如图所示。</p><p>You can also define an application level implicit policy to operate across organizations, in a channel for example, and either require that ANY of them are satisfied, that ALL are satisfied, or that a MAJORITY are satisfied. This format lends itself to much better, more natural defaults, so that each organization can decide what it means for a valid endorsement.</p><p>您还可以定义一个应用程序级别的隐式策略，以在组织中（例如，在一个通道中）进行操作，并要求满足它们中的任何一个，满足所有条件或满足大多数条件。这种格式适合于更好，更自然的默认设置，以便每个组织可以决定对有效背书的含义。</p><p>Further granularity and control can be achieved if you include <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/policies/msp.html#organizational-units"><code>NodeOUs</code></a> in your organization definition. Organization Units (OUs) are defined in the Fabric CA client configuration file and can be associated with an identity when it is created. In Fabric, <code>NodeOUs</code> provide a way to classify identities in a digital certificate hierarchy. For instance, an organization having specific <code>NodeOUs</code> enabled could require that a ‘peer’ sign for it to be a valid endorsement, whereas an organization without any might simply require that any member can sign.</p><p>如果在组织定义中包含<code>NodeOU</code>，则可以实现进一步的粒度和控制。组织单位（OU）在Fabric CA客户端配置文件中定义，并且在创建时可以与身份相关联。NodeOU提供了一种在数字证书层次结构中对身份进行分类的方法。例如，启用了特定<code>NodeOU</code>的组织可能要求“peer”标志才能有效地背书，而只有组织而不包含任何其他可能只要求任何成员都可以签名。</p><h2 id="An-example-channel-configuration-policy">An example: channel configuration policy</h2><p>Understanding policies begins with examining the <code>configtx.yaml</code> where the channel policies are defined. We can use the <code>configtx.yaml</code> file in the Fabric test network to see examples of both policy syntax types. We are going to examine the configtx.yaml file used by the <a href="https://github.com/hyperledger/fabric-samples/blob/release-2.2/test-network/configtx/configtx.yaml">fabric-samples/test-network</a> sample.</p><p>The first section of the file defines the organizations of the network. Inside each organization definition are the default policies for that organization, <code>Readers</code>, <code>Writers</code>, <code>Admins</code>, and <code>Endorsement</code>, although you can name your policies anything you want. Each policy has a <code>Type</code> which describes how the policy is expressed (<code>Signature</code> or <code>ImplicitMeta</code>) and a <code>Rule</code>.</p><p>The test network example below shows the Org1 organization definition in the system channel, where the policy <code>Type</code> is <code>Signature</code> and the endorsement policy rule is defined as <code>&quot;OR('Org1MSP.peer')&quot;</code>. This policy specifies that a peer that is a member of <code>Org1MSP</code> is required to sign. It is these signature policies that become the sub-policies that the ImplicitMeta policies point to.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   SECTION: Application</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section defines the values to encode into a config transaction or</span></span><br><span class="line"><span class="comment">#   genesis block for application related parameters</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Application:</span> <span class="meta">&amp;ApplicationDefaults</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Organizations is the list of orgs which are defined as participants on</span></span><br><span class="line">    <span class="comment"># the application side of the network</span></span><br><span class="line">    <span class="attr">Organizations:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Policies defines the set of policies at this level of the config tree</span></span><br><span class="line">    <span class="comment"># For Application policies, their canonical path is</span></span><br><span class="line">    <span class="comment">#   /Channel/Application/&lt;PolicyName&gt;</span></span><br><span class="line">    <span class="attr">Policies:</span></span><br><span class="line">        <span class="attr">Readers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Readers&quot;</span></span><br><span class="line">        <span class="attr">Writers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Writers&quot;</span></span><br><span class="line">        <span class="attr">Admins:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;MAJORITY Admins&quot;</span></span><br><span class="line">        <span class="attr">LifecycleEndorsement:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;MAJORITY Endorsement&quot;</span></span><br><span class="line">        <span class="attr">Endorsement:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;MAJORITY Endorsement&quot;</span></span><br></pre></td></tr></table></figure><p>The next example shows the <code>ImplicitMeta</code> policy type used in the <code>Application</code> section of the <code>configtx.yaml</code>. These set of policies lie on the <code>/Channel/Application/</code> path. If you use the default set of Fabric ACLs, these policies define the behavior of many important features of application channels, such as who can query the channel ledger, invoke a chaincode, or update a channel config. These policies point to the sub-policies defined for each organization. The Org1 defined in the section above contains <code>Reader</code>, <code>Writer</code>, and <code>Admin</code> sub-policies that are evaluated by the <code>Reader</code>, <code>Writer</code>, and <code>Admin</code> <code>ImplicitMeta</code> policies in the <code>Application</code> section. Because the test network is built with the default policies, you can use the example Org1 to query the channel ledger, invoke a chaincode, and approve channel updates for any test network channel that you create.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   SECTION: Application</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section defines the values to encode into a config transaction or</span></span><br><span class="line"><span class="comment">#   genesis block for application related parameters</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Application:</span> <span class="meta">&amp;ApplicationDefaults</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Organizations is the list of orgs which are defined as participants on</span></span><br><span class="line">    <span class="comment"># the application side of the network</span></span><br><span class="line">    <span class="attr">Organizations:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Policies defines the set of policies at this level of the config tree</span></span><br><span class="line">    <span class="comment"># For Application policies, their canonical path is</span></span><br><span class="line">    <span class="comment">#   /Channel/Application/&lt;PolicyName&gt;</span></span><br><span class="line">    <span class="attr">Policies:</span></span><br><span class="line">        <span class="attr">Readers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Readers&quot;</span></span><br><span class="line">        <span class="attr">Writers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Writers&quot;</span></span><br><span class="line">        <span class="attr">Admins:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;MAJORITY Admins&quot;</span></span><br><span class="line">        <span class="attr">LifecycleEndorsement:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;MAJORITY Endorsement&quot;</span></span><br><span class="line">        <span class="attr">Endorsement:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;MAJORITY Endorsement&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Fabric-chaincode-lifecycle">Fabric chaincode lifecycle</h2><p>In the Fabric 2.0 release, a new chaincode lifecycle process was introduced, whereby a more democratic process is used to govern chaincode on the network. The new process allows multiple organizations to vote on how a chaincode will be operated before it can be used on a channel. This is significant because it is the combination of this new lifecycle process and the policies that are specified during that process that dictate the security across the network. More details on the flow are available in the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/chaincode_lifecycle.html">Fabric chaincode lifecycle</a> concept topic, but for purposes of this topic you should understand how policies are used in this flow. The new flow includes two steps where policies are specified: when chaincode is <strong>approved</strong> by organization members, and when it is <strong>committed</strong> to the channel.</p><p>The <code>Application</code> section of the <code>configtx.yaml</code> file includes the default chaincode lifecycle endorsement policy. In a production environment you would customize this definition for your own use case.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   SECTION: Application</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section defines the values to encode into a config transaction or</span></span><br><span class="line"><span class="comment">#   genesis block for application related parameters</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Application:</span> <span class="meta">&amp;ApplicationDefaults</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Organizations is the list of orgs which are defined as participants on</span></span><br><span class="line">    <span class="comment"># the application side of the network</span></span><br><span class="line">    <span class="attr">Organizations:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Policies defines the set of policies at this level of the config tree</span></span><br><span class="line">    <span class="comment"># For Application policies, their canonical path is</span></span><br><span class="line">    <span class="comment">#   /Channel/Application/&lt;PolicyName&gt;</span></span><br><span class="line">    <span class="attr">Policies:</span></span><br><span class="line">        <span class="attr">Readers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Readers&quot;</span></span><br><span class="line">        <span class="attr">Writers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Writers&quot;</span></span><br><span class="line">        <span class="attr">Admins:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;MAJORITY Admins&quot;</span></span><br><span class="line">        <span class="attr">LifecycleEndorsement:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;MAJORITY Endorsement&quot;</span></span><br><span class="line">        <span class="attr">Endorsement:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;MAJORITY Endorsement&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p>The <code>LifecycleEndorsement</code> policy governs who needs to <em>approve a chaincode definition</em>.</p><p><code>LifecycleEndorsement</code> 策略管理谁需要批准链码定义</p></li><li><p>The <code>Endorsement</code> policy is the <em>default endorsement policy for a chaincode</em>. More on this below.</p><p><code>Endorsement</code>策略是链码的默认背书策略，详情在下面。</p></li></ul><h2 id="Chaincode-endorsement-policies">Chaincode endorsement policies</h2><p>The endorsement policy is specified for a <strong>chaincode</strong> when it is approved and committed to the channel using the Fabric chaincode lifecycle (that is, one endorsement policy covers all of the state associated with a chaincode). The endorsement policy can be specified either by reference to an endorsement policy defined in the channel configuration or by explicitly specifying a Signature policy.</p><p>在使用Fabric链码生命周期批准链码并将其提交给通道时便指定了链码的背书策略（即，一种背书策略涵盖了与链码相关联的所有状态）。可以通过参考在通道配置中定义的背书策略来指定背书策略，也可以通过显式指定签名策略来指定背书策略。</p><p>If an endorsement policy is not explicitly specified during the approval step, the default <code>Endorsement</code> policy <code>&quot;MAJORITY Endorsement&quot;</code> is used which means that a majority of the peers belonging to the different channel members (organizations) need to execute and validate a transaction against the chaincode in order for the transaction to be considered valid. This default policy allows organizations that join the channel to become automatically added to the chaincode endorsement policy. If you don’t want to use the default endorsement policy, use the Signature policy format to specify a more complex endorsement policy (such as requiring that a chaincode be endorsed by one organization, and then one of the other organizations on the channel).</p><p>Signature policies also allow you to include <code>principals</code> which are simply a way of matching an identity to a role. Principals are just like user IDs or group IDs, but they are more versatile because they can include a wide range of properties of an actor’s identity, such as the actor’s organization, organizational unit, role or even the actor’s specific identity. When we talk about principals, they are the properties which determine their permissions. Principals are described as ‘MSP.ROLE’, where <code>MSP</code> represents the required MSP ID (the organization), and <code>ROLE</code> represents one of the four accepted roles: Member, Admin, Client, and Peer. A role is associated to an identity when a user enrolls with a CA. You can customize the list of roles available on your Fabric CA.</p><p>Some examples of valid principals are:</p><ul><li>‘Org0.Admin’: an administrator of the Org0 MSP</li><li>‘Org1.Member’: a member of the Org1 MSP</li><li>‘Org1.Client’: a client of the Org1 MSP</li><li>‘Org1.Peer’: a peer of the Org1 MSP</li><li>‘OrdererOrg.Orderer’: an orderer in the OrdererOrg MSP</li></ul><p>There are cases where it may be necessary for a particular state (a particular key-value pair, in other words) to have a different endorsement policy. This <strong>state-based endorsement</strong> allows the default chaincode-level endorsement policies to be overridden by a different policy for the specified keys.</p><p>For a deeper dive on how to write an endorsement policy refer to the topic on <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/endorsement-policies.html">Endorsement policies</a> in the Operations Guide.</p><p><strong>Note:</strong> Policies work differently depending on which version of Fabric you are using:</p><ul><li>In Fabric releases prior to 2.0, chaincode endorsement policies can be updated during chaincode instantiation or by using the chaincode lifecycle commands. If not specified at instantiation time, the endorsement policy defaults to “any member of the organizations in the channel”. For example, a channel with “Org1” and “Org2” would have a default endorsement policy of “OR(‘Org1.member’, ‘Org2.member’)”.</li><li>Starting with Fabric 2.0, Fabric introduced a new chaincode lifecycle process that allows multiple organizations to agree on how a chaincode will be operated before it can be used on a channel. The new process requires that organizations agree to the parameters that define a chaincode, such as name, version, and the chaincode endorsement policy.</li></ul><h2 id="Overriding-policy-definitions">Overriding policy definitions</h2><p>Hyperledger Fabric includes default policies which are useful for getting started, developing, and testing your blockchain, but they are meant to be customized in a production environment. You should be aware of the default policies in the <code>configtx.yaml</code> file. Channel configuration policies can be extended with arbitrary verbs, beyond the default <code>Readers, Writers, Admins</code> in <code>configtx.yaml</code>. The orderer system and application channels are overridden by issuing a config update when you override the default policies by editing the <code>configtx.yaml</code> for the orderer system channel or the <code>configtx.yaml</code> for a specific channel.</p><p>See the topic on <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/config_update.html#updating-a-channel-configuration">Updating a channel configuration</a> for more information.</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> Key Concepts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> Policies </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Ordering Service</title>
      <link href="2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/The-Ordering-Service/"/>
      <url>2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/The-Ordering-Service/</url>
      
        <content type="html"><![CDATA[<p>本文档来自<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/orderer/ordering_service.html">The Ordering Service</a>,有所简化。</p><h2 id="What-is-ordering">What is ordering?</h2><p>Many distributed blockchains, such as Ethereum and Bitcoin, are not permissioned, which means that any node can participate in the consensus process, wherein transactions are ordered and bundled into blocks. Because of this fact, these systems rely on <strong>probabilistic</strong> consensus algorithms which eventually guarantee ledger consistency to a high degree of probability, but which are still vulnerable to divergent ledgers (also known as a ledger “fork”), where different participants in the network have a different view of the accepted order of transactions.</p><p>许多的分布式区块链系统，例如以太坊和比特币都是不需要认可的；这意味着任何节点都可以参与共识过程，这个共识就是把交易排序并打包成区块。由于这个事实，这些系统依赖于概率共识算法（目前是Pow共识算法），该算法最终可以确保分类帐的一致性具有很高的概率，但是它们仍然容易收到分叉的影响，在分叉的分类账中，网络中的不同参与者对接受的交易顺序有不同的看法。</p><p>Hyperledger Fabric works differently. It features a node called an <strong>orderer</strong> (it’s also known as an “ordering node”) that does this transaction ordering, which along with other orderer nodes forms an <strong>ordering service</strong>. Because Fabric’s design relies on <strong>deterministic</strong> consensus algorithms, any block validated by the peer is guaranteed to be final and correct. Ledgers cannot fork the way they do in many other distributed and permissionless blockchain networks.</p><p>Hyperledger Fabric的工作方式有所不同。它具有一个称为“排序者”的节点（也称为“排序节点”）来执行此交易的排序，该节点与其他排序节点一起构成排序服务。由于Fabric的设计依赖于确定性共识算法，因此可以保证peer验证的任何块都是最终的和正确的。账本也不会像以太坊和比特币那样出现分叉。</p><p>In addition to promoting finality, separating the endorsement of chaincode execution (which happens at the peers) from ordering gives Fabric advantages in performance and scalability, eliminating bottlenecks which can occur when execution and ordering are performed by the same nodes.</p><p>除了促进不可变性之外，将链码执行的背书（在同级中发生）与排序分开可以使Fabric在性能和可伸缩性方面具有优势，消除了由相同节点执行和排序时可能发生的瓶颈。</p><h2 id="Orderer-nodes-and-channel-configuration">Orderer nodes and channel configuration</h2><p>In addition to their <strong>ordering</strong> role, orderers also maintain the list of organizations that are allowed to create channels. This list of organizations is known as the “consortium”, and the list itself is kept in the configuration of the “orderer system channel” (also known as the “ordering system channel”). By default, this list, and the channel it lives on, can only be edited by the orderer admin. Note that it is possible for an ordering service to hold several of these lists, which makes the consortium a vehicle for Fabric multi-tenancy.</p><p>除了作为排序的角色之外，orderers还维护允许创建通道的组织的列表。这个组织的列表被称为“联盟”，并且这个列表被保存在 “orderer system channel” 的配置中。默认情况下，此列表及其所处的通道只能由orderer的管理员进行编辑。</p><p>Orderers also enforce basic access control for channels, restricting who can read and write data to them, and who can configure them. Remember that who is authorized to modify a configuration element in a channel is subject to the policies that the relevant administrators set when they created the consortium or the channel. Configuration transactions are processed by the orderer, as it needs to know the current set of policies to execute its basic form of access control. In this case, the orderer processes the configuration update to make sure that the requestor has the proper administrative rights. If so, the orderer validates the update request against the existing configuration, generates a new configuration transaction, and packages it into a block that is relayed to all peers on the channel. The peers then process the configuration transactions in order to verify that the modifications approved by the orderer do indeed satisfy the policies defined in the channel.</p><p>Orderers还对通道实施基本访问控制，限制谁可以向通道读取和写入数据以及谁可以对其进行配置。</p><h2 id="Orderer-nodes-and-identity">Orderer nodes and identity</h2><p>Everything that interacts with a blockchain network, including peers, applications, admins, and orderers, acquires their organizational identity from their digital certificate and their Membership Service Provider (MSP) definition.</p><p>For more information about identities and MSPs, check out our documentation on <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/identity/identity.html">Identity</a> and <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/membership/membership.html">Membership</a>.</p><p>Just like peers, ordering nodes belong to an organization. And similar to peers, a separate Certificate Authority (CA) should be used for each organization. Whether this CA will function as the root CA, or whether you choose to deploy a root CA and then intermediate CAs associated with that root CA, is up to you.</p><h2 id="Orderers-and-the-transaction-flow">Orderers and the transaction flow</h2><h3 id="Phase-one-Proposal">Phase one: Proposal</h3><p>We’ve seen from our topic on <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/peers/peers.html">Peers</a> that they form the basis for a blockchain network, hosting ledgers, which can be queried and updated by applications through smart contracts.</p><p>Specifically, applications that want to update the ledger are involved in a process with three phases that ensures all of the peers in a blockchain network keep their ledgers consistent with each other.</p><p>具体来说，应用程序想要更新账本需要涉及三个阶段的过程来确保区块链网络中的所有peer节点保持账本彼此一致。</p><p>In the first phase, a client application sends a transaction proposal to a subset of peers that will invoke a smart contract to produce a proposed ledger update and then endorse the results. The endorsing peers do not apply the proposed update to their copy of the ledger at this time. Instead, the endorsing peers return a proposal response to the client application. The endorsed transaction proposals will ultimately be ordered into blocks in phase two, and then distributed to all peers for final validation and commit in phase three.</p><p>在第一个阶段中，客户端应用程序将交易建议发送给一些peer节点，这些peer节点将调用智能合约以产生提议的账本更新，然后对结果进行背书。背书的peer节点此时不将建议的更新应用于其账本副本。相反，背书的对等方将提议响应返回到客户端应用程序。然后认可的交易建议将最终在第二阶段按顺序排列，然后分发给所有peer节点以进行最终验证并在第三阶段进行提交。</p><p>For an in-depth look at the first phase, refer back to the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/peers/peers.html#phase-1-proposal">Peers</a> topic.</p><h3 id="Phase-two-Ordering-and-packaging-transactions-into-blocks">Phase two: Ordering and packaging transactions into blocks</h3><p>After the completion of the first phase of a transaction, a client application has received an endorsed transaction proposal response from a set of peers. It’s now time for the second phase of a transaction.</p><p>在完成交易的第一阶段之后，客户端应用程序已经接收到来自一群peer节点的已经背书的交易提议响应。***</p><p>In this phase, application clients submit transactions containing endorsed transaction proposal responses to an ordering service node. The ordering service creates blocks of transactions which will ultimately be distributed to all peers on the channel for final validation and commit in phase three.</p><p>在这个阶段，客户端应用程序提交包含已经背书的交易提议响应的交易到一个排序服务节点。排序服务创建包含交易的区块，这个区块最终将分发给通道上的所有peer节点，以进行最终验证并在第三阶段进行提交。</p><p>Ordering service nodes receive transactions from many different application clients concurrently. These ordering service nodes work together to collectively form the ordering service. Its job is to arrange batches of submitted transactions into a well-defined sequence and package them into <em>blocks</em>. These blocks will become the <em>blocks</em> of the blockchain!</p><p>排序服务节点同时接收来自许多不同应用程序客户端的交易。这些排序服务节点一起工作以共同形成排序服务。排序服务的工作是对提交过来的批量的交易安排一个明确定义的顺序，并将它们打包成区块。这些区块将成为区块链的区块！</p><p>The number of transactions in a block depends on channel configuration parameters related to the desired size and maximum elapsed duration for a block (<code>BatchSize</code> and <code>BatchTimeout</code> parameters, to be exact). The blocks are then saved to the orderer’s ledger and distributed to all peers that have joined the channel. If a peer happens to be down at this time, or joins the channel later, it will receive the blocks after reconnecting to an ordering service node, or by gossiping with another peer. We’ll see how this block is processed by peers in the third phase.</p><p>区块中的交易数量取决于通道配置参数，与区块的所需大小和最大经过时间有关（更精确的说是<code>BatchSize</code> 和 <code>BatchTimeout</code> 两个参数）。然后这个区块被保存到排序者的账本中并分发给加入到通道的所有peer节点。如果某个peer节点在这时发生了宕机或者在这以后加入到通道，他会在重新连接到排序服务节点之后收到此区块，或者通过gossiping从其他peer获取。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/orderer.diagram.1.png" alt="Orderer1"></p><p><em>The first role of an ordering node is to package proposed ledger updates. In this example, application A1 sends a transaction T1 endorsed by E1 and E2 to the orderer O1. In parallel, Application A2 sends transaction T2 endorsed by E1 to the orderer O1. O1 packages transaction T1 from application A1 and transaction T2 from application A2 together with other transactions from other applications in the network into block B2. We can see that in B2, the transaction order is T1,T2,T3,T4,T6,T5 – which may not be the order in which these transactions arrived at the orderer! (This example shows a very simplified ordering service configuration with only one ordering node.)</em></p><p><em>排序节点的第一个角色时打包提议的账本更新。</em></p><p>It’s worth noting that the sequencing of transactions in a block is not necessarily the same as the order received by the ordering service, since there can be multiple ordering service nodes that receive transactions at approximately the same time. What’s important is that the ordering service puts the transactions into a strict order, and peers will use this order when validating and committing transactions.</p><p>值得注意的是，一个区块中的交易顺序不一定与排序服务所接收的订单顺序相同，因为可能有多个排序服务节点大约在同一时间接收交易。重要的是排序服务将交易置于严格的顺序中，并且peer节点在验证和提交交易时将使用该顺序。</p><p><em>个人理解：看第一遍时觉得多个排序服务节点收到不同的交易进行排序，这些排序服务是如何保持交易顺序的一致性的呢？如果把排序服务看作一个整体这个问题就解决了，不同的排序服务节点接收到交易之后还会对所有的接收到的交易做一个汇总，并不是每个排序服务节点都对交易进行排序。况且每个排序服务节点只是接收连接到这个排序服务节点的应用程序的交易，所以接收到的交易并不是整个通道上的所有的交易内容，因此肯定是不能够由排序服务节点进行单独排序的。</em></p><p>This strict ordering of transactions within blocks makes Hyperledger Fabric a little different from other blockchains where the same transaction can be packaged into multiple different blocks that compete to form a chain. In Hyperledger Fabric, the blocks generated by the ordering service are <strong>final</strong>. Once a transaction has been written to a block, its position in the ledger is immutably assured. As we said earlier, Hyperledger Fabric’s finality means that there are no <strong>ledger forks</strong> — validated transactions will never be reverted or dropped.</p><p>这种区块内的交易具有严格的顺序使Hyperledger Fabric和其他的区块链系统有一点不同，其他的区块链系统相同的交易可以被打包到不同区块中然后竞争形成一个链。在 Hyperledger Fabric中，由排序服务生成的区块是最终的。一旦一个交易被写入一个区块，它在账本中的位置就永远不变了。像我们之前说的， Hyperledger Fabric的最终性意味着没有账本分叉 – 经验证的交易将永远不会被回滚或丢弃。</p><p>We can also see that, whereas peers execute smart contracts and process transactions, orderers most definitely do not. Every authorized transaction that arrives at an orderer is mechanically packaged in a block — the orderer makes no judgement as to the content of a transaction (except for channel configuration transactions, as mentioned earlier).</p><p>我们还可以看到，peer节点执行智能合约并处理交易，而排序者绝对不会做这些。到达排序者的每笔已经授权交易以机械方式打包在一个区块中 – 排序者不对交易的内容做出判断（除了前面所述的通道配置交易）。</p><p>At the end of phase two, we see that orderers have been responsible for the simple but vital processes of collecting proposed transaction updates, ordering them, and packaging them into blocks, ready for distribution.</p><p>在第二阶段的最后，我们看到排序者负责简单但至关重要的过程，这些过程包括收集提议的交易更新，进行排序并将它们打包成区块以便分发。</p><h3 id="Phase-three-Validation-and-commit">Phase three: Validation and commit</h3><p>The third phase of the transaction workflow involves the distribution and subsequent validation of blocks from the orderer to the peers, where they can be committed to the ledger.</p><p>Phase 3 begins with the orderer distributing blocks to all peers connected to it. It’s also worth noting that not every peer needs to be connected to an orderer — peers can cascade blocks to other peers using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/gossip.html"><strong>gossip</strong></a> protocol.</p><p>Each peer will validate distributed blocks independently, but in a deterministic fashion, ensuring that ledgers remain consistent. Specifically, each peer in the channel will validate each transaction in the block to ensure it has been endorsed by the required organization’s peers, that its endorsements match, and that it hasn’t become invalidated by other recently committed transactions which may have been in-flight when the transaction was originally endorsed. Invalidated transactions are still retained in the immutable block created by the orderer, but they are marked as invalid by the peer and do not update the ledger’s state.</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/orderer.diagram.2.png" alt="Orderer2"></p><p><em>The second role of an ordering node is to distribute blocks to peers. In this example, orderer O1 distributes block B2 to peer P1 and peer P2. Peer P1 processes block B2, resulting in a new block being added to ledger L1 on P1. In parallel, peer P2 processes block B2, resulting in a new block being added to ledger L1 on P2. Once this process is complete, the ledger L1 has been consistently updated on peers P1 and P2, and each may inform connected applications that the transaction has been processed.</em></p><p>In summary, phase three sees the blocks generated by the ordering service applied consistently to the ledger. The strict ordering of transactions into blocks allows each peer to validate that transaction updates are consistently applied across the blockchain network.</p><p>For a deeper look at phase 3, refer back to the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/peers/peers.html#phase-3-validation-and-commit">Peers</a> topic.</p><h2 id="Ordering-service-implementations">Ordering service implementations</h2><p>While every ordering service currently available handles transactions and configuration updates the same way, there are nevertheless several different implementations for achieving consensus on the strict ordering of transactions between ordering service nodes.</p><p>当前可用的每个排序服务都以相同的方式处理交易和配置更新，但是有几种不同的实现方式可用于在排序服务节点之间对严格的交易顺序达成共识。</p><p>For information about how to stand up an ordering node (regardless of the implementation the node will be used in), check out <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/orderer_deploy.html">our documentation on standing up an ordering node</a>.</p><ul><li><p><strong>Raft</strong> (recommended)</p><p>New as of v1.4.1, Raft is a crash fault tolerant (CFT) ordering service based on an implementation of <a href="https://raft.github.io/raft.pdf">Raft protocol</a> in <a href="https://coreos.com/etcd/"><code>etcd</code></a>. Raft follows a “leader and follower” model, where a leader node is elected (per channel) and its decisions are replicated by the followers. Raft ordering services should be easier to set up and manage than Kafka-based ordering services, and their design allows different organizations to contribute nodes to a distributed ordering service.</p><p>自v1.4.1起新增，Raft是基于<a href="https://coreos.com/etcd/"><code>etcd</code></a>的 <a href="https://raft.github.io/raft.pdf">Raft 协议</a> 实现的故障容错排序服务。Raft遵从“领导者和跟随者”模型，这个模型是领导者节点（按通道）被选出并由跟随者复制其决策。Raft协议排序服务相较于基于Kafka的排序服务更容易设置和管理，其设计允许不同的组织将节点贡献给分布式排序服务。（<em>个人理解最后一句话是说排序服务是由不同组织的排序服务节点组成</em>）</p></li><li><p><strong>Kafka</strong> (deprecated in v2.x)</p><p>Similar to Raft-based ordering, Apache Kafka is a CFT implementation that uses a “leader and follower” node configuration. Kafka utilizes a ZooKeeper ensemble for management purposes. The Kafka based ordering service has been available since Fabric v1.0, but many users may find the additional administrative overhead of managing a Kafka cluster intimidating or undesirable.</p><p>与基于Raft的排序类似，Apache Kafka是使用“领导者和跟随者”节点配置的CFT实现。Kafka利用ZooKeeper集合进行管理。从Fabric v1.0开始提供基于Kafka的排序服务，但是许多用户可能会发现管理Kafka群集的额外管理开销令人生畏或不受欢迎。</p></li><li><p><strong>Solo</strong> (deprecated in v2.x)</p><p>The Solo implementation of the ordering service is intended for test only and consists only of a single ordering node. It has been deprecated and may be removed entirely in a future release. Existing users of Solo should move to a single node Raft network for equivalent function.</p><p>排序服务的Solo实现仅用于测试，并且仅包含一个订购节点。它已被弃用，在将来的发行版中可能会完全删除。Solo的现有用户应移至单节点Raft网络以实现等效功能。</p></li></ul><h2 id="Raft">Raft</h2><p>For information on how to configure a Raft ordering service, check out our <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/raft_configuration.html">documentation on configuring a Raft ordering service</a>.</p><p>The go-to ordering service choice for production networks, the Fabric implementation of the established Raft protocol uses a “leader and follower” model, in which a leader is dynamically elected among the ordering nodes in a channel (this collection of nodes is known as the “consenter set”), and that leader replicates messages to the follower nodes. Because the system can sustain the loss of nodes, including leader nodes, as long as there is a majority of ordering nodes (what’s known as a “quorum”) remaining, Raft is said to be “crash fault tolerant” (CFT). In other words, if there are three nodes in a channel, it can withstand the loss of one node (leaving two remaining). If you have five nodes in a channel, you can lose two nodes (leaving three remaining nodes). This feature of a Raft ordering service is a factor in the establishment of a high availability strategy for your ordering service. Additionally, in a production environment, you would want to spread these nodes across data centers and even locations. For example, by putting one node in three different data centers. That way, if a data center or entire location becomes unavailable, the nodes in the other data centers continue to operate.</p><p>生产网络的首选排序服务实现方式，Fabric中已建立的Raft协议的实现是使用“领导者和跟随者”模型，其中领导者是在通道中的排序节点之间动态选举的（该节点集合称为“同意者集”），领导者将消息复制到跟随者节点。因为系统可以承受包括领导节点在内的节点的丢失，所以只要剩下大多数排序节点（所谓的“法定人数”）即可，因此Raft被称为“故障容错”（CFT）。换句话说，如果通道中有三个节点，那么它可以承受一个节点的损失（剩下两个活着的节点）。如果通道中有五个节点，则允许丢失两个节点（剩下三个剩余节点）。Raft排序服务的此功能是为您的排序服务建立高可用性策略的一个因素。此外，在生产环境中，您可能希望将这些节点分布在数据中心甚至本地。例如，通过将节点放置在三个不同的数据中心中。这样，如果一个数据中心或整个位置不可用，则其他数据中心中的节点将继续运行。</p><p>From the perspective of the service they provide to a network or a channel, Raft and the existing Kafka-based ordering service (which we’ll talk about later) are similar. They’re both CFT ordering services using the leader and follower design. If you are an application developer, smart contract developer, or peer administrator, you will not notice a functional difference between an ordering service based on Raft versus Kafka. However, there are a few major differences worth considering, especially if you intend to manage an ordering service:</p><p>从它们提供给网络或通道的服务的角度来看，Raft与现有的基于Kafka的排序服务（我们将在后面讨论）很相似。 它们都是采用领导者和跟随者设计的CFT排序服务。如果你是一个应用程序开发者、智能合约开发者或者是peer绩点管理员，您不会注意到基于Raft和Kafka的排序服务之间的功能差异。但是，有一些主要差异值得考虑，尤其是如果您打算管理排序服务：</p><ul><li><p>Raft is easier to set up. Although Kafka has many admirers, even those admirers will (usually) admit that deploying a Kafka cluster and its ZooKeeper ensemble can be tricky, requiring a high level of expertise in Kafka infrastructure and settings. Additionally, there are many more components to manage with Kafka than with Raft, which means that there are more places where things can go wrong. And Kafka has its own versions, which must be coordinated with your orderers. <strong>With Raft, everything is embedded into your ordering node</strong>.</p><p>Raft的排序服务更容易搭建。</p></li><li><p>Kafka and Zookeeper are not designed to be run across large networks. While Kafka is CFT, it should be run in a tight group of hosts. This means that practically speaking you need to have one organization run the Kafka cluster. Given that, having ordering nodes run by different organizations when using Kafka (which Fabric supports) doesn’t give you much in terms of decentralization because the nodes will all go to the same Kafka cluster which is under the control of a single organization. With Raft, each organization can have its own ordering nodes, participating in the ordering service, which leads to a more decentralized system.</p><p>Kafka和Zookeeper并非是为了跨大型网络运行而设计的。</p></li><li><p>Raft is supported natively, which means that users are required to get the requisite images and learn how to use Kafka and ZooKeeper on their own. Likewise, support for Kafka-related issues is handled through <a href="https://kafka.apache.org/">Apache</a>, the open-source developer of Kafka, not Hyperledger Fabric. The Fabric Raft implementation, on the other hand, has been developed and will be supported within the Fabric developer community and its support apparatus.</p></li><li><p>Where Kafka uses a pool of servers (called “Kafka brokers”) and the admin of the orderer organization specifies how many nodes they want to use on a particular channel, Raft allows the users to specify which ordering nodes will be deployed to which channel. In this way, peer organizations can make sure that, if they also own an orderer, this node will be made a part of a ordering service of that channel, rather than trusting and depending on a central admin to manage the Kafka nodes.</p></li><li><p>Raft is the first step toward Fabric’s development of a byzantine fault tolerant (BFT) ordering service. As we’ll see, some decisions in the development of Raft were driven by this. If you are interested in BFT, learning how to use Raft should ease the transition.</p><p>Raft是Fabric开发拜占庭式容错（BFT）排序服务的第一步。</p></li></ul><p>Note: Similar to Solo and Kafka, a Raft ordering service can lose transactions after acknowledgement of receipt has been sent to a client. For example, if the leader crashes at approximately the same time as a follower provides acknowledgement of receipt. Therefore, application clients should listen on peers for transaction commit events regardless (to check for transaction validity), but extra care should be taken to ensure that the client also gracefully tolerates a timeout in which the transaction does not get committed in a configured timeframe. Depending on the application, it may be desirable to resubmit the transaction or collect a new set of endorsements upon such a timeout.</p><p>在已将回执确认发送给客户之后，Raft排序服务可能会丢失交易。例如，如果领导者大约在追随者提供回执确认的同时崩溃。因此，无论如何应用程序客户端都应在peer上侦听交易提交事件（以检查交易有效性），但应格外小心，以确保客户端也能容忍超时，在该超时中不会在配置的时间范围内提交事务。</p><h3 id="Raft-concepts">Raft concepts</h3><p>While Raft offers many of the same features as Kafka — albeit in a simpler and easier-to-use package — it functions substantially different under the covers from Kafka and introduces a number of new concepts, or twists on existing concepts, to Fabric.</p><p>尽管Raft提供了许多与Kafka相同的功能 – 尽管采用了更简单易用的软件包 – 它的功能与Kafka的表面大不相同，并为Fabric引入了许多新概念或扭曲现有的概念。</p><p><strong>Log entry</strong>. The primary unit of work in a Raft ordering service is a “log entry”, with the full sequence of such entries known as the “log”. We consider the log consistent if a majority (a quorum, in other words) of members agree on the entries and their order, making the logs on the various orderers replicated.</p><p>Raft排序服务的主要工作单元是 “log entry”，这些条目的完整序列称为“log”。如果多数成员（换言之，为法定人数）同意条目及其顺序，则我们认为日志是一致的，使日志复制到各个排序者上。</p><p><strong>Consenter set</strong>. The ordering nodes actively participating in the consensus mechanism for a given channel and receiving replicated logs for the channel. This can be all of the nodes available (either in a single cluster or in multiple clusters contributing to the system channel), or a subset of those nodes.</p><p><strong>同意者集</strong>。排序节点积极参与给定通道的共识机制，并接收该通道的复制日志。这可以是所有可用节点（在单个群集中或在组成系统通道的多个群集中），也可以是那些节点的子集。</p><p><strong>Finite-State Machine (FSM)</strong>. Every ordering node in Raft has an FSM and collectively they’re used to ensure that the sequence of logs in the various ordering nodes is deterministic (written in the same sequence).</p><p><strong>有限状态机</strong>。Raft中的每个排序节点都有一个FSM，并共同使用它们来确保各个排序节点中的日志顺序是确定的（以相同的顺序写入）。</p><p><strong>Quorum</strong>. Describes the minimum number of consenters that need to affirm a proposal so that transactions can be ordered. For every consenter set, this is a <strong>majority</strong> of nodes. In a cluster with five nodes, three must be available for there to be a quorum. If a quorum of nodes is unavailable for any reason, the ordering service cluster becomes unavailable for both read and write operations on the channel, and no new logs can be committed.</p><p><strong>法定人数</strong>。描述需要确认提议以便可以排序交易的同意者的最小数量。对于每个同意集，这是大多数节点。在一个由五个节点组成的集群中，必须有三个节点可用才能达到法定人数。如果由于任何原因无法达到法定数量的节点，排序服务群集将无法用于通道上的读取和写入操作，并且无法提交任何新日志。</p><p><strong>Leader</strong>. This is not a new concept — Kafka also uses leaders, as we’ve said — but it’s critical to understand that at any given time, a channel’s consenter set elects a single node to be the leader (we’ll describe how this happens in Raft later). The leader is responsible for ingesting new log entries, replicating them to follower ordering nodes, and managing when an entry is considered committed. This is not a special <strong>type</strong> of orderer. It is only a role that an orderer may have at certain times, and then not others, as circumstances determine.</p><p><strong>领导者</strong>。 这不是一个新概念 – 正如我们所说的，Kafka也使用领导者 – 但至关重要的是要了解，在任何给定时间，通道的同意者集会选举一个节点作为领导者（我们稍后将描述在Raft中如何发生）。领导者负责获取新的日志条目，将它们复制到跟随者排序节点，并管理何时将条目视为已提交。这不是排序者的特殊类型。这只是排序者可能在某些时候扮演的角色，***。</p><p><strong>Follower</strong>. Again, not a new concept, but what’s critical to understand about followers is that the followers receive the logs from the leader and replicate them deterministically, ensuring that logs remain consistent. As we’ll see in our section on leader election, the followers also receive “heartbeat” messages from the leader. In the event that the leader stops sending those message for a configurable amount of time, the followers will initiate a leader election and one of them will be elected the new leader.</p><p><strong>追随者</strong>。了解追随者的关键是追随者从领导者那里接收日志并确定性地复制它们，以确保日志保持一致。正如我们在领导者选举部分中所看到的那样，追随者还会从领导者那里接收“心跳”消息。如果领导者在可配置的时间内停止发送这些消息，则跟随者将发起领导者选举，其中一个将被选举为新领导者。</p><h3 id="Raft-in-a-transaction-flow">Raft in a transaction flow</h3><p>Every channel runs on a <strong>separate</strong> instance of the Raft protocol, which allows each instance to elect a different leader. This configuration also allows further decentralization of the service in use cases where clusters are made up of ordering nodes controlled by different organizations. While all Raft nodes must be part of the system channel, they do not necessarily have to be part of all application channels. Channel creators (and channel admins) have the ability to pick a subset of the available orderers and to add or remove ordering nodes as needed (as long as only a single node is added or removed at a time).</p><p>每个通道都运行一个单独的Raft协议实例，这允许每个实例选择不同的领导者。在由不同组织控制的排序节点组成的群集用例中，此配置还允许进一步分散服务。尽管所有Raft节点都必须是系统通道的一部分，但不一定必须是所有应用程序通道的一部分。通道创建者（和通道管理员）可以选择可用订购者的子集，并根据需要添加或删除订购节点（只要一次仅添加或删除一个节点）。</p><p>While this configuration creates more overhead in the form of redundant heartbeat messages and goroutines, it lays necessary groundwork for BFT.</p><p>虽然此配置以冗余心跳消息和goroutine的形式创建了更多开销，但为BFT奠定了必要的基础。</p><p>In Raft, transactions (in the form of proposals or configuration updates) are automatically routed by the ordering node that receives the transaction to the current leader of that channel. This means that peers and applications do not need to know who the leader node is at any particular time. Only the ordering nodes need to know.</p><p>在Raft中，交易（以建议书或配置更新的形式）由接收交易的排序节点自动路由到该通道的当前leader节点。这意味着peer节点和应用程序节点不需要知道当前时间谁是leader节点。只有排序服务节点需要知道。</p><p>When the orderer validation checks have been completed, the transactions are ordered, packaged into blocks, consented on, and distributed, as described in phase two of our transaction flow.</p><h3 id="Architectural-notes">Architectural notes</h3><h4 id="How-leader-election-works-in-Raft">How leader election works in Raft</h4><p>Although the process of electing a leader happens within the orderer’s internal processes, it’s worth noting how the process works.</p><p>Raft nodes are always in one of three states: follower, candidate, or leader. All nodes initially start out as a <strong>follower</strong>. In this state, they can accept log entries from a leader (if one has been elected), or cast votes for leader. If no log entries or heartbeats are received for a set amount of time (for example, five seconds), nodes self-promote to the <strong>candidate</strong> state. In the candidate state, nodes request votes from other nodes. If a candidate receives a quorum of votes, then it is promoted to a <strong>leader</strong>. The leader must accept new log entries and replicate them to the followers.</p><p>Raft的节点一直处于三种状态之一：follower，candidate（候选），或leader。所有的节点的最初状态都是<strong>follower</strong>。在这种状态下，他们可以从leader接收日志条目，或者投票选举leader。如果在设置的时间段内（例如，五秒钟）未接收到日志条目或心跳，则节点会自动升级为 <strong>candidate</strong> 状态。在候选状态下，节点会向其他节点请求投票。如果候选人获得法定人数的选票，则将其晋升为 <strong>leader</strong>。leader节点必须接受新的日志条目并且将其复制到followers。</p><p>For a visual representation of how the leader election process works, check out <a href="http://thesecretlivesofdata.com/raft/">The Secret Lives of Data</a>.</p><h4 id="Snapshots">Snapshots</h4><p>If an ordering node goes down, how does it get the logs it missed when it is restarted?</p><p>如果一个排序节点宕机了，它如何在重新启动时获取丢失的日志信息呢？</p><p>While it’s possible to keep all logs indefinitely, in order to save disk space, Raft uses a process called “snapshotting”, in which users can define how many bytes of data will be kept in the log. This amount of data will conform to a certain number of blocks (which depends on the amount of data in the blocks. Note that only full blocks are stored in a snapshot).</p><p>尽管可以无限期保留所有日志，但是为了节省磁盘空间，Raft使用了一种称为“snapshotting”的程序，用户可以在其中定义将在日志中保留多少字节的数据。此数据量将符合一定数量的区块（这取决于块中的数据量，请注意，快照中仅存储完整块）。</p><p>For example, let’s say lagging replica <code>R1</code> was just reconnected to the network. Its latest block is <code>100</code>. Leader <code>L</code> is at block <code>196</code>, and is configured to snapshot at amount of data that in this case represents 20 blocks. <code>R1</code> would therefore receive block <code>180</code> from <code>L</code> and then make a <code>Deliver</code> request for blocks <code>101</code> to <code>180</code>. Blocks <code>180</code> to <code>196</code> would then be replicated to <code>R1</code> through the normal Raft protocol.</p><p>举个例子，假设滞后的副本<code>R1</code>刚刚重新连接到网络。它的最后一个区块是<code>100</code>.Leader节点<code>L</code>最后一个区块是<code>196</code>，并且设置快照的数量代表20个区块。因此，<code>R1</code>将从<code>L</code>接收区块<code>180</code>个，然后对区块<code>101</code>到<code>180</code>发出 <code>Deliver</code> 请求。<code>180</code>到<code>196</code>之间的区块会使用常规的Raft协议复制到<code>R1</code>。</p><h3 id="Kafka-deprecated-in-v2-x">Kafka (deprecated in v2.x)</h3><p>The other crash fault tolerant ordering service supported by Fabric is an adaptation of a Kafka distributed streaming platform for use as a cluster of ordering nodes. You can read more about Kafka at the <a href="https://kafka.apache.org/intro">Apache Kafka Web site</a>, but at a high level, Kafka uses the same conceptual “leader and follower” configuration used by Raft, in which transactions (which Kafka calls “messages”) are replicated from the leader node to the follower nodes. In the event the leader node goes down, one of the followers becomes the leader and ordering can continue, ensuring fault tolerance, just as with Raft.</p><p>The management of the Kafka cluster, including the coordination of tasks, cluster membership, access control, and controller election, among others, is handled by a ZooKeeper ensemble and its related APIs.</p><p>Kafka clusters and ZooKeeper ensembles are notoriously tricky to set up, so our documentation assumes a working knowledge of Kafka and ZooKeeper. If you decide to use Kafka without having this expertise, you should complete, <em>at a minimum</em>, the first six steps of the <a href="https://kafka.apache.org/quickstart">Kafka Quickstart guide</a> before experimenting with the Kafka-based ordering service. You can also consult <a href="https://github.com/hyperledger/fabric/blob/release-1.1/bddtests/dc-orderer-kafka.yml">this sample configuration file</a> for a brief explanation of the sensible defaults for Kafka and ZooKeeper.</p><p>To learn how to bring up a Kafka-based ordering service, check out <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/kafka.html">our documentation on Kafka</a>.</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> Key Concepts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> Ordering Service </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>身份识别</title>
      <link href="2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/%E8%BA%AB%E5%88%86%E8%AF%86%E5%88%AB/"/>
      <url>2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/%E8%BA%AB%E5%88%86%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>官方文档<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/identity/identity.html">Identity</a></p><h2 id="What-is-an-Identity-（什么是身份识别）">What is an Identity?（什么是身份识别）</h2><p>The different actors in a blockchain network include peers, orderers, client applications, administrators and more. Each of these actors — active elements inside or outside a network able to consume services — has a digital identity encapsulated in an X.509 digital certificate. These identities really matter because they <strong>determine the exact permissions over resources and access to information that actors have in a blockchain network.</strong></p><p>区块链网络中包含不同的成员，包括peers、orderers、client applications、administrators等。这些参与者（网络内部或外部能够使用服务的活动元素）中的每一个都有封装在X.509数字证书中的数字身份。这些身份确实很重要，因为它们<strong>确定了对资源的确切权限以及对参与者在区块链网络中拥有的访问信息的权限</strong>。</p><p>A digital identity furthermore has some additional attributes that Fabric uses to determine permissions, and it gives the union of an identity and the associated attributes a special name — <strong>principal</strong>. Principals are just like userIDs or groupIDs, but a little more flexible because they can include a wide range of properties of an actor’s identity, such as the actor’s organization, organizational unit, role or even the actor’s specific identity. When we talk about principals, they are the properties which determine their permissions.</p><p>此外，数字身份还具有Fabric用来确定权限的其他一些属性，它为身份和相关属性的并集提供了一个特殊名称-<strong>主体</strong>。主体就像是userIDs或groupIDs，但更加灵活，因为它们可以包含成员身份的各种属性，例如成员的组织，组织单位，角色，甚至成员的特定身份。当我们谈论主体时，它们是确定其权限的属性。</p><p>For an identity to be <strong>verifiable</strong>, it must come from a <strong>trusted</strong> authority. A <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/membership/membership.html">membership service provider</a> (MSP) is that trusted authority in Fabric. More specifically, an MSP is a component that defines the rules that govern the valid identities for this organization. The default MSP implementation in Fabric uses X.509 certificates as identities, adopting a traditional Public Key Infrastructure (PKI) hierarchical model (more on PKI later).</p><p>为了使身份可验证，它必须来自受信任的权威。 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/membership/membership.html">membership service provider</a> (MSP)就是一个在Fabric中的受信任的权威。更具体地说，MSP是定义用于管理该组织角色的有效身份的组件。。 Fabric中的默认MSP实现是使用X.509证书作为身份，并采用传统的公共密钥基础结构（PKI）层次模型（稍后将在PKI上进行介绍）。</p><h2 id="A-Simple-Scenario-to-Explain-the-Use-of-an-Identity（通过一个简单的方案来解释身份识别的用法）">A Simple Scenario to Explain the Use of an Identity（通过一个简单的方案来解释身份识别的用法）</h2><p>Imagine that you visit a supermarket to buy some groceries. At the checkout you see a sign that says that only Visa, Mastercard and AMEX cards are accepted. If you try to pay with a different card — let’s call it an “ImagineCard” — it doesn’t matter whether the card is authentic and you have sufficient funds in your account. It will be not be accepted.</p><p>想象一下你去一个超级市场去买一些杂货。在结账时你看到一个标志说只支持Visa、Mastercard和AMEX银行卡。如果你尝试使用其他银行卡-让我们叫它“想象的卡片”-银行卡是否真实和帐户中是否有足够的资金都没关系。它将不被接受。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/identity.diagram.6.png" alt="identity.diagram.6"></p><p><em>Having a valid credit card is not enough — it must also be accepted by the store! PKIs and MSPs work together in the same way — a PKI provides a list of identities, and an MSP says which of these are members of a given organization that participates in the network.</em></p><p><em>拥有一个合法的信用卡还不够，他还必须被商店接受！PKIs和MSPs以相同的方式一起工作-PKI提供了身份识别的列表，MSP指出其中的哪些是参与该网络的给定组织的成员。</em></p><p>PKI certificate authorities and MSPs provide a similar combination of functionalities. A PKI is like a card provider — it dispenses many different types of verifiable identities. An MSP, on the other hand, is like the list of card providers accepted by the store, determining which identities are the trusted members (actors) of the store payment network. <strong>MSPs turn verifiable identities into the members of a blockchain network</strong>.</p><p>PKI证书颁发机构和MSP提供了类似的功能组合。PKI就像银行卡发卡组织一样，它分配许多不同类型的可验证身份。另一方面，MSP就像商店接受的发卡组织列表一样，确定哪些身份是商店支付网络的受信任成员（参与者）。<strong>MSP将可验证身份转换为区块链网络的成员。</strong></p><p>Let’s drill into these concepts in a little more detail.</p><p>让我们更详细地研究这些概念。</p><h2 id="What-are-PKIs-（什么是PKIs？）">What are PKIs?（什么是PKIs？）</h2><p><strong>A public key infrastructure (PKI) is a collection of internet technologies that provides secure communications in a network.</strong> It’s PKI that puts the <strong>S</strong> in <strong>HTTPS</strong> — and if you’re reading this documentation on a web browser, you’re probably using a PKI to make sure it comes from a verified source.</p><p>公钥基础结构（PKI）是网络技术的集合，这些技术在网络中提供安全的通信。是PKI将S置于HTTPS中-如果您正在网络浏览器上阅读此文档，您可能正在使用PKI来确保它来自经过验证的来源。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/identity.diagram.7.png" alt="identity.diagram.7"></p><p><em>The elements of Public Key Infrastructure (PKI). A PKI is comprised of Certificate Authorities who issue digital certificates to parties (e.g., users of a service, service provider), who then use them to authenticate themselves in the messages they exchange in their environment. A CA’s Certificate Revocation List (CRL) constitutes a reference for the certificates that are no longer valid. Revocation of a certificate can happen for a number of reasons. For example, a certificate may be revoked because the cryptographic private material associated to the certificate has been exposed.</em></p><p><em>公钥基础结构（PKI）的元素。PKI由证书颁发机构组成，证书颁发机构向各方颁发数字证书，然后他们使用它们在环境中交换的消息中对自己进行身份验证。CA的证书吊销列表（CRL）构成了不再有效的证书的参考。吊销证书的原因有很多。例如，由于与证书关联的加密私有材料已被暴露，因此证书可能被吊销。</em></p><p>Although a blockchain network is more than a communications network, it relies on the PKI standard to ensure secure communication between various network participants, and to ensure that messages posted on the blockchain are properly authenticated. It’s therefore important to understand the basics of PKI and then why MSPs are so important.</p><p>尽管区块链网络不仅仅是通信网络，但它依赖于PKI标准来确保各种网络参与者之间的安全通信，并确保正确验证发布在区块链上的消息。因此，重要的是要了解PKI的基础知识，然后理解MSP为何如此重要。</p><p>There are four key elements to PKI，PKI有四个关键元素:</p><ul><li><strong>Digital Certificates</strong>（数字证书）</li><li><strong>Public and Private Keys</strong>（公私钥对）</li><li><strong>Certificate Authorities</strong>（证书颁发机构）</li><li><strong>Certificate Revocation Lists</strong>（证书吊销列表）</li></ul><p>Let’s quickly describe these PKI basics, and if you want to know more details, <a href="https://en.wikipedia.org/wiki/Public_key_infrastructure">Wikipedia</a> is a good place to start.</p><p>让我们快速介绍一下这些PKI基础知识，如果您想了解更多详细信息，那么<a href="https://en.wikipedia.org/wiki/Public_key_infrastructure">Public_key_infrastructure</a>是一个不错的起点。</p><h2 id="Digital-Certificates-数字证书">Digital Certificates(数字证书)</h2><p>A digital certificate is a document which holds a set of attributes relating to the holder of the certificate. The most common type of certificate is the one compliant with the <a href="https://en.wikipedia.org/wiki/X.509">X.509 standard</a>, which allows the encoding of a party’s identifying details in its structure.</p><p>数字证书是一种文档，其中包含与证书持有者有关的一组属性。最常见的证书类型是符合<a href="https://en.wikipedia.org/wiki/X.509">X.509标准</a>的证书，该证书允许在其结构中对参与方的标识详细信息进行编码。</p><p>For example, Mary Morris in the Manufacturing Division of Mitchell Cars in Detroit, Michigan might have a digital certificate with a <code>SUBJECT</code> attribute of <code>C=US</code>, <code>ST=Michigan</code>, <code>L=Detroit</code>, <code>O=Mitchell Cars</code>, <code>OU=Manufacturing</code>, <code>CN=Mary Morris /UID=123456</code>. Mary’s certificate is similar to her government identity card — it provides information about Mary which she can use to prove key facts about her. There are many other attributes in an X.509 certificate, but let’s concentrate on just these for now.</p><p>例如，底特律Mitchell汽车制造部门的Mary Morris，密歇根州可能有一个数字证书，其<code>SUBJECT</code>属性为<code>C = US</code>，<code>ST = Michigan</code>，<code>L = Detroit</code>，<code>O = Mitchell Cars</code>，<code>OU = Manufacturing</code>，<code>CN = Mary Morris / UID = 123456</code>。Mary的证书类似于她的政府身份证，它提供了有关玛丽的信息，她可以用来证明有关她的关键事实。X.509证书中还有许多其他属性，但现在让我们仅关注这些属性。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/identity.diagram.8.png" alt="identity.diagram.8"></p><p><em>A digital certificate describing a party called Mary Morris. Mary is the <code>SUBJECT</code> of the certificate, and the highlighted <code>SUBJECT</code> text shows key facts about Mary. The certificate also holds many more pieces of information, as you can see. Most importantly, Mary’s public key is distributed within her certificate, whereas her private signing key is not. This signing key must be kept private.</em></p><p><em>数字证书描述了一个叫做Mary Morris的当事人，Mary是证书的<code>SUBJECT</code> ，突出显示的<code>SUBJECT</code> 文本显示了有关Mary的关键事实。如您所见，该证书还包含更多信息。最重要的是，Mary的公钥在证书中描述，但是私钥没有在证书中。签名用的私钥必须保密。</em></p><p>What is important is that all of Mary’s attributes can be recorded using a mathematical technique called cryptography (literally, “<em>secret writing</em>”) so that tampering will invalidate the certificate. Cryptography allows Mary to present her certificate to others to prove her identity so long as the other party trusts the certificate issuer, known as a <strong>Certificate Authority</strong> (CA). As long as the CA keeps certain cryptographic information securely (meaning, its own <strong>private signing key</strong>), anyone reading the certificate can be sure that the information about Mary has not been tampered with — it will always have those particular attributes for Mary Morris. Think of Mary’s X.509 certificate as a digital identity card that is impossible to change.</p><p>重要的是，可以使用称为加密的数学技术来记录Mary的所有属性，以免篡改证书。只要对方信任证书颁发者（<strong>Certificate Authority</strong> (CA)），密码学就可以允许Mary向他人出示她的证书以证明自己的身份。只要CA安全地保存某些加密信息（即其自己的专用签名密钥），任何阅读证书的人都可以确保有关Mary的信息未被篡改-它始终具有Mary Morris的那些特定属性。将Mary的X.509证书视为无法更改的数字身份证。</p><h2 id="Authentication-Public-keys-and-Private-Keys（认证方式，公钥和私钥）">Authentication, Public keys, and Private Keys（认证方式，公钥和私钥）</h2><p>Authentication and message integrity are important concepts in secure communications. Authentication requires that parties who exchange messages are assured of the identity that created a specific message. For a message to have “integrity” means that cannot have been modified during its transmission. For example, you might want to be sure you’re communicating with the real Mary Morris rather than an impersonator. Or if Mary has sent you a message, you might want to be sure that it hasn’t been tampered with by anyone else during transmission.</p><p>身份验证和消息完整性是安全通信中的重要概念。身份验证要求交换消息的各方确保创建了特定消息的身份。消息具有“完整性”意味着不能在其传输过程中对其进行修改。例如，您可能要确保与真实的玛丽·莫里斯（Mary Morris）而非模仿者进行交流。或者如果Mary已经给你发送了一个消息，你可能想要确保在传输过程中没有被其他任何人篡改过该消息。</p><p>Traditional authentication mechanisms rely on <strong>digital signatures</strong> that, as the name suggests, allow a party to digitally <strong>sign</strong> its messages. Digital signatures also provide guarantees on the integrity of the signed message.</p><p>Technically speaking, digital signature mechanisms require each party to hold two cryptographically connected keys: a public key that is made widely available and acts as authentication anchor, and a private key that is used to produce <strong>digital signatures</strong> on messages. Recipients of digitally signed messages can verify the origin and integrity of a received message by checking that the attached signature is valid under the public key of the expected sender.</p><p><strong>The unique relationship between a private key and the respective public key is the cryptographic magic that makes secure communications possible</strong>. The unique mathematical relationship between the keys is such that the private key can be used to produce a signature on a message that only the corresponding public key can match, and only on the same message.</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/identity.diagram.9.png" alt="identity.diagram.9"></p><p>In the example above, Mary uses her private key to sign the message. The signature can be verified by anyone who sees the signed message using her public key.</p><h2 id="Certificate-Authorities（证书颁发机构）">Certificate Authorities（证书颁发机构）</h2><p>As you’ve seen, an actor or a node is able to participate in the blockchain network, via the means of a <strong>digital identity</strong> issued for it by an authority trusted by the system. In the most common case, digital identities (or simply <strong>identities</strong>) have the form of cryptographically validated digital certificates that comply with X.509 standard and are issued by a Certificate Authority (CA).</p><p>CAs are a common part of internet security protocols, and you’ve probably heard of some of the more popular ones: Symantec (originally Verisign), GeoTrust, DigiCert, GoDaddy, and Comodo, among others.</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/identity.diagram.11.png" alt="identity.diagram.11"></p><p><em>A Certificate Authority dispenses certificates to different actors. These certificates are digitally signed by the CA and bind together the actor with the actor’s public key (and optionally with a comprehensive list of properties). As a result, if one trusts the CA (and knows its public key), it can trust that the specific actor is bound to the public key included in the certificate, and owns the included attributes, by validating the CA’s signature on the actor’s certificate.</em></p><p>Certificates can be widely disseminated, as they do not include either the actors’ nor the CA’s private keys. As such they can be used as anchor of trusts for authenticating messages coming from different actors.</p><p>CAs also have a certificate, which they make widely available. This allows the consumers of identities issued by a given CA to verify them by checking that the certificate could only have been generated by the holder of the corresponding private key (the CA).</p><p>In a blockchain setting, every actor who wishes to interact with the network needs an identity. In this setting, you might say that <strong>one or more CAs</strong> can be used to <strong>define the members of an organization’s from a digital perspective</strong>. It’s the CA that provides the basis for an organization’s actors to have a verifiable digital identity.</p><h3 id="Root-CAs-Intermediate-CAs-and-Chains-of-Trust（根CA、中级CA和信任链）">Root CAs, Intermediate CAs and Chains of Trust（根CA、中级CA和信任链）</h3><p>CAs come in two flavors: <strong>Root CAs</strong> and <strong>Intermediate CAs</strong>. Because Root CAs (Symantec, Geotrust, etc) have to <strong>securely distribute</strong> hundreds of millions of certificates to internet users, it makes sense to spread this process out across what are called <em>Intermediate CAs</em>. These Intermediate CAs have their certificates issued by the root CA or another intermediate authority, allowing the establishment of a “chain of trust” for any certificate that is issued by any CA in the chain. This ability to track back to the Root CA not only allows the function of CAs to scale while still providing security — allowing organizations that consume certificates to use Intermediate CAs with confidence — it limits the exposure of the Root CA, which, if compromised, would endanger the entire chain of trust. If an Intermediate CA is compromised, on the other hand, there will be a much smaller exposure.</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/identity.diagram.1.png" alt="identity.diagram.1"></p><p><em>A chain of trust is established between a Root CA and a set of Intermediate CAs as long as the issuing CA for the certificate of each of these Intermediate CAs is either the Root CA itself or has a chain of trust to the Root CA.</em></p><p>Intermediate CAs provide a huge amount of flexibility when it comes to the issuance of certificates across multiple organizations, and that’s very helpful in a permissioned blockchain system (like Fabric). For example, you’ll see that different organizations may use different Root CAs, or the same Root CA with different Intermediate CAs — it really does depend on the needs of the network.</p><h3 id="Fabric-CA">Fabric CA</h3><p>It’s because CAs are so important that Fabric provides a built-in CA component to allow you to create CAs in the blockchain networks you form. This component — known as <strong>Fabric CA</strong> is a private root CA provider capable of managing digital identities of Fabric participants that have the form of X.509 certificates. Because Fabric CA is a custom CA targeting the Root CA needs of Fabric, it is inherently not capable of providing SSL certificates for general/automatic use in browsers. However, because <strong>some</strong> CA must be used to manage identity (even in a test environment), Fabric CA can be used to provide and manage certificates. It is also possible — and fully appropriate — to use a public/commercial root or intermediate CA to provide identification.</p><p>因为CA非常重要，所以Fabric提供了内置的CA组件，可让您在形成的区块链网络中创建CA。该组件（称为<strong>Fabric CA</strong>）是私有的根CA提供者，能够管理具有X.509证书形式的Fabric参与者的数字身份。由于Fabric CA是针对Fabric的根CA需求的自定义CA，因此它固有地无法提供SSL证书供浏览器中的常规/自动使用。但是，由于必须使用某些CA来管理身份（即使在测试环境中也是如此），因此可以将Fabric CA用于提供和管理证书。使用公共/商业根或中间CA进行标识也是可能的，并且是完全合适的。</p><p>If you’re interested, you can read a lot more about Fabric CA <a href="http://hyperledger-fabric-ca.readthedocs.io/">in the CA documentation section</a>.</p><p>如果你感兴趣，你可以 在<a href="http://hyperledger-fabric-ca.readthedocs.io/">the CA documentation section</a>文档中阅读更多的关于 Fabric CA的内容。</p><h2 id="Certificate-Revocation-Lists（证书吊销列表）">Certificate Revocation Lists（证书吊销列表）</h2><p>A Certificate Revocation List (CRL) is easy to understand — it’s just a list of references to certificates that a CA knows to be revoked for one reason or another. If you recall the store scenario, a CRL would be like a list of stolen credit cards.</p><p>When a third party wants to verify another party’s identity, it first checks the issuing CA’s CRL to make sure that the certificate has not been revoked. A verifier doesn’t have to check the CRL, but if they don’t they run the risk of accepting a compromised identity.</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/identity.diagram.12.png" alt="identity.diagram.12"></p><p><em>Using a CRL to check that a certificate is still valid. If an impersonator tries to pass a compromised digital certificate to a validating party, it can be first checked against the issuing CA’s CRL to make sure it’s not listed as no longer valid.</em></p><p>Note that a certificate being revoked is very different from a certificate expiring. Revoked certificates have not expired — they are, by every other measure, a fully valid certificate. For more in-depth information about CRLs, click <a href="https://hyperledger-fabric-ca.readthedocs.io/en/latest/users-guide.html#generating-a-crl-certificate-revocation-list">here</a>.</p><p>Now that you’ve seen how a PKI can provide verifiable identities through a chain of trust, the next step is to see how these identities can be used to represent the trusted members of a blockchain network. That’s where a Membership Service Provider (MSP) comes into play — <strong>it identifies the parties who are the members of a given organization in the blockchain network</strong>.</p><p>To learn more about membership, check out the conceptual documentation on <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/membership/membership.html">MSPs</a>.</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> Key Concepts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> Identity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fabric测试网络使用</title>
      <link href="2024/11/22/blockchain/fabric/how_to/Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E4%BD%BF%E7%94%A8/"/>
      <url>2024/11/22/blockchain/fabric/how_to/Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Fabric测试网络使用">Fabric测试网络使用</h2><h3 id="测试网络设置环境变量记录">测试网络设置环境变量记录</h3><p>Org1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$&#123;PWD&#125;/../bin:$&#123;PWD&#125;:$PATH</span><br><span class="line">export FABRIC_CFG_PATH=$PWD/../config/</span><br><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:7051</span><br></pre></td></tr></table></figure><p>Org2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$&#123;PWD&#125;/../bin:$&#123;PWD&#125;:$PATH</span><br><span class="line">export FABRIC_CFG_PATH=$PWD/../config/</span><br><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:9051</span><br></pre></td></tr></table></figure><h3 id="2-2-1下载样例源码">2.2.1下载样例源码</h3><p>运行命令下载最新版的<strong>Fabric</strong>和<strong>Fabric CA</strong>以及 <a href="https://github.com/hyperledger/fabric-samples">hyperledger/fabric-samples</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://bit.ly/2ysbOFE | bash -s</span><br></pre></td></tr></table></figure><p>上面的命令干了这些事情：</p><ul><li>下载 <a href="https://github.com/hyperledger/fabric-samples">hyperledger/fabric-samples</a></li><li>签出适当的版本标签</li><li>将Hyperledger Fabric平台特定的二进制文件和配置文件安装到Fabric-samples的/ bin和/ config目录中指定的版本</li><li>下载指定版本的Hyperledger Fabric docker镜像，包括：<ul><li>hyperledger/fabric-peer</li><li>hyperledger/fabric-orderer</li><li>hyperledger/fabric-ccenv</li><li>hyperledger/fabric-tools</li><li>hyperledger/fabric-baseos</li><li>hyperledger/fabric-ca</li></ul></li></ul><h3 id="2-2-2使用Fabric测试网络">2.2.2使用Fabric测试网络</h3><h4 id="启动Fabric测试网络">启动Fabric测试网络</h4><p>1.进入fabric-samples/test-network，可以看到network.sh文件,可以运行<code>./network.sh -h</code>来显示帮助</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd fabric-samples/test-network</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/fabric-samples/test-network$     ll</span><br><span class="line">total 72</span><br><span class="line">-rw-r--r--   1 apple  staff    777 Dec 14 18:36 README.md</span><br><span class="line">drwxr-xr-x  12 apple  staff    384 Dec 14 18:36 addOrg3</span><br><span class="line">drwxr-xr-x   3 apple  staff     96 Dec 14 18:36 configtx</span><br><span class="line">drwxr-xr-x   5 apple  staff    160 Dec 14 18:36 docker</span><br><span class="line">-rwxr-xr-x   1 apple  staff  18645 Dec 14 18:36 network.sh</span><br><span class="line">drwxr-xr-x   7 apple  staff    224 Dec 14 18:36 organizations</span><br><span class="line">-rwxr-xr-x   1 apple  staff   8202 Dec 14 18:36 scriptUtils.sh</span><br><span class="line">drwxr-xr-x   6 apple  staff    192 Dec 14 18:36 scripts</span><br><span class="line">drwxr-xr-x   3 apple  staff     96 Dec 14 18:36 system-genesis-block</span><br></pre></td></tr></table></figure><p>2.停止原来正在运行的docker容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh down</span><br></pre></td></tr></table></figure><p>3.启动网络</p><p>**注意事项：**必须在<code>$USER/fabric-samples/test-network</code>目录下执行此脚本，否则会报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh up</span><br></pre></td></tr></table></figure><p>这个脚本启动两个peer节点，一个ordering节点。这个脚本不会创建channel，我的脚本运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Creating network &quot;net_test&quot; with the default driver</span><br><span class="line">Creating volume &quot;net_orderer.example.com&quot; with default driver</span><br><span class="line">Creating volume &quot;net_peer0.org1.example.com&quot; with default driver</span><br><span class="line">Creating volume &quot;net_peer0.org2.example.com&quot; with default driver</span><br><span class="line">Creating orderer.example.com    ... done</span><br><span class="line">Creating peer0.org1.example.com ... done</span><br><span class="line">Creating peer0.org2.example.com ... done</span><br><span class="line">CONTAINER ID   IMAGE                               COMMAND                  CREATED        STATUS                    PORTS                              NAMES</span><br><span class="line">31c36a007eb0   hyperledger/fabric-peer:latest      &quot;peer node start&quot;        1 second ago   Up Less than a second     7051/tcp, 0.0.0.0:9051-&gt;9051/tcp   peer0.org2.example.com</span><br><span class="line">42f314195c64   hyperledger/fabric-orderer:latest   &quot;orderer&quot;                1 second ago   Up Less than a second     0.0.0.0:7050-&gt;7050/tcp             orderer.example.com</span><br><span class="line">de62f2f44a03   hyperledger/fabric-peer:latest      &quot;peer node start&quot;        1 second ago   Up Less than a second     0.0.0.0:7051-&gt;7051/tcp             peer0.org1.example.com</span><br><span class="line">e9af4c11538c   cordite/network-map:latest          &quot;/usr/bin/java -cp /…&quot;   5 days ago     Exited (143) 3 days ago                                      network-map</span><br><span class="line">5128423bb8d7   redis:5.0                           &quot;docker-entrypoint.s…&quot;   5 months ago   Exited (0) 7 weeks ago                                       redis</span><br><span class="line">6796aadc5173   mysql                               &quot;docker-entrypoint.s…&quot;   7 months ago   Exited (0) 7 weeks ago                                       mysql</span><br><span class="line">66c3ac55f920   neo4j                               &quot;/sbin/tini -g -- /d…&quot;   7 months ago   Exited (0) 7 months ago</span><br></pre></td></tr></table></figure><p>docker面板显示如下：</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20201214185835819.png" alt="image-20201214185835819"></p><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/peers/peers.html">Peers</a>是Fabric network的组成部分，Peers存储区块链账本并在提交之前验证交易。Peers运行包含业务逻辑的智能合约，智能合约用于管理区块链上的账本。</p><p>在网络上的每个Peer都属于一个团体，上图显示的测试网络中的两个peer分别属于组织<code>peer0.org1.example.com</code>和组织<code>peer0.org2.example.com</code>。</p><p>每个Fabric network同样包含<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/orderer/ordering_service.html">ordering service</a>，Peers在验证交易和提交交易到区块链的时候，他们不自己决定交易的顺序和区块中包含哪些交易。在分布式网络中，peers可能分布的特别远，所以让peers对交易顺序达成共识的成本是很高的。</p><p>ordering service的存在是为了让peers专注于交易验证和提交到账本中。在接收到客户端提交的交易时，ordering service会对其进行排序，然后把这些交易添加到区块中。然后将这些区块分发给peer节点，peer节点再把区块写入区块链。Ordering节点还运行系统通道，该通道定义了Fabric network的能力，像如何制作区块以及节点可以使用哪些版本的Fabric。系统通道还定义了哪些组织是属于该联盟的。</p><p>上面的测试网络只运行了一个Ordering节点，在实际的网络中可能存在多个Ordering节点，由一个或多个组织进行操作。不同的Ordering节点使用Raft共识算法来就网络上的交易顺序达成一致。</p><h4 id="创建channel">创建channel</h4><p>通道是特定网络成员之间的专用通信层。通道只能由被邀请加入通道的的组织使用，并且对网络上的其他成员不可见。每个通道都有一个单独的区块链账单，被邀请的组织加入通道上的其他peer以存储channel账本和验证通道上的交易。</p><p>在org2和org2之间创建通道，默认的channel名称为mychannel。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh createChannel</span><br></pre></td></tr></table></figure><p>如果运行成功，则会看到如下日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Channel successfully joined</span><br></pre></td></tr></table></figure><p>也可以指定channel的名称，并且你可以创建多个channel。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh createChannel -c channel1</span><br></pre></td></tr></table></figure><p>如果你想一步启动测试网络并创建channel，可以使用下面的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh up createChannel</span><br></pre></td></tr></table></figure><h4 id="在channel上启动chaincode">在channel上启动chaincode</h4><p>启动成功之后，就可以开始使用智能合约来操作channel账本了。智能合约包含了管理区块链账本上资产的业务逻辑。运行在网络上的程序可以调用智能合约在账本上创建、修改、交易资产，这些程序也查询智能合约以读取账本上的数据。</p><p>为了确保交易的有效性，使用智能合约创建的交易通常需要通道上的多个组织签名才能被提交到channel账本。交易也需要多次背书，来防止渠道上的某个组织篡改账本或使用未经过同意的逻辑。要签署交易，每个组织都需要在其peer上调用并执行智能合约，然后再签署交易的output。如果output一致并且收集到了足够的签名，交易就可以被提交到账本。指定需要哪些组织执行智能合约的策略叫做背书策略，该策略是为每个chaincode设置的，作为chaincode定义的一部分。</p><p>在Fabric中，智能合约以称为chaincode的软件包部署在网络上。chaincode安装在组织的peers上，然后部署到channel，然后就可以在该渠道中用于认可交易并与区块链账本进行交互。在讲chaincode部署到channel上之前，channel上的组织需要对chaincode的内容达成共识。当所需数量的组织达成共识之后，chaincode就可以被提交到channel上，然后chaincode就准备好可以使用了。</p><p>搭建完成测试环境之后，可以使用下面的命令来启动chaincode：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh deployCC</span><br></pre></td></tr></table></figure><p>我本地的运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Chaincode definition committed on channel &#x27;mychannel&#x27;</span><br><span class="line">Using organization 1</span><br><span class="line">Querying chaincode definition on peer0.org1 on channel &#x27;mychannel&#x27;...</span><br><span class="line">Attempting to Query committed status on peer0.org1, Retry after 3 seconds.</span><br><span class="line">+ peer lifecycle chaincode querycommitted --channelID mychannel --name basic</span><br><span class="line">+ res=0</span><br><span class="line">Committed chaincode definition for chaincode &#x27;basic&#x27; on channel &#x27;mychannel&#x27;:</span><br><span class="line">Version: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [Org1MSP: true, Org2MSP: true]</span><br><span class="line">Query chaincode definition successful on peer0.org1 on channel &#x27;mychannel&#x27;</span><br><span class="line">Using organization 2</span><br><span class="line">Querying chaincode definition on peer0.org2 on channel &#x27;mychannel&#x27;...</span><br><span class="line">Attempting to Query committed status on peer0.org2, Retry after 3 seconds.</span><br><span class="line">+ peer lifecycle chaincode querycommitted --channelID mychannel --name basic</span><br><span class="line">+ res=0</span><br><span class="line">Committed chaincode definition for chaincode &#x27;basic&#x27; on channel &#x27;mychannel&#x27;:</span><br><span class="line">Version: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [Org1MSP: true, Org2MSP: true]</span><br><span class="line">Query chaincode definition successful on peer0.org2 on channel &#x27;mychannel&#x27;</span><br><span class="line">Chaincode initialization is not required</span><br></pre></td></tr></table></figure><h4 id="与网络互动">与网络互动</h4><p>在启用测试网络之后，你可以使用peerCLI与测试网络进行互动。peerCLI允许你调用已经部署的智能合约、更新channels；也可以通过CLI更新或者部署新的智能合约。</p><p>请确保你的操作在test-network目录下进行。</p><p>1、把<code>fabric-samples</code>的<code>bin</code>目录下的二进制命令安装到你的客户端环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$&#123;PWD&#125;/../bin:$PATH</span><br></pre></td></tr></table></figure><p>2、还需要将FABRIC_CFG_PATH设置为指向fabric-samples存储库中的core.yaml文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CFG_PATH=$PWD/../config/</span><br></pre></td></tr></table></figure><p>3、现在设置环境变量允许你使用Org1的身份操作peerCLI。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:7051</span><br></pre></td></tr></table></figure><p>4、使用下面的命令用资产初始化账本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;InitLedger&quot;,&quot;Args&quot;:[]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>如果成功你会看到像下面的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-16 15:35:41.511 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p>5、现在你可以使用下面的命令查询账本上的资产</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C mychannel -n basic -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>如果成功你会看到下面的结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;<span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset1&quot;</span>, <span class="attr">&quot;color&quot;</span>: <span class="string">&quot;blue&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">5</span>, <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;Tomoko&quot;</span>, <span class="attr">&quot;appraisedValue&quot;</span>: <span class="number">300</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset2&quot;</span>, <span class="attr">&quot;color&quot;</span>: <span class="string">&quot;red&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">5</span>, <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;Brad&quot;</span>, <span class="attr">&quot;appraisedValue&quot;</span>: <span class="number">400</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset3&quot;</span>, <span class="attr">&quot;color&quot;</span>: <span class="string">&quot;green&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">10</span>, <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;Jin Soo&quot;</span>, <span class="attr">&quot;appraisedValue&quot;</span>: <span class="number">500</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset4&quot;</span>, <span class="attr">&quot;color&quot;</span>: <span class="string">&quot;yellow&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">10</span>, <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;Max&quot;</span>, <span class="attr">&quot;appraisedValue&quot;</span>: <span class="number">600</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset5&quot;</span>, <span class="attr">&quot;color&quot;</span>: <span class="string">&quot;black&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">15</span>, <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;Adriana&quot;</span>, <span class="attr">&quot;appraisedValue&quot;</span>: <span class="number">700</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;asset6&quot;</span>, <span class="attr">&quot;color&quot;</span>: <span class="string">&quot;white&quot;</span>, <span class="attr">&quot;size&quot;</span>: <span class="number">15</span>, <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;Michel&quot;</span>, <span class="attr">&quot;appraisedValue&quot;</span>: <span class="number">800</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>6、网络上的成员想要交易资产或者更新资产时就会调用chaincode，使用下面的命令来调用资产转移chaincode来更改资产的owner。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset6&quot;,&quot;Christopher&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>如果成功结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-16 15:43:18.062 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p>重新查询可以发现asset6的owner已经更改。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;<span class="attr">&quot;ID&quot;</span>:<span class="string">&quot;asset1&quot;</span>,<span class="attr">&quot;color&quot;</span>:<span class="string">&quot;blue&quot;</span>,<span class="attr">&quot;size&quot;</span>:<span class="number">5</span>,<span class="attr">&quot;owner&quot;</span>:<span class="string">&quot;Tomoko&quot;</span>,<span class="attr">&quot;appraisedValue&quot;</span>:<span class="number">300</span>&#125;,</span><br><span class="line">&#123;<span class="attr">&quot;ID&quot;</span>:<span class="string">&quot;asset2&quot;</span>,<span class="attr">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="attr">&quot;size&quot;</span>:<span class="number">5</span>,<span class="attr">&quot;owner&quot;</span>:<span class="string">&quot;Brad&quot;</span>,<span class="attr">&quot;appraisedValue&quot;</span>:<span class="number">400</span>&#125;,&#123;<span class="attr">&quot;ID&quot;</span>:<span class="string">&quot;asset3&quot;</span>,<span class="attr">&quot;color&quot;</span>:<span class="string">&quot;green&quot;</span>,<span class="attr">&quot;size&quot;</span>:<span class="number">10</span>,<span class="attr">&quot;owner&quot;</span>:<span class="string">&quot;Jin Soo&quot;</span>,<span class="attr">&quot;appraisedValue&quot;</span>:<span class="number">500</span>&#125;,</span><br><span class="line">&#123;<span class="attr">&quot;ID&quot;</span>:<span class="string">&quot;asset4&quot;</span>,<span class="attr">&quot;color&quot;</span>:<span class="string">&quot;yellow&quot;</span>,<span class="attr">&quot;size&quot;</span>:<span class="number">10</span>,<span class="attr">&quot;owner&quot;</span>:<span class="string">&quot;Max&quot;</span>,<span class="attr">&quot;appraisedValue&quot;</span>:<span class="number">600</span>&#125;,</span><br><span class="line">&#123;<span class="attr">&quot;ID&quot;</span>:<span class="string">&quot;asset5&quot;</span>,<span class="attr">&quot;color&quot;</span>:<span class="string">&quot;black&quot;</span>,<span class="attr">&quot;size&quot;</span>:<span class="number">15</span>,<span class="attr">&quot;owner&quot;</span>:<span class="string">&quot;Adriana&quot;</span>,<span class="attr">&quot;appraisedValue&quot;</span>:<span class="number">700</span>&#125;,</span><br><span class="line">&#123;<span class="attr">&quot;ID&quot;</span>:<span class="string">&quot;asset6&quot;</span>,<span class="attr">&quot;color&quot;</span>:<span class="string">&quot;white&quot;</span>,<span class="attr">&quot;size&quot;</span>:<span class="number">15</span>,<span class="attr">&quot;owner&quot;</span>:<span class="string">&quot;Christopher&quot;</span>,<span class="attr">&quot;appraisedValue&quot;</span>:<span class="number">800</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>7、我们在调用chaincode之后，我们来查一下这个调用是如何改变资产的。我们使用Org2来操作，配置环境变量如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:9051</span><br></pre></td></tr></table></figure><p>执行<code>peer chaincode query -C mychannel -n basic -c '&#123;&quot;Args&quot;:[&quot;ReadAsset&quot;,&quot;asset6&quot;]&#125;'</code>命令结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;ID&quot;</span>:<span class="string">&quot;asset6&quot;</span>,<span class="attr">&quot;color&quot;</span>:<span class="string">&quot;white&quot;</span>,<span class="attr">&quot;size&quot;</span>:<span class="number">15</span>,<span class="attr">&quot;owner&quot;</span>:<span class="string">&quot;Christopher&quot;</span>,<span class="attr">&quot;appraisedValue&quot;</span>:<span class="number">800</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="中断网络">中断网络</h4><p>通过执行<code>./network.sh down</code>来中断网络，该命令会停止并删除peer河chaincode的容器；删除org的密钥等数据并从Docker中remove掉chaincode的镜像。该命令还会删除网路上的channel，如果有任何问题可以继续运行<code>./network.sh up</code>。</p><h2 id="问题处理">问题处理</h2><p>创建channel失败，日志如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Channel &#x27;mychannel&#x27; created</span><br><span class="line">Join Org1 peers to the channel...</span><br><span class="line">Using organization 1</span><br><span class="line">+ peer channel join -b ./channel-artifacts/mychannel.block</span><br><span class="line">+ res=1</span><br><span class="line">+ peer channel join -b ./channel-artifacts/mychannel.block</span><br><span class="line">+ res=1</span><br><span class="line">+ peer channel join -b ./channel-artifacts/mychannel.block</span><br><span class="line">+ res=1</span><br><span class="line">+ peer channel join -b ./channel-artifacts/mychannel.block</span><br><span class="line">+ res=1</span><br><span class="line">2020-12-21 11:22:02.781 CST [comm.tls] ClientHandshake -&gt; ERRO 001 Client TLS handshake failed after 1.769196ms with error: EOF remoteaddress=[::1]:7051</span><br><span class="line">2020-12-21 11:22:03.785 CST [comm.tls] ClientHandshake -&gt; ERRO 002 Client TLS handshake failed after 2.054333ms with error: EOF remoteaddress=[::1]:7051</span><br><span class="line">2020-12-21 11:22:05.113 CST [comm.tls] ClientHandshake -&gt; ERRO 003 Client TLS handshake failed after 2.849348ms with error: EOF remoteaddress=[::1]:7051</span><br><span class="line">Error: error getting endorser client for channel: endorser client failed to connect to localhost:7051: failed to create new connection: context deadline exceeded</span><br><span class="line">After 5 attempts, peer0.org1 has failed to join channel &#x27;mychannel&#x27;</span><br><span class="line">Create channel failed</span><br></pre></td></tr></table></figure><p>解决方案：</p><ul><li>删除所有的测试网络相关的容器</li><li>运行<code>./network.sh down</code></li><li>删除docker本地未使用的volume</li><li>重试</li></ul>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> HOW-TO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hyperledger-Fabric开发环境准备</title>
      <link href="2024/11/22/blockchain/fabric/how_to/Hyperledger-Fabric%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
      <url>2024/11/22/blockchain/fabric/how_to/Hyperledger-Fabric%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h3 id="安装homebrew">安装homebrew</h3><p>查看<a href="https://mirror.tuna.tsinghua.edu.cn/help/homebrew">清华大学开源软件镜像站</a>配置国内镜像加快安装软件的速度。</p><h3 id="安装Fabric的环境依赖">安装Fabric的环境依赖</h3><p>使用<code>brew</code>安装<code>git</code>、<code>go</code>、<code>jq</code>、<code>softhsm</code>、<code>docker</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install git go jq softhsm</span><br><span class="line">brew cask install --appdir=&quot;/Applications&quot; docker</span><br></pre></td></tr></table></figure><p>我在安装的时候因为Great Wall的原因有个go的工具没有下载下来，记录一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Failure while executing; `git clone --branch release-branch.go1.15 -c advice.detachedHead=false https://go.googlesource.com/tools.git /Users/apple/Library/Caches/Homebrew/go--gotools--git` exited with 128. Here&#x27;s the output:</span><br><span class="line">Cloning into &#x27;/Users/apple/Library/Caches/Homebrew/go--gotools--git&#x27;...</span><br><span class="line">fatal: unable to access &#x27;https://go.googlesource.com/tools.git/&#x27;: Failed to connect to go.googlesource.com port 443: Operation timed out</span><br></pre></td></tr></table></figure><h3 id="fabric源码下载">fabric源码下载</h3><p>为了加速，在<a href="https://gitee.com/">gitee</a>上导入项目：<a href="https://github.com/hyperledger/fabric%E7%84%B6%E5%90%8Eclone%E5%88%B0%E6%9C%AC%E5%9C%B0%E3%80%82">https://github.com/hyperledger/fabric然后clone到本地。</a></p><h3 id="安装开发工具">安装开发工具</h3><p>1、在fabric目录下，运行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make gotools</span><br></pre></td></tr></table></figure><p>2、安装完成工具之后，验证环境是否正常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make basic-checks integration-test-prereqs</span><br><span class="line">ginkgo -r ./integration/nwo</span><br></pre></td></tr></table></figure><p>我的第二部测试没有通过，记录如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/fabric$     ginkgo -r ./integration/nwo</span><br><span class="line">Running Suite: New World Order Suite</span><br><span class="line">====================================</span><br><span class="line">Random Seed: 1607936946</span><br><span class="line">Will run 4 of 4 specs</span><br><span class="line"></span><br><span class="line">Failure [0.011 seconds]</span><br><span class="line">[BeforeSuite] BeforeSuite</span><br><span class="line">/Users/apple/code/open-source/blockchain/hyperledger/fabric/integration/nwo/nwo_suite_test.go:29</span><br><span class="line"></span><br><span class="line">  missing required image: hyperledger/fabric-ccenv:latest</span><br><span class="line"></span><br><span class="line">  /Users/apple/code/open-source/blockchain/hyperledger/fabric/integration/nwo/buildserver.go:56</span><br><span class="line">------------------------------</span><br><span class="line"></span><br><span class="line">Ran 4 of 0 Specs in 0.512 seconds</span><br><span class="line">FAIL! -- 0 Passed | 4 Failed | 0 Pending | 0 Skipped</span><br><span class="line">--- FAIL: TestNewWorldOrder (0.51s)</span><br><span class="line">FAIL</span><br><span class="line"></span><br><span class="line">Ginkgo ran 1 suite in 3.561084735s</span><br><span class="line">Test Suite Failed</span><br></pre></td></tr></table></figure><p>3、从脚本运行中的信息可以直到依赖了哪些软件：</p><ul><li><a href="https://github.com/docker-library/official-images/blob/master/library/alpine">library/alpine:3.12</a></li><li><a href="https://hub.docker.com/r/hyperledger/fabric-baseos">hyperledger/fabric-baseos</a></li><li><a href="https://github.com/docker-library/golang">golang:1.14.12-alpine3.12</a></li><li><a href="https://hub.docker.com/r/hyperledger/fabric-ccenv">hyperledger/fabric-ccenv</a></li><li><a href="https://hub.docker.com/r/confluentinc/cp-zookeeper">confluentinc/cp-zookeeper:5.3.1</a></li><li><a href="https://hub.docker.com/r/confluentinc/cp-kafka">confluentinc/cp-kafka:5.3.1</a></li><li><a href="https://github.com/docker-library/official-images/blob/master/library/couchdb">library/couchdb:3.1.1</a></li></ul><p>5.添加更多的依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加 gnu-tar</span></span><br><span class="line">brew install gnu-tar --with-default-names</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加 libtool</span></span><br><span class="line">brew install libtool</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译 configtxgen</span></span><br><span class="line">make configtxgen</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> HOW-TO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Fabric中使用私有数据</title>
      <link href="2024/11/22/blockchain/fabric/how_to/%E5%9C%A8Fabric%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%A7%81%E6%9C%89%E6%95%B0%E6%8D%AE/"/>
      <url>2024/11/22/blockchain/fabric/how_to/%E5%9C%A8Fabric%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%A7%81%E6%9C%89%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="在Fabric中使用私有数据">在Fabric中使用私有数据</h1><p>官方文档：<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html">Using Private Data in Fabric</a></p><p>This tutorial will demonstrate the use of Private Data Collections (PDC) to provide storage and retrieval of private data on the blockchain network for authorized peers of organizations. The collection is specified using a collection definition file containing the policies governing that collection.</p><p>本教程将演示如何使用私有数据集（PDC）为组织的有权限的peer在区块链网络上提供私有数据的存储和检索。使用包含定义该PDC策略的集合定义文件来管理PDC。</p><p>The information in this tutorial assumes knowledge of private data stores and their use cases. For more information, check out <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private-data/private-data.html">Private data</a>.</p><p>本教程中的信息假定您了解私有数据存储及其使用案例。有关更多信息，请查看<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private-data/private-data.html">Private data</a>。</p><p>The tutorial will take you through the following steps to practice defining, configuring and using private data with Fabric:</p><p>本教程将指导您完成以下步骤，以练习定义、配置和使用Fabric私有数据：</p><ol><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-use-case">Asset transfer private data sample use case</a> 资产转移私有数据样例使用方法</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-build-json">Build a collection definition JSON file</a> 构建一个集合定义JSON文件</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-read-write-private-data">Read and Write private data using chaincode APIs</a> 使用chaincode API读写私有数据</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-install-define-cc">Deploy the private data smart contract to the channel</a> 部署私有数据智能合约到通道</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-register-identities">Register identities</a> 注册身份</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-store-private-data">Create an asset in private data</a> 在私有数据集中创建资产</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-query-authorized">Query the private data as an authorized peer</a> 通过有权限的peer查询私有数据</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-query-unauthorized">Query the private data as an unauthorized peer</a> 通过没有权限的peer查询私有数据</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-transfer-asset">Transfer the Asset</a> 交易在私有数据集中的资产</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-purge">Purge Private Data</a> 清除私有数据</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-indexes">Using indexes with private data</a> 对私有数据使用索引</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private_data_tutorial.html#pd-ref-material">Additional resources</a> 额外资源</li></ol><p>This tutorial will deploy the <a href="https://github.com/hyperledger/fabric-samples/tree/master/asset-transfer-private-data/chaincode-go">asset transfer private data sample</a> to the Fabric test network to demonstrate how to create, deploy, and use a collection of private data. You should have completed the task <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/install.html">Install Samples, Binaries, and Docker Images</a>.</p><p>这个教程会部署 <a href="https://github.com/hyperledger/fabric-samples/tree/master/asset-transfer-private-data/chaincode-go">asset transfer private data sample</a>到Fabric的测试网络来演示如何创建、部署以及使用PDC。</p><h2 id="Asset-transfer-private-data-sample-use-case（资产转移私有数据样例使用方法）">Asset transfer private data sample use case（资产转移私有数据样例使用方法）</h2><p>This sample demonstrates the use of three private data collections, <code>assetCollection</code>, <code>Org1MSPPrivateCollection</code> &amp; <code>Org2MSPPrivateCollection</code> to transfer an asset between Org1 and Org2, using following use case:</p><p>这个样例使用以下用例演示使用三个私有数据集（PDC）来在Org1和Org2组织之间交易资产；这三个PDC为：<code>assetCollection</code>, <code>Org1MSPPrivateCollection</code> &amp; <code>Org2MSPPrivateCollection</code> 。</p><p>A member of Org1 creates a new asset, henceforth referred as owner. The public details of the asset, including the identity of the owner, are stored in the private data collection named <code>assetCollection</code>. The asset is also created with an appraised value supplied by the owner. The appraised value is used by each participant to agree to the transfer of the asset, and is only stored in owner organization’s collection. In our case, the initial appraisal value agreed by the owner is stored in the <code>Org1MSPPrivateCollection</code>.</p><p>组织Org1的一个成员创建一个新的资产，并拥有这个资产。公共的资产详情，包括拥有者的身份被存储在称作 <code>assetCollection</code>的私有数据集中。资产所有者也会为这个资产创建一个评估价值，通道上的每个参与者都使用这个评估价值来同意资产转让，并且它仅存储在所有者组织的集合中。在我们的案例中，所有者确认的初始评估值存储在<code>Org1MSPPrivateCollection</code>中。</p><p>To purchase the asset, the buyer needs to agree to the same appraised value as the asset owner. In this step, the buyer (a member of Org2) creates an agreement to trade and agree to an appraisal value using smart contract function <code>'AgreeToTransfer'</code>. This value is stored in <code>Org2MSPPrivateCollection</code> collection. Now, the asset owner can transfer the asset to the buyer using smart contract function <code>'TransferAsset'</code>. The <code>'TransferAsset'</code> function uses the hash on the channel ledger to confirm that the owner and the buyer have agreed to the same appraised value before transferring the asset.</p><p>要购买资产，购买者需要同意与资产所有者相同的评估价值。在此步骤中，买方（Org2的成员）使用智能合约的<code>“AgreeToTransfer”</code>方法来创建交易协议并同意评估价值。此值存储在<code>Org2MSPPrivateCollection</code>集合中。现在资产的拥有者可以通过智能合约中的<code>'TransferAsset'</code>方法来交易资产了。 <code>'TransferAsset'</code> 方法在转让资产之前先使用通道账本上的hash来验证买卖双方已经对相同的评估价格达成了一致。</p><p>Before we go through the transfer scenario, we will discuss how organizations can use private data collections in Fabric.</p><p>在此之前，我们将讨论组织如何在Fabric中使用私有数据集合。</p><h2 id="Build-a-collection-definition-JSON-file（构建一个集合定义JSON文件）">Build a collection definition JSON file（构建一个集合定义JSON文件）</h2><p>Before a set of organizations can transact using private data, all organizations on channel need to build a collection definition file that defines the private data collections associated with each chaincode. Data that is stored in a private data collection is only distributed to the peers of certain organizations instead of all members of the channel. The collection definition file describes all of the private data collections that organizations can read and write to from a chaincode.</p><p>在一组组织可以使用私有数据进行交易之前，通道上的所有组织需要构建一个集合定义文件，这个文件定义与每个链码关联的私有数据集合。存储在私有数据集合中的数据仅分发给相同组织的peer节点，而不是分发给通道的所有成员。集合定义文件描述了组织可以通过链码读写的所有私有数据集。</p><p>Each collection is defined by the following properties:</p><ul><li><code>name</code>: Name of the collection.</li><li><code>policy</code>: Defines the organization peers allowed to persist the collection data.</li><li><code>requiredPeerCount</code>: Number of peers required to disseminate the private data as a condition of the endorsement of the chaincode</li><li><code>maxPeerCount</code>: For data redundancy purposes, the number of other peers that the current endorsing peer will attempt to distribute the data to. If an endorsing peer goes down, these other peers are available at commit time if there are requests to pull the private data.</li><li><code>blockToLive</code>: For very sensitive information such as pricing or personal information, this value represents how long the data should live on the private database in terms of blocks. The data will live for this specified number of blocks on the private database and after that it will get purged, making this data obsolete from the network. To keep private data indefinitely, that is, to never purge private data, set the <code>blockToLive</code> property to <code>0</code>.</li><li><code>memberOnlyRead</code>: a value of <code>true</code> indicates that peers automatically enforce that only clients belonging to one of the collection member organizations are allowed read access to private data.</li><li><code>memberOnlyWrite</code>: a value of <code>true</code> indicates that peers automatically enforce that only clients belonging to one of the collection member organizations are allowed write access to private data.</li><li><code>endorsementPolicy</code>: defines the endorsement policy that needs to be met in order to write to the private data collection. The collection level endorsement policy overrides to chaincode level policy. For more information on building a policy definition refer to the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/endorsement-policies.html">Endorsement policies</a> topic.</li></ul><p>所有的集合都是用下面的属性来定义：</p><ul><li><code>name</code>: 集合名称</li><li><code>policy</code>: 定义允许持久化集合数据的组织的peer节点。</li><li><code>requiredPeerCount</code>: 传播私有数据所需的peer数目，以作为对链码的认可</li><li><code>maxPeerCount</code>: 为了数据冗余，当前合法peer将尝试向其分发数据的其他peer的数量。如果一个合法的peer挂了，如果有请求拉私有数据的请求，则这些其他peer在提交时可用。</li><li><code>blockToLive</code>: 对于如价格或个人信息这类非常敏感的信息，此值表示数据应在私有数据库的块上保存的时间。数据将在私有数据库块上保留指定的时间，然后清除，使该数据从网络上过时。要无限期保留私有数据，即从不清除私有数据，请将<code>blockToLive</code>属性设置为0。</li><li><code>memberOnlyRead</code>: 值为true表示peer节点自动强制只有属于集合成员组织的客户端才允许读取私有数据。</li><li><code>memberOnlyWrite</code>:值为true表示peer节点自动强制只有属于集合成员组织的客户端才允许写入私有数据。</li><li><code>endorsementPolicy</code>: 定义了写入私有数据集合需要满足的认可策略。集合级别的背书策略会覆盖chaincode级别的策略。有关构建策略定义的更多信息，请参考 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/endorsement-policies.html">Endorsement policies</a>主题。</li></ul><p>The same collection definition file needs to be deployed by all organizations that use the chaincode, even if the organization does not belong to any collections. In addition to the collections that are explicitly defined in a collection file, each organization has access to an implicit collection on their peers that can only be read by their organization. For an example that uses implicit data collections, see the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/secured_asset_transfer/secured_private_asset_transfer_tutorial.html">Secured asset transfer in Fabric</a>.</p><p>所有使用同一个chaincode的组织都要部署相同的集合定义文件，即使这个组织不属于任何集合。除了在集合文件中显式定义的集合之外，每个组织都可以访问其peer节点上的隐式集合，这些隐式集合只能由其组织读取。使用隐式数据集的例子可以看<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/secured_asset_transfer/secured_private_asset_transfer_tutorial.html">Secured asset transfer in Fabric</a>。</p><p>The asset transfer private data example contains a collections_config.json file that defines three private data collection definitions: <code>assetCollection</code>, <code>Org1MSPPrivateCollection</code>, and <code>Org2MSPPrivateCollection</code>.</p><p>资产转移私有数据的示例包含一个collections_config.json文件，该文件定义了三个私有数据集合定义：<code>assetCollection</code>, <code>Org1MSPPrivateCollection</code>, and <code>Org2MSPPrivateCollection</code>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// collections_config.json</span></span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;assetCollection&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;policy&quot;</span>: <span class="string">&quot;OR(&#x27;Org1MSP.member&#x27;, &#x27;Org2MSP.member&#x27;)&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;requiredPeerCount&quot;</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">&quot;maxPeerCount&quot;</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">&quot;blockToLive&quot;</span>:<span class="number">1000000</span>,</span><br><span class="line">   <span class="attr">&quot;memberOnlyRead&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">&quot;memberOnlyWrite&quot;</span>: <span class="literal">true</span></span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Org1MSPPrivateCollection&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;policy&quot;</span>: <span class="string">&quot;OR(&#x27;Org1MSP.member&#x27;)&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;requiredPeerCount&quot;</span>: <span class="number">0</span>,</span><br><span class="line">   <span class="attr">&quot;maxPeerCount&quot;</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">&quot;blockToLive&quot;</span>:<span class="number">3</span>,</span><br><span class="line">   <span class="attr">&quot;memberOnlyRead&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">&quot;memberOnlyWrite&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">   <span class="attr">&quot;endorsementPolicy&quot;</span>: &#123;</span><br><span class="line">       <span class="attr">&quot;signaturePolicy&quot;</span>: <span class="string">&quot;OR(&#x27;Org1MSP.member&#x27;)&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Org2MSPPrivateCollection&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;policy&quot;</span>: <span class="string">&quot;OR(&#x27;Org2MSP.member&#x27;)&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;requiredPeerCount&quot;</span>: <span class="number">0</span>,</span><br><span class="line">   <span class="attr">&quot;maxPeerCount&quot;</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">&quot;blockToLive&quot;</span>:<span class="number">3</span>,</span><br><span class="line">   <span class="attr">&quot;memberOnlyRead&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">&quot;memberOnlyWrite&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">   <span class="attr">&quot;endorsementPolicy&quot;</span>: &#123;</span><br><span class="line">       <span class="attr">&quot;signaturePolicy&quot;</span>: <span class="string">&quot;OR(&#x27;Org2MSP.member&#x27;)&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>The <code>policy</code> property in the <code>assetCollection</code> definition specifies that both Org1 and Org2 can store the collection on their peers. The <code>memberOnlyRead</code> and <code>memberOnlyWrite</code> parameters are used to specify that only Org1 and Org2 clients can read and write to this collection.</p><p><code>assetCollection</code>定义中的<code>policy</code>属性指定Org1和Org2都可以在其peer节点上存储集合。 <code>memberOnlyRead</code> 和 <code>memberOnlyWrite</code> 参数被用于指定只有Org1和Org2的客户端可以读写这个集合。</p><p>The <code>Org1MSPPrivateCollection</code> collection allows only peers of Org1 to have the private data in their private database, while the <code>Org2MSPPrivateCollection</code> collection can only be stored by the peers of Org2. The <code>endorsementPolicy</code> parameter is used to create a collection specific endorsement policy. Each update to <code>Org1MSPPrivateCollection</code> or <code>Org2MSPPrivateCollection</code> needs to be endorsed by the organization that stores the collection on their peers. We will see how these collections are used to transfer the asset in the course of the tutorial.</p><p><code>Org1MSPPrivateCollection</code> 集合只允许Org1的peer节点在他们的私有数据库中拥有私有数据，而<code>Org2MSPPrivateCollection</code>集合只能由Org2的peer节点存储。 <code>endorsementPolicy</code> 参数用于创建特定集合的认可策略。对<code>Org1MSPPrivateCollection</code>或<code>Org2MSPPrivateCollection</code>的每次更新都需要由将集合存储在其peer节点的组织认可。在本教程中，我们将了解如何使用这些集合来转移资产。</p><p>This collection definition file is deployed when the chaincode definition is committed to the channel using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-commit">peer lifecycle chaincode commit command</a>. More details on this process are provided in Section 3 below.</p><p>这个集合定义文件是在使用<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-commit">peer lifecycle chaincode commit command</a>把链码定义提交到通道时被部署的。</p><h2 id="Read-and-Write-private-data-using-chaincode-APIs（使用chaincode-API读写私有数据）">Read and Write private data using chaincode APIs（使用chaincode API读写私有数据）</h2><p>The next step in understanding how to privatize data on a channel is to build the data definition in the chaincode. The asset transfer private data sample divides the private data into three separate data definitions according to how the data will be accessed.</p><p>下一步是了解如何在链码中建立数据定义来对通道上的数据进行私有化。资产转移私有数据实例根据访问数据的方式将私有数据分为三个单独的数据定义。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Peers in Org1 and Org2 will have this private data in a side database</span></span><br><span class="line"><span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">       Type  <span class="keyword">string</span> <span class="string">`json:&quot;objectType&quot;`</span> <span class="comment">//Type is used to distinguish the various types of objects in state database</span></span><br><span class="line">       ID    <span class="keyword">string</span> <span class="string">`json:&quot;assetID&quot;`</span></span><br><span class="line">       Color <span class="keyword">string</span> <span class="string">`json:&quot;color&quot;`</span></span><br><span class="line">       Size  <span class="keyword">int</span>    <span class="string">`json:&quot;size&quot;`</span></span><br><span class="line">       Owner <span class="keyword">string</span> <span class="string">`json:&quot;owner&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AssetPrivateDetails describes details that are private to owners</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Only peers in Org1 will have this private data in a side database</span></span><br><span class="line"><span class="keyword">type</span> AssetPrivateDetails <span class="keyword">struct</span> &#123;</span><br><span class="line">       ID             <span class="keyword">string</span> <span class="string">`json:&quot;assetID&quot;`</span></span><br><span class="line">       AppraisedValue <span class="keyword">int</span>    <span class="string">`json:&quot;appraisedValue&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only peers in Org2 will have this private data in a side database</span></span><br><span class="line"><span class="keyword">type</span> AssetPrivateDetails <span class="keyword">struct</span> &#123;</span><br><span class="line">       ID             <span class="keyword">string</span> <span class="string">`json:&quot;assetID&quot;`</span></span><br><span class="line">       AppraisedValue <span class="keyword">int</span>    <span class="string">`json:&quot;appraisedValue&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Specifically, access to the private data will be restricted as follows:</p><ul><li><code>objectType, color, size, and owner</code> are stored in <code>assetCollection</code> and hence will be visible to members of the channel per the definition in the collection policy (Org1 and Org2).</li><li><code>AppraisedValue</code> of an asset is stored in collection <code>Org1MSPPrivateCollection</code> or <code>Org2MSPPrivateCollection</code> , depending on the owner of the asset. The value is only accessible to the users who belong to the organization that can store the collection.</li></ul><p>具体来说，对私有数据的访问将受到以下限制：</p><ul><li><code>objectType, color, size, and owner</code> 被存储在 <code>assetCollection</code> 因此，根据集合策略中的定义，这些数据对通道上的Org1和Org2是可以访问的。</li><li>资产的评估价值被存储在 <code>Org1MSPPrivateCollection</code> 或 <code>Org2MSPPrivateCollection</code> 集合中，取决于资产的所有者。只有属于可以存储集合的组织的用户才能访问该评估值。</li></ul>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> HOW-TO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> Secured </tag>
            
            <tag> Private Data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写您的第一个Chaincode</title>
      <link href="2024/11/22/blockchain/fabric/how_to/%E7%BC%96%E5%86%99%E6%82%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAChaincode/"/>
      <url>2024/11/22/blockchain/fabric/how_to/%E7%BC%96%E5%86%99%E6%82%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAChaincode/</url>
      
        <content type="html"><![CDATA[<p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/chaincode4ade.html">官方文档</a></p><h2 id="Asset-Transfer-Chaincode（资产交易智能合约）">Asset Transfer Chaincode（资产交易智能合约）</h2><p>Our application is a basic sample chaincode to initialize a ledger with assets, create, read, update, and delete assets, check to see if an asset exists, and transfer assets from one owner to another.</p><p>我们的程序是一个基本简单的链码，利用资产初始化账本，创建、读取，更新以及更新资产，检查一个资产是否存在并且把资产从一个所有者交易给另一个所有者。</p><h3 id="Choosing-a-Location-for-the-Code（给代码选一个位置）">Choosing a Location for the Code（给代码选一个位置）</h3><p>If you haven’t been doing programming in Go, you may want to make sure that you have <a href="https://golang.org/">Go</a> installed and your system properly configured. We assume you are using a version that supports modules.</p><p>如果你还没有使用过Go，你需要确认你的环境已经安装了 <a href="https://golang.org/">Go</a>并配置好了环境变量。我们假设你使用的是支持模块的版本。</p><p>Now, you will want to create a directory for your chaincode application.</p><p>To keep things simple, let’s use the following command:</p><p>现在你想要为你的链码程序创建一个目录，简单起见，我们使用下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// atcc is shorthand for asset transfer chaincode</span><br><span class="line">mkdir atcc &amp;&amp; cd atcc</span><br></pre></td></tr></table></figure><p>Now, let’s create the module and the source file that we’ll fill in with code:</p><p>现在让我们创建模块和源文件，并用代码填充它们：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go mod init atcc</span><br><span class="line">touch atcc.go</span><br></pre></td></tr></table></figure><h3 id="Housekeeping-整理工作">Housekeeping(整理工作)</h3><p>First, let’s start with some housekeeping. As with every chaincode, it implements the <a href="https://godoc.org/github.com/hyperledger/fabric-contract-api-go/contractapi">fabric-contract-api interface</a>, so let’s add the Go import statements for the necessary dependencies for our chaincode. We’ll import the fabric contract api package and define our SmartContract.</p><p>首先让我们做一些整理工作。所有的链码都实现了<a href="https://godoc.org/github.com/hyperledger/fabric-contract-api-go/contractapi">fabric-contract-api interface</a>，所以让我们为Go程序添加必要的依赖。我们会导入fabric合同API包来定义我们的智能合约。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;log&quot;</span></span><br><span class="line">  <span class="string">&quot;github.com/hyperledger/fabric-contract-api-go/contractapi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmartContract provides functions for managing an Asset</span></span><br><span class="line">   <span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">   contractapi.Contract</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Next, let’s add a struct <code>Asset</code> to represent simple assets on the ledger. Note the JSON annotations, which will be used to marshal the asset to JSON which is stored on the ledger.</p><p>下一步让我们增加一个<code>Asset</code> 类来表示账本上的简单的资产。请注意JSON注释，该注释将用于将资产编组为存储在分类帐中的JSON。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Asset describes basic details of what makes up a simple asset</span></span><br><span class="line">   <span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID             <span class="keyword">string</span> <span class="string">`json:&quot;ID&quot;`</span></span><br><span class="line">    Color          <span class="keyword">string</span> <span class="string">`json:&quot;color&quot;`</span></span><br><span class="line">    Size           <span class="keyword">int</span>    <span class="string">`json:&quot;size&quot;`</span></span><br><span class="line">    Owner          <span class="keyword">string</span> <span class="string">`json:&quot;owner&quot;`</span></span><br><span class="line">    AppraisedValue <span class="keyword">int</span>    <span class="string">`json:&quot;appraisedValue&quot;`</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="Initializing-the-Chaincode-初始化链码">Initializing the Chaincode(初始化链码)</h3><p>Next, we’ll implement the <code>InitLedger</code> function to populate the ledger with some initial data.</p><p>接下来我们实现<code>InitLedger</code> 方法，这个方法使用一些初始化的数据来填充账本。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// InitLedger adds a base set of assets to the ledger</span></span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">InitLedger</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">      assets := []Asset&#123;</span><br><span class="line">        &#123;ID: <span class="string">&quot;asset1&quot;</span>, Color: <span class="string">&quot;blue&quot;</span>, Size: <span class="number">5</span>, Owner: <span class="string">&quot;Tomoko&quot;</span>, AppraisedValue: <span class="number">300</span>&#125;,</span><br><span class="line">        &#123;ID: <span class="string">&quot;asset2&quot;</span>, Color: <span class="string">&quot;red&quot;</span>, Size: <span class="number">5</span>, Owner: <span class="string">&quot;Brad&quot;</span>, AppraisedValue: <span class="number">400</span>&#125;,</span><br><span class="line">        &#123;ID: <span class="string">&quot;asset3&quot;</span>, Color: <span class="string">&quot;green&quot;</span>, Size: <span class="number">10</span>, Owner: <span class="string">&quot;Jin Soo&quot;</span>, AppraisedValue: <span class="number">500</span>&#125;,</span><br><span class="line">        &#123;ID: <span class="string">&quot;asset4&quot;</span>, Color: <span class="string">&quot;yellow&quot;</span>, Size: <span class="number">10</span>, Owner: <span class="string">&quot;Max&quot;</span>, AppraisedValue: <span class="number">600</span>&#125;,</span><br><span class="line">        &#123;ID: <span class="string">&quot;asset5&quot;</span>, Color: <span class="string">&quot;black&quot;</span>, Size: <span class="number">15</span>, Owner: <span class="string">&quot;Adriana&quot;</span>, AppraisedValue: <span class="number">700</span>&#125;,</span><br><span class="line">        &#123;ID: <span class="string">&quot;asset6&quot;</span>, Color: <span class="string">&quot;white&quot;</span>, Size: <span class="number">15</span>, Owner: <span class="string">&quot;Michel&quot;</span>, AppraisedValue: <span class="number">800</span>&#125;,</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> _, asset := <span class="keyword">range</span> assets &#123;</span><br><span class="line">      assetJSON, err := json.Marshal(asset)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      err = ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to put to world state. %v&quot;</span>, err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Next, we write a function to create an asset on the ledger that does not yet exist. When writing chaincode, it is a good idea to check for the existence of something on the ledger prior to taking an action on it, as is demonstrated in the <code>CreateAsset</code> function below.</p><p>接下来，我们写一个创建一个账本上不存在的资产的方法。当编写链码时，最好先对分类帐进行检查，然后再对其进行操作，如下面的CreateAsset函数所示。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CreateAsset issues a new asset to the world state with given details.</span></span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">CreateAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, color <span class="keyword">string</span>, size <span class="keyword">int</span>, owner <span class="keyword">string</span>, appraisedValue <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    exists, err := s.AssetExists(ctx, id)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> exists &#123;</span><br><span class="line">      <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;the asset %s already exists&quot;</span>, id)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    asset := Asset&#123;</span><br><span class="line">      ID:             id,</span><br><span class="line">      Color:          color,</span><br><span class="line">      Size:           size,</span><br><span class="line">      Owner:          owner,</span><br><span class="line">      AppraisedValue: appraisedValue,</span><br><span class="line">    &#125;</span><br><span class="line">    assetJSON, err := json.Marshal(asset)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ctx.GetStub().PutState(id, assetJSON)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Now that we have populated the ledger with some initial assets and created an asset, let’s write a function <code>ReadAsset</code> that allows us to read an asset from the ledger.</p><p>现在我们已经使用初始化资产和创建一个资产来填充了账本，让我们写一个 <code>ReadAsset</code> 方法来允许我们读取账本上的资产。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReadAsset returns the asset stored in the world state with given id.</span></span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">ReadAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">    assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;failed to read from world state: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> assetJSON == <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;the asset %s does not exist&quot;</span>, id)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> asset Asset</span><br><span class="line">    err = json.Unmarshal(assetJSON, &amp;asset)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Now that we have assets on our ledger we can interact with, let’s write a chaincode function <code>UpdateAsset</code> that allows us to update attributes of the asset that we are allowed to change.</p><p>现在我们已经在我们的账本上有资产并能够与他们交互了，让我们写一个链码方法 <code>UpdateAsset</code> 来使我们能够更新允许更改的资产的属性。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UpdateAsset updates an existing asset in the world state with provided parameters.</span></span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">UpdateAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, color <span class="keyword">string</span>, size <span class="keyword">int</span>, owner <span class="keyword">string</span>, appraisedValue <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">      exists, err := s.AssetExists(ctx, id)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> !exists &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;the asset %s does not exist&quot;</span>, id)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// overwriting original asset with new asset</span></span><br><span class="line">      asset := Asset&#123;</span><br><span class="line">        ID:             id,</span><br><span class="line">        Color:          color,</span><br><span class="line">        Size:           size,</span><br><span class="line">        Owner:          owner,</span><br><span class="line">        AppraisedValue: appraisedValue,</span><br><span class="line">      &#125;</span><br><span class="line">      assetJSON, err := json.Marshal(asset)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> ctx.GetStub().PutState(id, assetJSON)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>There may be cases where we need the ability to delete an asset from the ledger, so let’s write a <code>DeleteAsset</code> function to handle that requirement.</p><p>可能我本需要从账本上删除一个资产，所以让我们写一个 <code>DeleteAsset</code> 方法来处理这个需求。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DeleteAsset deletes an given asset from the world state.</span></span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">DeleteAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">      exists, err := s.AssetExists(ctx, id)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> !exists &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;the asset %s does not exist&quot;</span>, id)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> ctx.GetStub().DelState(id)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>We said earlier that is was a good idea to check to see if an asset exists before taking an action on it, so let’s write a function called <code>AssetExists</code> to implement that requirement.</p><p>我们之前说在对一个资产进行操作之前，最好先检查这个资产是否存在，所以让我们写一个名为 <code>AssetExists</code>的方法来实现这个需求。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AssetExists returns true when asset with given ID exists in world state</span></span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">AssetExists</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">      assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">&quot;failed to read from world state: %v&quot;</span>, err)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> assetJSON != <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Next, we’ll write a function we’ll call <code>TransferAsset</code> that enables the transfer of an asset from one owner to another.</p><p>接着，我们写一个我们称作<code>TransferAsset</code>的方法，该函数可将资产从一个所有者转移到另一个所有者。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TransferAsset updates the owner field of asset with given id in world state.</span></span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, newOwner <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">      asset, err := s.ReadAsset(ctx, id)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      asset.Owner = newOwner</span><br><span class="line">      assetJSON, err := json.Marshal(asset)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> ctx.GetStub().PutState(id, assetJSON)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Let’s write a function we’ll call <code>GetAllAssets</code> that enables the querying of the ledger to return all of the assets on the ledger.</p><p>让我们写一个 <code>GetAllAssets</code> 方法来查询账本上的资产，这个方法返回账本上的所有资产。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GetAllAssets returns all assets found in world state</span></span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetAllAssets</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">([]*Asset, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// range query with empty string for startKey and endKey does an</span></span><br><span class="line"><span class="comment">// open-ended query of all assets in the chaincode namespace.</span></span><br><span class="line">    resultsIterator, err := ctx.GetStub().GetStateByRange(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> resultsIterator.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> assets []*Asset</span><br><span class="line">    <span class="keyword">for</span> resultsIterator.HasNext() &#123;</span><br><span class="line">      queryResponse, err := resultsIterator.Next()</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> asset Asset</span><br><span class="line">      err = json.Unmarshal(queryResponse.Value, &amp;asset)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">      &#125;</span><br><span class="line">      assets = <span class="built_in">append</span>(assets, &amp;asset)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> assets, <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Pulling-it-All-Together（把这些代码放到一起）">Pulling it All Together（把这些代码放到一起）</h3><p>Finally, we need to add the <code>main</code> function, which will call the <a href="https://godoc.org/github.com/hyperledger/fabric-contract-api-go/contractapi#ContractChaincode.Start">ContractChaincode.Start</a> function. Here’s the whole chaincode program source.</p><p>最终我们需要添加一个调用 <a href="https://godoc.org/github.com/hyperledger/fabric-contract-api-go/contractapi#ContractChaincode.Start">ContractChaincode.Start</a> 方法的 <code>main</code> 方法。下面就是全部的链码程序源码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;github.com/hyperledger/fabric-contract-api-go/contractapi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmartContract provides functions for managing an Asset</span></span><br><span class="line">   <span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">      contractapi.Contract</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Asset describes basic details of what makes up a simple asset</span></span><br><span class="line">   <span class="keyword">type</span> Asset <span class="keyword">struct</span> &#123;</span><br><span class="line">      ID             <span class="keyword">string</span> <span class="string">`json:&quot;ID&quot;`</span></span><br><span class="line">      Color          <span class="keyword">string</span> <span class="string">`json:&quot;color&quot;`</span></span><br><span class="line">      Size           <span class="keyword">int</span>    <span class="string">`json:&quot;size&quot;`</span></span><br><span class="line">      Owner          <span class="keyword">string</span> <span class="string">`json:&quot;owner&quot;`</span></span><br><span class="line">      AppraisedValue <span class="keyword">int</span>    <span class="string">`json:&quot;appraisedValue&quot;`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InitLedger adds a base set of assets to the ledger</span></span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">InitLedger</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    assets := []Asset&#123;</span><br><span class="line">      &#123;ID: <span class="string">&quot;asset1&quot;</span>, Color: <span class="string">&quot;blue&quot;</span>, Size: <span class="number">5</span>, Owner: <span class="string">&quot;Tomoko&quot;</span>, AppraisedValue: <span class="number">300</span>&#125;,</span><br><span class="line">      &#123;ID: <span class="string">&quot;asset2&quot;</span>, Color: <span class="string">&quot;red&quot;</span>, Size: <span class="number">5</span>, Owner: <span class="string">&quot;Brad&quot;</span>, AppraisedValue: <span class="number">400</span>&#125;,</span><br><span class="line">      &#123;ID: <span class="string">&quot;asset3&quot;</span>, Color: <span class="string">&quot;green&quot;</span>, Size: <span class="number">10</span>, Owner: <span class="string">&quot;Jin Soo&quot;</span>, AppraisedValue: <span class="number">500</span>&#125;,</span><br><span class="line">      &#123;ID: <span class="string">&quot;asset4&quot;</span>, Color: <span class="string">&quot;yellow&quot;</span>, Size: <span class="number">10</span>, Owner: <span class="string">&quot;Max&quot;</span>, AppraisedValue: <span class="number">600</span>&#125;,</span><br><span class="line">      &#123;ID: <span class="string">&quot;asset5&quot;</span>, Color: <span class="string">&quot;black&quot;</span>, Size: <span class="number">15</span>, Owner: <span class="string">&quot;Adriana&quot;</span>, AppraisedValue: <span class="number">700</span>&#125;,</span><br><span class="line">      &#123;ID: <span class="string">&quot;asset6&quot;</span>, Color: <span class="string">&quot;white&quot;</span>, Size: <span class="number">15</span>, Owner: <span class="string">&quot;Michel&quot;</span>, AppraisedValue: <span class="number">800</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, asset := <span class="keyword">range</span> assets &#123;</span><br><span class="line">      assetJSON, err := json.Marshal(asset)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      err = ctx.GetStub().PutState(asset.ID, assetJSON)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to put to world state. %v&quot;</span>, err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateAsset issues a new asset to the world state with given details.</span></span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">CreateAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, color <span class="keyword">string</span>, size <span class="keyword">int</span>, owner <span class="keyword">string</span>, appraisedValue <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    exists, err := s.AssetExists(ctx, id)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> exists &#123;</span><br><span class="line">      <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;the asset %s already exists&quot;</span>, id)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    asset := Asset&#123;</span><br><span class="line">      ID:             id,</span><br><span class="line">      Color:          color,</span><br><span class="line">      Size:           size,</span><br><span class="line">      Owner:          owner,</span><br><span class="line">      AppraisedValue: appraisedValue,</span><br><span class="line">    &#125;</span><br><span class="line">    assetJSON, err := json.Marshal(asset)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ctx.GetStub().PutState(id, assetJSON)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAsset returns the asset stored in the world state with given id.</span></span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">ReadAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(*Asset, error)</span></span> &#123;</span><br><span class="line">    assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;failed to read from world state: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> assetJSON == <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;the asset %s does not exist&quot;</span>, id)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> asset Asset</span><br><span class="line">    err = json.Unmarshal(assetJSON, &amp;asset)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;asset, <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UpdateAsset updates an existing asset in the world state with provided parameters.</span></span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">UpdateAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, color <span class="keyword">string</span>, size <span class="keyword">int</span>, owner <span class="keyword">string</span>, appraisedValue <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    exists, err := s.AssetExists(ctx, id)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !exists &#123;</span><br><span class="line">      <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;the asset %s does not exist&quot;</span>, id)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overwriting original asset with new asset</span></span><br><span class="line">    asset := Asset&#123;</span><br><span class="line">      ID:             id,</span><br><span class="line">      Color:          color,</span><br><span class="line">      Size:           size,</span><br><span class="line">      Owner:          owner,</span><br><span class="line">      AppraisedValue: appraisedValue,</span><br><span class="line">    &#125;</span><br><span class="line">    assetJSON, err := json.Marshal(asset)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ctx.GetStub().PutState(id, assetJSON)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// DeleteAsset deletes an given asset from the world state.</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">DeleteAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    exists, err := s.AssetExists(ctx, id)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !exists &#123;</span><br><span class="line">      <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;the asset %s does not exist&quot;</span>, id)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ctx.GetStub().DelState(id)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AssetExists returns true when asset with given ID exists in world state</span></span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">AssetExists</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">    assetJSON, err := ctx.GetStub().GetState(id)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">&quot;failed to read from world state: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> assetJSON != <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransferAsset updates the owner field of asset with given id in world state.</span></span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">TransferAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, newOwner <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    asset, err := s.ReadAsset(ctx, id)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    asset.Owner = newOwner</span><br><span class="line">    assetJSON, err := json.Marshal(asset)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ctx.GetStub().PutState(id, assetJSON)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetAllAssets returns all assets found in world state</span></span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">GetAllAssets</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">([]*Asset, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// range query with empty string for startKey and endKey does an</span></span><br><span class="line"><span class="comment">// open-ended query of all assets in the chaincode namespace.</span></span><br><span class="line">    resultsIterator, err := ctx.GetStub().GetStateByRange(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> resultsIterator.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> assets []*Asset</span><br><span class="line">    <span class="keyword">for</span> resultsIterator.HasNext() &#123;</span><br><span class="line">      queryResponse, err := resultsIterator.Next()</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> asset Asset</span><br><span class="line">      err = json.Unmarshal(queryResponse.Value, &amp;asset)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">      &#125;</span><br><span class="line">      assets = <span class="built_in">append</span>(assets, &amp;asset)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> assets, <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    assetChaincode, err := contractapi.NewChaincode(&amp;SmartContract&#123;&#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      log.Panicf(<span class="string">&quot;Error creating asset-transfer-basic chaincode: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err := assetChaincode.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      log.Panicf(<span class="string">&quot;Error starting asset-transfer-basic chaincode: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="Chaincode-access-control">Chaincode access control</h2><p>Chaincode can utilize the client (submitter) certificate for access control decisions with <code>ctx.GetStub().GetCreator()</code>. Additionally the Fabric Contract API provides extension APIs that extract client identity from the submitter’s certificate that can be used for access control decisions, whether that is based on client identity itself, or the org identity, or on a client identity attribute.</p><p>链码可以通过 <code>ctx.GetStub().GetCreator()</code>利用客户端（提交者）证书进行访问控制决策。此外，Fabric Contract API还提供了扩展API，这些API从提交者的证书中提取客户端身份，可用于访问控制决策，不论是基于客户端身份本身，组织身份或客户端身份属性。</p><p>For example an asset that is represented as a key/value may include the client’s identity as part of the value (for example as a JSON attribute indicating that asset owner), and only this client may be authorized to make updates to the key/value in the future. The client identity library extension APIs can be used within chaincode to retrieve this submitter information to make such access control decisions.</p><p>例如，表示为键/值的资产可能包含客户的身份作为值的一部分（如作为表示该资产所有者的JSON属性），并且只有这个客户端可能有权限来在将来更新这些 key/value。客户端身份库扩展API可以在链码中使用，以检索此提交者信息以做出此类访问控制决策。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> HOW-TO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> chaincode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Fabric中交易受保护的资产</title>
      <link href="2024/11/22/blockchain/fabric/how_to/%E5%9C%A8Fabric%E4%B8%AD%E4%BA%A4%E6%98%93%E5%8F%97%E4%BF%9D%E6%8A%A4%E7%9A%84%E8%B5%84%E4%BA%A7/"/>
      <url>2024/11/22/blockchain/fabric/how_to/%E5%9C%A8Fabric%E4%B8%AD%E4%BA%A4%E6%98%93%E5%8F%97%E4%BF%9D%E6%8A%A4%E7%9A%84%E8%B5%84%E4%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="在Fabric中交易受保护的资产">在Fabric中交易受保护的资产</h1><p>官方文档：<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/secured_asset_transfer/secured_private_asset_transfer_tutorial.html">Secured asset transfer in Fabric</a></p><p>This tutorial will demonstrate how an asset can be represented and traded between organizations in a Hyperledger Fabric blockchain channel, while keeping details of the asset and transaction private using private data. Each on-chain asset is a non-fungible token (NFT) that represents a specific asset having certain immutable metadata properties (such as size and color) with a unique owner. When the owner wants to sell the asset, both parties need to agree to the same price before the asset is transferred. The private asset transfer smart contract enforces that only the owner of the asset can transfer the asset. In the course of this tutorial, you will learn how Fabric features such as state based endorsement, private data, and access control come together to provide secured transactions that are both private and verifiable.</p><p>本文档会演示如何在Hyperledger Fabric区块链的通道中的组织之间表示和交易资产，同时保持资产和交易的私有性。链上的每个资产都是一个NFT（non-fungible token，不可替代令牌），这个NFT代表具有唯一拥有者、具有某些不变的元数据属性（例如大小和颜色）的特定资产。当所有者想要出售资产时，双方需要在转让资产之前达成一致的价格。私有资产转让智能合约强制规定只有资产所有者才能转让资产。在本教程的过程中，您将学习如何把Fabric的特性（如基于状态的背书、私有数据和访问控制）组合在一起，以提供私有且可验证的安全交易。</p><p>This tutorial will deploy the <a href="https://github.com/hyperledger/fabric-samples/tree/master/asset-transfer-secured-agreement/chaincode-go">secured asset transfer sample</a> to demonstrate how to transfer a private asset between two organizations without publicly sharing data. You should have completed the task <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/secured_asset_transfer/install.html#install-samples-binaries-and-docker-images">Install Samples, Binaries, and Docker Images</a>.</p><p>本教程会部署 <a href="https://github.com/hyperledger/fabric-samples/tree/master/asset-transfer-secured-agreement/chaincode-go">secured asset transfer sample</a> 来演示如何在两个组织之间转移私有资产而不公开共享数据。</p><h2 id="Scenario-requirements（方案要求）">Scenario requirements（方案要求）</h2><p>The private asset transfer scenario is bound by the following requirements:</p><ul><li>An asset may be issued by the first owner’s organization (in the real world issuance may be restricted to some authority that certifies an asset’s properties).</li><li>Ownership is managed at the organization level (the Fabric permissioning scheme would equally support ownership at an individual identity level within an organization).</li><li>The asset identifier and owner is stored as public channel data for all channel members to see.</li><li>The asset metadata properties however are private information known only to the asset owner (and prior owners).</li><li>An interested buyer will want to verify an asset’s private properties.</li><li>An interested buyer will want to verify an asset’s provenance, specifically the asset’s origin and chain of custody. They will also want to verify that the asset has not changed since issuance, and that all prior transfers have been legitimate.</li><li>To transfer an asset, a buyer and seller must first agree on the sales price.</li><li>Only the current owner may transfer their asset to another organization.</li><li>The actual private asset transfer must verify that the legitimate asset is being transferred, and verify that the price has been agreed to. Both buyer and seller must endorse the transfer.</li></ul><p>私有资产交易方案受以下要求约束：</p><ul><li>一个资产可能由第一个拥有者的组织发行（在现实世界中，可能只能由某个权威的可以证明资产属性的组织来发行）。</li><li>所有权是在组织级别进行管理的（Fabric许可方案将同样支持组织内个人身份级别的所有权）。</li><li>资产的ID和所有人作为可以被channel上的所有成员可见的公共数据被存储。</li><li>但是资产的元数据作为私有信息，只能被资产的所有者看到（也包括前所有者）。</li><li>有兴趣的买家将希望验证资产的私有属性。</li><li>有兴趣的买家将希望验证资产的出处，特别是资产的来源和产销监管链。他们还希望验证资产自从发行之后没有被篡改过，并且这个资产的前面的所有交易都是合法的。</li><li>在资产交易之前，买卖双方必须对资产的价格达成一致。</li><li>只有当前拥有者可以把他们的资产转让给另一个组织。</li><li>实际的私有资产交易必须确认合法资产正在转让，并确认双方已经对价格达成一致。买卖双方都必须对交易进行背书。</li></ul><h2 id="How-privacy-is-maintained（如何保持隐私性）">How privacy is maintained（如何保持隐私性）</h2><p>The smart contract uses the following techniques to ensure that the asset properties remain private:</p><ul><li>The asset metadata properties are stored in the current owning organization’s implicit private data collection on the organization’s peers only. Each organization on a Fabric channel has a private data collection that their own organization can use. This collection is <em>implicit</em> because it does not need to be explicitly defined in the chaincode.</li><li>Although a hash of the private properties is automatically stored on-chain for all channel members to see, a random salt is included in the private properties so that other channel members cannot guess the private data pre-image through a dictionary attack.</li><li>Smart contract requests utilize the transient field for private data so that private data does not get included in the final on-chain transaction.</li><li>Private data queries must originate from a client whose org id matches the peer’s org id, which must be the same as the asset owner’s org id.</li></ul><p>智能合约使用以下技术来确保资产属性保持隐私：</p><ul><li>资产元数据属性仅存储在当前拥有组织的节点的隐式私有数据集合中。每个组织在Fabric通道上都有一个只能由组织自己可以使用的私有数据集合。该集合是隐式的，因为不需要在链码中显式定义它。</li><li>虽然私有属性的hash值被自动保存在链上然后通道上所有成员都可以看到，但是私有属性中包含随机盐，因此其他的通道成员无法通过字典攻击猜测私有数据原像。</li><li>智能合约请求将瞬态字段用于私有数据，因此私有数据不会包含在最终的链上交易中。</li><li>对私有数据的查询必须来自组织ID与peer的组织ID一致的客户端，并且该客户端的ID必须与资产所有者的组织ID相同。</li></ul><h2 id="How-the-transfer-is-implemented（交易是如何实施的）">How the transfer is implemented（交易是如何实施的）</h2><p>Before we start using the private asset transfer smart contract we will provide an overview of the transaction flow and how Fabric features are used to protect the asset created on the blockchain:</p><p>在我们开始使用私有资产交易的智能合约之前，我们将概述交易流程以及如何使用Fabric功能来保护在区块链上创建的资产：</p><h3 id="Creating-the-asset（创建资产）">Creating the asset（创建资产）</h3><p>The private asset transfer smart contract is deployed with an endorsement policy that requires an endorsement from any channel member. This allows any organization to create an asset that they own without requiring an endorsement from other channel members. The creation of the asset is the only transaction that uses the chaincode level endorsement policy. Transactions that update or transfer existing assets will be governed by state based endorsement policies or the endorsement policies of private data collections. Note that in other scenarios, you may want an issuing authority to also endorse create transactions.</p><p>私有资产交易智能合约在部署时有一个背书策略，这个背书策略是：不需要任何渠道成员的认可。这样任何组织都可以创建属于他们自己的资产，而不需要其他的通道成员批准。资产的创建是唯一使用链码级背书策略的交易。更新或交易现有资产的交易将受基于状态认可政策或私有数据集合认可政策的约束。注意在其他情况下，你可能想要一个发行机构也认可创建交易。</p><p>The smart contract uses the following Fabric features to ensure that the asset can only be updated or transferred by the organization that owns the asset:</p><ul><li>When the asset is created, the smart contract gets the MSP ID of the organization that submitted the request, and stores the MSP ID as the owner in the asset key/value in the public chaincode world state. Subsequent smart contract requests to update or transfer the asset will use access control logic to verify that the requesting client is from the same organization. Note that in other scenarios, the ownership could be based on a specific client identity within an organization, rather than an organization itself.</li><li>Also when the asset is created, the smart contract sets a state based endorsement policy for the asset key. The state based policy specifies that a peer from the organization that owns the asset must endorse a subsequent request to update or transfer the asset. This prevents any other organization from updating or transferring the asset using a smart contract that has been maliciously altered on their own peers.</li></ul><p>智能合约使用以下的Fabric功能来确保资产只能由拥有它的组织进行更新和交易：</p><ul><li>在资产创建后，智能合约会获取提交请求的组织的MSP ID ，并且把这个MSP ID作为资产的拥有者存储在公共链码世界状态的key/value中。后续的更新或交易资产的智能合约请求将会使用访问控制逻辑来验证发出请求的客户端来自同一个组织。请注意在其他情况下，所有权可以基于组织内的特定客户端身份，而不是组织本身。</li><li>同样，在创建资产时，智能合约会为资产密钥设置基于状态的背书策略。基于状态的策略指定拥有资产的组织中的peer节点必须认可后续的更新或转让资产的请求。这样可以防止任何其他组织利用恶意更改的智能合约来更改和交易资产。</li></ul><h3 id="Agreeing-to-the-transfer（同意交易）">Agreeing to the transfer（同意交易）</h3><p>After a asset is created, channel members can use the smart contract to agree to transfer the asset:</p><ul><li>The owner of the asset can change the description in the public ownership record, for example to advertise that the asset is for sale. Smart contract access control enforces that this change needs to be submitted from a member of the asset owner organization. The state based endorsement policy enforces that this description change must be endorsed by a peer from the owner’s organization.</li></ul><p>在资产创建之后，通道上的成员可以使用智能合约来同意交易资产：</p><ul><li>资产的拥有者可以更改公共记录上的描述，例如广告说这个资产要卖出。智能合约访问控制强制要求此更改需要从拥有此资产的组织的成员提交。基于状态的背书策略规定，此描述更改必须得到拥有资产的组织的成员确认。</li></ul><p>The asset owner and the asset buyer agree to transfer the asset for a certain price:</p><ul><li>The price agreed to by the buyer and the seller is stored in each organization’s implicit private data collection. The private data collection keeps the agreed price secret from other members of the channel. The endorsement policy of the private data collection ensures that the respective organization’s peer endorsed the price agreement, and the smart contract access control logic ensures that the price agreement was submitted by a client of the associated organization.</li><li>A hash of each price agreement is stored on the ledger. The two hashes will match only if the two organizations have agreed to the same price. This allows the organizations to verify that they have come to agreement on the transfer details before the transfer takes place. A random trade id is added to the price agreement, which serves as a <em>salt</em> to ensure that other channel members can not use the hash on the ledger to guess the price.</li></ul><p>资产所有者和资产购买者同意以一定价格交易资产：</p><ul><li>买卖双方都同意的价格被存储在他们各自的隐式私有数据集合中。私有数据集合保证成交价格对通道上的其他成员来说是私密的。私有数据集合背书策略确保各自组织的peer节点对价格达成了一致，智能合约访问控制逻辑确保价格协议是由与组织有关联的客户端提交的。</li><li>交易双方生成的价格协议的hash值被存储在了账本上。只有在两个组织同意同一个价格时，这两个hash值才会匹配。这使组织能够在转移发生之前验证他们已就转移细节达成协议。价格协议中添加了随机交易ID，这是确保通道其他成员不能使用账本上的哈希值来猜测价格的一种盐。</li></ul><h3 id="Transferring-the-asset（交易资产）">Transferring the asset（交易资产）</h3><p>After the two organizations have agreed to the same price, the asset owner can use the transfer function to transfer the asset to the buyer:</p><ul><li>Smart contract access control ensures that the transfer must be initiated by a member of the organization that owns the asset.</li><li>The transfer function verifies that the asset’s private immutable properties passed to the transfer function matches the on chain hash of the asset data in private collection, to ensure that the asset owner is <em>selling</em> the same asset that they own.</li><li>The transfer function uses the hash of the price agreement on the ledger to ensure that both organizations have agreed to the same price.</li><li>If the transfer conditions are met, the transfer function adds the asset to the implicit private data collection of the buyer, and deletes the asset from the collection of the seller. The transfer also updates the owner in the public ownership record.</li><li>Because of the endorsement policies of the seller and buyer implicit data collections, and the state based endorsement policy of the public record (requiring the seller to endorse), the transfer needs to be endorsed by peers from both buyer and seller.</li><li>The state based endorsement policy of the public asset record is updated so that only a peer of the new owner of the asset can update or sell their new asset.</li><li>The price agreements are also deleted from both the seller and buyer implicit private data collection, and a sales receipt is created in each private data collection.</li></ul><p>在两个组织已经对相同的价格达成一致之后，资产的拥有者可以使用转让方法来把资产转让给买方：</p><ul><li>智能合约访问控制确保转账必须由拥有资产的组织的成员来发起</li><li>转账方法验证传递给它的资产的私有不可变属性是否与私有集合中资产数据的链上哈希匹配，确保资产所有者在出售他们拥有的相同的资产。</li><li>转账方法使用账本上的价格协议的hash值来确保两个组织已经同意了相同的价格。</li><li>如果满足转让条件，则转账函数会将资产添加到买方的隐式私有数据集合中，并且从卖方的集合中删除这个资产。转让还会更新公共所有权记录中的资产的所有者。</li><li>因为买卖双方隐式数据集合的背书策略和公共数据的基于状态的背书策略（要求卖方确认），所以交易需要得到买卖双方节点的认可。</li><li>公共资产记录的基于状态的背书策略需要更新，这样只有新的所有者的peer节点才能够更新和出售他们的新资产。</li><li>价格协议也从买卖双方隐式私人数据集合中删除，并且在每个私人数据集合中创建销售收据。</li></ul><h2 id="Running-the-private-asset-transfer-smart-contract（运行私有资产转账智能合约）">Running the private asset transfer smart contract（运行私有资产转账智能合约）</h2><p>You can use the Fabric test network to run the private asset transfer smart contract. The test network contains two peer organizations, Org1 and Org1, that operate one peer each. In this tutorial, we will deploy the smart contract to a channel of the test network joined by both organizations. We will first create an asset that is owned by Org1. After the two organizations agree on the price, we will transfer the asset from Org1 to Org2.</p><p>我们可以使用Fabric的test网络来运行私有资产转账智能合约。（省略。。。）我们先通过Org1组织创建一个资产，在两个组织对价格达成一致之后，我们把资产由Org1组织交易到Org2组织。</p><h2 id="Deploy-the-test-network（部署测试网络）">Deploy the test network（部署测试网络）</h2><p>请参考：<a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/how_to/Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E4%BD%BF%E7%94%A8/">Fabric测试网络使用</a></p><h2 id="Deploy-the-smart-contract-部署智能合约">Deploy the smart contract(部署智能合约)</h2><p>You can use the test network script to deploy the secured asset transfer smart contract to the channel. Run the following command to deploy the smart contract to <code>mychannel</code>:</p><p>你可以使用测试网络脚本来部署安全资产交易智能合约到通道上。运行下面的命令来部署智能合约到<code>mychannel</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;network.sh deployCC -ccn secured -ccp ..&#x2F;asset-transfer-secured-agreement&#x2F;chaincode-go&#x2F; -ccl go -ccep &quot;OR(&#39;Org1MSP.peer&#39;,&#39;Org2MSP.peer&#39;)&quot;</span><br></pre></td></tr></table></figure><p>Note that we are using the <code>-ccep</code> flag to deploy the smart contract with an endorsement policy of <code>&quot;OR('Org1MSP.peer','Org2MSP.peer')&quot;</code>. This allows either organization to create an asset without receiving an endorsement from the other organization.</p><p>注意我们使用<code>-ccep</code>标志来部署智能合约，这个智能合约有一个背书策略<code>&quot;OR('Org1MSP.peer','Org2MSP.peer')&quot;</code>。者允许任意一个组织在创建一个新的资产时不需要其他组织的确认。</p><h3 id="Set-the-environment-variables-to-operate-as-Org2（设置环境变量以Org2的管理员身份操作）">Set the environment variables to operate as Org2（设置环境变量以Org2的管理员身份操作）</h3><p>略，可以使用两个终端分别以Org1和Org2组织管理员的身份操作peer。环境变量设置参考：[Fabric测试网络使用](<a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/how_to/Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E4%BD%BF%E7%94%A8/">https://guozhe001.github.io/2024/11/22/blockchain/fabric/how_to/Fabric测试网络使用/</a></p><p>[)</p><h2 id="Create-an-asset（创建一个资产）">Create an asset（创建一个资产）</h2><p>Any channel member can use the smart contract to create an asset that is owned by their organization. The details of the asset will be stored in a private data collection, and can only accessed by the organization that owns the asset. A public record of the asset, its owner, and a public description is stored on the channel ledger. Any channel member can access the public ownership record to see who owns the asset, and can read the description to see if the asset is for sale.</p><p>任何一个通道成员都可以使用这个智能合约来创建一个属于组织自己的资产。资产的详情会存储在私有数据集合中，并且只能由拥有资产的组织访问。资产，其所有者和公共描述的公共记录存储在通道账本中。任何通道成员都可以访问公共记录来查看谁拥有这个资产，并且可以查看描述来判断资产是否在出售。</p><h3 id="Operate-from-the-Org1-terminal（通过Org1的终端操作）">Operate from the Org1 terminal（通过Org1的终端操作）</h3><p>Before we create the asset, we need to specify the details of what our asset will be. Issue the following command to create a JSON that will describe the asset. The <code>&quot;salt&quot;</code> parameter is a random string that would prevent another member of the channel from guessing the asset using the hash on the ledger. If there was no salt, a user could theoretically guess asset parameters until the hash of the of the guess and the hash on the ledger matched (this is known as a dictionary attack). This string is encoded in Base64 format so that it can be passed to the creation transaction as transient data.</p><p>在创建资产之前，我们需要指定资产的详细信息。通过下面的命令来创建一个JSON来描述资产。<code>&quot;salt&quot;</code>参数是一个随机字符串来防止通道上的另一个成员通过账本上的hash值来猜测这个资产。如果没有盐，理论上用户可以猜测资产参数，直到猜测的哈希值和账本的哈希值匹配（这称为字典攻击）为止。该字符串以Base64格式编码，因此可以作为临时数据传递给创建交易。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PROPERTIES=$(echo -n &quot;&#123;\&quot;object_type\&quot;:\&quot;asset_properties\&quot;,\&quot;asset_id\&quot;:\&quot;asset1\&quot;,\&quot;color\&quot;:\&quot;blue\&quot;,\&quot;size\&quot;:35,\&quot;salt\&quot;:\&quot;a94a8fe5ccb19ba61c4c0873d391e987982fbbd3\&quot;&#125;&quot; | base64 | tr -d \\n)</span><br></pre></td></tr></table></figure><p>We can now use the following command to create a asset that belongs to Org1:</p><p>我们现在可以使用下面的命令来创建一个属于Org1组织的资产：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c &#x27;&#123;&quot;function&quot;:&quot;CreateAsset&quot;,&quot;Args&quot;:[&quot;asset1&quot;, &quot;A new asset for Org1MSP&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_properties\&quot;:\&quot;$ASSET_PROPERTIES\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>We can can query the Org1 implicit data collection to see the asset that was created:</p><p>我们可以查询Org1组织的隐私数据集合来查看创建的资产：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset1&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>When successful, the command will return the following result:</p><p>如果成功，命令会返回下面的结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;object_type&quot;</span>: <span class="string">&quot;asset_properties&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;asset_id&quot;</span>: <span class="string">&quot;asset1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;color&quot;</span>: <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>: <span class="number">35</span>,</span><br><span class="line">  <span class="attr">&quot;salt&quot;</span>: <span class="string">&quot;a94a8fe5ccb19ba61c4c0873d391e987982fbbd3&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can also query the ledger to see the public ownership record:</p><p>我们还可以查询账本来查看公共记录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset1&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>The command will return the record that the asset1 is owned by Org1:</p><p>这个命令会返回数据说明资产asset1属于Org1：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;Org1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;A new asset for Org1MSP&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Because the market for assets is hot, Org1 wants to flip this asset and put it up for sale. As the asset owner, Org1 can update the public description to advertise that the asset is for sale. Run the following command to change the asset description:</p><p>因为资产市场很热，所以Org1希望翻转该资产并将其出售。作为资产的拥有者，Org1组织可以更新公共描述来广告说资产在出售。运行下面的命令来更新资产描述：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c &#x27;&#123;&quot;function&quot;:&quot;ChangePublicDescription&quot;,&quot;Args&quot;:[&quot;asset1&quot;,&quot;This asset is for sale&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>Query the ledger again to see the updated description:</p><p>重新查询账本来查看更新后的描述：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset1&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>We can now see that the asset is for sale:</p><p>我们现在可以看到这个资产在出售：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;Org1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;This asset is for sale&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/transfer_assets_1.png" alt="transfer_assets_1"></p><p><em>Figure 1: When Org1 creates an asset that they own, the asset details are stored in the Org1 implicit data collection on the Org1 peer. The public ownership record is stored in the channel world state, and is stored on both the Org1 and Org2 peers. A hash of the asset key and a hash the asset details are also visible in the channel world state and are stored on the peers of both organizations.</em></p><p><em>图片1:当组织Org1创建了一个属于他们的资产时，资产的细节保存在属于组织Org1的peer的隐式数据集合中。公共的记录被保存在通道的世界状态，并且保存在组织Org1和Org2的peer节点。资产的key的hash和资产详情的hash在通道的世界状态是可访问的，并且存储在所有组织的peer节点。</em></p><h3 id="Operate-from-the-Org2-terminal（通过组织Org2的终端操作）">Operate from the Org2 terminal（通过组织Org2的终端操作）</h3><p>If we operate from the Org2 terminal, we can use the smart contract query the public asset data:</p><p>如果我们通过组织Org2的终端操作，我们可以使用智能合约来查询公共的资产数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset1&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>From this query, Org2 learns that asset1 is for sale（通过这个查询，组织Org2知道了资产asset1正在出售）:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;Org1MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;This asset is for sale&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>In a real chaincode you may want to query for all assets for sale, by using a JSON query, or by creating a different sale key and using a key range query to find the assets currently for sale.</em> Any changes to the public description of the asset owned by Org1 needs to be endorsed by Org1. The endorsement policy is reinforced by an access control policy within the chaincode that any update needs to be submitted by the organization that owns the asset. Lets see what happens if Org2 tried to change the public description as a prank:</p><p>*在真实的链码中，您可能希望通过使用JSON查询或通过创建其他销售密钥并使用密钥的范围来查找当前待售资产，以查询所有待售资产。*所有属于组织Org1的资产的公共描述在进行任何更改时都必须得到组织Org1的认可。链码中的访问控制策略加强了背书策略，任何更新都必须由来自于资产拥有者的组织来提交。让我们看看如果Org2试图以恶作剧方式更改公共描述会发生什么：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c &#x27;&#123;&quot;function&quot;:&quot;ChangePublicDescription&quot;,&quot;Args&quot;:[&quot;asset1&quot;,&quot;the worst asset&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>The smart contract does not allow Org2 to access the public description of the asset.</p><p>智能合约不允许组织Org2访问这个资产的公共描述。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:&quot;a client from Org2MSP cannot update the description of a asset owned by Org1MSP&quot;</span><br></pre></td></tr></table></figure><h2 id="Agree-to-sell-the-asset-允许出售资产">Agree to sell the asset(允许出售资产)</h2><p>To sell an asset, both the buyer and the seller must agree on an asset price. Each party stores the price that they agree to in their own private data collection. The private asset transfer smart contract enforces that both parties need to agree to the same price before the asset can be transferred.</p><p>为了出售资产。买卖双方都必须同意相同的资产价格。每一方都需要在他们的私有数据集合中保存他们同意的价格。私有资产交易智能合约强制双方必须同意相同的价格才能转让资产。</p><h2 id="Agree-to-sell-as-Org1（以Org1的身份同意出售）">Agree to sell as Org1（以Org1的身份同意出售）</h2><p>Operate from the Org1 terminal. Org1 will agree to set the asset price as 110 dollars. The <code>trade_id</code> is used as salt to prevent a channel member that is not a buyer or a seller from guessing the price. This value needs to be passed out of band, through email or other communication, between the buyer and the seller. The buyer and the seller can also add salt to the asset key to prevent other members of the channel from guessing which asset is for sale.</p><p>通过组织Org1的终端进行操作。Org1同意将资产价格设置为110美元。trade_id用作盐以防止不是买家或卖家的通道成员猜测价格。这个价格需要通过买卖双方之间以电子邮件或其他通信方式在账本外传递。买卖双方还可以对资产的key进行“加盐”，以防止渠道的其他成员猜测要出售的资产。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n &quot;&#123;\&quot;asset_id\&quot;:\&quot;asset1\&quot;,\&quot;trade_id\&quot;:\&quot;109f4b3c50d7b0df729d299bc6f8e9ef9066971f\&quot;,\&quot;price\&quot;:110&#125;&quot; | base64)</span><br><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c &#x27;&#123;&quot;function&quot;:&quot;AgreeToSell&quot;,&quot;Args&quot;:[&quot;asset1&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>We can query the Org1 private data collection to read the agreed to selling price:</p><p>我们可以查询组织Org1的私有数据集合来读取同意的销售价格：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetSalesPrice&quot;,&quot;Args&quot;:[&quot;asset1&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h2 id="Agree-to-buy-as-Org2-以Org2的身份同意购买">Agree to buy as Org2(以Org2的身份同意购买)</h2><p>Operate from the Org2 terminal. Run the following command to verify the asset properties before agreeing to buy. The asset properties and salt would be passed out of band, through email or other communication, between the buyer and seller.</p><p>通过Org2的终端操作。运行下面的命令在同意购买之前验证资产的属性。资产的属性和盐会在区块链账本外在买卖双方之间通过邮件或者其他方式进行传递。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PROPERTIES=$(echo -n &quot;&#123;\&quot;object_type\&quot;:\&quot;asset_properties\&quot;,\&quot;asset_id\&quot;:\&quot;asset1\&quot;,\&quot;color\&quot;:\&quot;blue\&quot;,\&quot;size\&quot;:35,\&quot;salt\&quot;:\&quot;a94a8fe5ccb19ba61c4c0873d391e987982fbbd3\&quot;&#125;&quot; | base64)</span><br><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c &#x27;&#123;&quot;function&quot;:&quot;VerifyAssetProperties&quot;,&quot;Args&quot;:[&quot;asset1&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_properties\&quot;:\&quot;$ASSET_PROPERTIES\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>Run the following command to agree to buy asset1 for 100 dollars. As of now, Org2 will agree to a different price than Org2. Don’t worry, the two organizations will agree to the same price in a future step. However, we we can use this temporary disagreement as a test of what happens if the buyer and the seller agree to a different price. Org2 needs to use the same <code>trade_id</code> as Org1.</p><p>使用下面的命令来同意以100刀的价格购买asset1。现在Org2同意了一个与Org1不同的价格。不要担心，这两个组织会在接下来的步骤同意相同的价格。但是我们通过临时的分歧来测试如果买方和卖方同意了不同的价格将会发生什么。Org2需要使用与Org1相同的 <code>trade_id</code> 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n &quot;&#123;\&quot;asset_id\&quot;:\&quot;asset1\&quot;,\&quot;trade_id\&quot;:\&quot;109f4b3c50d7b0df729d299bc6f8e9ef9066971f\&quot;,\&quot;price\&quot;:100&#125;&quot; | base64)</span><br><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c &#x27;&#123;&quot;function&quot;:&quot;AgreeToBuy&quot;,&quot;Args&quot;:[&quot;asset1&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>You can read the agreed purchase price from the Org2 implicit data collection:</p><p>您可以从Org2隐式数据集合中读取约定的购买价格：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetBidPrice&quot;,&quot;Args&quot;:[&quot;asset1&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/transfer_assets_2.png" alt="transfer_assets_2"></p><p><em>Figure 2: After Org1 and Org2 agree to transfer the asset, the price agreed to by each organization is stored in their private data collections. A composite key for the seller and the buyer is used to prevent a collision with the asset details and asset ownership record. The price that is agreed to is only stored on the peers of each organization. However, the hash of both agreements is stored in the channel world state on every peer joined to the channel.</em></p><p><em>图2:在Org1和Org2同意交易这个资产，每个组织的同意的价格被存储在他们的私有数据集合中。买卖双方的组合键用于防止与资产详细信息和资产所有权记录发生冲突。已经同意的价格只是存储在双方组织的peer节点。但是两个协议的hash值被存储在加入通道的所有peer节点的通道的世界状态中。</em></p><h2 id="Transfer-the-asset-from-Org1-to-Org2（把资产从Org1交易到Org2）">Transfer the asset from Org1 to Org2（把资产从Org1交易到Org2）</h2><p>After both organizations have agreed to their price, Org1 can attempt to transfer the asset to Org2. The private asset transfer function in the smart contract uses the hash on the ledger to check that both organizations have agreed to the same price. The function will also use the hash of the private asset details to check that the asset that is transferred is the same asset that Org1 owns.</p><p>在双方组织都同意了他们的价格之后，Org1可以尝试将资产交易给Org2。在智能合约中的私有资产交易方法使用账本上的hash来检查两个组织是否同意了相同的价格。这个方法也会使用私有资产详情的hash值来检查被交易的资产与属于Org1的资产是同一笔资产。</p><h3 id="Transfer-the-asset-as-Org1（以Org1的身份交易资产）">Transfer the asset as Org1（以Org1的身份交易资产）</h3><p>Operate from the Org1 terminal. The owner of the asset needs to initiate the transfer. Note that the command below uses the <code>--peerAddresses</code> flag to target the peers of both Org1 and Org2. Both organizations need to endorse the transfer. <em>Also note that the asset properties and price are passed in the transfer request as transient properties. These are passed so that the current owner can be sure that the correct asset is transferred for the correct price. These properties will be checked against the on-chain hashes by both endorsers.</em></p><p>通过Org1的终端操作。资产的所有者需要发起这个交易。注意下面的命令使用<code>--peerAddresses</code> 标志来指定Org1和Org2的peer节点。两个组织都需要确认这个交易。<em>另外请注意，资产属性和价格在交易请求中作为临时属性传递。传递这些是为了当前的拥有者可以确保以当前的价格来转让当前的资产。两个背书者将对照链上哈希检查这些属性。</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c &#x27;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset1&quot;,&quot;Org2MSP&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_properties\&quot;:\&quot;$ASSET_PROPERTIES\&quot;,\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot; --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>Because the two organizations have not agreed to the same price, the transfer cannot be completed:</p><p>因为两个组织同意的价格不一致，这个交易不能完成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: endorsement failure during invoke. response: status:500 message:&quot;failed transfer verification: hash 0fc413250501855af7c9896af00993b973510995fb10d56cddbb85ca47bd5dba for passed price JSON &#123;\&quot;asset_id\&quot;:\&quot;asset1\&quot;,\&quot;trade_id\&quot;:\&quot;109f4b3c50d7b0df729d299bc6f8e9ef9066971f\&quot;,\&quot;price\&quot;:110&#125; does not match on-chain hash 84b0d57eaa5c77076483ae8f482c96a64912c47df5541451e94fb7698bf37ee9, buyer hasn&#x27;t agreed to the passed trade id and price&quot;</span><br></pre></td></tr></table></figure><p>As a result, Org1 and Org2 come to a new agreement on the price at which the asset will be purchased. Org1 drops the price of the asset to 100:</p><p>结果，Org1和Org2就购买资产的价格达成了新协议。 Org1将资产价格降至100：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ASSET_PRICE=$(echo -n &quot;&#123;\&quot;asset_id\&quot;:\&quot;asset1\&quot;,\&quot;trade_id\&quot;:\&quot;109f4b3c50d7b0df729d299bc6f8e9ef9066971f\&quot;,\&quot;price\&quot;:100&#125;&quot; | base64)</span><br><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c &#x27;&#123;&quot;function&quot;:&quot;AgreeToSell&quot;,&quot;Args&quot;:[&quot;asset1&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>Now that the buyer and seller have agreed to the same price, Org1 can transfer the asset to Org2.</p><p>现在买卖双方已经同意了相同的价格，Org1可以将资产交易给Org2。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c &#x27;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset1&quot;,&quot;Org2MSP&quot;]&#125;&#x27; --transient &quot;&#123;\&quot;asset_properties\&quot;:\&quot;$ASSET_PROPERTIES\&quot;,\&quot;asset_price\&quot;:\&quot;$ASSET_PRICE\&quot;&#125;&quot; --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>You can query the asset ownership record to verify that the transfer was successful.</p><p>你可以查询资产的归属信息来验证交易已经成功.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset1&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>The record now lists Org2 as the asset owner:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;objectType&quot;</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;assetID&quot;</span>: <span class="string">&quot;asset1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ownerOrg&quot;</span>: <span class="string">&quot;Org2MSP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;publicDescription&quot;</span>: <span class="string">&quot;This asset is for sale&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/transfer_assets_3.png" alt="transfer_assets_3"></p><p><em>Figure 3: After the asset is transferred, the asset details are placed in the Org2 implicit data collection and deleted from the Org1 implicit data collection. As a result, the asset details are now only stored on the Org2 peer. The asset ownership record on the ledger is updated to reflect that the asset is owned by Org1.</em></p><p><em>图3:在资产交易之后，资产细节存在于Org2的隐式数据集合并且从Org1的隐式数据集合中被删除。结果，资产的私有信息值保存在Org2的peer节点。在账本上的资产的归属信息也被更新，以反映资产归Org2所有。</em></p><h3 id="Update-the-asset-description-as-Org2（以Org2的身份更新资产描述）">Update the asset description as Org2（以Org2的身份更新资产描述）</h3><p>Operate from the Org2 terminal. Now that Org2 owns the asset, we can read the asset details from the Org2 implicit data collection:</p><p>通过Org2的终端操作，现在Org2拥有这个资产，我们可以通过Org2的隐式数据集合读取资产的详情：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c &#x27;&#123;&quot;function&quot;:&quot;GetAssetPrivateProperties&quot;,&quot;Args&quot;:[&quot;asset1&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>Org2 can now update the asset public description（Org2现在可以更新资产的公共描述）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c &#x27;&#123;&quot;function&quot;:&quot;ChangePublicDescription&quot;,&quot;Args&quot;:[&quot;asset1&quot;,&quot;This asset is not for sale&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>Query the ledger to verify that the asset is no longer for sale:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n secured -c &#x27;&#123;&quot;function&quot;:&quot;ReadAsset&quot;,&quot;Args&quot;:[&quot;asset1&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><h2 id="Clean-up">Clean up</h2><p>When you are finished transferring assets, you can bring down the test network. The command will remove all the nodes of the test network, and delete any ledger data that you created:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;network.sh down</span><br></pre></td></tr></table></figure><h2 id="流程图">流程图</h2><p>自己的理解画的流程图如下：</p><p><img src="/2024/11/22/blockchain/fabric/how_to/%E5%9C%A8Fabric%E4%B8%AD%E4%BA%A4%E6%98%93%E5%8F%97%E4%BF%9D%E6%8A%A4%E7%9A%84%E8%B5%84%E4%BA%A7/apple/Desktop/%E7%A7%81%E6%9C%89%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%98%93%E5%90%88%E7%BA%A6%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="私有数据交易流程图"></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> HOW-TO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> Secured </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加一个新的组织到channel</title>
      <link href="2024/11/22/blockchain/fabric/how_to/%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E7%BB%84%E7%BB%87%E5%88%B0channel/"/>
      <url>2024/11/22/blockchain/fabric/how_to/%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E7%BB%84%E7%BB%87%E5%88%B0channel/</url>
      
        <content type="html"><![CDATA[<h1 id="添加一个新的组织到channel">添加一个新的组织到channel</h1><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/channel_update_tutorial.html">官方文档</a></p><p>This tutorial extends the Fabric test network by adding a new organization – Org3 – to an application channel.</p><p>本教程通过向应用程序通道添加新组织Org3扩展了Fabric测试网络。</p><p>While we will focus on adding a new organization to the channel, you can use a similar process to make other channel configuration updates (updating modification policies or altering batch size, for example). To learn more about the process and possibilities of channel config updates in general, check out <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/config_update.html">Updating a channel configuration</a>). It’s also worth noting that channel configuration updates like the one demonstrated here will usually be the responsibility of an organization admin (rather than a chaincode or application developer).</p><p>我们将专注于向channel添加新组织，你可以使用相似的流程来进行其他情况的通道配置更新。略</p><h2 id="Setup-the-Environment（启动环境）">Setup the Environment（启动环境）</h2><p>启动测试环境并创建默认的channel，请参考：<a href="Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E4%BD%BF%E7%94%A8.md">Fabric测试网络使用</a></p><h2 id="Bring-Org3-into-the-Channel-with-the-Script（使用脚本将Org3加入到通道）">Bring Org3 into the Channel with the Script（使用脚本将Org3加入到通道）</h2><p>You should be in the <code>test-network</code> directory. To use the script, simply issue the following commands:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd addOrg3</span><br><span class="line">./addOrg3.sh up</span><br></pre></td></tr></table></figure><p>The output here is well worth reading. You’ll see the Org3 crypto material being generated, the Org3 organization definition being created, and then the channel configuration being updated, signed, and then submitted to the channel.</p><p>这里的输出值的我们一读。你会看到生成Org3组织的加密材料，创建组织Org3的定义然后通道配置会被更新、签名并且提交到通道。</p><p>If everything goes well, you’ll get this message:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">========= Finished adding Org3 to your test network! =========</span><br></pre></td></tr></table></figure><p>Now that we have confirmed we can add Org3 to our channel, we can go through the steps to update the channel configuration that the script completed behind the scenes.</p><p>现在我们已经确认我们可以把组织Org3添加到我们的通道，我们可以按照以下步骤更新通道配置来完成脚本在幕后完成工作。</p><h2 id="Bring-Org3-into-the-Channel-Manually（手动将Org3加入通道）">Bring Org3 into the Channel Manually（手动将Org3加入通道）</h2><p>If you just used the <code>addOrg3.sh</code> script, you’ll need to bring your network down. The following command will bring down all running components and remove the crypto material for all organizations:</p><p>如果你刚才使用了 <code>addOrg3.sh</code>脚本，你需要先把网络关闭。下面的命令会关闭所有正在运行的组件并且移除所有组织的加密材料：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd addOrg3</span><br><span class="line">./addOrg3.sh down</span><br></pre></td></tr></table></figure><p>After the network is brought down, bring it back up again（网络关闭之后，重新启动它）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">./network.sh up createChannel</span><br></pre></td></tr></table></figure><p>This will bring your network back to the same state it was in before you executed the <code>addOrg3.sh</code> script.</p><p>这将使您的网络恢复到执行addOrg3.sh脚本之前的状态。</p><p>Now we’re ready to add Org3 to the channel manually. As a first step, we’ll need to generate Org3’s crypto material.</p><p>现在我们已经准备好手动的将Org3添加到通道中了，第一步，我们需要生成Org3的加密材料。</p><h2 id="Generate-the-Org3-Crypto-Material（生成Org3的加密材料）">Generate the Org3 Crypto Material（生成Org3的加密材料）</h2><p>In another terminal, change into the <code>addOrg3</code> subdirectory from <code>test-network</code>.</p><p>在另一个终端切换到 <code>test-network</code>目录的子目录 <code>addOrg3</code>中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd addOrg3</span><br></pre></td></tr></table></figure><p>First, we are going to create the certificates and keys for the Org3 peer, along with an application and admin user. Because we are updating an example channel, we are going to use the cryptogen tool instead of using a Certificate Authority. The following command uses cryptogen to read the <code>org3-crypto.yaml</code> file and generate the Org3 crypto material in a new <code>org3.example.com</code> folder:</p><p>首先，我们将为Org3组织的peer节点包括应用程序和管理员用户创建证书和密钥。因为我们正在更新示例通道，所以我们将使用<code>cryptogen</code>工具而不是使用证书颁发机构。 下面的命令使用<code>cryptogen</code>读取 <code>org3-crypto.yaml</code>文件然后在新的 <code>org3.example.com</code> 文件夹下面生成Org3的加密材料。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../bin/cryptogen generate --config=org3-crypto.yaml --output=&quot;../organizations&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> HOW-TO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> channel </tag>
            
            <tag> peer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建一个新的channel</title>
      <link href="2024/11/22/blockchain/fabric/how_to/%E9%83%A8%E7%BD%B2%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83/"/>
      <url>2024/11/22/blockchain/fabric/how_to/%E9%83%A8%E7%BD%B2%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>官方文档:<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployment_guide_overview.html">deployment_guide_overview</a></p><h1 id="Deploying-a-production-network">Deploying a production network</h1><ul><li><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployment_guide_overview.html#dg-step-one-decide-on-your-network-configuration">Step one: Decide on your network configuration</a></p></li><li><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployment_guide_overview.html#dg-step-two-set-up-a-cluster-for-your-resources">Step two: Set up a cluster for your resources</a></p></li><li><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployment_guide_overview.html#dg-step-three-set-up-your-cas">Step three: Set up your CAs</a></p></li><li><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployment_guide_overview.html#dg-step-four-use-the-ca-to-create-identities-and-msps">Step four: Use the CA to create identities and MSPs</a></p></li><li><ul><li><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployment_guide_overview.html#dg-step-five-deploy-nodes">Step five: Deploy peers and ordering nodes</a></p><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployment_guide_overview.html#dg-create-a-peer">Creating a peer</a><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployment_guide_overview.html#dg-create-an-ordering-node">Creating an ordering node</a></p></li></ul></li></ul><h2 id="Step-one-Decide-on-your-network-configuration">Step one: Decide on your network configuration</h2><ul><li><strong>Certificate Authority configuration</strong>.</li><li><strong>Use Organizational Units or not?</strong></li><li><strong>Database type.</strong> （相同的channel的peer节点必须使用相同的数据库）</li><li><strong>Channels and private data.</strong></li><li><strong>Container orchestration.</strong></li><li><strong>Chaincode deployment method</strong>（使用内置的部署方式还是外部的部署方式，如使用k8s部署）</li><li><strong>Using firewalls</strong></li></ul><h2 id="Step-two-Set-up-a-cluster-for-your-resources">Step two: Set up a cluster for your resources</h2><h3 id="Managing-your-infrastructure">Managing your infrastructure</h3><ul><li><p>Using secret objects to securely store important configuration files in your cluster. （使用秘密对象将重要的配置文件安全地存储在群集中。）</p></li><li><p>Cluster considerations and node sizing.</p></li><li><p>How you choose to mount your volumes. It is a best practice to mount the volumes relevant to your nodes external to the place where your nodes are deployed. (您如何选择挂载卷。最佳实践是将与您的节点相关的卷挂载到部署节点的外部。)</p></li><li><p>How you will monitor your resources.</p></li></ul><h2 id="Step-three-Set-up-your-CAs">Step three: Set up your CAs</h2><p>The first component that must be deployed in a Fabric network is a CA. This is because the certificates associated with a node (not just for the node itself but also the certificates identifying who can administer the node) must be created before the node itself can be deployed.</p><p>必须在Fabric网络中部署的第一个组件是CA。这是因为必须先创建与节点关联的证书（不仅是针对节点本身的证书，而且还包括标识谁可以管理该节点的证书），然后才能部署节点本身。</p><ul><li><p>One CA (or more, if you are using intermediate CAs — more on intermediate CAs below) is used to generate (through a process called “enrollment”) the certificates of the admin of an organization, the MSP of that organization, and any nodes owned by that organization. This CA will also generate the certificates for any additional users.This CA will also generate the certificates for any additional users. Because of its role in “enrolling” identities, this CA is sometimes called the “enrollment CA” or the “ecert CA”.</p><p>一个CA用于生成该组织管理员、该组织的MSP和该组织所拥有的任何节点的证书。该CA还将为任何其他用户生成证书。由于其在“注册”身份中的作用，因此有时将该CA称为“注册CA”或“证书CA”。</p></li><li><p>The other CA generates the certificates used to secure communications on Transport Layer Security (TLS).For this reason, this CA is often referred to as a “TLS CA”. These TLS certificates are attached to actions as a way of preventing “man in the middle” attacks.</p><p>另一个CA生成用于保护传输层安全性（TLS）上的通信的证书。因此，该CA通常被称为“ TLS CA”。将这些TLS证书附加到操作中，以防止“中间人”攻击。</p></li></ul><p>Deploy a Production CA</p><ul><li><a href="https://hyperledger-fabric-ca.readthedocs.io/en/latest/deployguide/ca-deploy-topology.html">Planning for a CA</a></li><li><a href="https://hyperledger-fabric-ca.readthedocs.io/en/latest/deployguide/ca-config.html">Checklist for a production CA server</a></li><li><a href="https://hyperledger-fabric-ca.readthedocs.io/en/latest/deployguide/cadeploy.html">CA deployment steps</a></li></ul><h2 id="Step-four-Use-the-CA-to-create-identities-and-MSPs">Step four: Use the CA to create identities and MSPs</h2><p>For each organization, you will need to, at a minimum:</p><ul><li><p><strong>Register and enroll an admin identity and create an MSP</strong>.</p><p><strong>you must create the org admin identity before creating the local MSP of a node, since the certificate of the node admin must be used when creating the local MSP</strong>.</p></li><li><p><strong>Register and enroll node identities</strong>.</p></li></ul><h2 id="Step-five-Deploy-peers-and-ordering-nodes">Step five: Deploy peers and ordering nodes</h2><p>Before any node can be deployed, its configuration file must be customized. For the peer, this file is called <code>core.yaml</code>, while the configuration file for ordering nodes is called <code>orderer.yaml</code>.</p><p>在任何的节点可以被部署之前，必须先自定义配置文件。</p><ul><li>peer节点的配置文件： <code>core.yaml</code></li><li>ordering节点的配置文件<code>orderer.yaml</code></li></ul><p>You have three main options for tuning your configuration.</p><ol><li>Edit the YAML file bundled with the binaries.</li><li>Use environment variable overrides when deploying.</li><li>Specify flags on CLI commands.</li></ol><h3 id="Creating-a-peer">Creating a peer</h3><p>Among the parameters in <code>core.yaml</code>, there are:</p><ul><li><strong>Identifiers</strong>: these include not just the paths to the relevant local MSP and Transport Layer Security (TLS) certificates, but also the name (known as the “peer ID”) of the peer and the MSP ID of the organization that owns the peer.</li><li><strong>Addresses and paths</strong>: because peers are not entities unto themselves but interact with other peers and components, you must specify a series of addresses in the configuration. These include addresses where the peer itself can be found by other components as well as the addresses where, for example, chaincodes can be found (if you are employing external chaincodes). Similarly, you will need to specify the location of your ledger (as well as your state database type) and the path to your external builders (again, if you intend to employ external chaincodes). These include <strong>Operations and metrics</strong>, which allow you to set up methods for monitoring the health and performance of your peer through the configuration of endpoints.</li><li><strong>Gossip</strong>: components in Fabric networks communicate with each other using the “gossip” protocol. Through this protocol, they can be discovered by the discovery service and disseminate blocks and private data to each other. Note that gossip communications are secured using TLS.</li></ul><p>Deploying a production peer</p><ul><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploypeer/peerplan.html">Planning for a production peer</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploypeer/peerchecklist.html">Checklist for a production peer</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploypeer/peerdeploy.html">Deploy the peer</a></li></ul><h3 id="Creating-an-ordering-node">Creating an ordering node</h3><p>Among the parameters in <code>orderer.yaml</code>, there are:</p><ul><li><strong>Identifiers</strong>: these include not just the paths to the relevant local MSP and Transport Layer Security (TLS) certificates, but also the MSP ID of the organization that owns the ordering node.</li><li><strong>Addresses and paths</strong>: because ordering nodes interact with other components, you must specify a series of addresses in the configuration. These include addresses where the ordering node itself can be found by other components as well as <strong>Operations and metrics</strong>, which allow you to set up methods for monitoring the health and performance of your ordering node through the configuration of endpoints.</li></ul><p>Deploying a production ordering node</p><ul><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployorderer/ordererplan.html">Planning for an ordering service</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployorderer/ordererchecklist.html">Checklist for a production ordering node</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deployorderer/ordererdeploy.html">Deploy the ordering service</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> HOW-TO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> channel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将智能合约部署到通道</title>
      <link href="2024/11/22/blockchain/fabric/how_to/%E5%B0%86%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%83%A8%E7%BD%B2%E5%88%B0%E9%80%9A%E9%81%93/"/>
      <url>2024/11/22/blockchain/fabric/how_to/%E5%B0%86%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%83%A8%E7%BD%B2%E5%88%B0%E9%80%9A%E9%81%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Deploying-a-smart-contract-to-a-channel（将智能合约部署到通道）">Deploying a smart contract to a channel（将智能合约部署到通道）</h1><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html">参考文档</a></p><p>最终用户通过调用智能合约与区块链账本进行交互。在Hyperledger Fabric中，智能合约通过称为chaincode的软件包进行部署。一个组织想要验证交易或者查询账本的内容，就需要在其peer节点上部署chaincode。当一个已经安装了chaincode的节点加入channel之后，channel的成员就可以把chaincode部署到channel上，然后使用chaincode上的智能合约来创建和更新chanel账本上的资产。</p><p>我们使用一个叫做Fabric链码生命周期的程序来将chaincode部署到channel上；在链码可以被使用于交易之前，Fabric链码生命周期需要多个组织同意链码将如何操作。（<em>个人理解：需要组织同意智能合约的内容，智能合约才能部署到channel上</em>）举个例子，当一个背书策略制定哪些组织需要执行chaincode来验证一个交易时，channel上的成员需要使用Fabric链码生命周期来同意链码的背书策略。有关如何在通道上部署和管理链码的更深入的概述，请参阅<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/chaincode_lifecycle.html">Fabric chaincode lifecycle</a>。</p><p>你可以使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html">peer lifecycle chaincode commands</a>这个教程来学习在Fabric测试网络中如何使用peer lifecycle chaincode commands来部署链码到channel。了解命令后，您可以使用本教程中的步骤将自己的链码部署到测试或生产网络。在这个教程中，你会部署教程<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/write_first_app.html">Writing your first application tutorial</a>使用的链码程序。</p><p>**注意：**当前教程使用v2.0版本中引入的Fabric链码生命周期。</p><h2 id="Start-the-network（启动测试网络）">Start the network（启动测试网络）</h2><p>启动测试网络并创建channel，具体步骤参考<a href="Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E4%BD%BF%E7%94%A8.md">Fabric测试网络使用</a>。</p><p>你可以根据以下步骤使用节点的CLI来部署 asset-transfer (basic) 链码到channel中：</p><ul><li>[第一步：打包智能合约]</li><li>[第二步：安装链码包]</li><li>[第三步：批准链码定义]</li><li>[第四部：提交链码定义到channel中]</li></ul><h2 id="Setup-Logspout-optional-（启动日志输出，可选）">Setup Logspout (optional)（启动日志输出，可选）</h2><p>此步骤不是必需的，但是对于故障排除链码非常有用。要监视智能合约的日志，管理员可以使用<a href="https://logdna.com/blog/what-is-logspout/">logspout</a>查看一组Docker容器的聚合输出。这个工具收集不同的Docker容器的输出流到一个位置，这样就可以在一个窗口看这些容器都发生了什么。这可以帮助管理员在安装智能合约或者是开发人员调用智能合约时调试问题。因为某些容器的创建纯粹是为了启动智能合约，并且仅存在很短的时间，所以从网络中收集所有日志将很有帮助。</p><p><a href="http://xn--FabricLogspoutmonitordocker-8c86b0p99fdhu31ag34avvicndd5i2t1e0etn22cmk5an23jl6lva1361ad0b263jzdgipw4t2gbf9d.sh">Fabric的商业票据示例中已经包含了用于安装和配置Logspout的脚本monitordocker.sh</a>。在本教程中，我们还将使用相同的脚本。Logspout工具将持续向您的终端流式传输日志，因此您将需要使用新的终端窗口。打开一个新终端，然后导航到test-network目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd fabric-samples/test-network</span><br></pre></td></tr></table></figure><p>你可以在任何目录下运行 <code>monitordocker.sh</code>脚本，为了方便使用我们把 <code>monitordocker.sh</code> 从<code>commercial-paper</code>拷贝到你的工作目录(test-network)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ../commercial-paper/organization/digibank/configuration/cli/monitordocker.sh .</span><br></pre></td></tr></table></figure><p>你可以使用下面的命令来启动Logspout：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./monitordocker.sh net_test</span><br></pre></td></tr></table></figure><p>你会看到类似下面的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Starting monitoring on all containers on the network net_basic</span><br><span class="line">Unable to find image &#x27;gliderlabs/logspout:latest&#x27; locally</span><br><span class="line">latest: Pulling from gliderlabs/logspout</span><br><span class="line">4fe2ade4980c: Pull complete</span><br><span class="line">decca452f519: Pull complete</span><br><span class="line">ad60f6b6c009: Pull complete</span><br><span class="line">Digest: sha256:374e06b17b004bddc5445525796b5f7adb8234d64c5c5d663095fccafb6e4c26</span><br><span class="line">Status: Downloaded newer image for gliderlabs/logspout:latest</span><br><span class="line">1f99d130f15cf01706eda3e1f040496ec885036d485cb6bcc0da4a567ad84361</span><br></pre></td></tr></table></figure><p>在我们部署链码之前你不会看到太多的日志。</p><h2 id="Package-the-smart-contract（打包智能合约）">Package the smart contract（打包智能合约）</h2><p>We need to package the chaincode before it can be installed on our peers. The steps are different if you want to install a smart contract written in <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html#go">Go</a>, <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html#javascript">JavaScript</a>, or <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html#typescript">Typescript</a>.</p><p>在把智能合约安装到我们的节点之前需要先将其打包。根据编写智能合约的语言的不同，其步骤也是不一样的。（<em>本次只使用Go，其他语言如<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html#go">Go</a>, <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html#javascript">JavaScript</a>, or <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html#typescript">Typescript</a>请参考官方文档</em>）</p><h3 id="Go">Go</h3><p>在我们打包链码之前，我们需要先安装链码的依赖。切换到Go版本的 asset-transfer (basic) 项目目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd fabric-samples/asset-transfer-basic/chaincode-go</span><br></pre></td></tr></table></figure><p>该示例使用Go模块来安装chaincode依赖项。依赖关系列在asset-transfer-basic / chaincode-go目录的go.mod文件中。您应该花一点时间来检查此文件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module github.com/hyperledger/fabric-samples/asset-transfer-basic/chaincode-<span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.14</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">        github.com/golang/protobuf v1<span class="number">.3</span><span class="number">.2</span></span><br><span class="line">        github.com/hyperledger/fabric-chaincode-<span class="keyword">go</span> v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20200424173110</span>-d7076418f212</span><br><span class="line">        github.com/hyperledger/fabric-contract-api-<span class="keyword">go</span> v1<span class="number">.1</span><span class="number">.0</span></span><br><span class="line">        github.com/hyperledger/fabric-protos-<span class="keyword">go</span> v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20200424173316</span>-dd554ba3746e</span><br><span class="line">        github.com/stretchr/testify v1<span class="number">.5</span><span class="number">.1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>go.mod文件将Fabric合约API导入到智能合约包中。你可以打开<code>asset-transfer-basic/chaincode-go/chaincode/smartcontract.go</code>来查看在智能合约的最开始是如使用contract API来定义<code>SmartContract</code>类的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SmartContract provides functions for managing an Asset</span></span><br><span class="line"><span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">    contractapi.Contract</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，将SmartContract类型用于为智能合约中定义的方法创建交易上下文，该方法可将数据读取和写入区块链账本。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// CreateAsset issues a new asset to the world state with given details.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">CreateAsset</span><span class="params">(ctx contractapi.TransactionContextInterface, id <span class="keyword">string</span>, color <span class="keyword">string</span>, size <span class="keyword">int</span>, owner <span class="keyword">string</span>, appraisedValue <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">exists, err := s.AssetExists(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;the asset %s already exists&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asset := Asset&#123;</span><br><span class="line">ID:             id,</span><br><span class="line">Color:          color,</span><br><span class="line">Size:           size,</span><br><span class="line">Owner:          owner,</span><br><span class="line">AppraisedValue: appraisedValue,</span><br><span class="line">&#125;</span><br><span class="line">assetJSON, err := json.Marshal(asset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().PutState(id, assetJSON)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以通过访问 <a href="https://github.com/hyperledger/fabric-contract-api-go">API documentation</a> 和 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/developapps/smartcontract.html">smart contract processing topic</a>来学习更多的关于合约API的内容。</p><p>为了安装智能合约的依赖，在<code>asset-transfer-basic/chaincode-go</code> 目录下运行下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GO111MODULE=on go mod vendor</span><br></pre></td></tr></table></figure><p>如果命令成功，则go软件包将安装vendor文件夹中。</p><p>现在我们已经有了依赖的包，我们可以创建chaincode的包了。把当前目录切换到<code>test-network</code> 以便我们可以将链码于其他网络组件打包在一起。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..&#x2F;..&#x2F;test-network</span><br></pre></td></tr></table></figure><p>You can use the <code>peer</code> CLI to create a chaincode package in the required format. The <code>peer</code> binaries are located in the <code>bin</code> folder of the <code>fabric-samples</code> repository. Use the following command to add those binaries to your CLI Path:</p><p>您可以使用<code>peer</code>CLI创建所需格式的链码包。<code>peer</code>二进制文件位于fabric-samples存储库的bin文件夹中。可以使用下面的命令添加到你的环境变量中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$&#123;PWD&#125;/../bin:$PATH</span><br></pre></td></tr></table></figure><p>您还需要将FABRIC_CFG_PATH设置为指向fabric-samples存储库中的core.yaml文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CFG_PATH=$PWD/../config/</span><br></pre></td></tr></table></figure><p>使用下面的命令来查看peer的版本，如果输出正常说明你已经可以使用<code>peer</code>CLI了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer version</span><br></pre></td></tr></table></figure><p>You can now create the chaincode package using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-package">peer lifecycle chaincode package</a> command:</p><p>现在你可以通过 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-package">peer lifecycle chaincode package</a> 命令来创建链码包了:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package basic.tar.gz --path ../asset-transfer-basic/chaincode-go/ --lang golang --label basic_1.0</span><br></pre></td></tr></table></figure><p>This command will create a package named <code>basic.tar.gz</code> in your current directory. The <code>--lang</code> flag is used to specify the chaincode language and the <code>--path</code> flag provides the location of your smart contract code. The path must be a fully qualified path or a path relative to your present working directory. The <code>--label</code> flag is used to specify a chaincode label that will identity your chaincode after it is installed. It is recommended that your label include the chaincode name and version.</p><p>这个命令会在你的当前目录下创建一个名为<code>basic.tar.gz</code>的压缩包。<code>--lang</code>标志是制定chaincode的语言，而<code>--path</code> 标志用于提供智能合约代码的位置。该路径必须是标准路径或相对于您当前工作目录的路径。<code>--label</code>标志用于指定一个链码标签，该标签将在安装链码后对其进行标识。建议您的标签包含链码名称和版本。</p><p>Now that we created the chaincode package, we can <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html#install-the-chaincode-package">install the chaincode</a> on the peers of the test network.</p><p>现在我们已经创建了链码包，我们可以把链码安装到网络上的节点上了。</p><h2 id="Install-the-chaincode-package（安装链码包）">Install the chaincode package（安装链码包）</h2><p>After we package the asset-transfer (basic) smart contract, we can install the chaincode on our peers. The chaincode needs to be installed on every peer that will endorse a transaction. Because we are going to set the endorsement policy to require endorsements from both Org1 and Org2, we need to install the chaincode on the peers operated by both organizations:</p><p>在我们打包了 asset-transfer (basic) 的智能合约之后，我们就可以将此链码安装到我们的peer节点上了。需要在所有的交易背书节点上安装链码。因为我们将设置背书策略要求来自Org1和Org2的背书，所以我们需要在两个组织运营的对等方上安装链码：</p><ul><li><a href="http://peer0.org1.example.com">peer0.org1.example.com</a></li><li><a href="http://peer0.org2.example.com">peer0.org2.example.com</a></li></ul><p>Let’s install the chaincode on the Org1 peer first. Set the following environment variables to operate the <code>peer</code> CLI as the Org1 admin user. The <code>CORE_PEER_ADDRESS</code> will be set to point to the Org1 peer, <code>peer0.org1.example.com</code>.</p><p>让我们先把链码安装到Org1的节点上。设置以下环境变量来使用Org1的admin用户的身份运行<code>peer</code>CLI。将CORE_PEER_ADDRESS设置为指向Org1的节点的<code>peer0.org1.example.com</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:7051</span><br></pre></td></tr></table></figure><p>Issue the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-install">peer lifecycle chaincode install</a> command to install the chaincode on the peer:</p><p>发出在peer节点上安装链码的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install basic.tar.gz</span><br></pre></td></tr></table></figure><p>If the command is successful, the peer will generate and return the package identifier. This package ID will be used to approve the chaincode in the next step. You should see output similar to the following:</p><p>如果命令执行成功，则peer将生成并返回安装包的标识符。这个包的ID会在下一步批准这个链码时使用。你会看到类似下面的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-21 14:46:18.360 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 001 Installed remotely: response:&lt;status:200 payload:&quot;\nJbasic_1.0:2c47b5b060a64aafa3c878b4bcb0ca680bdb2417ca8855b5440fa595562517d2\022\tbasic_1.0&quot; &gt;</span><br><span class="line">2020-12-21 14:46:18.361 CST [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 002 Chaincode code package identifier: basic_1.0:2c47b5b060a64aafa3c878b4bcb0ca680bdb2417ca8855b5440fa595562517d2</span><br></pre></td></tr></table></figure><p>在运行<code>monitordocker.sh</code>的终端可以看到下面的日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">peer0.org1.example.com|2020-12-21 06:46:18.363 UTC [lifecycle] InstallChaincode -&gt; INFO 046 Successfully installed chaincode with package ID &#x27;basic_1.0:2c47b5b060a64aafa3c878b4bcb0ca680bdb2417ca8855b5440fa595562517d2&#x27;</span><br><span class="line">peer0.org1.example.com|2020-12-21 06:46:18.363 UTC [endorser] callChaincode -&gt; INFO 047 finished chaincode: _lifecycle duration: 35751ms channel= txID=26a66cb7</span><br><span class="line">peer0.org1.example.com|2020-12-21 06:46:18.363 UTC [comm.grpc.server] 1 -&gt; INFO 048 unary call completed grpc.service=protos.Endorser grpc.method=ProcessProposal grpc.peer_address=172.19.0.1:62970 grpc.code=OK grpc.call_duration=35.752599039s</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>We can now install the chaincode on the Org2 peer. Set the following environment variables to operate as the Org2 admin and target target the Org2 peer, <a href="http://peer0.org2.example.com">peer0.org2.example.com</a>.</p><p>现在我们把链码安装到Org2组织的peer节点上。先设置环境变量让我们可以以Org2的管理员身份来操作Org2的节点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:9051</span><br></pre></td></tr></table></figure><p>Issue the following command to install the chaincode（发出以下命令来安装链码）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install basic.tar.gz</span><br></pre></td></tr></table></figure><p>The chaincode is built by the peer when the chaincode is installed. The install command will return any build errors from the chaincode if there is a problem with the smart contract code.</p><p>在安装链码时，由peer节点来构建链码。如果智能合约有问题，安装命令会把所有构建的错误返回。</p><h2 id="Approve-a-chaincode-definition（批准链码定义）">Approve a chaincode definition（批准链码定义）</h2><p>After you install the chaincode package, you need to approve a chaincode definition for your organization. The definition includes the important parameters of chaincode governance such as the name, version, and the chaincode endorsement policy.</p><p>在安装链码包之后，需要你所在的组织批准链码的定义。这个定义包括链码管理的重要参数，例如名称、版本以及链码的背书策略。</p><p>The set of channel members who need to approve a chaincode before it can be deployed is governed by the <code>Application/Channel/lifeycleEndorsement</code> <a href="http://policy.By">policy.By</a> default, this policy requires that a majority of channel members need to approve a chaincode before it can used on a channel.Because we have only two organizations on the channel, and a majority of 2 is 2, we need approve a chaincode definition of asset-transfer (basic) as Org1 and Org2.</p><p>在channel上的哪些成员需要在其可以部署链码之前批准，是定义在<code>Application/Channel/lifeycleEndorsement</code>策略中。默认情况下，此策略要求大多数channel的成员需要批准链码后才能在频道上使用。因为在我们的channel上只有两个组织，并且大多数就是2，我们需要以Org1和Org2的身份来批准asset-transfer (basic)的链码定义。</p><p>If an organization has installed the chaincode on their peer, they need to include the packageID in the chaincode definition approved by their organization. The package ID is used to associate the chaincode installed on a peer with an approved chaincode definition, and allows an organization to use the chaincode to endorse transactions. You can find the package ID of a chaincode by using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-queryinstalled">peer lifecycle chaincode queryinstalled</a> command to query your peer.</p><p>如果一个组织已经在其peer节点上安装了链码，这个组织需要在其批准的链码定义中包含packageID。packageID是用来把安装在节点上的chaincode和已经批准通过的链码定义关联起来的，并且允许一个组织在背书节点使用这个链码。你可以使用<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-queryinstalled">peer lifecycle chaincode queryinstalled</a> 命令在你的peer节点上查询一个链码的packageID。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>The package ID is the combination of the chaincode label and a hash of the chaincode binaries. Every peer will generate the same package ID. You should see output similar to the following:</p><p>packageID是链码标签和链码二进制文件的哈希值的组合。每个peer将生成相同的程序包ID。您应该看到类似于以下内容的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Installed chaincodes on peer:</span><br><span class="line">Package ID: basic_1.0:2c47b5b060a64aafa3c878b4bcb0ca680bdb2417ca8855b5440fa595562517d2, Label: basic_1.0</span><br></pre></td></tr></table></figure><p>We are going to use the package ID when we approve the chaincode, so let’s go ahead and save it as an environment variable. Paste the package ID returned by <code>peer lifecycle chaincode queryinstalled</code> into the command below. <strong>Note:</strong> The package ID will not be the same for all users, so you need to complete this step using the package ID returned from your command window in the previous step.</p><p>在我们批准链码时我们需要使用这个 package ID，所以让我们先把它保存为一个环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID=basic_1.0:2c47b5b060a64aafa3c878b4bcb0ca680bdb2417ca8855b5440fa595562517d2</span><br></pre></td></tr></table></figure><p>Because the environment variables have been set to operate the <code>peer</code> CLI as the Org2 admin, we can approve the chaincode definition of asset-transfer (basic) as Org2. Chaincode is approved at the organization level, so the command only needs to target one peer. The approval is distributed to the other peers within the organization using gossip. Approve the chaincode definition using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-approveformyorg">peer lifecycle chaincode approveformyorg</a> command:</p><p>因为当前的环境变量已经设置为以Org2组织的管理员来操作<code>peer</code>CLI，我们可以以组织Org2的身份批准这个asset-transfer (basic)的链码定义。链码是在组织的级别进行批准的，所以这个命令只需要针对一个peer节点即可。这个批准的动作会使用gossip来在组织内部传播。使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-approveformyorg">peer lifecycle chaincode approveformyorg</a>命令来批准链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name basic --version 1.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>The command above uses the <code>--package-id</code> flag to include the package identifier in the chaincode definition. The <code>--sequence</code> parameter is an integer that keeps track of the number of times a chaincode has been defined or updated. Because the chaincode is being deployed to the channel for the first time, the sequence number is 1. When the asset-transfer (basic) chaincode is upgraded, the sequence number will be incremented to 2. If you are using the low level APIs provided by the Fabric Chaincode Shim API, you could pass the <code>--init-required</code> flag to the command above to request the execution of the Init function to initialize the chaincode. The first invoke of the chaincode would need to target the Init function and include the <code>--isInit</code> flag before you could use the other functions in the chaincode to interact with the ledger.</p><p>上面的命令使用<code>--package-id</code>标志将软件包标识符包含在链码定义中。<code>--sequence</code>参数是一个整数，用于跟踪定义或更新链码的次数；由于链码是第一次部署到channel，因此序列号为1。当asset-transfer (basic) 的链码在更新时，这个序列号会增加到2。链代码的首次调用需要使用<code>--isInit</code>来指明调用链码的Init函数，然后才能使用链代码中的其他函数与账本进行交互。</p><p>We could have provided a <code>--signature-policy</code> or <code>--channel-config-policy</code> argument to the <code>approveformyorg</code> command to specify a chaincode endorsement policy. The endorsement policy specifies how many peers belonging to different channel members need to validate a transaction against a given chaincode. Because we did not set a policy, the definition of asset-transfer (basic) will use the default endorsement policy, which requires that a transaction be endorsed by a majority of channel members present when the transaction is submitted. This implies that if new organizations are added or removed from the channel, the endorsement policy is updated automatically to require more or fewer endorsements. In this tutorial, the default policy will require a majority of 2 out of 2 and transactions will need to be endorsed by a peer from Org1 and Org2. If you want to specify a custom endorsement policy, you can use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/endorsement-policies.html">Endorsement Policies</a> operations guide to learn about the policy syntax.</p><p>我们可以在<code>approveformyorg</code>命令中提供<code>--signature-policy</code>或<code>--channel-config-policy</code>参数，以指定链码背书策略。背书策略指定需要多少个属于不同渠道成员的peer根据给定的链码验证来交易。因为我们没有指定合格策略，asset-transfer (basic) 的定义会使用默认的背书策略，该政策要求在提交交易时，该交易必须得到channel中大多数成员的认可。这意味着，如果在channel中添加或删除组织，则背书政策会自动更新，以要求更多或更少的认可。在本教程中，默认策略需要2个中的大多数也就是2，并且交易需要由来自Org1和Org2的peer认可。如果要指定自定义认可策略，则可以使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/endorsement-policies.html">Endorsement Policies</a> 操作指南来了解策略语法。</p><p>You need to approve a chaincode definition with an identity that has an admin role. As a result, the <code>CORE_PEER_MSPCONFIGPATH</code> variable needs to point to the MSP folder that contains an admin identity. You cannot approve a chaincode definition with a client user. The approval needs to be submitted to the ordering service, which will validate the admin signature and then distribute the approval to your peers.</p><p>你需要使用具有管理员角色的身份来批准的链码定义。即<code>CORE_PEER_MSPCONFIGPATH</code>变量需要指向包含管理员身份的MSP文件夹。你不能使用客户端用户的身份来批准链码。这个审批结果需要提交给排序服务，排序服务会验证管理员的签名，然后分发这个验证结果到你的peer节点。</p><p>We still need to approve the chaincode definition as Org1. Set the following environment variables to operate as the Org1 admin:</p><p>你还需要在组织Org1上批准这个链码定义，把环境变量修改为以组织Org1的管理员身份来操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:7051</span><br></pre></td></tr></table></figure><p>You can now approve the chaincode definition as Org1.</p><p>现在你可以以组织Org1的身份批准链码定义了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name basic --version 1.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile $&#123;PWD&#125;&#x2F;organizations&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>We now have the majority we need to deploy the asset-transfer (basic) the chaincode to the channel. While only a majority of organizations need to approve a chaincode definition (with the default policies), all organizations need to approve a chaincode definition to start the chaincode on their peers. If you commit the definition before a channel member has approved the chaincode, the organization will not be able to endorse transactions. As a result, it is recommended that all channel members approve a chaincode before committing the chaincode definition.</p><p>现在我们已经有了将asset-transfer (basic) 的链码部署到渠道的大多数的批准。在将链码定义部署到channel上时，我们需要大多数组织的批准（使用默认的策略）；但是所有的组织都需批准链码定义才能在其peer启动这个链码。如果你在一个channel成员批准定义之前将链码定义提交到channel，那么这个组织将无法批准交易。结果，建议所有通道成员在提交链码定义之前批准链码。</p><h2 id="Committing-the-chaincode-definition-to-the-channel（将链码定义提交到通道）">Committing the chaincode definition to the channel（将链码定义提交到通道）</h2><p>After a sufficient number of organizations have approved a chaincode definition, one organization can commit the chaincode definition to the channel. If a majority of channel members have approved the definition, the commit transaction will be successful and the parameters agreed to in the chaincode definition will be implemented on the channel.</p><p>在有足够数量的组织批准链码定义之后，其中一个组织就可以把链码定义提交到通道中了。如果大多数通道成员已批准该定义，则提交定义的交易将会成功，并且链码定义中同意的参数将在该通道上实现。</p><p>You can use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-checkcommitreadiness">peer lifecycle chaincode checkcommitreadiness</a> command to check whether channel members have approved the same chaincode definition. The flags used for the <code>checkcommitreadiness</code> command are identical to the flags used to approve a chaincode for your organization. However, you do not need to include the <code>--package-id</code> flag.</p><p>你可以使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-checkcommitreadiness">peer lifecycle chaincode checkcommitreadiness</a>命令来检查channel上的成员是否已经批准了相同的链码定义。用于<code>checkcommitreadiness</code>命令的标志与您的组织批准链码的标志相同；但是不需要包括<code>--package-id</code>标志。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name basic --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>The command will produce a JSON map that displays if a channel member has approved the parameters that were specified in the <code>checkcommitreadiness</code> command:</p><p>这个命令会生成一个JSON来显示通道成员是否已经批准了定义。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">          <span class="attr">&quot;Approvals&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;Org1MSP&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                  <span class="attr">&quot;Org2MSP&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Since both organizations that are members of the channel have approved the same parameters, the chaincode definition is ready to be committed to the channel. You can use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-commit">peer lifecycle chaincode commit</a> command to commit the chaincode definition to the channel. The commit command also needs to be submitted by an organization admin.</p><p>因为channel上的两个成员都已经批准了相同的参数，因此链码定义已准备好提交给channel。你可以使用<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-commit">peer lifecycle chaincode commit</a> 命令将链码定义提交到channel。commit命令依然需要由组织管理员来发起。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name basic --version 1.0 --sequence 1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>The transaction above uses the <code>--peerAddresses</code> flag to target <code>peer0.org1.example.com</code> from Org1 and <code>peer0.org2.example.com</code> from Org2. The <code>commit</code> transaction is submitted to the peers joined to the channel to query the chaincode definition that was approved by the organization that operates the peer. The command needs to target the peers from a sufficient number of organizations to satisfy the policy for deploying a chaincode. Because the approval is distributed within each organization, you can target any peer that belongs to a channel member.</p><p>上面的交易使用<code>--peerAddresses</code>标志来指定Org1中的<code>peer0.org1.example.com</code>和Org2中的<code>peer0.org2.example.com</code>。 <code>commit</code> 交易会提交给已经加入通道的peer节点，用于peer节点查询同组织内其他节点批准的链码定义。该命令需要指明来自足够数量的组织中的peer节点，以满足部署链码的策略。因为批准操作已经在每个组织内部进行广播，所以你可以指定属于一个通道成员的任意的peer节点。</p><p>The chaincode definition endorsements by channel members are submitted to the ordering service to be added to a block and distributed to the channel. The peers on the channel then validate whether a sufficient number of organizations have approved the chaincode definition. The <code>peer lifecycle chaincode commit</code> command will wait for the validations from the peer before returning a response.</p><p>通道成员对链码定义的认可会提交给排序服务，以添加到区块并分发给渠道。然后通道上的peer节点验证是否有足够数量的组织批准了链码定义。<code>peer lifecycle chaincode commit</code>命令在返回相应之前会等待peer节点的验证。</p><p>You can use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> command to confirm that the chaincode definition has been committed to the channel.</p><p>你可以使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> 命令来确认链码定义已经提交到通道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID mychannel --name basic --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>If the chaincode was successful committed to the channel, the <code>querycommitted</code> command will return the sequence and version of the chaincode definition:</p><p>如果链码已经成功提交到通道，<code>querycommitted</code> 命令会返回该链码定义的序列号和版本号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Committed chaincode definition for chaincode &#x27;basic&#x27; on channel &#x27;mychannel&#x27;:</span><br><span class="line">Version: 1.0, Sequence: 1, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: [Org1MSP: true, Org2MSP: true]</span><br></pre></td></tr></table></figure><h2 id="Invoking-the-chaincode（调用链码）">Invoking the chaincode（调用链码）</h2><p>After the chaincode definition has been committed to a channel, the chaincode will start on the peers joined to the channel where the chaincode was installed. The asset-transfer (basic) chaincode is now ready to be invoked by client applications. Use the following command create an initial set of assets on the ledger. Note that the invoke command needs target a sufficient number of peers to meet chaincode endorsement policy.</p><p>在链码定义提交到通道之后，链码可以由加入了通道并且安装了此链码的peer节点来启动。 asset-transfer (basic) 的链码已经可以由客户端程序进行调用。使用以下命令在账本上创建和初始化资产。请注意，invoke命令需要以足够数量的peer为目标，以满足链码的背书策略。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;InitLedger&quot;,&quot;Args&quot;:[]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>If the command is successful, you should be able to a response similar to the following:</p><p>如果命令执行成功，你会看到类似下面的响应：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-21 16:51:11.086 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p>We can use a query function to read the set of cars that were created by the chaincode:</p><p>我们使用查询方法来查看我们通过链码创建的车：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C mychannel -n basic -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>The response to the query should be the following list of assets:</p><p>下面的资产列表就是查询的响应结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;ID&quot;:&quot;asset1&quot;,&quot;color&quot;:&quot;blue&quot;,&quot;size&quot;:5,&quot;owner&quot;:&quot;Tomoko&quot;,&quot;appraisedValue&quot;:300&#125;,&#123;&quot;ID&quot;:&quot;asset2&quot;,&quot;color&quot;:&quot;red&quot;,&quot;size&quot;:5,&quot;owner&quot;:&quot;Brad&quot;,&quot;appraisedValue&quot;:400&#125;,&#123;&quot;ID&quot;:&quot;asset3&quot;,&quot;color&quot;:&quot;green&quot;,&quot;size&quot;:10,&quot;owner&quot;:&quot;Jin Soo&quot;,&quot;appraisedValue&quot;:500&#125;,&#123;&quot;ID&quot;:&quot;asset4&quot;,&quot;color&quot;:&quot;yellow&quot;,&quot;size&quot;:10,&quot;owner&quot;:&quot;Max&quot;,&quot;appraisedValue&quot;:600&#125;,&#123;&quot;ID&quot;:&quot;asset5&quot;,&quot;color&quot;:&quot;black&quot;,&quot;size&quot;:15,&quot;owner&quot;:&quot;Adriana&quot;,&quot;appraisedValue&quot;:700&#125;,&#123;&quot;ID&quot;:&quot;asset6&quot;,&quot;color&quot;:&quot;white&quot;,&quot;size&quot;:15,&quot;owner&quot;:&quot;Michel&quot;,&quot;appraisedValue&quot;:800&#125;]</span><br></pre></td></tr></table></figure><h2 id="Upgrading-a-smart-contract（更新智能合约）">Upgrading a smart contract（更新智能合约）</h2><p>You can use the same Fabric chaincode lifecycle process to upgrade a chaincode that has already been deployed to a channel. Channel members can upgrade a chaincode by installing a new chaincode package and then approving a chaincode definition with the new package ID, a new chaincode version, and with the sequence number incremented by one. The new chaincode can be used after the chaincode definition is committed to the channel. This process allows channel members to coordinate on when a chaincode is upgraded, and ensure that a sufficient number of channel members are ready to use the new chaincode before it is deployed to the channel.</p><p>您可以使用相同的Fabric链码生命周期流程来升级已经部署到通道的链码。通道成员可以通过以下方式升级链码：安装新的链码包，然后批准这个具有新packageID、新链码版本以及序列号加1的链码定义。在链码定义被提交给通道后新的链码就可以被使用。此过程允许通道成员在升级链码时进行协调，并确保在将新链码部署到通道之前，有足够数量的通道成员准备使用新链码。</p><p>Channel members can also use the upgrade process to change the chaincode endorsement policy. By approving a chaincode definition with a new endorsement policy and committing the chaincode definition to the channel, channel members can change the endorsement policy governing a chaincode without installing a new chaincode package.</p><p>通道成员也可以使用这个更新流程来修改链码的背书策略。通过批准具有新背书策略的链码定义并将其提交给渠道，渠道成员可以更改背书策略而无需安装新的链码包。</p><p>To provide a scenario for upgrading the asset-transfer (basic) chaincode that we just deployed,let’s assume that Org1 and Org2 would like to install a version of the chaincode that is written in another language. They will use the Fabric chaincode lifecycle to update the chaincode version and ensure that both organizations have installed the new chaincode before it becomes active on the channel.</p><p>为了提供一个我们刚才部署的asset-transfer (basic) 链码升级的情景，让我们假设Org1和Org2想要安装一个通过其他语言编写的链码版本。他们会使用Fabric链码生命周期来更新链码的版本并且在新链码可用于通道之前确保所有的组织已经安装了新的链码。</p><p>We are going to assume that Org1 and Org2 initially installed the GO version of the asset-transfer (basic) chaincode, but would be more comfortable working with a chaincode written in JavaScript. The first step is to package the JavaScript version of the asset-transfer (basic) chaincode. If you used the JavaScript instructions to package your chaincode when you went through the tutorial, you can install new chaincode binaries by following the steps for packaging a chaincode written in <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html#go">Go</a> or <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/deploy_chaincode.html#typescript">TypeScript</a>.</p><p>我们假设Org1和Org2最初安装了asset-transfer (basic) GO版本的链码，但使用JavaScript编写的链码会更舒适。第一步就是打包JavaScript版本的asset-transfer (basic) 链码。</p><p>Issue the following commands from the <code>test-network</code> directory to install the chaincode dependences.</p><p>在<code>test-network</code> 目录下运行下面的命令来安装链码的依赖。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ../asset-transfer-basic/chaincode-javascript</span><br><span class="line">npm install</span><br><span class="line">cd ../../test-network</span><br></pre></td></tr></table></figure><h3 id="打包">打包</h3><p>You can then issue the following commands to package the JavaScript chaincode from the <code>test-network</code> directory. We will set the environment variables needed to use the <code>peer</code> CLI again in case you closed your terminal.</p><p>然后你可以在<code>test-network</code> 目录下运行下面的命令来打包JavaScript版本的链码。在运行命令之前先参考前面的内容来设置可以操作Org1的环境变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package basic_2.tar.gz --path ../asset-transfer-basic/chaincode-javascript/ --lang node --label basic_2.0</span><br></pre></td></tr></table></figure><h3 id="安装">安装</h3><p>We can now use the following command to install the new chaincode package on the Org1 peer.</p><p>你可以在Org1组织的peer节点通过下面的命令来安装一个新的链码包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install basic_2.tar.gz</span><br></pre></td></tr></table></figure><p>The new chaincode package will create a new package ID. We can find the new package ID by querying our peer.</p><p>新的链码包会创建一个新的package ID，我们通过查询peer来获取新的package ID。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br></pre></td></tr></table></figure><p>The <code>queryinstalled</code> command will return a list of the chaincode that have been installed on your peer similar to this output.</p><p><code>queryinstalled</code> 命令会返回你的peer已经安装的链码，输出类似如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Installed chaincodes on peer:</span><br><span class="line">Package ID: basic_1.0:2c47b5b060a64aafa3c878b4bcb0ca680bdb2417ca8855b5440fa595562517d2, Label: basic_1.0</span><br><span class="line">Package ID: basic_2.0:59cb45985332d79a903ef39d710eeb23a1c63bddaf8cd999481071457d22acbd, Label: basic_2.0</span><br></pre></td></tr></table></figure><p>You can use the package label to find the package ID of the new chaincode and save it as a new environment variable. This output is for example only – your package ID will be different, so DO NOT COPY AND PASTE!</p><p>你可以把新的 package ID保存为一个新的环境变量。下面的命令只是一个例子，不要直接copy。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export NEW_CC_PACKAGE_ID&#x3D;basic_2.0:59cb45985332d79a903ef39d710eeb23a1c63bddaf8cd999481071457d22acbd</span><br></pre></td></tr></table></figure><h3 id="批准链码定义">批准链码定义</h3><p>Org1 can now approve a new chaincode definition（Org1现在可以批准这个新的链码定义）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name basic --version 2.0 --package-id $NEW_CC_PACKAGE_ID --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>The new chaincode definition uses the package ID of the JavaScript chaincode package and updates the chaincode version. Because the sequence parameter is used by the Fabric chaincode lifecycle to keep track of chaincode upgrades, Org1 also needs to increment the sequence number from 1 to 2. You can use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a> command to find the sequence of the chaincode that was last committed to the channel.</p><p>新的链码定义使用JavaScript版本的链码包的packageID以及新的链码版本。由于Fabric链码生命周期使用序列号来跟踪链码升级，因此Org1还需要将序列号从1递增到2。你可以使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">peer lifecycle chaincode querycommitted</a>命令来查询链码上次提交到通道的序列号。</p><p>We now need to install the chaincode package and approve the chaincode definition as Org2 in order to upgrade the chaincode. Run the following commands to operate the <code>peer</code> CLI as the Org2 admin:</p><p>我们现在需要以Org2组织的身份来安装链码并且批准链码定义来更新链码，运行下面的命令来使用Org2组织的管理员进行操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:9051</span><br></pre></td></tr></table></figure><h3 id="其他组织安装链码">其他组织安装链码</h3><p>We can now use the following command to install the new chaincode package on the Org2 peer.</p><p>我们现在就可以使用下面的命令来安装新的链码包到Org2组织的peer上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install basic_2.tar.gz</span><br></pre></td></tr></table></figure><h3 id="批准链码定义-v2">批准链码定义</h3><p>You can now approve the new chaincode definition for Org2.</p><p>我们现在可以为Org2组织批准这个新的链码定义。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name basic --version 2.0 --package-id $NEW_CC_PACKAGE_ID --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>Use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-checkcommitreadiness">peer lifecycle chaincode checkcommitreadiness</a> command to check if the chaincode definition with sequence 2 is ready to be committed to the channel:</p><p>使用<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerlifecycle.html#peer-lifecycle-chaincode-checkcommitreadiness">peer lifecycle chaincode checkcommitreadiness</a> 敏玲来检查序列号为2的链码定义是否已经准备好被提交到channel上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name basic --version 2.0 --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --output json</span><br></pre></td></tr></table></figure><p>The chaincode is ready to be upgraded if the command returns the following JSON:</p><p>如果这个命令返回以下内容，说明已经准备好更新了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;approvals&quot;: &#123;</span><br><span class="line">&quot;Org1MSP&quot;: true,</span><br><span class="line">&quot;Org2MSP&quot;: true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The chaincode will be upgraded on the channel after the new chaincode definition is committed. Until then, the previous chaincode will continue to run on the peers of both organizations. Org2 can use the following command to upgrade the chaincode:</p><p>在新的链码定义提交后，通道上的链码将会升级。在此之前，先前的链码将继续在两个组织的peer上运行。Org2组织可以使用下面的命令来更新链码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name basic --version 2.0 --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>A successful commit transaction will start the new chaincode right away. If the chaincode definition changed the endorsement policy, the new policy would be put in effect.</p><p>成功的提交的交易将立即启动新的链码。如果链码定义更改了背书策略，则新政策将生效。</p><p>You can use the <code>docker ps</code> command to verify that the new chaincode has started on your peers:</p><p>你现在可以使用 <code>docker ps</code> 命令来验证新的链码已经在你的peer节点启动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                                                                                                                                                                    COMMAND                  CREATED         STATUS         PORTS                              NAMES</span><br><span class="line">2e253d5141c3   dev-peer0.org2.example.com-basic_2.0-59cb45985332d79a903ef39d710eeb23a1c63bddaf8cd999481071457d22acbd-c00efc2e7c009601f23247ba3330c47fc5b737d476f8233da9b404c28681847b   &quot;docker-entrypoint.s…&quot;   2 minutes ago   Up 2 minutes                                      dev-peer0.org2.example.com-basic_2.0-59cb45985332d79a903ef39d710eeb23a1c63bddaf8cd999481071457d22acbd</span><br><span class="line">cb7260fc3aa6   dev-peer0.org1.example.com-basic_2.0-59cb45985332d79a903ef39d710eeb23a1c63bddaf8cd999481071457d22acbd-ececda85b7ddf5cad9e5cbca808ffe76bc0b4b0d3067c345afa365a764b062ff   &quot;docker-entrypoint.s…&quot;   2 minutes ago   Up 2 minutes                                      dev-peer0.org1.example.com-basic_2.0-59cb45985332d79a903ef39d710eeb23a1c63bddaf8cd999481071457d22acbd</span><br><span class="line">ee12e6769e93   gliderlabs/logspout                                                                                                                                                      &quot;/bin/logspout&quot;          6 hours ago     Up 6 hours     127.0.0.1:8000-&gt;80/tcp             logspout</span><br><span class="line">628b12f2b3f0   hyperledger/fabric-peer:latest                                                                                                                                           &quot;peer node start&quot;        6 hours ago     Up 6 hours     7051/tcp, 0.0.0.0:9051-&gt;9051/tcp   peer0.org2.example.com</span><br><span class="line">e47cbd1b0b15   hyperledger/fabric-peer:latest                                                                                                                                           &quot;peer node start&quot;        6 hours ago     Up 6 hours     0.0.0.0:7051-&gt;7051/tcp             peer0.org1.example.com</span><br><span class="line">e67946f412a7   hyperledger/fabric-orderer:latest                                                                                                                                        &quot;orderer&quot;                6 hours ago     Up 6 hours     0.0.0.0:7050-&gt;7050/tcp             orderer.example.com</span><br></pre></td></tr></table></figure><p>If you used the <code>--init-required</code> flag, you need to invoke the Init function before you can use the upgraded chaincode. Because we did not request the execution of Init, we can test our new JavaScript chaincode by creating a new car:</p><p>我们现在可以通过创建一个新的汽车来测试我们新的JavaScript版本的链码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;CreateAsset&quot;,&quot;Args&quot;:[&quot;asset8&quot;,&quot;blue&quot;,&quot;16&quot;,&quot;Kelley&quot;,&quot;750&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>You can query all the cars on the ledger again to see the new car:</p><p>你可以查询账本上所有的车来看新创建的car：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C mychannel -n basic -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>You should see the following result from the JavaScript chaincode:</p><p>通过JavaScript版本的链码，你会看到下面的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;Key&quot;:&quot;asset1&quot;,&quot;Record&quot;:&#123;&quot;ID&quot;:&quot;asset1&quot;,&quot;color&quot;:&quot;blue&quot;,&quot;size&quot;:5,&quot;owner&quot;:&quot;Tomoko&quot;,&quot;appraisedValue&quot;:300&#125;&#125;,&#123;&quot;Key&quot;:&quot;asset2&quot;,&quot;Record&quot;:&#123;&quot;ID&quot;:&quot;asset2&quot;,&quot;color&quot;:&quot;red&quot;,&quot;size&quot;:5,&quot;owner&quot;:&quot;Brad&quot;,&quot;appraisedValue&quot;:400&#125;&#125;,&#123;&quot;Key&quot;:&quot;asset3&quot;,&quot;Record&quot;:&#123;&quot;ID&quot;:&quot;asset3&quot;,&quot;color&quot;:&quot;green&quot;,&quot;size&quot;:10,&quot;owner&quot;:&quot;Jin Soo&quot;,&quot;appraisedValue&quot;:500&#125;&#125;,&#123;&quot;Key&quot;:&quot;asset4&quot;,&quot;Record&quot;:&#123;&quot;ID&quot;:&quot;asset4&quot;,&quot;color&quot;:&quot;yellow&quot;,&quot;size&quot;:10,&quot;owner&quot;:&quot;Max&quot;,&quot;appraisedValue&quot;:600&#125;&#125;,&#123;&quot;Key&quot;:&quot;asset5&quot;,&quot;Record&quot;:&#123;&quot;ID&quot;:&quot;asset5&quot;,&quot;color&quot;:&quot;black&quot;,&quot;size&quot;:15,&quot;owner&quot;:&quot;Adriana&quot;,&quot;appraisedValue&quot;:700&#125;&#125;,&#123;&quot;Key&quot;:&quot;asset6&quot;,&quot;Record&quot;:&#123;&quot;ID&quot;:&quot;asset6&quot;,&quot;color&quot;:&quot;white&quot;,&quot;size&quot;:15,&quot;owner&quot;:&quot;Michel&quot;,&quot;appraisedValue&quot;:800&#125;&#125;,&#123;&quot;Key&quot;:&quot;asset8&quot;,&quot;Record&quot;:&#123;&quot;ID&quot;:&quot;asset8&quot;,&quot;Color&quot;:&quot;blue&quot;,&quot;Size&quot;:&quot;16&quot;,&quot;Owner&quot;:&quot;Kelley&quot;,&quot;AppraisedValue&quot;:&quot;750&quot;&#125;&#125;]</span><br></pre></td></tr></table></figure><h2 id="Clean-up（清理）">Clean up（清理）</h2><p>When you are finished using the chaincode, you can also use the following commands to remove the Logspout tool.</p><p>当你使用链码结束之后，你可以通过下面的命令来移除Logspout tool。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop logspout</span><br><span class="line">docker rm logspout</span><br></pre></td></tr></table></figure><p>You can then bring down the test network by issuing the following command from the <code>test-network</code> directory:</p><p>你现在可以在<code>test-network</code> 目录下使用下面的命令来关闭测试网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh down</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> HOW-TO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> channel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建一个新的channel</title>
      <link href="2024/11/22/blockchain/fabric/how_to/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84channel/"/>
      <url>2024/11/22/blockchain/fabric/how_to/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84channel/</url>
      
        <content type="html"><![CDATA[<h1 id="创建一个新的channel">创建一个新的channel</h1><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html">官方文档</a></p><p>You can use this tutorial to learn how to create new channels using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/configtxgen.html">configtxgen</a> CLI tool and then use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html">peer channel</a> commands to join a channel with your peers. While this tutorial will leverage the Fabric test network to create the new channel, the steps in this tutorial can also be used by network operators in a production environment.</p><p>你可以通过这个教程来学习通过 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/configtxgen.html">configtxgen</a>CLI工具来创建新的通道，然后通过 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html">peer channel</a> 命令将peer节点加入通道。尽管本教程将利用Fabric测试网络来创建新渠道，网络操作人员也可以在生产环境中使用本教程中的步骤。</p><p>In the process of creating the channel, this tutorial will take you through the following steps and concepts:</p><p>在创建频道的过程中，本教程将带您完成以下步骤和概念：</p><ul><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html#setting-up-the-configtxgen-tool">Setting up the configtxgen tool</a>：设置configtxgen工具</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html#the-configtx-yaml-file">Using the configtx.yaml file</a>：使用configtx.yaml配置文件</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html#the-orderer-system-channel">The orderer system channel</a>：排序的系统通道介绍</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html#creating-an-application-channel">Creating an application channel</a>：创建一个应用通道</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html#join-peers-to-the-channel">Joining peers to the channel</a>：将peer节点加入通道</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel.html#set-anchor-peers">Setting anchor peers</a>：设置锚节点</li></ul><h3 id="Setting-up-the-configtxgen-tool（设置configtxgen工具）">Setting up the configtxgen tool（设置configtxgen工具）</h3><p>Channels are created by building a channel creation transaction and submitting the transaction to the ordering service. The channel creation transaction specifies the initial configuration of the channel and is used by the ordering service to write the channel genesis block. While it is possible to build the channel creation transaction file manually, it is easier to use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/configtxgen.html">configtxgen</a> tool. The tool works by reading a <code>configtx.yaml</code> file that defines the configuration of your channel, and then writing the relevant information into the channel creation transaction. Before we discuss the <code>configtx.yaml</code> file in the next section, we can get started by downloading and setting up the <code>configtxgen</code> tool.</p><p>通道的创建是通过构建一个创建通道的交易然后将此交易提交给排序服务来完成的。“创建通道的交易”指明了此通道的初始化配置并且由排序服务写入通道的创世纪区块中。尽管可以手动构建“创建通道的交易”，但使用configtxgen工具更容易。configtxgen工具读取定义了channle配置的<code>configtx.yaml</code>文件，然后将相关信息写入“创建通道的交易”中。在我们讨论 <code>configtx.yaml</code> 文件之前，我们先开始下载并设置<code>configtxgen</code> 工具。</p><p>You can download the <code>configtxgen</code> binaries by following the steps to <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/install.html">install the samples, binaries and Docker images</a>. <code>configtxgen</code> will be downloaded to the <code>bin</code> folder of your local clone of the <code>fabric-samples</code> repository along with other Fabric tools.</p><p>你可以跟着 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/install.html">install the samples, binaries and Docker images</a>的步骤来下载 <code>configtxgen</code> 。 <code>configtxgen</code> 会下载到<code>fabric-samples</code>仓库的<code>bin</code>目录下。</p><p>For the purposes of this tutorial, we will want to operate from the <code>test-network</code> directory inside <code>fabric-samples</code>. Navigate to that directory using the following command:</p><p>为了本教程的目的，我们会想要在<code>fabric-samples</code>下面的 <code>test-network</code> 目录下进行操作，使用下面的命令切换到此目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd fabric-samples/test-network</span><br></pre></td></tr></table></figure><p>We will operate from the <code>test-network</code> directory for the remainder of the tutorial. Use the following command to add the configtxgen tool to your CLI path:</p><p>在本教程的其余部分中，我们将从test-network目录进行操作。使用以下命令将configtxgen工具添加到您的CLI路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$&#123;PWD&#125;/../bin:$PATH</span><br></pre></td></tr></table></figure><p>In order to use <code>configtxgen</code>, you need to the set the <code>FABRIC_CFG_PATH</code> environment variable to the path of the directory that contains your local copy of the <code>configtx.yaml</code> file. For this tutorial, we will reference the <code>configtx.yaml</code> used to setup the Fabric test network in the <code>configtx</code> folder:</p><p>为了使用<code>configtxgen</code>，您需要将<code>FABRIC_CFG_PATH</code>环境变量设置为包含<code>configtx.yaml</code>的本地目录。对于本教程，我们将在此环境变量设置为在Fabric test network目录下的包含<code>configtx.yaml</code>的<code>configtx</code> 目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CFG_PATH=$&#123;PWD&#125;/configtx</span><br></pre></td></tr></table></figure><p>You can check that you can are able to use the tool by printing the <code>configtxgen</code> help text:</p><p>你可以通过打印 <code>configtxgen</code>工具的help来检查是否已经设置好:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen --help</span><br></pre></td></tr></table></figure><h2 id="The-configtx-yaml-file（configtx-yaml文件）">The configtx.yaml file（configtx.yaml文件）</h2><p>The <code>configtx.yaml</code> file specifies the <strong>channel configuration</strong> of new channels. The information that is required to build the channel configuration is specified in a readable and editable form in the <code>configtx.yaml</code> file. The <code>configtxgen</code> tool uses the channel profiles defined in the <code>configtx.yaml</code> file to create the channel configuration and write it to the <a href="https://developers.google.com/protocol-buffers">protobuf format</a> that can be read by Fabric.</p><p><code>configtx.yaml</code> 文件指明了一个新的通道的通道配置。在<code>configtx.yaml</code>文件中可以读取和编辑构建通道配置所需的信息。 <code>configtxgen</code> 工具通过使用 <code>configtx.yaml</code>文件中的通道属性的定义来创建通道配置，并将其写入可由Fabric读取的 <a href="https://developers.google.com/protocol-buffers">protobuf格式</a>。</p><p>You can find the <code>configtx.yaml</code> file that is used to deploy the test network in the <code>configtx</code> folder in the <code>test-network</code> directory. The file contains the following information that we will use to create our new channel:</p><p>你可以在<code>test-network</code>目录的<code>configtx</code> 文件夹下面看到 <code>configtx.yaml</code> 文件，这个文件包含在创建新通道时会用到的下面的信息：</p><ul><li><p><strong>Organizations:</strong> The organizations that can become members of your channel. Each organization has a reference to the cryptographic material that is used to build the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/membership/membership.html">channel MSP</a>.</p><ul><li>可以成为你的通道成员的组织信息，每一个组织都有对用于构建<a href="%5D(https://hyperledger-fabric.readthedocs.io/en/release-2.2/membership/membership.html)">通道MSP</a>的加密材料的引用。</li></ul></li><li><p><strong>Ordering service:</strong> Which ordering nodes will form the ordering service of the network, and consensus method they will use to agree to a common order of transactions. The file also contains the organizations that will become the ordering service administrators.</p><ul><li>哪些排序节点将形成网络中的排序服务，以及它们用于同意交易顺序的共识方法。此文件还包含了会成为排序服务管理员的组织的信息。</li></ul></li><li><p><strong>Channel policies：</strong> Different sections of the file work together to define the policies that will govern how organizations interact with the channel and which organizations need to approve channel updates. For the purposes of this tutorial, we will use the default policies used by Fabric.</p><ul><li>文件的不同部分一起定义通道策略，这些策略将控制组织与通道的交互方式以及哪些组织需要批准渠道更新。就本教程而言，我们将使用Fabric使用的默认策略。</li></ul></li><li><p><strong>Channel profiles</strong> Each channel profile references information from other sections of the <code>configtx.yaml</code> file to build a channel configuration. The profiles are used the create the genesis block of the orderer system channel and the channels that will be used by peer organizations. To distinguish them from the system channel, the channels used by peer organizations are often referred to as application channels.</p><ul><li>每个通道的配置信息都引用<code>configtx.yaml</code>文件的其他部分来构建通道配置。这些配置信息是用来创建<strong>orderer system channel</strong> 的创世纪区块的，然后通道会被同等的其他组织所使用。为了将它们（<strong>orderer system channel</strong>）与系统通道区分开来，组织使用的通道通常称为应用程序通道。</li></ul><p>The <code>configtxgen</code> tool uses <code>configtx.yaml</code> file to create a complete genesis block for the system channel. As a result, the system channel profile needs to specify the full system channel configuration. The channel profile used to create the channel creation transaction only needs to contain the additional configuration information required to create an application channel.</p></li></ul><p><code>configtxgen</code>工具使用<code>configtx.yaml</code>文件为系统通道创建完整的创世块。结果，系统通道配置文件需要指定完整的系统通道配置。用于创建“创建通道的交易”使用的通道配置仅需要包含创建应用程序通道所需的其他配置信息。</p><p>You can visit the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel_genesis.html">Using configtx.yaml to create a channel genesis block</a> tutorial to learn more about this file. For now, we will return to the operational aspects of creating the channel, though we will reference parts of this file in future steps.</p><p>你可以访问 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/create_channel/create_channel_genesis.html">Using configtx.yaml to create a channel genesis block</a> 教程来学习此文件的更多信息。现在我们回到创建通道的操作方面。</p><h2 id="Start-the-network（启动网络）">Start the network（启动网络）</h2><p>参考<a href="Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E4%BD%BF%E7%94%A8.md">Fabric测试网络使用</a></p><p>Our instance of the test network was deployed without creating an application channel. However, the test network script creates the system channel when you issue the <code>./network.sh up</code> command. Under the covers, the script uses the <code>configtxgen</code> tool and the <code>configtx.yaml</code> file to build the genesis block of the system channel. Because the system channel is used to create other channels, we need to take some time to understand the orderer system channel before we can create an application channel.</p><p>我们部署的测试网络实例未创建应用程序通道。但是测试网络脚本在你运行<code>./network.sh up</code> 命令时创建了系统通道。在幕后，脚本使用<code>configtxgen</code>工具和<code>configtx.yaml</code>文件来构建系统通道的创世纪块。因为系统通道是用来创建其他通道的，所以我们在创建一个应用通道之前需要花一些时间去了解排序系统通道（ <strong>orderer system channel</strong> ）</p><h2 id="The-orderer-system-channel（排序系统通道）">The orderer system channel（排序系统通道）</h2><p>略</p><h2 id="Creating-an-application-channel（创建一个应用通道）">Creating an application channel（创建一个应用通道）</h2><p>Now that we have deployed the nodes of the network and created the orderer system channel using the <code>network.sh</code> script, we can start the process of creating a new channel for our peer organizations. We have already set the environment variables that are required to use the <code>configtxgen</code> tool. Run the following command to create a channel creation transaction for <code>channel1</code>:</p><p>现在我们已经使用<code>network.sh</code>脚本在测试网络中部署了节点，并且创建了排序系统通道。我们现在可以开始为我们的组织创建一个新通道的程序了。我们已经设置了使用<code>configtxgen</code>工具所需的环境变量。运行下面的程序来为<code>channel1</code>通道创建一个“创建通道的交易”：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel1.tx -channelID channel1</span><br></pre></td></tr></table></figure><p>The <code>-channelID</code> will be the name of the future channel. Channel names must be all lower case, less than 250 characters long and match the regular expression <code>[a-z][a-z0-9.-]*</code>. The command uses the uses the <code>-profile</code> flag to reference the <code>TwoOrgsChannel:</code> profile from <code>configtx.yaml</code> that is used by the test network to create application channels:</p><p><code>-channelID</code>标志制定了创建的通道的名称，通道的名称必须全是小写，不超过250个字符并且符合正则表达式<code>[a-z][a-z0-9.-]*</code>。该命令使用<code>-profile</code>标志来引用<code>configtx.yaml</code>文件中的<code>TwoOrgsChannel：</code>配置，测试网络使用它来创建应用程序通道：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">TwoOrgsChannel:</span></span><br><span class="line">    <span class="attr">Consortium:</span> <span class="string">SampleConsortium</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelDefaults</span></span><br><span class="line">    <span class="attr">Application:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line">        <span class="attr">Organizations:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="meta">*Org2</span></span><br><span class="line">        <span class="attr">Capabilities:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationCapabilities</span></span><br></pre></td></tr></table></figure><p>The profile references the name of the <code>SampleConsortium</code> from the system channel, and includes both peer organizations from the consortium as channel members. Because the system channel is used as a template to create the application channel, the ordering nodes defined in the system channel become the default <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#consenter-set">consenter set</a> of the new channel, while the administrators of the ordering service become the orderer administrators of the channel. Ordering nodes and ordering organizations can be added or removed from the consenter set using channel updates.</p><p>该配置文件从系统通道引用<code>SampleConsortium</code>的名称，并且包含来自该联盟的两个组织作为通道成员。因为系统通道被用作模版来创建应用通道，系统通道中定义的排序节点成为新渠道的默认<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#consenter-set">consenter set</a>，而排序服务的管理员将成为新渠道的排序管理员。可以使用通道更新在<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#consenter-set">consenter set</a>中添加或删除排序节点和排序组织。</p><p>If the command successful, you will see logs of <code>configtxgen</code> loading the <code>configtx.yaml</code> file and printing a channel creation transaction:</p><p>如果上面的命令执行成功，你会看到<code>configtxgen</code> 工具加载 <code>configtx.yaml</code> 文件并且打印了一个创建通道的交易：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-23 14:25:49.175 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2020-12-23 14:25:49.185 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /Users/apple/code/open-source/blockchain/hyperledger/fabric-samples/test-network/configtx/configtx.yaml</span><br><span class="line">2020-12-23 14:25:49.185 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 003 Generating new channel configtx</span><br><span class="line">2020-12-23 14:25:49.188 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 004 Writing new channel tx</span><br></pre></td></tr></table></figure><p>We can use the <code>peer</code> CLI to submit the channel creation transaction to the ordering service. To use the <code>peer</code> CLI, we need to set the <code>FABRIC_CFG_PATH</code> to the <code>core.yaml</code> file located in the <code>fabric-samples/config</code> directory. Set the <code>FABRIC_CFG_PATH</code> environment variable by running the following command:</p><p>你可以使用 <code>peer</code>CLI来把这个“创建通道的交易”提交到排序服务。为了使用<code>peer</code> CLI，我们需要设置环境变量<code>FABRIC_CFG_PATH</code>为 <code>fabric-samples/config</code> 目录下的<code>core.yaml</code>文件，运行下面的命令来设置<code>FABRIC_CFG_PATH</code>环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CFG_PATH=$PWD/../config/</span><br></pre></td></tr></table></figure><p>Before the ordering service creates the channel, the ordering service will check the permission of the identity that submitted the request. By default, only admin identities of organizations that belong to the system channel consortium can create a new channel. Issue the commands below to operate the <code>peer</code> CLI as the admin user from Org1:</p><p>在排序服务创建通道时，排序服务会检查提交请求的身份的权限。默认情况下，只有属于系统通道联盟的组织的管理员身份才能创建新的通道。运行下面的命令来以Org1的管理员身份操作 <code>peer</code> CLI:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:7051</span><br></pre></td></tr></table></figure><p>You can now create the channel by using the following command:</p><p>你现在可以使用下面的命令来创建通道了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel create -o localhost:7050  --ordererTLSHostnameOverride orderer.example.com -c channel1 -f ./channel-artifacts/channel1.tx --outputBlock ./channel-artifacts/channel1.block --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>The command above provides the path to the channel creation transaction file using the <code>-f</code> flag and uses the <code>-c</code> flag to specify the channel name. The <code>-o</code> flag is used to select the ordering node that will be used to create the channel. The <code>--cafile</code> is the path to the TLS certificate of the ordering node. When you run the <code>peer channel create</code> command, the <code>peer</code> CLI will generate the following response:</p><p>上面的命令使用 <code>-f</code>标志来指定“创建通道的交易”的文件，并且使用 <code>-c</code> 标志来指定通道名称。<code>-o</code>标志是用来选择用来创建通道的排序节点的。<code>--cafile</code> 标志是排序节点的TLS证书路径。当你运行 <code>peer channel create</code>命令时， <code>peer</code> CLI会生成下面的响应：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-23 14:36:09.386 CST [channelCmd] InitCmdFactory -&gt; INFO 00b Endorser and orderer connections initialized</span><br><span class="line">2020-12-23 14:36:09.595 CST [cli.common] readBlock -&gt; INFO 00c Received block: 0</span><br></pre></td></tr></table></figure><p>Because we are using a Raft ordering service, you may get some status unavailable messages that you can safely ignore. The command will return the genesis block of the new channel to the location specified by the <code>--outputBlock</code> flag.</p><p>因为我们使用一个Raft策略的排序服务，你可能会收到一些状态不可用的信息你可以放心的忽略他们。该命令会将新通道的创世纪区块输出到<code>--outputBlock</code>标志指定的位置。</p><h2 id="Join-peers-to-the-channel（把节点加入通道中）">Join peers to the channel（把节点加入通道中）</h2><p>After the channel has been created, we can join the channel with our peers. Organizations that are members of the channel can fetch the channel genesis block from the ordering service using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html#peer-channel-fetch">peer channel fetch</a> command. The organization can then use the genesis block to join the peer to the channel using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html#peer-channel-join">peer channel join</a> command. Once the peer is joined to the channel, the peer will build the blockchain ledger by retrieving the other blocks on the channel from the ordering service.</p><p>在通道创建之后，我们可以把我们的peer节点加入到通道。属于通道成员的组织可以使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html#peer-channel-fetch">peer channel fetch</a>命令从排序服务那里获取通道的创世纪区块。然后这个组织就可以使用这个创世纪区块来通过 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html#peer-channel-join">peer channel join</a> 命令将peer节点加入到通道了。一旦peer节点加入了通道，peer节点将通过从排序服务中检索其他区块来构建区块链账本了。</p><p>Since we are already operating the <code>peer</code> CLI as the Org1 admin, let’s join the Org1 peer to the channel. Since Org1 submitted the channel creation transaction, we already have the channel genesis block on our file system. Join the Org1 peer to the channel using the command below.</p><p>因为我们已经通过Org1的管理员操作了 <code>peer</code> CLI ，让我们把Org1的peer节点加入到通道。因为是Org1组织提交的“创建通道的交易”，我们已经在我们本地的文件系统中拥有了通道的创世纪区块。使用下面的命令将组织Org1的peer节点加入到通道中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/channel1.block</span><br></pre></td></tr></table></figure><p>The <code>CORE_PEER_ADDRESS</code> environment variable has been set to target <code>peer0.org1.example.com</code>. A successful command will generate a response from <code>peer0.org1.example.com</code> joining the channel:</p><p>环境变量<code>CORE_PEER_ADDRESS</code>已经设置为指向了<code>peer0.org1.example.com</code>，如果命令成功的话会获取 <code>peer0.org1.example.com</code> 加入通道的响应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-03-06 17:49:09.903 EST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-03-06 17:49:10.060 EST [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><p>我本地的运行报错如下，记录TODO，最终使用最新2.3.0的版本就没有这个问题。2.2.0版本没有成功启动org1的peer。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/fabric-samples/test-network$     peer channel join -b ./channel-artifacts/channel1.block</span><br><span class="line">2020-12-23 14:59:02.760 CST [comm.tls] ClientHandshake -&gt; ERRO 001 Client TLS handshake failed after 2.782623ms with error: EOF remoteaddress=[::1]:7051</span><br><span class="line">2020-12-23 14:59:03.768 CST [comm.tls] ClientHandshake -&gt; ERRO 002 Client TLS handshake failed after 2.438885ms with error: EOF remoteaddress=[::1]:7051</span><br><span class="line">2020-12-23 14:59:05.075 CST [comm.tls] ClientHandshake -&gt; ERRO 003 Client TLS handshake failed after 1.857716ms with error: EOF remoteaddress=[::1]:7051</span><br><span class="line">Error: error getting endorser client for channel: endorser client failed to connect to localhost:7051: failed to create new connection: context deadline exceeded</span><br></pre></td></tr></table></figure><p>You can verify that the peer has joined the channel using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html#peer-channel-getinfo">peer channel getinfo</a> command:</p><p>你可以使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/peerchannel.html#peer-channel-getinfo">peer channel getinfo</a> 命令来验证peer节点已经加入了通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel getinfo -c channel1</span><br></pre></td></tr></table></figure><p>The command will list the block height of the channel and the hash of the most recent block. Because the genesis block is the only block on the channel, the height of the channel will be 1:</p><p>这个命令会列出通道区块的高度和最新的区块的hash值，因为这个通道上只有一个创世纪区块，所以这个通道上的区块高度是1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-03-13 10:50:06.978 EDT [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;&quot;height&quot;:1,&quot;currentBlockHash&quot;:&quot;kvtQYYEL2tz0kDCNttPFNC4e6HVUFOGMTIDxZ+DeNQM=&quot;&#125;</span><br></pre></td></tr></table></figure><p>We can now join the Org2 peer to the channel. Set the following environment variables to operate the <code>peer</code> CLI as the Org2 admin. The environment variables will also set the Org2 peer, <code>peer0.org1.example.com</code>, as the target peer.</p><p>我们现在可以把组织Org2的peer节点加入通道了。设置下面的环境变量来使用Org2的管理员操作<code>peer</code> CLI。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:9051</span><br></pre></td></tr></table></figure><p>While we still have the channel genesis block on our file system, in a more realistic scenario, Org2 would have the fetch the block from the ordering service. As an example, we will use the <code>peer channel fetch</code> command to get the genesis block for Org2:</p><p>然而在我们本地系统中仍然存在通道的创世纪区块，在一个更真实的情形中，组织Org2应该从排序服务获取这个区块。例如，我们将使用 <code>peer channel fetch</code>命令来为组织Org2获取创世纪区块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch 0 ./channel-artifacts/channel_org2.block -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com -c channel1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>The command uses <code>0</code> to specify that it needs to fetch the genesis block that is required to join the channel. If the command is successful, you should see the following output:</p><p>该命令使用<code>0</code>来指明它需要获取创世纪块，该创世纪区块用于加入通道。如果命令执行成功，你会看到下面的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-03-13 11:32:06.309 EDT [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-03-13 11:32:06.336 EDT [cli.common] readBlock -&gt; INFO 002 Received block: 0</span><br></pre></td></tr></table></figure><p>The command returns the channel genesis block and names it <code>channel_org2.block</code> to distinguish it from the block pulled by org1. You can now use the block to join the Org2 peer to the channel:</p><p>这个命令会获取到名为 <code>channel_org2.block</code> 的通道创世纪区块，以与Org1的区块作区分。你现在可以使用这个区块把Org2的peer节点加入到通道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b ./channel-artifacts/channel_org2.block</span><br></pre></td></tr></table></figure><h2 id="Set-anchor-peers（设置锚节点）">Set anchor peers（设置锚节点）</h2><p>After an organizations has joined their peers to the channel, they should select at least one of their peers to become an anchor peer. <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/gossip.html#anchor-peers">Anchor peers</a> are required in order to take advantage of features such as private data and service discovery. Each organization should set multiple anchor peers on a channel for redundancy. For more information about gossip and anchor peers, see the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/gossip.html">Gossip data dissemination protocol</a>.</p><p>在一个组织将他们的peer节点加入到通道之后，他们还需要在他们的组织内部选择至少一个peer节点作为锚节点。<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/gossip.html#anchor-peers">Anchor peers</a> 需要锚节点的好处是他能够利用私有数据以及做服务发现。每个组织都应在一个通道上设置多个锚节点以实现冗余。</p><p>The endpoint information of the anchor peers of each organization is included in the channel configuration. Each channel member can specify their anchor peers by updating the channel. We will use the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/configtxlator.html">configtxlator</a> tool to update the channel configuration and select an anchor peer for Org1 and Org2. The process for setting an anchor peer is similar to the steps that are required to make other channel updates and provides an introduction to how to use <code>configtxlator</code> to <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/config_update.html">update a channel configuration</a>. You will also need to install the <a href="https://stedolan.github.io/jq/">jq tool</a> on your local machine.</p><p>通道配置中包含每个组织的锚节点的终点信息。每个组织都可以通过更新通道配置来知名他们的锚节点。我们会使用 <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/commands/configtxlator.html">configtxlator</a>工具来更新通道配置并且为组织Org1和Org2各选择一个锚节点。设置锚节点的流程与教程<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/config_update.html">update a channel configuration</a>的步骤很类似。你还需要在你的本地安装<a href="https://stedolan.github.io/jq/">jq</a> 工具。</p><p>We will start by selecting an anchor peer as Org1. The first step is to pull the most recent channel configuration block using the <code>peer channel fetch</code> command. Set the following environment variables to operate the <code>peer</code> CLI as the Org1 admin:</p><p>我们先以Org1的身份来选择一个锚节点。第一步是使用<code>peer channel fetch</code> 命令拉去最新的通道配置区块。设置环境变量以Org1管理员的身份操作 <code>peer</code> CLI ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CFG_PATH=$PWD/../config/</span><br><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:7051</span><br></pre></td></tr></table></figure><p>You can use the following command to fetch the channel configuration:</p><p>你可以通过下面的命令来获取通道配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/config_block.pb -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com -c channel1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>Because the most recent channel configuration block is the channel genesis block, you will see the command return block 0 from the channel.</p><p>因为最新的通道配置区块是通道的创世纪区块，你会看到该命令会返回通道上的0区块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-12-23 16:37:33.686 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-23 16:37:33.689 CST [cli.common] readBlock -&gt; INFO 002 Received block: 0</span><br><span class="line">2020-12-23 16:37:33.689 CST [channelCmd] fetch -&gt; INFO 003 Retrieving last config block: 0</span><br><span class="line">2020-12-23 16:37:33.693 CST [cli.common] readBlock -&gt; INFO 004 Received block: 0</span><br></pre></td></tr></table></figure><p>The channel configuration block was stored in the <code>channel-artifacts</code> folder to keep the update process separate from other artifacts. Change into the <code>channel-artifacts</code> folder to complete the next steps:</p><p>通道配置区块被存储在channel-artifacts目录下，以使更新流程与其他的组件区分开。进入 <code>channel-artifacts</code> 目录下来完成接下来的步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br></pre></td></tr></table></figure><p>We can now start using the <code>configtxlator</code> tool to start working with the channel configuration. The first step is to decode the block from protobuf into a JSON object that can be read and edited. We also strip away the unnecessary block data, leaving only the channel configuration.</p><p>我们现在开始使用 <code>configtxlator</code> 工具和通道配置一起工作。第一步是将来自区块的protobuf格式解码为可以读取和编辑的JSON格式。我们还将去除不必要的块数据，仅保留通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input config_block.pb --type common.Block --output config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config config_block.json &gt; config.json</span><br></pre></td></tr></table></figure><p>These commands convert the channel configuration block into a streamlined JSON, <code>config.json</code>, that will serve as the baseline for our update. Because we don’t want to edit this file directly, we will make a copy that we can edit. We will use the original channel config in a future step.</p><p>这些命令将通道配置区块转换为简化的JSON格式的文件<code>config.json</code>，它将作为我们更新的基准。因为我们不想直接编辑这个文件，我们会先创建一个可以编辑的副本。我们将在以后的步骤中使用原始的通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp config.json config_copy.json</span><br></pre></td></tr></table></figure><p>You can use the <code>jq</code> tool to add the Org1 anchor peer to the channel configuration.</p><p>你可以使用<code>jq</code> 工具来添加Org1组织的锚节点到通道配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq &#x27;.channel_group.groups.Application.groups.Org1MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.org1.example.com&quot;,&quot;port&quot;: 7051&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; config_copy.json &gt; modified_config.json</span><br></pre></td></tr></table></figure><p>After this step, we have an updated version of channel configuration in JSON format in the <code>modified_config.json</code> file. We can now convert both the original and modified channel configurations back into protobuf format and calculate the difference between them.</p><p>完成此步骤后，我们在<code>modified_config.json</code>文件中以JSON格式获取了通道配置的更新版本。现在，我们可以将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input config.json --type common.Config --output config.pb</span><br><span class="line">configtxlator proto_encode --input modified_config.json --type common.Config --output modified_config.pb</span><br><span class="line">configtxlator compute_update --channel_id channel1 --original config.pb --updated modified_config.pb --output config_update.pb</span><br></pre></td></tr></table></figure><p>The new protobuf named <code>channel_update.pb</code> contains the anchor peer update that we need to apply to the channel configuration. We can wrap the configuration update in a transaction envelope to create the channel configuration update transaction.</p><p>格式为protobuf的新的<code>channel_update.pb</code>文件包含我们需要应用于通道配置上的锚节点更新。我们可以将配置更新包装在交易信封中以创建通道配置更新交易。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate --output config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;channel1&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope --output config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><p>We can now use the final artifact, <code>config_update_in_envelope.pb</code>, that can be used to update the channel. Navigate back to the <code>test-network</code> directory:</p><p>现在，我们可以使用最终工件<code>config_update_in_envelope.pb</code>，该工件可以用于更新通道。回到<code>test-network</code> 目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>We can add the anchor peer by providing the new channel configuration to the <code>peer channel update</code> command. Because we are updating a section of the channel configuration that only affects Org1, other channel members do not need to approve the channel update.</p><p>我们可以通过向<code>peer channel update</code>命令提供新的通道配置来添加锚节点。因为我们正在更新仅影响Org1的部分通道配置，所以其他通道成员不需要批准通道更新。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel update -f channel-artifacts/config_update_in_envelope.pb -c channel1 -o localhost:7050  --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>When the channel update is successful, you should see the following response:</p><p>当渠道更新成功后，你会看到下面的响应：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-23 17:05:48.187 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-12-23 17:05:48.222 CST [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br></pre></td></tr></table></figure><p>We can set the anchor peers for Org2. Because we are going through the process a second time, we will go through the steps more quickly. Set the environment variables to operate the <code>peer</code> CLI as the Org2 admin:</p><p>我们可以为Org2设置锚节点。因为我们是第二次进行该过程，所以我们将更快地完成这些步骤。设置环境变量以Org2管理员的身份操作 <code>peer</code> CLI ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:9051</span><br></pre></td></tr></table></figure><p>Pull the latest channel configuration block, which is now the second block on the channel:</p><p>拉去最新的通道配置区块，即目前通道上的第二个区块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel fetch config channel-artifacts/config_block.pb -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com -c channel1 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>Navigate back to the <code>channel-artifacts</code> directory（切换回 <code>channel-artifacts</code> 目录）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd channel-artifacts</span><br></pre></td></tr></table></figure><p>You can then decode and copy the configuration block.（你可以解码并复制配置区块）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input config_block.pb --type common.Block --output config_block.json</span><br><span class="line">jq .data.data[0].payload.data.config config_block.json &gt; config.json</span><br><span class="line">cp config.json config_copy.json</span><br></pre></td></tr></table></figure><p>Add the Org2 peer that is joined to the channel as the anchor peer in the channel configuration:</p><p>在通道配置中添加Org2的已经加入通道的节点作为锚节点:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq &#x27;.channel_group.groups.Application.groups.Org2MSP.values += &#123;&quot;AnchorPeers&quot;:&#123;&quot;mod_policy&quot;: &quot;Admins&quot;,&quot;value&quot;:&#123;&quot;anchor_peers&quot;: [&#123;&quot;host&quot;: &quot;peer0.org2.example.com&quot;,&quot;port&quot;: 9051&#125;]&#125;,&quot;version&quot;: &quot;0&quot;&#125;&#125;&#x27; config_copy.json &gt; modified_config.json</span><br></pre></td></tr></table></figure><p>We can now convert both the original and updated channel configurations back into protobuf format and calculate the difference between them.</p><p>我们可以将原始的和修改后的通道配置都转换回protobuf格式，并计算它们之间的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_encode --input config.json --type common.Config --output config.pb</span><br><span class="line">configtxlator proto_encode --input modified_config.json --type common.Config --output modified_config.pb</span><br><span class="line">configtxlator compute_update --channel_id channel1 --original config.pb --updated modified_config.pb --output config_update.pb</span><br></pre></td></tr></table></figure><p>Wrap the configuration update in a transaction envelope to create the channel configuration update transaction:</p><p>将配置更新包装在交易信封中以创建通道配置更新交易：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate --output config_update.json</span><br><span class="line">echo &#x27;&#123;&quot;payload&quot;:&#123;&quot;header&quot;:&#123;&quot;channel_header&quot;:&#123;&quot;channel_id&quot;:&quot;channel1&quot;, &quot;type&quot;:2&#125;&#125;,&quot;data&quot;:&#123;&quot;config_update&quot;:&#x27;$(cat config_update.json)&#x27;&#125;&#125;&#125;&#x27; | jq . &gt; config_update_in_envelope.json</span><br><span class="line">configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope --output config_update_in_envelope.pb</span><br></pre></td></tr></table></figure><p>Navigate back to the <code>test-network</code> directory.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>Update the channel and set the Org2 anchor peer by issuing the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel update -f channel-artifacts/config_update_in_envelope.pb -c channel1 -o localhost:7050  --ordererTLSHostnameOverride orderer.example.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>You can confirm that the channel has been updated successfully by running the <code>peer channel info</code> command:</p><p>你可以使用 <code>peer channel info</code>命令来确认通道已经成功更新。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel getinfo -c channel1</span><br></pre></td></tr></table></figure><p>Now that the channel has been updated by adding two channel configuration blocks to the channel genesis block, the height of the channel will have grown to three:</p><p>现在已经通过在创世纪区块上添加两个通道配置区块更新了通道，通道的区块高度会增长到3:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-12-23 17:19:08.620 CST [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">Blockchain info: &#123;&quot;height&quot;:3,&quot;currentBlockHash&quot;:&quot;0xMLgGnvbUE+gfDpxjbfB1OsxROF3djLzPX9S76ai2I=&quot;,&quot;previousBlockHash&quot;:&quot;6oIrHH8zjeOuhlj2/rrpzxh0pNmGOdPTDjiphJwCXcQ=&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="Deploy-a-chaincode-to-the-new-channel（部署链码到新通道上）">Deploy a chaincode to the new channel（部署链码到新通道上）</h2><p>We can confirm that the channel was created successfully by deploying a chaincode to the channel. We can use the <code>network.sh</code> script to deploy the Basic asset transfer chaincode to any test network channel. Deploy a chaincode to our new channel using the following command:</p><p>我们可以通过在通道上部署链码来确认通道已经创建成功。我们可以使用 <code>network.sh</code> 脚本部署Basic asset transfer 链码到任何测试通道，使用下面的命令将链码部署到新通道上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh deployCC -ccn basic -ccp ../asset-transfer-basic/chaincode-go/ -ccl go -c channel1 -cci InitLedger</span><br></pre></td></tr></table></figure><p>After you run the command, you should see the chaincode being deployed to the channel in your logs. The chaincode is invoked to add data to the channel ledger.</p><p>运行命令后，您应该在日志中看到链码已部署到通道。调用链码将数据添加到通道账本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C channel1 -n basic -c &#x27;&#123;&quot;Args&quot;:[&quot;getAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>After you run the query, you should see the assets that were added to the channel ledger.</p><p>在运行查询之后，你会看到已经添加到通道账本上的资产列表。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;ID&quot;:&quot;asset1&quot;,&quot;color&quot;:&quot;blue&quot;,&quot;size&quot;:5,&quot;owner&quot;:&quot;Tomoko&quot;,&quot;appraisedValue&quot;:300&#125;,&#123;&quot;ID&quot;:&quot;asset2&quot;,&quot;color&quot;:&quot;red&quot;,&quot;size&quot;:5,&quot;owner&quot;:&quot;Brad&quot;,&quot;appraisedValue&quot;:400&#125;,&#123;&quot;ID&quot;:&quot;asset3&quot;,&quot;color&quot;:&quot;green&quot;,&quot;size&quot;:10,&quot;owner&quot;:&quot;Jin Soo&quot;,&quot;appraisedValue&quot;:500&#125;,&#123;&quot;ID&quot;:&quot;asset4&quot;,&quot;color&quot;:&quot;yellow&quot;,&quot;size&quot;:10,&quot;owner&quot;:&quot;Max&quot;,&quot;appraisedValue&quot;:600&#125;,&#123;&quot;ID&quot;:&quot;asset5&quot;,&quot;color&quot;:&quot;black&quot;,&quot;size&quot;:15,&quot;owner&quot;:&quot;Adriana&quot;,&quot;appraisedValue&quot;:700&#125;,&#123;&quot;ID&quot;:&quot;asset6&quot;,&quot;color&quot;:&quot;white&quot;,&quot;size&quot;:15,&quot;owner&quot;:&quot;Michel&quot;,&quot;appraisedValue&quot;:800&#125;]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> HOW-TO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> channel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fabric chaincode lifecycle</title>
      <link href="2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/Fabric%20chaincode%20lifecycle/"/>
      <url>2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/Fabric%20chaincode%20lifecycle/</url>
      
        <content type="html"><![CDATA[<p>官方文档：<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/chaincode_lifecycle.html#what-is-chaincode">Fabric chaincode lifecycle</a></p><h2 id="Install-and-define-a-chaincode">Install and define a chaincode</h2><ol><li><strong>Package the chaincode:</strong> This step can be completed by one organization or by each organization.</li><li><strong>Install the chaincode on your peers:</strong> Every organization that will use the chaincode to endorse a transaction or query the ledger needs to complete this step.</li><li><strong>Approve a chaincode definition for your organization:</strong> Every organization that will use the chaincode needs to complete this step. The chaincode definition needs to be approved by a sufficient number of organizations to satisfy the channel’s LifecycleEndorsment policy (a majority, by default) before the chaincode can be started on the channel.</li><li><strong>Commit the chaincode definition to the channel:</strong> The commit transaction needs to be submitted by one organization once the required number of organizations on the channel have approved. The submitter first collects endorsements from enough peers of the organizations that have approved, and then submits the transaction to commit the chaincode definition.</li></ol><h2 id="Upgrade-a-chaincode">Upgrade a chaincode</h2><ol><li><p><strong>Repackage the chaincode:</strong> You only need to complete this step if you are upgrading the chaincode binaries.</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/Lifecycle-upgrade-package.png" alt="Re-package the chaincode package"></p><p><em>Org1 and Org2 upgrade the chaincode binaries and repackage the chaincode. Both organizations use a different package label.</em></p></li><li><p><strong>Install the new chaincode package on your peers:</strong> Once again, you only need to complete this step if you are upgrading the chaincode binaries. Installing the new chaincode package will generate a package ID, which you will need to pass to the new chaincode definition. You also need to change the chaincode version, which is used by the lifecycle process to track if the chaincode binaries have been upgraded.</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/Lifecycle-upgrade-install.png" alt="Re-install the chaincode package"></p><p><em>Org1 and Org2 install the new package on their peers. The installation creates a new packageID.</em></p></li><li><p><strong>Approve a new chaincode definition:</strong> If you are upgrading the chaincode binaries, you need to update the chaincode version and the package ID in the chaincode definition. You can also update your chaincode endorsement policy without having to repackage your chaincode binaries. Channel members simply need to approve a definition with the new policy. The new definition needs to increment the <strong>sequence</strong> variable in the definition by one.</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/Lifecycle-upgrade-approve.png" alt="Approve a new chaincode definition"></p><p><em>Organization administrators from Org1 and Org2 approve the new chaincode definition for their respective organizations. The new definition references the new packageID and changes the chaincode version. Since this is the first update of the chaincode, the sequence is incremented from one to two.</em></p></li><li><p><strong>Commit the definition to the channel:</strong> When a sufficient number of channel members have approved the new chaincode definition, one organization can commit the new definition to upgrade the chaincode definition to the channel. There is no separate upgrade command as part of the lifecycle process.</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/Lifecycle-upgrade-commit.png" alt="Commit the new definition to the channel"></p><p><em>An organization administrator from Org1 or Org2 commits the new chaincode definition to the channel.</em></p></li></ol><h3 id="Organizations-install-different-chaincode-packages">Organizations install different chaincode packages</h3><p>Each organization can use a different packageID when they approve a chaincode definition. This allows channel members to install different chaincode binaries that use the same endorsement policy and read and write to data in the same chaincode namespace.</p><p>每个组织在批准链码定义时都可以使用不同的packageID。这允许通道成员安装使用相同背书策略的不同链代码二进制文件，并在同一链码名称空间中读取和写入数据。</p><p>Organizations can use this capability to install smart contracts that contain business logic that is specific to their organization. Each organization’s smart contract could contain additional validation that the organization requires before their peers endorse a transaction. Each organization can also write code that helps integrate the smart contract with data from their existing systems.</p><p>组织可以使用此功能来安装包含其组织的特殊的业务逻辑的智能合约。每个组织的智能合约都可以包含组织在其peer认可交易之前所需的其他验证。每个组织还可以编写代码将智能合约与他们现有系统中的数据集成在一起。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/Lifecycle-binaries.png" alt="Using different chaincode binaries"></p><p><em>Org1 and Org2 each install versions of the MYCC chaincode containing business logic that is specific to their organization.</em></p><h3 id="Creating-multiple-chaincodes-using-one-package">Creating multiple chaincodes using one package</h3><p>You can use one chaincode package to create multiple chaincode instances on a channel by approving and committing multiple chaincode definitions. Each definition needs to specify a different chaincode name. This allows you to run multiple instances of a smart contract on a channel, but have the contract be subject to different endorsement policies.</p><p>您可以通过批准并提交多个链码定义，使用一个链码包在一个通道上创建多个链码实例。每个定义都需要指定一个不同的链码名称。这使您可以在一个通道上运行智能合约的多个实例，但是要让合约遵循不同的背书策略。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/Lifecycle-multiple.png" alt="Starting multiple chaincodes"></p><p><em>Org1 and Org2 use the MYCC_1 chaincode package to approve and commit two different chaincode definitions. As a result, both peers have two chaincode containers running on their peers. MYCC1 has an endorsement policy of 1 out of 2, while MYCC2 has an endorsement policy of 2 out of 2.</em></p><p><em>个人疑问：部署相的链码，使用不同的背书策略，这么做有什么用呢？</em></p><h2 id="Migrate-to-the-new-Fabric-lifecycle">Migrate to the new Fabric lifecycle</h2><p>For information about migrating to the new lifecycle, check out <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/upgrade_to_newest_version.html#chaincode-lifecycle">Considerations for getting to v2.0</a>.</p><p>If you need to update your channel configurations to enable the new lifecycle, check out <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/enable_cc_lifecycle.html">Enabling the new chaincode lifecycle</a>.</p><h2 id="More-information">More information</h2><p>You can watch video below to learn more about the motivation of the new Fabric chaincode lifecycle and how it is implemented.</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> Key Concepts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> Fabric chaincode lifecycle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hyperledger-Fabric模型</title>
      <link href="2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/Hyperledger-Fabric%E6%A8%A1%E5%9E%8B/"/>
      <url>2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/Hyperledger-Fabric%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Hyperledger-Fabric模型">Hyperledger-Fabric模型</h1><p>This section outlines the key design features woven into Hyperledger Fabric that fulfill its promise of a comprehensive, yet customizable, enterprise blockchain solution:</p><p>本节概述了编织到Hyperledger Fabric中的关键设计功能，这些功能实现了其全面，可定制的企业区块链解决方案的承诺：</p><ul><li><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/fabric_model.html#assets">Assets</a> — Asset definitions enable the exchange of almost anything with monetary value over the network, from whole foods to antique cars to currency futures.</p><p>资产定义了允许通过网络交换的几乎所有具有货币价值的东西，从食品到古董车再到货币期货。</p></li><li><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/fabric_model.html#chaincode">Chaincode</a> — Chaincode execution is partitioned from transaction ordering, limiting the required levels of trust and verification across node types, and optimizing network scalability and performance.</p><p>链码执行从交易顺序中划分出来，从而限制了跨节点类型所需的信任和验证级别，并优化网络可伸缩和性能。</p></li><li><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/fabric_model.html#ledger-features">Ledger Features</a> — The immutable, shared ledger encodes the entire transaction history for each channel, and includes SQL-like query capability for efficient auditing and dispute resolution.</p><p>不变的，共享的账本对每个通道的整个交易历史进行编码，并包括类似SQL的查询功能，以进行有效的审计和争议解决。</p></li><li><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/fabric_model.html#privacy">Privacy</a> — Channels and private data collections enable private and confidential multi-lateral transactions that are usually required by competing businesses and regulated industries that exchange assets on a common network.</p><p>通道和隐私数据收集可实现私人和机密的多边交易，通常是在竞争企业和受管制的行业（在同一网络上交换资产）所需要。</p></li><li><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/fabric_model.html#security-membership-services">Security &amp; Membership Services</a> — Permissioned membership provides a trusted blockchain network, where participants know that all transactions can be detected and traced by authorized regulators and auditors.</p><p>获得许可的成员资格提供了一个受信任的区块链网络，参与者知道所有交易都可以由授权的监管机构和审计师检测和追踪。</p></li><li><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/fabric_model.html#consensus">Consensus</a> — A unique approach to consensus enables the flexibility and scalability needed for the enterprise.</p><p>一种唯一的共识方法可以实现企业所需的灵活性和可伸缩性。</p></li></ul><h2 id="Assets">Assets</h2><p>Assets can range from the tangible (real estate and hardware) to the intangible (contracts and intellectual property). Hyperledger Fabric provides the ability to modify assets using chaincode transactions.</p><p>资产范围从有形资产（房地产和硬件）到无形资产（合同和知识产权）。Hyperledger Fabric提供了使用链码交易修改资产的功能。</p><p>Assets are represented in Hyperledger Fabric as a collection of key-value pairs, with state changes recorded as transactions on a <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#channel">Channel</a> ledger. Assets can be represented in binary and/or JSON form.</p><p>资产在Hyperledger Fabric中表示为键值对的集合，状态更改记录为通道账本中的交易。资产可以二进制和/或JSON形式表示。</p><h2 id="Chaincode">Chaincode</h2><p>Chaincode is software defining an asset or assets, and the transaction instructions for modifying the asset(s); in other words, it’s the business logic. Chaincode enforces the rules for reading or altering key-value pairs or other state database information. Chaincode functions execute against the ledger’s current state database and are initiated through a transaction proposal. Chaincode execution results in a set of key-value writes (write set) that can be submitted to the network and applied to the ledger on all peers.</p><p>链码是定义了一个或多个资产的软件，以及用于修改资产的交易指令；Chaincode强制执行用于读取或更改键值对或其他状态数据库信息的规则。链码功能针对账本的当前状态数据库执行，并通过交易提议启动。链码执行产生的一组键值写操作（写集），这些键值写操作可以提交给网络，并应用于所有peer的账本中。</p><h2 id="Ledger-Features">Ledger Features</h2><p>The ledger is the sequenced, tamper-resistant record of all state transitions in the fabric. State transitions are a result of chaincode invocations (‘transactions’) submitted by participating parties. Each transaction results in a set of asset key-value pairs that are committed to the ledger as creates, updates, or deletes.</p><p>账本是Fabric中所有有序的、防篡改的状态转换。状态转换是参与方提交的链码调用（“交易”）的结果。每个交易都会产生一组资产键值对，这些键值对会在创建，更新或删除时提交到账本中。</p><p>The ledger is comprised of a blockchain (‘chain’) to store the immutable, sequenced record in blocks, as well as a state database to maintain current fabric state. There is one ledger per channel. Each peer maintains a copy of the ledger for each channel of which they are a member.</p><p>账本由区块链组成，以区块形式存储不可变的、有序的记录，以及用于维护当前结构状态的状态数据库。每个通道有一个账本。每个peer都为其所属的每个通道维护一个账本的副本。</p><p>Some features of a Fabric ledger（Fabric账本的一些功能）:</p><ul><li><p>Query and update ledger using key-based lookups, range queries, and composite key queries</p><p>使用基于键的查找，范围查询和组合键查询来查询和更新分类帐</p></li><li><p>Read-only queries using a rich query language (if using CouchDB as state database)</p><p>使用丰富查询语言的只读查询（如果使用CouchDB作为状态数据库）</p></li><li><p>Read-only history queries — Query ledger history for a key, enabling data provenance scenarios</p><p>只读历史记录查询—为一个key查询史记录，从而启用数据出处场景</p></li><li><p>Transactions consist of the versions of keys/values that were read in chaincode (read set) and keys/values that were written in chaincode (write set)</p><p>交易由链码中读取的键/值的版本 (读取集)和用链码编写的键/值（写入集）所组成。</p></li><li><p>Transactions contain signatures of every endorsing peer and are submitted to ordering service</p><p>交易包含每个背书peer的签名，并提交给排序服务</p></li><li><p>Transactions are ordered into blocks and are “delivered” from an ordering service to peers on a channel</p><p>交易被排序并打包成区块，并从排序服务“交付”到通道上的peer节点</p></li><li><p>Peers validate transactions against endorsement policies and enforce the policies</p><p>Peer根据背书策略验证交易并执行政策</p></li><li><p>Prior to appending a block, a versioning check is performed to ensure that states for assets that were read have not changed since chaincode execution time</p><p>在追加区块之前，执行版本检查，以确保自链码执行以来，已读取资产的状态未发生变化</p></li><li><p>There is immutability once a transaction is validated and committed</p><p>交易一旦经过验证并提交，便具有不变性</p></li><li><p>A channel’s ledger contains a configuration block defining policies, access control lists, and other pertinent information</p><p>通道的账本包含一个配置块，用于定义策略、访问控制列表和其他相关信息</p></li><li><p>Channels contain <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#msp">Membership Service Provider</a> instances allowing for crypto materials to be derived from different certificate authorities</p><p>通道包含MSP实例，允许从不同的证书颁发机构生成加密材料</p></li></ul><p>See the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/ledger.html">Ledger</a> topic for a deeper dive on the databases, storage structure, and “query-ability.”</p><p>有关数据库，存储结构和“查询能力”的更深入了解，请参阅<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/ledger.html">账本</a>主题。</p><h2 id="Privacy">Privacy</h2><p>Hyperledger Fabric employs an immutable ledger on a per-channel basis, as well as chaincode that can manipulate and modify the current state of assets (i.e. update key-value pairs). A ledger exists in the scope of a channel — it can be shared across the entire network (assuming every participant is operating on one common channel) — or it can be privatized to include only a specific set of participants.</p><p>Hyperledger Fabric在每个通道的基础上使用不变的账本，以及可以操纵和修改资产当前状态的链码。账本存在于通道范围内-可以在整个网络中共享（假设每个参与者都在一个公共频道上进行操作）也可以仅包括一组特定的参与者以将其私有化。</p><p>In the latter scenario, these participants would create a separate channel and thereby isolate/segregate their transactions and ledger. In order to solve scenarios that want to bridge the gap between total transparency and privacy, chaincode can be installed only on peers that need to access the asset states to perform reads and writes (in other words, if a chaincode is not installed on a peer, it will not be able to properly interface with the ledger).</p><p>在后一种情况下，这些参与者将创建一个单独的通道，从而隔离/分离他们的交易和账本。为了解决总体透明度和隐私之间存在间隙的场景，链码只能安装在需要访问资产状态以执行读写的peer节点上（换句话说，如果未在peer节点上安装链码，则它将无法与账本正确连接）。</p><p>When a subset of organizations on that channel need to keep their transaction data confidential, a private data collection (collection) is used to segregate this data in a private database, logically separate from the channel ledger, accessible only to the authorized subset of organizations.</p><p>当该渠道上的部分组织需要对其交易数据保密时，私有数据集合用于将这些数据隔离在私有数据库中，从逻辑上与通道账本隔离，并仅允许组织的授权子集访问。</p><p>Thus, channels keep transactions private from the broader network whereas collections keep data private between subsets of organizations on the channel.</p><p>因此，通道使交易对于更广泛的网络而言是不公开的，而集合则对通道上的组织子集之间的数据不公开。</p><p>To further obfuscate the data, values within chaincode can be encrypted (in part or in total) using common cryptographic algorithms such as AES before sending transactions to the ordering service and appending blocks to the ledger. Once encrypted data has been written to the ledger, it can be decrypted only by a user in possession of the corresponding key that was used to generate the cipher text.</p><p>为了进一步混淆数据，在将chaincode中的数据发送给排序服务和追加到账本区块上之前可以使用标准的加密算法（如AES）进行加密。加密数据一旦写入分类帐，则只有拥有用于生成密文的密钥的用户才能对其解密。</p><p>See the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private-data-arch.html">Private Data</a> topic for more details on how to achieve privacy on your blockchain network.</p><p>有关如何在区块链网络上实现隐私的更多详细信息，请参阅<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/private-data-arch.html">私有数据</a>主题。</p><h2 id="Security-Membership-Services">Security &amp; Membership Services</h2><p>Hyperledger Fabric underpins a transactional network where all participants have known identities. Public Key Infrastructure is used to generate cryptographic certificates which are tied to organizations, network components, and end users or client applications. As a result, data access control can be manipulated and governed on the broader network and on channel levels. This “permissioned” notion of Hyperledger Fabric, coupled with the existence and capabilities of channels, helps address scenarios where privacy and confidentiality are paramount concerns.</p><p>Hyperledger Fabric支持所有参与者都具有已知身份的交易网络。公钥基础结构用于生成与组织，网络组件以及最终用户或客户端应用程序绑定的加密证书。结果，可以在更广泛的网络和通道级别上操纵和控制数据访问控制。Hyperledger Fabric的“许可”概念以及通道的存在和功能，帮助解决隐私和机密至关重要的情况。</p><p>See the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/msp.html">Membership Service Providers (MSP)</a> topic to better understand cryptographic implementations, and the sign, verify, authenticate approach used in Hyperledger Fabric.</p><h2 id="Consensus">Consensus</h2><p>In distributed ledger technology, consensus has recently become synonymous with a specific algorithm, within a single function. However, consensus encompasses more than simply agreeing upon the order of transactions, and this differentiation is highlighted in Hyperledger Fabric through its fundamental role in the entire transaction flow, from proposal and endorsement, to ordering, validation and commitment. In a nutshell, consensus is defined as the full-circle verification of the correctness of a set of transactions comprising a block.</p><p>在分布式分类帐技术中，共识最近已成为单一功能内特定算法的同义词。但是，共识不只是简单地约定交易顺序，Hyperledger Fabric通过在整个交易流程（从提案和认可，到排序，验证和提交）中的基本作用，突显了这种差异。简而言之，共识被定义为对包含一个区块的一组交易的正确性的全面验证。</p><p>Consensus is achieved ultimately when the order and results of a block’s transactions have met the explicit policy criteria checks. These checks and balances take place during the lifecycle of a transaction, and include the usage of endorsement policies to dictate which specific members must endorse a certain transaction class, as well as system chaincodes to ensure that these policies are enforced and upheld. Prior to commitment, the peers will employ these system chaincodes to make sure that enough endorsements are present, and that they were derived from the appropriate entities. Moreover, a versioning check will take place during which the current state of the ledger is agreed or consented upon, before any blocks containing transactions are appended to the ledger. This final check provides protection against double spend operations and other threats that might compromise data integrity, and allows for functions to be executed against non-static variables.</p><p>区块交易的顺序和结果满足明确的策略标准检查后，才能最终达成共识。这些检查和平衡发生在交易的生命周期中，并包括使用背书策略规定哪些特定成员必须背书某个交易类别，以及系统链码确保这些策略得到实施和维护。在作出承诺之前，peer将使用这些系统链码来确保存在足够的背书，并且背书来自适当的实体。此外，在将包含交易的任何块追加到账本之前，将进行版本控制检查，在此期间将对账本的当前状态进行被同意或同意。最终检查可以防止重复使用操作和其他可能危害数据完整性的威胁，并允许针对非静态变量执行功能。</p><p>In addition to the multitude of endorsement, validity and versioning checks that take place, there are also ongoing identity verifications happening in all directions of the transaction flow. Access control lists are implemented on hierarchical layers of the network (ordering service down to channels), and payloads are repeatedly signed, verified and authenticated as a transaction proposal passes through the different architectural components. To conclude, consensus is not merely limited to the agreed upon order of a batch of transactions; rather, it is an overarching characterization that is achieved as a byproduct of the ongoing verifications that take place during a transaction’s journey from proposal to commitment.</p><p>除了进行大量的背书，有效性和版本检查外，还在交易流程的各个方向上都在进行身份验证。访问控制列表是在网络的分层的层面实现的，当交易提议通过不同的架构组件时，有效载荷将被反复签名，验证和认证。总而言之，共识不仅限于一批交易的商定顺序；它更是一项总体特征，它是交易从提案到承诺过程中不断进行的验证的副产品。</p><p>Check out the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/txflow.html">Transaction Flow</a> diagram for a visual representation of consensus.</p><p>查看<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/txflow.html">交易流程</a>图以直观表示共识。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> Key Concepts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> Model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fabric的网络</title>
      <link href="2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/Fabric%E7%9A%84%E7%BD%91%E7%BB%9C/"/>
      <url>2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/Fabric%E7%9A%84%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="Blockchain-network-Fabric的网络">Blockchain network(Fabric的网络)</h2><p>原始官方文档：<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/network/network.html">https://hyperledger-fabric.readthedocs.io/en/release-2.2/network/network.html</a></p><h3 id="Creating-the-Network">Creating the Network</h3><p>从创建基础网络开始：<br><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/network.diagram.2.png" alt="network.diagram.2."><br><em>在orderer启动之后网络就形成了，在我们的示例网络N中，包括单个节点O4的ordered service是根据网络配置NC4配置的，该网络配置向组织R4提供管理权限。在网络级别，证书颁发机构CA4用于向R4组织的管理员和网络节点分配身份。</em></p><p>我们可以看到定义网络N的第一件事就是ordering service ，O4。将订购服务视为网络的初始管理点很有帮助。将ordering service视为网络的初始管理点很有帮助。按照事先约定，O4最初由组织R4中的管理员配置和启动，并托管在R4中。配置NC4包含描述网络管理功能的初始的策略集合。最初，将其设置为仅通过网络授予R4权限。这将改变，我们将在后面看到，但目前R4是网络的唯一成员。</p><h3 id="Certificate-Authorities（证书颁发机构）">Certificate Authorities（证书颁发机构）</h3><p>您还可以看到证书颁发机构CA4，用于向管理员和网络节点颁发证书。CA4在我们的网络中起着关键作用，因为它颁发X.509证书，该证书可用于将组件标识为属于组织R4。由CA颁发的证书也可以用于签署交易，以表明组织认可交易结果–这是允许交易提交到分类帐的前提。让我们更详细地研究CA的这两个方面。</p><p>首先，区块链网络的不同组件使用证书将自己标识为来自特定组织。这就是为什么通常有不止一个CA支持一个区块链网络-不同的组织经常使用不同的CA。<br>证书到成员组织的映射是通过称为Membership Services Provider (MSP)的结构实现的。网络配置NC4使用MSP来标识由CA4分配的证书的属性，该证书将证书持有者与组织R4相关联。然后，NC4可以在策略中使用此MSP向R4的参与者授予对网络资源的特定权限。这种策略的一个示例是R4中的管理员可以向网络添加的新成员。</p><p>其次，稍后我们将看到CA颁发的证书如何成为交易生成和验证过程的核心。具体来说，X.509证书用于客户端应用程序交易建议和智能合约交易响应中以进行数字签名交易。随后，托管账本的网络节点在接受交易记录到账本之前会验证交易的签名是否有效。</p><p>让我们回顾一下示例区块链网络的基本结构：证书颁发机构CA4定义了一组用户，可以访问网络N；这些用户对网络N中资源的权限被网络配置NC4中包含的策略所描述。在我们配置并启动ordering service节点O4时，所有这些都变为现实。</p><h3 id="Adding-Network-Administrators（添加网络管理员）">Adding Network Administrators（添加网络管理员）</h3><p>NC4只配置了R4的用户在网络上的权限。在下一个阶段，我们将允许组织R1用户管理网络。让我们看看网络如何发展：<br><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/network.diagram.2.1.png" alt="network.diagram.2.1"><br><em>组织R4更新网络配置以使组织R1也成为管理员。此后，R1和R4在网络配置上享有同等的权利。</em></p><p>尽管订购者节点O4在R4的基础结构上运行，但R1拥有共享的管理权限，只要它可以访问网络即可。这意味着R1或R4可以更新网络配置NC4，以允许R2组织进行网络操作的子集。这样，即使R4在运行订购服务，R1也对其拥有完全的管理权限，并且R2具有创建新联合体的部分权限。</p><p>你在示例中看到的ordering service是网络中的单个节点，这是最简单的形式。ordering service通常是多节点的，可以配置为在不同组织的不同节点。例如，我们可能在R4中运行O4并将其连接到组织R1中单独的订购者节点O2。这样，我们将拥有一个多站点，多组织的管理结构。</p><p>我们将在本主题的稍后部分讨论ordering service，但是现在，仅将ordering service视为一个可为不同组织提供对网络受控访问的管理点。</p><h3 id="Defining-a-Consortium-定义一个联盟">Defining a Consortium(定义一个联盟)</h3><p>尽管现在可以通过R1和R4管理网络，但是几乎没有什么事情可做。我们需要做的第一件事是定义一个联盟。这个词的字面意思是“拥有共同命运的团体”，因此对于区块链网络中的一组组织来说是一个合适的选择。</p><p>让我们看看联盟的定义：<br><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/network.diagram.3.png" alt="network.diagram.3"><br><em>网络管理员定义了一个联盟X1，该联盟包含两个成员，组织R1和R2。该联盟的定义存储在网络配置NC4中，并将在网络开发的下一阶段使用。CA1和CA2是这些组织的各自的证书颁发机构。</em></p><p>因为NC4配置的是只允许R1或R4可以创建新的联盟。该图显示了添加的新联盟X1，该联盟将R1和R2定义为其组成组织。我们还可以看到已经添加了CA2用以认证R2的用户。请注意，一个联盟可以有任意数量的组织成员–我们刚刚显示了两个，因为它是最简单的配置。</p><p>为什么联盟如此重要？我们可以看到一个联盟定义了网络中彼此需要共享交易的组织集合，在本例中R1和 R2。如果组织有共同的目标，将它们组合在一起真的很有意义，而这正上面的联盟定义。</p><p>该网络虽然由单个组织启动，但现在由较大的一组组织控制。现在，我们将使用联盟X1创建Hyperledger Fabric区块链的一个非常重要的部分-一个通道。</p><h3 id="Creating-a-channel-for-a-consortium-为联盟创建一个通道">Creating a channel for a consortium(为联盟创建一个通道)</h3><p>channel是主要的通信机制，联盟的成员可以通过channel相互通信。网络中可以有多个通道，我们先从一个渠道开始。<br>让我们看看如何将第一个channel添加到网络中：<br><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/network.diagram.4.png" alt="network.diagram.4"><br><em>使用联盟定义X1为R1和R2创建了通道C1。通道由通道配置CC1进行治理，完全独立于网络配置。CC1由对C1拥有同等权利的R1和R2管理。 R4在CC1中没有任何权利。</em></p><p>通道C1为财团X1提供了专用的通信机制。我们可以看到通道C1已连接到ordersing service(O4)，但没有附加任何内容。在网络开发的下一阶段，我们将连接组件，例如客户端应用程序和peer节点。但是，渠道代表着未来连接的潜力。</p><p>即使通道C1是网络N的一部分，但也可以与它完全区分开。注意组织R3和R4不在此通道中，C1只用于R1和R2之间的交易处理。在上一步中，我们了解了R4如何授予R1创建新联盟的权限。值得一提的是R4还允许R1创建channel！在此图中，可能是组织R1或R4创建了通道C1。</p><p>再次注意通道C1对于网络配置NC4如何具有完全独立的配置CC1。CC1包含用于控制R1和R2在通道C1上的权限的策略-正如我们所看到的，R3和R4在此通道上没有权限。R3和R4只能在R1或R2将其添加适当策略到通道配置CC1中，才可以与C1交互。一个示例是定义谁可以向channel添加新组织。特别要注意的是，R4不能将自身添加到通道C1中-它必须并且只能由R1或R2授权。</p><p>为什么channel如此重要？channels之所以有用，是因为它们为联盟成员之间的私有通信和私有数据提供了一种机制。channel提供了隐私性保护，对于其他的channels和整个网络。Hyperledger Fabric在这方面很强大，因为它允许组织共享基础结构并同时保持私有状态。这里没有矛盾-网络中的不同联盟需要适当共享不同的信息和流程，而渠道则提供了一种有效的机制来做到这一点。通道可有效共享基础架构，同时保持数据和通信的隐私。</p><p>我们还可以看到，一旦创建了一个channel，它实际上就是“脱离网络”。从创建开始到未来，只有在channel配置中明确指定的组织才能对其进行控制。同样，从此时开始对网络配置NC4的任何更新都不会直接影响channel配置CC1；例如，如果联盟定义X1更改，它将不会影响通道C1的成员。通道之所以有用，是因为它们允许构成通道的组织之间进行私人通信。此外，通道中的数据与网络的其余部分（包括其他通道）完全隔离。</p><p>顺便说一句，还有一个特殊的系统通道（<strong>system channel</strong>）的定义，是为了给排序服务（ordering service）使用的。它的行为与常规channel完全相同，因此，有时也称为应用程序通道（<strong>application channels</strong>）。</p><h3 id="Peers-and-Ledgers（节点与账单）">Peers and Ledgers（节点与账单）</h3><p>现在开始使用渠道将区块链网络和组织组件连接在一起。在网络开发的下一阶段，我们可以看到我们的网络N刚刚获得了两个新组件，即peer节点P1和账本实例L1。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/network.diagram.5.png" alt="network.diagram.5"><br><em>peer节点P1已加入通道C1。 P1物理上存储账本L1的副本。 P1和O4可以使用通道C1相互通信。</em></p><p>peer节点是托管区块链账本副本的网络组件，最后，我们开始看到一些可识别的区块链组件。P1在网络中的目的纯粹是托管账本L1的副本，以供其他人访问。我们可以认为L1物理上托管在P1上，但逻辑上托管在通道C1上。当我们向channel添加更多peer时，我们会更清楚地看到这个想法。</p><p>P1配置的关键部分是CA1发出的X.509身份，该身份将P1与组织R1相关联。当R1组织的管理员将peer节点P1加入通道C1并且P1开始从排序节点O4拉取数据块的时候，O4使用通道配置CC1来确定P1在该通道上的权限。例如，CC1中的策略确定P1（或组织R1）是否可以在通道C1上读取（和/或）写入。</p><p>注意拥有peer的组织是如何将peer加入渠道的，尽管我们仅添加了一个peer，但我们将看到网络中的多个渠道上如何有多个peer节点。稍后我们将看到peer可以扮演的不同角色。</p><h3 id="Applications-and-Smart-Contract-chaincode（应用程序和智能合约联链码）">Applications and Smart Contract chaincode（应用程序和智能合约联链码）</h3><p>现在，通道C1上有一个账本L1，我们可以开始连接客户端应用程序，以使用为操作账本提供服务的peer。</p><p>请注意网络已经增长了：<br><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/network.diagram.6.png" alt="network.diagram.6"><br><em>已经智能合约S5已经被部署到了P1，属于组织R1的客户端应用程序A1可以使用S5通过P1来访问账本L1。A1、P1和O4都加入了通道C1，如图所示，A1、P1和O4都加入了通道C1，即它们都可以利用该通道提供的通信设施。</em></p><p>在网络开发的下一阶段，我们可以看到客户端应用程序A1可以使用通道C1连接到特定的网络资源–在这种情况下，A1可以同时连接到peer节点P1和ordered节点O4。让我们在此之前查看渠道是如何成为网络和组织组件之间通信核心的。就像对peer节点和ordered节点一样，客户端应用程序也具有一个可以将其与组织关联起来的身份。在我们的例子中，客户端应用程序A1与组织R1关联，尽管它在Fabric区块链网络之外，但仍然可以通过渠道C1访问到区块链。</p><p>现在看来，A1可以直接通过P1访问分类帐L1，但实际上，所有访问都是通过称为智能合约链码S5的特殊程序进行管理的。将S5定义为账本的所有常见访问模式； S5提供了一套明确定义的方式，可用来查询或更新账本L1。</p><p>每个组织的开发人员都可以创建智能合约，然后发起在联盟之间共享的业务流程。智能合约用于生成可以分配到网络中每个节点的交易。我们稍后再讨论这个想法；当网络更大时，将更容易理解。现在，需要了解的重要一点是，到此为止，必须在智能合约上执行两次操作。目前为止，需要了解的重要一点是必须在智能合约上执行两次操作：</p><ol><li>它必须已经安装（<strong>installed</strong>）在peer上</li><li>然后已经在通道上定义（<strong>defined</strong>）</li></ol><p>Hyperledger Fabric用户经常把术<strong>语智能合约（smart contract）<strong>和</strong>链码（chaincode）<strong>进行互换使用。通常，智能合约定义了</strong>交易逻辑（ transaction logic ）</strong>，这个交易逻辑控制了现实世界状态中包含业务对象的生命周期。然后将其打包成链码，然后将其部署到区块链网络。可以将智能合约视为支配交易，而链码则是控制如何打包智能合约以进行部署。</p><h3 id="Installing-a-chaincode-package（安装链码包）">Installing a chaincode package（安装链码包）</h3><p>开发了智能合约S5之后，组织R1中的管理员必须创建一个链码包并将其安装到peer节点P1上。这是一个简单的操作；一旦完成，P1就完全了解S5。具体来说，P1可以看到S5的**实现（implementation）<strong>逻辑-就是用于访问账本L1的代码。我们将此与S5的</strong>接口（interface）**进行对比，后者仅描述S5的输入和输出，而与它的实现无关。</p><p>当一个组织在一个渠道中有多个peer时，它可以选择在哪些peer节点安装智能合约。它不需要在每个peer节点上安装智能合约。</p><h3 id="Defining-a-chaincode（定义链码）">Defining a chaincode（定义链码）</h3><p>尽管链码已安装在各个组织的peer上，但它是在channel范围内管理和操作的。每个组织都需要批准<strong>链码定义（chaincode definition）</strong>，这是一组参数，用于确定如何在渠道上使用链码。组织必须批准链码定义，才能使用已安装的智能合约来查询账本并认可交易。在我们的只有一个peer节点P1的例子中，组织R1中的管理员必须批准S5的<strong>链码定义（chaincode definition）</strong>。</p><p>需要足够数量的组织批准<strong>链码定义（chaincode definition）</strong>（默认情况下，大多数情况下为批准），然后才能将<strong>链码定义</strong>提交给渠道并用于与渠道账本进行交互。由于例子中的通道C1只有一个成员，因此R1的管理员可以将S5的<strong>链码定义</strong>提交给通道C1。提交链码的定义后，便可以由客户端应用程序A1调用S5！</p><p>请注意，尽管通道上的每个组件现在都可以访问S5，但它们无法看到其程序逻辑。对于安装它的那些节点（我们的示例中是P1），它仍然是私有的。从概念上讲，这意味着已定义并提交给渠道的智能合约接口与已安装的智能合约实现相反。加强这个想法；安装智能合约我们可以将其视为物理托管（<strong>physically hosted</strong>）在peer上，而已在通道上定义的智能合约我们可以将其视为逻辑托管（ <strong>logically hosted</strong>）在通道上。</p><h3 id="Endorsement-policy（背书策略）">Endorsement policy（背书策略）</h3><p>链码定义中提供的最重要的信息是背书策略。它描述了哪些组织必须批准交易然后其他组织才能将其接受到其账本副本上。在我们的示例网络中，只有R1或R2认可交易，才能将交易接受到账本L1上。</p><p>将链码定义提交给渠道会将背书策略放在渠道的账本上；它使通道的任何成员都可以访问它。您可以在<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/txflow.html">交易流</a>主题中阅读有关背书策略的更多信息。</p><h3 id="Invoking-a-smart-contract（调用智能合约）">Invoking a smart contract（调用智能合约）</h3><p>将智能合约安装在peer节点上并在channel上定义后，即可由客户端应用程序调用。</p><p>客户端应用程序通过向由智能合约背书策略指定的组织所拥有的节点发起交易提案；智能合约使用交易提案作为它的输入来生成认可的交易响应，该响应由peer节点返回到客户端应用程序。</p><p>这些交易响应与交易提议打包在一起，形成一个完全认可的交易，可以分散到整个网络。现在了解应用程序如何调用智能合约以生成认可的交易即可，稍后我们将对其进行更详细的介绍。</p><p>在网络开发的这一阶段，我们可以看到组织R1正在完全参与网络。它的应用程序-从A1开始-可以通过智能合约S5访问账本L1，以生成将由R1认可的交易，由于它们符合认可策略因此被接受到账本中。</p><h3 id="Network-completed（网络完成）">Network completed（网络完成）</h3><p>回想一下，我们的目标是为联盟X1（组织R1和R2）创建渠道。网络开发的下一阶段将看到组织R2将其基础结构添加到网络中。</p><p>让我们来看看网络进化成什么样了：<br><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/network.diagram.7.png" alt="network.diagram.7"><br><em>通过增加组织R2的基础结构，网络得到了发展。具体来说，R2添加了peer节点P2，该peer节点托管账本L1的副本和链码S5。R2批准与R1相同的链码定义。P2也与应用程序A2一样加入了通道C1，A2和P2通过CA2进行身份认证。所有这些意味着应用程序A1和A2都可以使用peer节点P1或P2在C1上调用S5。</em></p><p>我们可以看到组织R2在通道C1上添加了一个peer节点P2。 P2还托管账本L1的副本和智能合约S5。我们可以看到R2还添加了可以通过通道C1连接到网络的客户端应用程序A2。为此，组织R2中的管理员已创建peer节点P2，并将其用与R1中的管理员相同的方式加入到通道C1。管理员还必须批准与R1相同的链码定义。</p><p>我们已经建立了第一个运营网络！在网络开发的现阶段，我们拥有一个渠道，在此通道上组织R1和R2可以彼此进行交易。具体来说，这意味着应用程序A1和A2可以使用智能合约S5和通道C1上的账本L1生成交易。</p><h3 id="Generating-and-accepting-transactions（生成和接受交易）">Generating and accepting transactions（生成和接受交易）</h3><p>与始终托管着账本副本的peer节点相反，我们看到有两种不同的peer节点：拥有智能合约的peer和没有智能合约的peer。在我们的网络中，每个peer都托管着智能合约的副本，但是在较大的网络中，将有更多的peer节点不托管智能合约的副本。peer节点只能运行安装在其上的智能合约，但是它可以通过连接到通道来知道智能合约的接口。</p><p>您不应该将没有安装智能合约的peer节点视为劣等节点。具有智能合约的peer节点更具有特殊的功能-有助于**生成（generate ）<strong>交易。请注意，所有peer节点都可以</strong>验证（validate）<strong>并随后</strong>接受（accept）<strong>或</strong>拒绝（reject）<strong>交易到其账本L1的副本上。但是，只有安装了智能合约的peer节点才能参与交易</strong>认可（endorsement）**的过程，这对生成合法交易至关重要。</p><p>我们无需担心本主题中如何生成，分配和接受交易的确切细节–能够理解我们拥有一个区块链网络，组织R1和R2可以共享信息和流程作为账本接受（ledger-captured）的交易。我们将在其他主题中学习有关交易，账本，智能合约的更多信息。</p><h3 id="Types-of-peers（peer节点的类型）">Types of peers（peer节点的类型）</h3><p>在Hyperledger Fabric中，尽管所有peer都相同，但它们可以根据网络的配置方式承担多个角色。现在，我们对典型的网络拓扑有了足够的了解，可以描述这些角色。</p><ul><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#commitment">Committing peer</a>：提交peer节点，通道中的每个peer节点都是提交peer节点。它接收包含已经生成的交易的块，随后将其验证，然后再将它们以追加的方式提交到peer节点的账本副本中。</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#endorsement">Endorsing peer</a>：背书节点，每一个安装了智能合约的peer节点都可以成为背书节点。但是要真正成为背书节点，客户端应用程序必须使用peer的智能合约来生成数字签名的事务响应。背书对等方一词是对此事实的明确引用。<br>智能合约的背书策略确定组织的peer应先对生成的交易进行数字签名，然后才能将其接受到提交peer的账本副本中。</li></ul><p>上面是peer节点的的两种主要类型。peer还可以采用其他两种角色：</p><ul><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#leading-peer">Leader peer</a>：领导节点，当一个组织在同一个channel中有多个peer节点时，领导节点负责将交易从排序节点分发到组织内的其他提交节点。一个peer可以选择参与静态或动态领导选择。</li></ul><p>因此，从领导者的角度考虑两组peer是有帮助的-那些具有静态领导者选择的peer和那些具有动态领导者选择的peer。对于静态节点，可以将零个或多个peer配置为领导节点。对于动态节点集合，将由该集合选出一个peer作为领导者。此外，在动态集合中，如果领导节点失败了，则其余peer将重新选举领导节点。</p><p>这意味着同一个组织的peers可以让一个或多个领导节点连接到排序服务。这可以帮助提高处理大量事务的大型网络的弹性和可伸缩性。</p><ul><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#anchor-peer">Anchor peer</a>:锚节点，如果peer需要与另一个组织中的peer进行通信，则可以使用该组织在通道配置中定义的锚节点。一个组织可以为其定义零个或多个锚节点，并且锚节点可以帮助处理许多不同的跨组织通信场景。</li></ul><p>注意，一个peer可以同时是一个提交节点、背书节点、领导节点和锚节点！在一个组织中出于所有实际目的，仅锚节点是可选的，领导节点，背书节点和提交节点都至少有一个。</p><h3 id="Adding-organizations-and-peers-to-the-channel（将组织和节点添加到渠道）">Adding organizations and peers to the channel（将组织和节点添加到渠道）</h3><p>当组织R2加入通道时，它必须在其peer节点P2上安装智能合约S5。这很明显–如果应用程序A1或A2希望在peer节点P2上使用S5来生成交易，首先S5必须存在，安装智能合约可以做到让其存在。此时，peer节点P2具有智能合约和账本的物理副本；像P1一样，它可以在其账本L1的副本上生成和接受交易。</p><p>为了使用智能合约S5，R2必须批准与R1批准的相同的链码定义。由于链码定义已由组织R1提交给通道，因此R2组织批准链码定义并安装链码软件包后便可以使用链码了。提交交易只需发生一次。一个新的组织认可链码参数的行为被通道内的其他组织统一后便可以使用链码。由于链码定义的认可是在组织级别进行的，因此R2认可链码定义一次，然后将多个peer节点加入安装了链码包的渠道。然而，如果R2想要对链码定义进行修改的话，则R1和R2都需要在组织层面认可这个新的链码定义，然后需要其中一个组织将定义提交给渠道。</p><p>在我们的网络中，我们可以看到通道C1链接了两个客户端应用程序，两个peer节点和一个排序服务。由于只有一个通道，因此也只有一个逻辑账本可以与这些组件进行交互。节点P1和P2有相同的账本L1的副本。智能合约S5的副本通常使用相同的编程语言来实现，但如果不同，则他们在语义上必须等效。</p><p>我们可以看到，将对peer小心地添加到网络可以帮助支持增加的吞吐量，稳定性和弹性。例如，网络中更多的peer节点将允许更多的应用程序连接到它；在遇到计划内或计划外的停机时组织中的多个peer将提供额外的弹性。</p><p>这一切都意味着可以配置支持各种操作目标的复杂的拓扑网络，网络可以达到的规模不存在理论上的限制。此外，单个组织中的peer可以有效地发现并彼此通信的技术机制-<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/gossip.html#gossip-protocol">gossip protocol</a>-将容纳大量peer节点以支持此类拓扑。</p><p>仔细使用网络和通道策略可以使大型网络得到良好管理。组织可以自由地将peer节点添加到网络，只要它们符合网络约定的策略即可。网络和渠道策略在自治和控制之间建立了平衡，这是去中心化网络的特征。</p><h2 id="Simplifying-the-visual-vocabulary（简化视觉词汇）">Simplifying the visual vocabulary（简化视觉词汇）</h2><p>We’re now going to simplify the visual vocabulary used to represent our sample blockchain network. As the size of the network grows, the lines initially used to help us understand channels will become cumbersome. Imagine how complicated our diagram would be if we added another peer or client application, or another channel?</p><p>现在，我们将简化用于表示示例区块链网络的视觉词汇。随着网络规模的扩大，最初用于帮助我们了解渠道的线路将变得很繁琐。想想一些如果我们添加另一个peer节点或者一个客户端或者另一个channel我们的图片有多复杂？</p><p>That’s what we’re going to do in a minute, so before we do, let’s simplify the visual vocabulary. Here’s a simplified representation of the network we’ve developed so far:</p><p>这就是我们紧接着要做的事情，因此在我们这样做之前，让我们简化视觉词汇。这是到目前为止我们开发的网络的简化表示：</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/network.diagram.8.png" alt="network.diagram.8"></p><p><em>The diagram shows the facts relating to channel C1 in the network N as follows: Client applications A1 and A2 can use channel C1 for communication with peers P1 and P2, and orderer O4. Peer nodes P1 and P2 can use the communication services of channel C1. Ordering service O4 can make use of the communication services of channel C1. Channel configuration CC1 applies to channel C1.</em></p><p><em>该图显示了与网络N中的通道C1有关的事实，如下所示：客户端程序A1和A2可以使用通道C1来与peer节点P1和P2和排序节点O4进行通信。peer节点P1和P2可以使用通道C1的通信服务。排序服务O4可以利用通道C1的通信服务。通道配置CC1适用于通道C1。</em></p><p>Note that the network diagram has been simplified by replacing channel lines with connection points, shown as blue circles which include the channel number. No information has been lost. This representation is more scalable because it eliminates crossing lines. This allows us to more clearly represent larger networks. We’ve achieved this simplification by focusing on the connection points between components and a channel, rather than the channel itself.</p><p>请注意，这个网络图已经通过用连接点替换通道线来简化了，显示为带有通道编号的蓝色圆圈。没有信息丢失。此表示形式更具伸缩性，因为它消除了交叉线。这使我们可以更清楚地表示更大的网络。通过专注于组件和通道之间的连接点，而不是通道本身，我们实现了这种简化。</p><h2 id="Adding-another-consortium-definition（添加另一个联盟定义）">Adding another consortium definition（添加另一个联盟定义）</h2><p>In this next phase of network development, we introduce organization R3. We’re going to give organizations R2 and R3 a separate application channel which allows them to transact with each other. This application channel will be completely separate to that previously defined, so that R2 and R3 transactions can be kept private to them.</p><p>在网络开发的下一阶段，我们介绍组织R3。我们将为组织R2和R3提供一个单独的应用程序渠道，使他们可以彼此进行交易。该应用程序通道将与先前定义的通道完全分开，因此可以使R2和R3的交易保持私有。</p><p>Let’s return to the network level and define a new consortium, X2, for R2 and R3:</p><p>让我们回到网络级别并且为R2和R3定义一个新的联盟X2：</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/network.diagram.9.png" alt="network.diagram.9"></p><p><em>A network administrator from organization R1 or R4 has added a new consortium definition, X2, which includes organizations R2 and R3. This will be used to define a new channel for X2.</em></p><p><em>R1或者R4的网络管理员已经添加了一个新的联盟定义X2，这个联盟定义包含了R2和R3两个组织。这将被用于为X2定义一个新的通道。</em></p><p>Notice that the network now has two consortia defined: X1 for organizations R1 and R2 and X2 for organizations R2 and R3. Consortium X2 has been introduced in order to be able to create a new channel for R2 and R3.</p><p>注意网络中现在已经有两个联盟定义，组织R1与R2的联盟X1和组织R2与R3的联盟X2。联盟X2已经被引进以便为R2和R3创建新的通道。</p><p>A new channel can only be created by those organizations specifically identified in the network configuration policy, NC4, as having the appropriate rights to do so, i.e. R1 or R4. This is an example of a policy which separates organizations that can manage resources at the network level versus those who can manage resources at the channel level. Seeing these policies at work helps us understand why Hyperledger Fabric has a sophisticated <strong>tiered</strong> policy structure.</p><p>新渠道只能由网络配置策略中明确标识的组织创建，网络中NC4具有适当权限的，即R1或R4。这是策略的示例，该策略将可以在网络级别管理资源的组织与可以在通道级别管理资源的组织区分开来。看到这些策略在起作用，有助于我们理解为什么Hyperledger Fabric具有复杂的分层策略结构。</p><p>In practice, consortium definition X2 has been added to the network configuration NC4. We discuss the exact mechanics of this operation elsewhere in the documentation.</p><p>实际上，联盟定义X2已添加到网络配置NC4。我们将在文档的其他地方讨论此操作的确切机制。</p><h2 id="Adding-a-new-channel（添加一个新的通道）">Adding a new channel（添加一个新的通道）</h2><p>Let’s now use this new consortium definition, X2, to create a new channel, C2. To help reinforce your understanding of the simpler channel notation, we’ve used both visual styles – channel C1 is represented with blue circular end points, whereas channel C2 is represented with red connecting lines:</p><p>让我们使用新的X2联盟定义来创建一个新的通道C2。为了帮助您进一步理解更简单的通道符号，我们使用了两种视觉样式-通道C1用蓝色圆形端点表示，而通道C2用红色连接线表示：</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/network.diagram.10.png" alt="network.diagram.10"></p><p><em>A new channel C2 has been created for R2 and R3 using consortium definition X2. The channel has a channel configuration CC2, completely separate to the network configuration NC4, and the channel configuration CC1. Channel C2 is managed by R2 and R3 who have equal rights over C2 as defined by a policy in CC2. R1 and R4 have no rights defined in CC2 whatsoever.</em></p><p><em>使用联盟定义X2为R2和R3创建了一个新的通道C2。这个通道有一个通道配置CC2，完全独立于网络配置NC4和通道配置CC1。通道C2由R2和R3管理，它们具有CC2中的策略所定义的对C2相同的权限。 R1和R4在CC2中均未定义任何权限。</em></p><p>The channel C2 provides a private communications mechanism for the consortium X2. Again, notice how organizations united in a consortium are what form channels. The channel configuration CC2 now contains the policies that govern channel resources, assigning management rights to organizations R2 and R3 over channel C2. It is managed exclusively by R2 and R3; R1 and R4 have no power in channel C2. For example, channel configuration CC2 can subsequently be updated to add organizations to support network growth, but this can only be done by R2 or R3.</p><p>通道C2为联盟X2提供了专用通信机制。再次注意，组织是如何通过通道被联合起来的。通道配置CC2现在包含控制通道资源的策略，通过通道C2向组织R2和R3分配管理权限。它仅由R2和R3管理； R1和R4在通道C2中没有权限。例如，通道配置CC2随后可以更新以添加组织来支持网络增长，但这只能由R2或R3完成。</p><p>Note how the channel configurations CC1 and CC2 remain completely separate from each other, and completely separate from the network configuration, NC4. Again we’re seeing the de-centralized nature of a Hyperledger Fabric network; once channel C2 has been created, it is managed by organizations R2 and R3 independently to other network elements. Channel policies always remain separate from each other and can only be changed by the organizations authorized to do so in the channel.</p><p>请注意，通道配置CC1和CC2如何保持彼此完全独立，并与网络配置NC4完全独立。再次，我们看到了Hyperledger Fabric网络的去中心化性质；创建通道C2后，组织R2和R3会独立于其他网络元素来管理它。渠道策略始终保持彼此独立，并且只能由有权在通道中更改的组织进行更改。</p><p>As the network and channels evolve, so will the network and channel configurations. There is a process by which this is accomplished in a controlled manner – involving configuration transactions which capture the change to these configurations. Every configuration change results in a new configuration block transaction being generated, and <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/network/network.html#the-ordering-serivce">later in this topic</a>, we’ll see how these blocks are validated and accepted to create updated network and channel configurations respectively.</p><p>随着网络和通道的发展，网络和通道的配置也将随之发展。有一个过程可以通过受控的方式完成此过程-涉及配置事务，这些事务捕获对这些配置的更改。每次配置更改都会导致生成新的配置块事务，本主题后面的内容，我们将看到如何验证和接受这些区块，以分别创建更新的网络和通道配置。</p><h3 id="Network-and-channel-configurations（网络与通道配置）">Network and channel configurations（网络与通道配置）</h3><p>Throughout our sample network, we see the importance of network and channel configurations. These configurations are important because they encapsulate the <strong>policies</strong> agreed by the network members, which provide a shared reference for controlling access to network resources. Network and channel configurations also contain <strong>facts</strong> about the network and channel composition, such as the name of consortia and its organizations.</p><p>通过我们简单的网络，我们看到了网络和通道配置的重要性。这些配置之所以如此重要是因为他们封装了网络成员的认可策略，这些策略提供了对网络资源的共享的控制。网络和通道配置还包含有关网络和通道组成的事实，比如联盟以及组成联盟的组织。</p><p>For example, when the network is first formed using the ordering service node O4, its behaviour is governed by the network configuration NC4. The initial configuration of NC4 only contains policies that permit organization R4 to manage network resources. NC4 is subsequently updated to also allow R1 to manage network resources. Once this change is made, any administrator from organization R1 or R4 that connects to O4 will have network management rights because that is what the policy in the network configuration NC4 permits. Internally, each node in the ordering service records each channel in the network configuration, so that there is a record of each channel created, at the network level.</p><p>例如，当首先使用排序服务节点O4形成网络时，其行为由网络配置NC4控制。NC4的初始配置仅包含允许组织R4管理网络资源的策略。随后将NC4更新为还允许R1管理网络资源。一旦做了这个更新，组织R1和R4的管理员都拥有了网络管理权限了，因为这是在网络配置NC2的策略中指定的。在内部，排序服务中的每个节点都会记录网络配置中的每个通道，以便在网络级别上记录每个创建的通道。</p><p>It means that although ordering service node O4 is the actor that created consortia X1 and X2 and channels C1 and C2, the <strong>intelligence</strong> of the network is contained in the network configuration NC4 that O4 is obeying. As long as O4 behaves as a good actor, and correctly implements the policies defined in NC4 whenever it is dealing with network resources, our network will behave as all organizations have agreed. In many ways NC4 can be considered more important than O4 because, ultimately, it controls network access.</p><p>这意味着尽管排序服务节点O4是创建联盟X1和X2以及渠道C1和C2的参与者，网络的智能包含在O4遵循的网络配置NC4中。只要O4表现出色，并且在处理网络资源时正确执行NC4中定义的策略，我们的网络将按照所有组织的同意行事。在许多方面，NC4比O4更重要，因为它最终控制了网络访问。</p><p>The same principles apply for channel configurations with respect to peers. In our network, P1 and P2 are likewise good actors. When peer nodes P1 and P2 are interacting with client applications A1 or A2 they are each using the policies defined within channel configuration CC1 to control access to the channel C1 resources.</p><p>相同的原则适用于有关peer节点的通道配置。在我们的网络中，P1和P2同样是好角色。当peer节点P1和P2与客户端应用程序A1或A2交互时，它们每个都使用在通道配置CC1中定义的策略来控制对通道C1资源的访问。</p><p>For example, if A1 wants to access the smart contract chaincode S5 on peer nodes P1 or P2, each peer node uses its copy of CC1 to determine the operations that A1 can perform. For example, A1 may be permitted to read or write data from the ledger L1 according to policies defined in CC1. We’ll see later the same pattern for actors in channel and its channel configuration CC2. Again, we can see that while the peers and applications are critical actors in the network, their behaviour in a channel is dictated more by the channel configuration policy than any other factor.</p><p>例如，如果A1想要在peer节点P1或P2上访问智能合约S5，每个对等节点使用其CC1副本确定A1可以执行的操作。比如，根据CC1中的策略定义A1可以可能可以读写账本L1。稍后我们将在通道及其通道配置CC2中看到针对角色的相同模式。同样，我们可以看到，尽管peer节点和应用程序是网络中的关键角色，它们在通道中的行为受通道配置策略的支配，而不是其他任何因素。</p><p>Finally, it is helpful to understand how network and channel configurations are physically realized. We can see that network and channel configurations are logically singular – there is one for the network, and one for each channel. This is important; every component that accesses the network or the channel must have a shared understanding of the permissions granted to different organizations.</p><p>最后，了解物理上如何实现网络和通道配置将很有帮助。我们可以看到网络和通道配置在逻辑上是唯一的，网络有一个配置，每个通道也都有一个配置。这个很重要，访问网络或通道的每个组件都必须对授予不同组织的权限有共同的了解。</p><p>Even though there is logically a single configuration, it is actually replicated and kept consistent by every node that forms the network or channel. For example, in our network peer nodes P1 and P2 both have a copy of channel configuration CC1, and by the time the network is fully complete, peer nodes P2 and P3 will both have a copy of channel configuration CC2. Similarly ordering service node O4 has a copy of the network configuration, but in a <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/network/network.html#the-ordering-service">multi-node configuration</a>, every ordering service node will have its own copy of the network configuration.</p><p>即使从逻辑上讲只有一个配置，但实际上它被构成网络或通道的每个节点复制并保持一致。例如，在我们的网络peer节点P1和P2中都有一个通道配置CC1的副本，到网络完全完成时，peer节点P2和P3都将拥有通道配置CC2的副本。类似的排序服务节点O4有一个网络配置的副本，但是在多节点配置中，每个订购服务节点都将拥有自己的网络配置副本。</p><p>Both network and channel configurations are kept consistent using the same blockchain technology that is used for user transactions – but for <strong>configuration</strong> transactions. To change a network or channel configuration, an administrator must submit a configuration transaction to change the network or channel configuration. It must be signed by the organizations identified in the appropriate policy as being responsible for configuration change. This policy is called the <strong>mod_policy</strong> and we’ll <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/network/network.html#changing-policy">discuss it later</a>.</p><p>网络和通道配置使用与用户交易相同的区块链技术保持不可篡改，但是这里是用的是<strong>配置</strong>交易。要修改一个网络或者通道的配置，管理员必须提交一个配置交易来更改网络或者通道的配置。必须由适当策略中确定负责配置更改的组织签名。这项政策称为<strong>mod_policy</strong>，我们将在后面讨论。</p><p>Indeed, the ordering service nodes operate a mini-blockchain, connected via the <strong>system channel</strong> we mentioned earlier. Using the system channel ordering service nodes distribute network configuration transactions. These transactions are used to co-operatively maintain a consistent copy of the network configuration at each ordering service node. In a similar way, peer nodes in an <strong>application channel</strong> can distribute channel configuration transactions. Likewise, these transactions are used to maintain a consistent copy of the channel configuration at each peer node.</p><p>的确，排序服务节点运行着一个微型区块链，通过我们前面提到的系统通道连接。排序服务节点使用系统通道来分发网络配置交易。这些交易用于保持每个排序服务节点合作维护网络配置有一致的副本。以类似的方式，应用程序通道中的peer节点可以分发通道配置交易。同样，这些交易用于保持在每个peer节点上维护的通道配置的副本一致。</p><p>This balance between objects that are logically singular, by being physically distributed is a common pattern in Hyperledger Fabric. Objects like network configurations, that are logically single, turn out to be physically replicated among a set of ordering services nodes for example. We also see it with channel configurations, ledgers, and to some extent smart contracts which are installed in multiple places but whose interfaces exist logically at the channel level. It’s a pattern you see repeated time and again in Hyperledger Fabric, and enables Hyperledger Fabric to be both de-centralized and yet manageable at the same time.</p><p>物理是分布式的，逻辑上是单一的这种对象之间的平衡是Hyperledger Fabric中的常见模式。例如，逻辑上单一的对象（如网络配置）实际上是在一组排序服务节点之间进行物理复制的。我们会在通道配置、账本和在某种程度上安装在多个位置但逻辑上存在于通道级别的智能合约上看到相同的情况。您在Hyperledger Fabric中一次又一次地看到这种模式，并使Hyperledger Fabric既可以分散管理，又可以同时进行管理。</p><h2 id="Adding-another-peer（添加另一个peer节点）">Adding another peer（添加另一个peer节点）</h2><p>Now that organization R3 is able to fully participate in channel C2, let’s add its infrastructure components to the channel. Rather than do this one component at a time, we’re going to add a peer, its local copy of a ledger, a smart contract and a client application all at once!</p><p>现在组织R3可以完全参与渠道C2了，让我们将其基础结构组件添加到渠道中。我们不会一次添加一个组件，而是一次添加一个peer以及其账本的本地副本、智能合约和客户端应用程序！</p><p>Let’s see the network with organization R3’s components added:</p><p>让我们看一下添加了组织R3组件的网络：</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/network.diagram.11.png" alt="network.diagram.11"></p><p><em>The diagram shows the facts relating to channels C1 and C2 in the network N as follows: Client applications A1 and A2 can use channel C1 for communication with peers P1 and P2, and ordering service O4; client applications A3 can use channel C2 for communication with peer P3 and ordering service O4. Ordering service O4 can make use of the communication services of channels C1 and C2. Channel configuration CC1 applies to channel C1, CC2 applies to channel C2.</em></p><p><em>该图显示了与网络N中的通道C1和C2有关的事实，如下所示：客户端应用程序A1和A2可以使用通道C1来与peer节点P1和P2以及排序服务O4进行通信；客户端应用程序A3可以使用通道来与peer节点P3和排序服务O4进行通信。排序服务O4可以利用通道C1和C2的通信服务。通道配置CC1适用于通道C1，CC2适用于通道C2。</em></p><p>First of all, notice that because peer node P3 is connected to channel C2, it has a <strong>different</strong> ledger – L2 – to those peer nodes using channel C1. The ledger L2 is effectively scoped to channel C2. The ledger L1 is completely separate; it is scoped to channel C1. This makes sense – the purpose of the channel C2 is to provide private communications between the members of the consortium X2, and the ledger L2 is the private store for their transactions.</p><p>首先，请注意，由于peer节点P3连接到通道C2，他拥有一个与通道C1上的节点不一样的账本L2。账本L2的有效范围为通道C2。分类帐L1是完全独立的；它的作用域是通道C1。这是有道理的-通道C2的目的是在财团X2的成员之间提供私人通信，而分类帐L2是其交易的私人商店。</p><p>In a similar way, the smart contract S6, installed on peer node P3, and defined on channel C2, is used to provide controlled access to ledger L2. Application A3 can now use channel C2 to invoke the services provided by smart contract S6 to generate transactions that can be accepted onto every copy of the ledger L2 in the network.</p><p>以类似的方式，安装在peer节点P3上并定义在通道C2上的智能合约S6用于提供对账本L2的受控访问。应用程序A3现在可以使用通道C2来调用智能合约S6提供的服务来生成交易，以生成可以被接受到网络中账本L2的每个副本上的交易。</p><p>At this point in time, we have a single network that has two completely separate channels defined within it. These channels provide independently managed facilities for organizations to transact with each other. Again, this is de-centralization at work; we have a balance between control and autonomy. This is achieved through policies which are applied to channels which are controlled by, and affect, different organizations.</p><p>此时，我们有了一个网络，其中定义了两个完全独立的通道。这些通道为组织提供了相互独立管理的设施，以便彼此进行交易。同样，这是工作中的分权；我们在控制和自治之间取得平衡。这是通过将策略应用到受不同组织控制并影响不同组织的渠道来实现的。</p><h2 id="Joining-a-peer-to-multiple-channels（把一个peer节点加入到不同通道）">Joining a peer to multiple channels（把一个peer节点加入到不同通道）</h2><p>In this final stage of network development, let’s return our focus to organization R2. We can exploit the fact that R2 is a member of both consortia X1 and X2 by joining it to multiple channels:</p><p>在网络开发的最后阶段，让我们把重点放回到组织R2。我们可以利用R2是X1和X2联盟的成员这一事实来将R2加入多个渠道：</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/network.diagram.12.png" alt="network.diagram.12"></p><p><em>The diagram shows the facts relating to channels C1 and C2 in the network N as follows: Client applications A1 can use channel C1 for communication with peers P1 and P2, and ordering service O4; client application A2 can use channel C1 for communication with peers P1 and P2 and channel C2 for communication with peers P2 and P3 and ordering service O4; client application A3 can use channel C2 for communication with peer P3 and P2 and ordering service O4. Ordering service O4 can make use of the communication services of channels C1 and C2. Channel configuration CC1 applies to channel C1, CC2 applies to channel C2.</em></p><p><em>该图显示了与网络N中的通道C1和C2有关的下面的事实：客户端应用程序A1可以使用通道C1来与peer节点P1和P2以及排序服务O4进行通信；客户端应用程序A2可以使用通道C1来和peer节点P1和P2通信，并且使用C2来与peer节点P2和P3以及排序服务O4进行通信；客户端应用程序A3可以使用通道C2来与peer节点P3和P2以及排序服务O4进行通信。排序服务O4可以使用通道C1和C2上的通信服务。通道配置CC1服务于通道C1、CC2服务与通道C2。</em></p><p>We can see that R2 is a special organization in the network, because it is the only organization that is a member of two application channels! It is able to transact with organization R1 on channel C1, while at the same time it can also transact with organization R3 on a different channel, C2.</p><p>我们可以看到R2是网络上的一个特殊的组织，因为它是两个应用程序通道的成员的唯一组织！他可以在通道C1上与组织R1进行交易，同时它也可以在另一个不同的通道C2上与组织R3进行交易。</p><p>Notice how peer node P2 has smart contract S5 installed for channel C1 and smart contract S6 installed for channel C2. Peer node P2 is a full member of both channels at the same time via different smart contracts for different ledgers.</p><p>请注意，peer节点P2如何为通道C1安装了智能合约S5，并为通道C2安装了智能合约S6。peer节点P2通过不同账本的不同智能合约同时是两个渠道的正式成员。</p><p>This is a very powerful concept – channels provide both a mechanism for the separation of organizations, and a mechanism for collaboration between organizations. All the while, this infrastructure is provided by, and shared between, a set of independent organizations.</p><p>这是一个非常强大的概念-渠道既提供了组织分离的机制，也提供了组织之间协作的机制。一直以来，此基础结构（即通道）由一组独立的组织提供并在它们之间共享。</p><p>It is also important to note that peer node P2’s behaviour is controlled very differently depending upon the channel in which it is transacting. Specifically, the policies contained in channel configuration CC1 dictate the operations available to P2 when it is transacting in channel C1, whereas it is the policies in channel configuration CC2 that control P2’s behaviour in channel C2.</p><p>同样重要的是要注意，peer节点P2的行为受其进行交易的通道的控制非常不同。具体而言，通道配置CC1中包含的策略规定了P2在通道C1中进行交易时可使用的操作，而通道配置CC2中的策略控制渠道P2在渠道C2中的行为。</p><p>Again, this is desirable – R2 and R1 agreed the rules for channel C1, whereas R2 and R3 agreed the rules for channel C2. These rules were captured in the respective channel policies – they can and must be used by every component in a channel to enforce correct behaviour, as agreed.</p><p>同样，R2和R1同意通道C1的规则，而R2和R3同意了通道C2的规则是可取的。这些规则是在各自的通道的政策中获取的-渠道中的每个组件都可以并且必须使用它们来强制执行正确的行为，这已经达成共识。</p><p>Similarly, we can see that client application A2 is now able to transact on channels C1 and C2. And likewise, it too will be governed by the policies in the appropriate channel configurations. As an aside, note that client application A2 and peer node P2 are using a mixed visual vocabulary – both lines and connections. You can see that they are equivalent; they are visual synonyms.</p><p>同样，我们可以看到客户端应用程序A2现在能够在通道C1和C2上进行交易。同样，它也将由适当的通道配置中的策略控制。顺便提一句，请注意客户端应用程序A2和peer节点P2正在使用混合的可视词汇表（包括行和连接）。您可以看到它们是等效的。它们是视觉同义词。</p><h3 id="The-ordering-service（排序服务）">The ordering service（排序服务）</h3><p>The observant reader may notice that the ordering service node appears to be a centralized component; it was used to create the network initially, and connects to every channel in the network. Even though we added R1 and R4 to the network configuration policy NC4 which controls the orderer, the node was running on R4’s infrastructure. In a world of de-centralization, this looks wrong!</p><p>细心的读者可能会注意到排序服务节点似乎是一个集中式组件，他被用于创建初始化网络，并且链接网络中的所有的通道。即使我们在控制排序者的网络配置策略NC4中添加了R1和R4，该节点仍在R4的基础架构上运行。在去中心化的世界中，这看起来是错误的！</p><p>Don’t worry! Our example network showed the simplest ordering service configuration to help you understand the idea of a network administration point. In fact, the ordering service can itself too be completely de-centralized! We mentioned earlier that an ordering service could be comprised of many individual nodes owned by different organizations, so let’s see how that would be done in our sample network.</p><p>不要担心！我们的示例网络显示了最简单的排序服务配置，以帮助您了解网络管理点的概念。事实上，排序服务自己也是完全去中心化的。前面我们提到过，排序服务可以由不同组织拥有的许多单个节点组成，因此让我们看看如何在示例网络中完成该工作。</p><p>Let’s have a look at a more realistic ordering service node configuration:</p><p>让我们看一个更接近现实的排序服务节点配置：</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/network.diagram.15.png" alt="network.diagram.15"></p><p><em>A multi-organization ordering service. The ordering service comprises ordering service nodes O1 and O4. O1 is provided by organization R1 and node O4 is provided by organization R4. The network configuration NC4 defines network resource permissions for actors from both organizations R1 and R4.</em></p><p><em>多组织的排序服务。排序服务包含排序节点O1和O4。O1是由组织R1提供而节点O4是由组织R4提供。网络配置NC4为组织R1和R4的参与者定义了网络资源权限。</em></p><p>We can see that this ordering service completely de-centralized – it runs in organization R1 and it runs in organization R4. The network configuration policy, NC4, permits R1 and R4 equal rights over network resources. Client applications and peer nodes from organizations R1 and R4 can manage network resources by connecting to either node O1 or node O4, because both nodes behave the same way, as defined by the policies in network configuration NC4. In practice, actors from a particular organization <em>tend</em> to use infrastructure provided by their home organization, but that’s certainly not always the case.</p><p>我们看到排序服务已经是完全的去中心化了，他运行在组织R1和R4上。网络配置策略NC4，允许R1和R4在网络资源上享有同等的权利。组织R1和R4的客户端程序和peer节点可以通过O1和O4的任意一个来管理网络上的资源，因为两个节点的行为方式均与网络配置NC4中的策略所定义的方式相同。实际上，来自特定组织的参与者往往会使用其上级组织提供的基础架构，但这并非总是如此。</p><h3 id="De-centralized-transaction-distribution（去中心化的交易分发）">De-centralized transaction distribution（去中心化的交易分发）</h3><p>As well as being the management point for the network, the ordering service also provides another key facility – it is the distribution point for transactions. The ordering service is the component which gathers endorsed transactions from applications and orders them into transaction blocks, which are subsequently distributed to every peer node in the channel. At each of these committing peers, transactions are recorded, whether valid or invalid, and their local copy of the ledger updated appropriately.</p><p>排序服务不仅是网络的管理点，还提供了另一个关键功能–它是交易的分发点。排序服务是一个组件，这个组件从应用程序中收集认可交易并将其排序到交易块中，随后分发给通道中的每个peer节点。在每个提交节点中，交易会被记录（不论是成功还是失败），并在本地更新账本。</p><p>Notice how the ordering service node O4 performs a very different role for the channel C1 than it does for the network N. When acting at the channel level, O4’s role is to gather transactions and distribute blocks inside channel C1. It does this according to the policies defined in channel configuration CC1. In contrast, when acting at the network level, O4’s role is to provide a management point for network resources according to the policies defined in network configuration NC4. Notice again how these roles are defined by different policies within the channel and network configurations respectively. This should reinforce to you the importance of declarative policy based configuration in Hyperledger Fabric. Policies both define, and are used to control, the agreed behaviours by each and every member of a consortium.</p><p>请注意，排序服务节点O4如何对通道C1起到与对网络N完全不同的作用。在作用于通道级别时，O4的作用是在通道C1里面收集和分发区块的。它根据通道配置CC1中定义的策略执行此操作。作为对比，在网络级别执行操作时，O4的作用是根据网络配置NC4中定义的策略为网络资源提供管理点。再次注意，这些角色是如何分别由通道和网络配置中的不同策略定义的。这应该向您强调Hyperledger Fabric中基于声明策略的配置的重要性。策略既定义了联盟的每个成员，又用于控制联盟的每个成员的行为。</p><p>We can see that the ordering service, like the other components in Hyperledger Fabric, is a fully de-centralized component. Whether acting as a network management point, or as a distributor of blocks in a channel, its nodes can be distributed as required throughout the multiple organizations in a network.</p><p>我们看到像Hyperledger Fabric中的其他组件一样，排序服务是一个完全的去中心化的组件。无论是充当网络管理点，还是充当通道中的区块分配器，它的节点可以根据需要分布在网络中的多个组织中。</p><h3 id="Changing-policy（修改策略）">Changing policy（修改策略）</h3><p>Throughout our exploration of the sample network, we’ve seen the importance of the policies to control the behaviour of the actors in the system. We’ve only discussed a few of the available policies, but there are many that can be declaratively defined to control every aspect of behaviour. These individual policies are discussed elsewhere in the documentation.</p><p>在整个示例网络的探索过程中，我们已经了解了控制系统中参与者行为的策略的重要性。我们仅讨论了一些可用的策略，但是可以声明性地定义许多策略来控制行为的各个方面。这些单独的策略在文档的其他地方进行了讨论。</p><p>Most importantly of all, Hyperledger Fabric provides a uniquely powerful policy that allows network and channel administrators to manage policy change itself! The underlying philosophy is that policy change is a constant, whether it occurs within or between organizations, or whether it is imposed by external regulators. For example, new organizations may join a channel, or existing organizations may have their permissions increased or decreased. Let’s investigate a little more how change policy is implemented in Hyperledger Fabric.</p><p>最重要的是，Hyperledger Fabric 提供了独特而强大的策略，允许网络和通道管理员自行管理策略更改！基本理念是政策变化是一个持续不断的过程，不论它是在组织内部还是组织之间发生，还是由外部监管机构强加。例如，新组织可以加入通道，或者现有组织的权限可以增加或减少。让我们研究一下Hyperledger Fabric中更改策略的实现方式。</p><p>The key point of understanding is that policy change is managed by a policy within the policy itself. The <strong>modification policy</strong>, or <strong>mod_policy</strong> for short, is a first class policy within a network or channel configuration that manages change. Let’s give two brief examples of how we’ve <strong>already</strong> used mod_policy to manage change in our network!</p><p>理解的关键点是，策略更改由策略本身内的策略来管理。<strong>modification policy（修改策略）<strong>或者简称为</strong>mod_policy</strong>，是一个在网络或渠道配置中管理变更的头等仓的策略。让我们举两个简单的例子，说明我们是如何使用mod_policy来管理网络中的更改的！</p><p>The first example was when the network was initially set up. At this time, only organization R4 was allowed to manage the network. In practice, this was achieved by making R4 the only organization defined in the network configuration NC4 with permissions to network resources. Moreover, the mod_policy for NC4 only mentioned organization R4 – only R4 was allowed to change this configuration.</p><p>第一个示例是最初建立网络时。此时，只有组织R4允许管理网络。在实践中，这是通过使R4成为网络配置NC4中定义的唯一拥有网络资源权限的组织来实现的。此外，NC4的mod_policy仅提及组织R4 –仅允许R4更改此配置。</p><p>We then evolved the network N to also allow organization R1 to administer the network. R4 did this by adding R1 to the policies for channel creation and consortium creation. Because of this change, R1 was able to define the consortia X1 and X2, and create the channels C1 and C2. R1 had equal administrative rights over the channel and consortium policies in the network configuration.</p><p>然后，我们对网络N进行了演进，以也允许组织R1管理网络。R4通过将R1添加到用于通道创建和联盟创建的策略中来做到这一点。因为这个变更，R1可以定义联盟X1和X2，并且创建了通道C1和C2。网络配置中策略指明R1对通道和联盟具有同等的管理权限。</p><p>R4 however, could grant even more power over the network configuration to R1! R4 could add R1 to the mod_policy such that R1 would be able to manage change of the network policy too.</p><p>但是，R4可以通过网络配置向R1授予更多权利。R4可以将R1添加到mod_policy中，以便R1也能够管理网络策略的更改。</p><p>This second power is much more powerful than the first, because R1 now has <strong>full control</strong> over the network configuration NC4! This means that R1 can, in principle remove R4’s management rights from the network. In practice, R4 would configure the mod_policy such that R4 would need to also approve the change, or that all organizations in the mod_policy would have to approve the change. There’s lots of flexibility to make the mod_policy as sophisticated as it needs to be to support whatever change process is required.</p><p>第二个权利相比于第一个来说强大的多，因为R1现在可以完全控制网络配置NC4！这意味着R1原则上可以从网络中删除R4的管理权限。在实践中，R4将把mod_policy配置成为R4需要批准配置更改，或者mod_policy中的所有组织都必须批准更改。有足够的灵活性可以使mod_policy复杂到可以支持所需的任何更改过程。</p><p>This is mod_policy at work – it has allowed the graceful evolution of a basic configuration into a sophisticated one. All the time this has occurred with the agreement of all organization involved. The mod_policy behaves like every other policy inside a network or channel configuration; it defines a set of organizations that are allowed to change the mod_policy itself.</p><p>这就是mod_policy的作用，它使基本配置可以优雅地演变为复杂的配置。在所有相关组织达成一致之后，这种情况一直存在。mod_policy的行为与网络或通道配置中的所有其他策略相同；它定义了一组允许更改mod_policy本身的组织。</p><p>We’ve only scratched the surface of the power of policies and mod_policy in particular in this subsection. It is discussed at much more length in the policy topic, but for now let’s return to our finished network!</p><p>在本小节中，我们仅介绍了策略和mod_policy的功能。在策略主题中将对它进行更详细的讨论，但现在让我们回到完成的网络中！</p><h2 id="Network-fully-formed（网络全面形成）">Network fully formed（网络全面形成）</h2><p>Let’s recap what our network looks like using a consistent visual vocabulary. We’ve re-organized it slightly using our more compact visual syntax, because it better accommodates larger topologies:</p><p>让我们使用一致的视觉词汇来回顾一下我们的网络。我们使用更紧凑的视觉语法对其进行了稍微的重组，因为它可以更好地适应更大的拓扑：</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/network.diagram.14.png" alt="network.diagram.14"></p><p><em>In this diagram we see that the Fabric blockchain network consists of two application channels and one ordering channel. The organizations R1 and R4 are responsible for the ordering channel, R1 and R2 are responsible for the blue application channel while R2 and R3 are responsible for the red application channel. Client applications A1 is an element of organization R1, and CA1 is it’s certificate authority. Note that peer P2 of organization R2 can use the communication facilities of the blue and the red application channel. Each application channel has its own channel configuration, in this case CC1 and CC2. The channel configuration of the system channel is part of the network configuration, NC4.</em></p><p><em>在我们看到的这个图片中，Fabirc区块链网络包含两个应用程序通道和一个排序通道。组织R1和R4负责排序通道，R1和R2负责蓝色应用程序通道，而R2和R3负责红色应用程序通道。客户端应用程序A1是组织R1的元素，而CA1是组织的证书颁发机构。注意属于组织R2的Peer节点P2可以同时使用红色和蓝色的应用程序通道的通信设施。每个应用程序通道都有自己的通道配置，例如CC1和CC2。系统通道的通道配置是网络配置（NC4）的一部分。</em></p><p>We’re at the end of our conceptual journey to build a sample Hyperledger Fabric blockchain network. We’ve created a four organization network with two channels and three peer nodes, with two smart contracts and an ordering service. It is supported by four certificate authorities. It provides ledger and smart contract services to three client applications, who can interact with it via the two channels. Take a moment to look through the details of the network in the diagram, and feel free to read back through the topic to reinforce your knowledge, or go to a more detailed topic.</p><p>我们构建简单的Hyperledger Fabric区块链网络的概念之旅已结束。我们创建了一个具有两个通道和三个peer节点，两个智能合约和一个排序服务的四个组织的网络。这个网络由四个证书颁发机构支持。这个网络对三个客户端应用程序提供账本和智能合约服务，他们可以通过两个通道与之交互。花一点时间浏览图中的网络详细信息，并随时阅读本主题以增强您的知识，或者转到更详细的主题。</p><h3 id="Summary-of-network-components（网络组件的摘要）">Summary of network components（网络组件的摘要）</h3><p>Here’s a quick summary of the network components we’ve discussed（以下是我们讨论过的网络组件的简要摘要）：</p><ul><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#ledger">Ledger</a>. One per channel. Comprised of the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#block">Blockchain</a> and the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#world-state">World state</a>（每个通道一个。由区块链和世界状态组成）</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#smart-contract">Smart contract</a> (aka chaincode)（Also Known As智能合约）</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#peer">Peer nodes</a>（peer节点）</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#ordering-service">Ordering service</a>（排序服务）</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#channel">Channel</a>（通道）</li><li><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/glossary.html#hyperledger-fabric-ca">Certificate Authority</a>（证书颁发机构）</li></ul><h2 id="Network-summary（网络总结）">Network summary（网络总结）</h2><p>In this topic, we’ve seen how different organizations share their infrastructure to provide an integrated Hyperledger Fabric blockchain network. We’ve seen how the collective infrastructure can be organized into channels that provide private communications mechanisms that are independently managed. We’ve seen how actors such as client applications, administrators, peers and orderers are identified as being from different organizations by their use of certificates from their respective certificate authorities. And in turn, we’ve seen the importance of policy to define the agreed permissions that these organizational actors have over network and channel resources.</p><p>在本主题中，我们已经看到了不同的组织如何共享其基础架构以提供集成Hyperledger Fabric区块链网络。我们已经看到了如何将集体基础结构组织为提供独立管理的私有通信机制的通道。我们已经了解了如何通过使用来自各自证书颁发机构的证书将诸如客户端应用程序，管理员，peer节点和排序者之类的参与者识别为来自不同组织。反过来，我们已经看到了定义这些组织参与者对网络和通道资源拥有的同意权限的政策的重要性。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> Key Concepts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Application</title>
      <link href="2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/Application/"/>
      <url>2024/11/22/blockchain/fabric/%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5/Application/</url>
      
        <content type="html"><![CDATA[<p>官方文档：<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/developapps/application.html">Application</a></p><h2 id="Basic-Flow">Basic Flow</h2><p><img src="https://hyperledger-fabric.readthedocs.io/en/release-2.2/_images/develop.diagram.3.png" alt="develop.diagram.3"><em>A PaperNet application invokes the commercial paper smart contract to submit an issue transaction request.</em></p><p>An application has to follow six basic steps to submit a transaction:</p><ul><li>Select an identity from a wallet</li><li>Connect to a gateway</li><li>Access the desired network</li><li>Construct a transaction request for a smart contract</li><li>Submit the transaction to the network</li><li>Process the response</li></ul><h2 id="Wallet">Wallet</h2><p>Think of a <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/developapps/wallet.html">wallet</a> holding the digital equivalents of your government ID, driving license or ATM card. The X.509 digital certificates within it will associate the holder with a organization, thereby entitling them to rights in a network channel. For example, <code>Isabella</code> might be an administrator in MagnetoCorp, and this could give her more privileges than a different user – <code>Balaji</code> from DigiBank. Moreover, a smart contract can retrieve this identity during smart contract processing using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/developapps/transactioncontext.html">transaction context</a>.</p><p>钱包是保管了很多身份信息的钱包。</p><p>（<em>个人理解：就好像谍战电影里面的间谍，打开一个抽屉里面有这个间谍的不同身份的护照。</em>）</p><h2 id="Gateway">Gateway</h2><p>The second key class is a Fabric <strong>Gateway</strong>. Most importantly, a <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/developapps/gateway.html">gateway</a> identifies one or more peers that provide access to a network。 in our case, PaperNet. See how <code>issue.js</code> connects to its gateway:</p><p>网关标识一个或多个提供对网络访问的节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> gateway.connect(connectionProfile, connectionOptions);</span><br></pre></td></tr></table></figure><p><code>gateway.connect()</code> has two important parameters:</p><ul><li><p><strong>connectionProfile</strong>: the file system location of a <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/developapps/connectionprofile.html">connection profile</a> that identifies a set of peers as a gateway to PaperNet</p><p>连接配置文件的文件系统位置，该文件将一组peer标识为PaperNet的gateway</p></li><li><p><strong>connectionOptions</strong>: a set of options used to control how <code>issue.js</code> interacts with PaperNet</p></li></ul><p>See how the client application uses a gateway to insulate itself from the network topology, which might change. The gateway takes care of sending the transaction proposal to the right peer nodes in the network using the <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/developapps/connectionprofile.html">connection profile</a> and <a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/developapps/connectionoptions.html">connection options</a>.</p><h2 id="Network-channel">Network channel</h2><p>The peers defined in the gateway <code>connectionProfile.yaml</code> provide <code>issue.js</code> with access to PaperNet. Because these peers can be joined to multiple network channels, the gateway actually provides the application with access to multiple network channels!</p><p>We can see here a powerful feature of Hyperledger Fabric – applications can participate in a <strong>network of networks</strong>, by connecting to multiple gateway peers, each of which is joined to multiple network channels. Applications will have different rights in different channels according to their wallet identity provided in <code>gateway.connect()</code>.</p><h2 id="Construct-request">Construct request</h2><p>The application is now ready to <strong>issue</strong> a commercial paper. To do this, it’s going to use <code>CommercialPaperContract</code> and again, its fairly straightforward to access this smart contract:</p><h2 id="Submit-transaction">Submit transaction</h2><p>Note that the <code>submitTransaction</code> API includes a process for listening for transaction commits. Listening for commits is required because without it, you will not know whether your transaction has successfully been orderered, validated, and committed to the ledger.</p><h2 id="Process-response">Process response</h2>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> Key Concepts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> Application </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fabric关键问题20问</title>
      <link href="2024/11/22/blockchain/fabric/Fabric%E5%85%B3%E9%94%AE%E9%97%AE%E9%A2%9820%E9%97%AE/"/>
      <url>2024/11/22/blockchain/fabric/Fabric%E5%85%B3%E9%94%AE%E9%97%AE%E9%A2%9820%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="1、是否所有的背书节点都有相同的功能？一笔交易是不是任意的背书节点都可以验证，还是只能由支持此交易的背书节点验证？">1、是否所有的背书节点都有相同的功能？一笔交易是不是任意的背书节点都可以验证，还是只能由支持此交易的背书节点验证？</h2><p>答：只有安装了相同的chaincode的peer节点才具有背书的功能。所以一个peer节点想要成为背书节点，必须安装对应的chaincode。<br>一笔交易肯定是由于调用了链码而产生的，所以这笔交易必须由其他的安装了相同链码的背书节点进行验证。</p><h2 id="2、背书节点在验证的时候是否知道了交易的全部内容，如何保证数据的隐私的？">2、背书节点在验证的时候是否知道了交易的全部内容，如何保证数据的隐私的？</h2><p>答：背书节点在验证的时候可能并不知道交易的全部内容，Fabric有一个名为“transient”的存储，这个存储只在当前peer节点；如果有交易的话“transient”存储的数据会通过Gossip协议隐秘的传输给另一个peer节点。然后这两个peer节点都可以查询到“transient”存储的数据。而channel上的其他成员是无法看到这些数据的，因此并不是所有的背书节点都可以直到交易的全部内容。</p><h3 id="2-1-这个问题会引出另一个新的问题，背书节点在缺少数据的情况下如何进行背书呢？这不就导致背书失败了吗？">2.1 这个问题会引出另一个新的问题，背书节点在缺少数据的情况下如何进行背书呢？这不就导致背书失败了吗？</h3><p>答：是的，拿不到“transient”存储的数据的背书节点会背书失败。但是由于我们可以设置chaincode和key的基于状态的背书策略，因此就算有部分背书节点背书失败了，只要能看到数据的背书节点做了背书并符合背书策略即可达成共识。</p><p>这个问题可以查看<a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/how_to/%E5%9C%A8Fabric%E4%B8%AD%E4%BA%A4%E6%98%93%E5%8F%97%E4%BF%9D%E6%8A%A4%E7%9A%84%E8%B5%84%E4%BA%A7/">在Fabric中交易受保护的资产</a></p><h2 id="3、区块数据的数据结构如果是数组的话，如何做到防篡改？">3、区块数据的数据结构如果是数组的话，如何做到防篡改？</h2><p>答：暂时无法回答此问题，待完成。</p><h2 id="4、主节点是干什么的？主节点可以交易吗？主节点和普通的peer节点有什么不一样？">4、主节点是干什么的？主节点可以交易吗？主节点和普通的peer节点有什么不一样？</h2><p>答：所谓的主节点应该是Order，目前了解到的只是负责交易的排序以及信息的转发。更多内容待学习。</p><h2 id="5、链码是不是就是智能合约？">5、链码是不是就是智能合约？</h2><p>答：链码就是智能合约，只有调用智能合约才可以更改channel上的账本。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hyberledger-Fabric学习总结</title>
      <link href="2024/11/22/blockchain/fabric/Hyberledger-Fabric%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>2024/11/22/blockchain/fabric/Hyberledger-Fabric%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/how_to/Hyperledger-Fabric%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/">Hyperledger-Fabric开发环境准备</a></p><p><a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/how_to/Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E4%BD%BF%E7%94%A8/">Fabric测试网络使用</a></p><p><a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/how_to/%E5%B0%86%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%83%A8%E7%BD%B2%E5%88%B0%E9%80%9A%E9%81%93/">将智能合约部署到通道</a></p><p><a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/Frbirc%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/">Frbirc测试环境错误记录</a></p><p><a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/how_to/%E7%BC%96%E5%86%99%E6%82%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAChaincode/">编写您的第一个Chaincode</a></p><p>[通过供应链金融练习Fabric](file://通过供应链金融练习Fabric/summary.md)</p><p>[在Fabric中交易受保护的资产](file://在Fabric中交易受保护的资产.md)</p><p><a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/how_to/%E5%9C%A8Fabric%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%A7%81%E6%9C%89%E6%95%B0%E6%8D%AE/">在Fabric中使用私有数据</a></p><p>[背书策略](file://Endorsement <a href="http://xn--policies-gs0mk433a9wnjop.md">policies背书策略.md</a>)</p><p><a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6API%E5%AD%A6%E4%B9%A0/Fabric%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6API%E5%AD%A6%E4%B9%A0/">Fabric智能合约API学习</a></p><h3 id="资料整理">资料整理</h3><ul><li><p><a href="https://www.hyperledger.org/">hyperledger官网</a></p></li><li><p><a href="https://hyperledgercn.github.io/hyperledgerDocs/">hyperledger中文文档</a></p></li><li><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/">hyperladger英文文档</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hyperledger-Frbirc测试环境错误记录</title>
      <link href="2024/11/22/blockchain/fabric/Frbirc%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
      <url>2024/11/22/blockchain/fabric/Frbirc%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="网络">网络</h2><h3 id="测试网络其中一个组织的peer无法启动">测试网络其中一个组织的peer无法启动</h3><h4 id="错误描述">错误描述</h4><p>在运行<code>./network.sh up</code>时，只启动了一个组织的peer，另一个无法启动。导致在新建channel时报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2021-01-04 10:49:22.575 CST [comm.tls] ClientHandshake -&gt; ERRO 001 Client TLS handshake failed after 2.157125ms with error: EOF remoteaddress=[::1]:7051</span><br><span class="line">2021-01-04 10:49:23.582 CST [comm.tls] ClientHandshake -&gt; ERRO 002 Client TLS handshake failed after 3.12316ms with error: EOF remoteaddress=[::1]:7051</span><br><span class="line">2021-01-04 10:49:25.157 CST [comm.tls] ClientHandshake -&gt; ERRO 003 Client TLS handshake failed after 4.29759ms with error: EOF remoteaddress=[::1]:7051</span><br><span class="line">Error: error getting endorser client for channel: endorser client failed to connect to localhost:7051: failed to create new connection: context deadline exceeded</span><br><span class="line">After 5 attempts, peer0.org1 has failed to join channel &#x27;mychannel&#x27;</span><br><span class="line">Create channel failed</span><br></pre></td></tr></table></figure><p>因为这个问题导致的链码无法部署：</p><h3 id></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">(base) apple@WHOAMIdeMacBook-Pro:~/code/open-source/blockchain/hyperledger/fabric-samples/test-network$     ./network.sh deployCC</span><br><span class="line">deploying chaincode on channel &#x27;mychannel&#x27;</span><br><span class="line">executing with the following</span><br><span class="line">- CHANNEL_NAME: mychannel</span><br><span class="line">- CC_NAME: basic</span><br><span class="line">- CC_SRC_PATH: NA</span><br><span class="line">- CC_SRC_LANGUAGE: go</span><br><span class="line">- CC_VERSION: 1.0</span><br><span class="line">- CC_SEQUENCE: 1</span><br><span class="line">- CC_END_POLICY: NA</span><br><span class="line">- CC_COLL_CONFIG: NA</span><br><span class="line">- CC_INIT_FCN: NA</span><br><span class="line">- DELAY: 3</span><br><span class="line">- MAX_RETRY: 5</span><br><span class="line">- VERBOSE: false</span><br><span class="line">Determining the path to the chaincode</span><br><span class="line">asset-transfer-basic</span><br><span class="line">Vendoring Go dependencies at ../asset-transfer-basic/chaincode-go/</span><br><span class="line">~/code/open-source/blockchain/hyperledger/fabric-samples/asset-transfer-basic/chaincode-go ~/code/open-source/blockchain/hyperledger/fabric-samples/test-network</span><br><span class="line">~/code/open-source/blockchain/hyperledger/fabric-samples/test-network</span><br><span class="line">Finished vendoring Go dependencies</span><br><span class="line">+ peer lifecycle chaincode package basic.tar.gz --path ../asset-transfer-basic/chaincode-go/ --lang golang --label basic_1.0</span><br><span class="line">+ res=0</span><br><span class="line">Chaincode is packaged</span><br><span class="line">Installing chaincode on peer0.org1...</span><br><span class="line">Using organization 1</span><br><span class="line">+ peer lifecycle chaincode install basic.tar.gz</span><br><span class="line">+ res=1</span><br><span class="line">Error: failed to retrieve endorser client for install: endorser client failed to connect to localhost:7051: failed to create new connection: context deadline exceeded</span><br><span class="line">Usage:</span><br><span class="line">  peer lifecycle chaincode install [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --connectionProfile string       The fully qualified path to the connection profile that provides the necessary connection information for the network. Note: currently only supported for providing peer connection information</span><br><span class="line">  -h, --help                           help for install</span><br><span class="line">      --peerAddresses stringArray      The addresses of the peers to connect to</span><br><span class="line">      --tlsRootCertFiles stringArray   If TLS is enabled, the paths to the TLS root cert files of the peers to connect to. The order and number of certs specified should match the --peerAddresses flag</span><br><span class="line"></span><br><span class="line">Global Flags:</span><br><span class="line">      --cafile string                       Path to file containing PEM-encoded trusted certificate(s) for the ordering endpoint</span><br><span class="line">      --certfile string                     Path to file containing PEM-encoded X509 public key to use for mutual TLS communication with the orderer endpoint</span><br><span class="line">      --clientauth                          Use mutual TLS when communicating with the orderer endpoint</span><br><span class="line">      --connTimeout duration                Timeout for client to connect (default 3s)</span><br><span class="line">      --keyfile string                      Path to file containing PEM-encoded private key to use for mutual TLS communication with the orderer endpoint</span><br><span class="line">  -o, --orderer string                      Ordering service endpoint</span><br><span class="line">      --ordererTLSHostnameOverride string   The hostname override to use when validating the TLS connection to the orderer</span><br><span class="line">      --tls                                 Use TLS when communicating with the orderer endpoint</span><br><span class="line">      --tlsHandshakeTimeShift duration      The amount of time to shift backwards for certificate expiration checks during TLS handshakes with the orderer endpoint</span><br><span class="line"></span><br><span class="line">Chaincode installation on peer0.org1 has failed</span><br><span class="line">Deploying chaincode failed</span><br></pre></td></tr></table></figure><h4 id="错误原因和解决方案">错误原因和解决方案</h4><p>可能是因为<code>bin</code>和<code>config</code>目录中的版本与启动时指定的版本不一致，<code>./network.sh up</code>命令使用的应该是最新的版本，确认<code>bin</code>和<code>config</code>目录下的也应该是最新的版本。可以重新替换这两个目录的代码。</p><h2 id="链码">链码</h2><h3 id="调用链码">调用链码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:8050 --ordererTLSHostnameOverride orderer.supply.com --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem -C coreandfirstchannel -n supply --peerAddresses localhost:8051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/core.supply.com/peers/peer0.core.supply.com/tls/ca.crt --peerAddresses localhost:8053 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/f1.supply.com/peers/peer0.f1.supply.com/tls/ca.crt -c &#x27;&#123;&quot;function&quot;:&quot;IssueVoucher&quot;,&quot;Args&quot;:[&quot;asset001&quot;, &quot;100&quot;, &quot;一级供应商&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>成功信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-12-28 18:37:54.285 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><p><strong>错误信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: could not assemble transaction: proposal response was not successful, error code 500, msg Incorrect number of params. Expected 2, received 1 - proposal response: version:1 response:&lt;status:200 &gt; payload:&quot;\n \177\017\350[\344G6\010V\331\332\377\354\216&amp;\035\317&amp;\251[N`\023\036\033\237\237A\005\3670\260\022\266\002\n\237\002\0227\n\n_lifecycle\022)\n&#x27;\n!namespaces/fields/supply/Sequence\022\002\010\016\022\343\001\n\006supply\022\330\001\n\003\n\0011\032\320\001\n\0011\032\312\001&#123;\&quot;ID\&quot;:\&quot;1\&quot;,\&quot;issuer\&quot;:\&quot;\346\240\270\345\277\203\344\274\201\344\270\232\&quot;,\&quot;owner\&quot;:\&quot;\346\240\270\345\277\203\344\274\201\344\270\232\&quot;,\&quot;amount\&quot;:100,\&quot;createDate\&quot;:\&quot;2020-12-28T10:02:30.578872398Z\&quot;,\&quot;endDate\&quot;:\&quot;2021-06-28T10:02:30.578872527Z\&quot;,\&quot;contractHash\&quot;:\&quot;test\&quot;,\&quot;invoiceHash\&quot;:\&quot;test\&quot;&#125;\032\003\010\310\001\&quot;\r\022\006supply\032\0033.0&quot; endorsement:&lt;endorser:&quot;\n\016GylCoreOrg1MSP\022\222\006-----BEGIN CERTIFICATE-----\nMIICFjCCAbygAwIBAgIQU43L5gjtXO+uCpRP2jG2AjAKBggqhkjOPQQDAjBxMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzEYMBYGA1UEChMPY29yZS5zdXBwbHkuY29tMRswGQYDVQQDExJjYS5j\nb3JlLnN1cHBseS5jb20wHhcNMjAxMjI1MDkxNzAwWhcNMzAxMjIzMDkxNzAwWjBa\nMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2Fu\nIEZyYW5jaXNjbzEeMBwGA1UEAxMVcGVlcjAuY29yZS5zdXBwbHkuY29tMFkwEwYH\nKoZIzj0CAQYIKoZIzj0DAQcDQgAErf3R+7XpNQpmTsMO+iM4WS7IrOoafiPbAS7Q\nbuFFR3Qs4riIczgSmjh9rOA6I1q2q0CstLhfWDbqpf+8fXPUlKNNMEswDgYDVR0P\nAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwKwYDVR0jBCQwIoAguznqsTisa64dNvOR\nvPwP0KGklWohNpbSe7VgIghx4L8wCgYIKoZIzj0EAwIDSAAwRQIhALIw1VMzezCg\n9LONbO4+V+weY42HQLbShkTP/gCFnGRYAiARyLLSDJIC2wwzSvOHNdm+aDRtbqGC\nNJenP9hmEbYsTw==\n-----END CERTIFICATE-----\n&quot; signature:&quot;0E\002!\000\251\370K6S\020\373\242\321\000\211\312\0001\333\365&gt;\314\324\231\020&gt;u;+\243\303dD\023\221\237\002 z \224\236R\355Z\251\202\363\035\304\365\212\277\235\375?\376\030\371\236\220\354iG6\244\334M\315\331&quot; &gt;</span><br></pre></td></tr></table></figure><p>原因是因为下图，只有一个组织的链码更新到了最新的版本。</p><p>![截屏2020-12-28 18.03.06](/Users/apple/Desktop/截屏2020-12-28 18.03.06.png)</p><p>**解决方案：**原因是因为设置环境变量<code>CC_PACKAGE_ID</code>时只设置了一个组织的peer，导致旧的环境变量还在生效，重新操作一遍问题解决。</p><h3 id="调用chaincode时报错VSCC-error如下：">调用chaincode时报错VSCC error如下：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2021-01-07 06:44:40.479 UTC [vscc] Validate -&gt; ERRO 62f VSCC error: stateBasedValidator.Validate failed, err validation of endorsement policy for chaincode secured_supply in tx 12:0 failed: implicit policy evaluation failed - 1 sub-policies were satisfied, but this policy requires 3 of the &#x27;Endorsement&#x27; sub-policies to be satisfied</span><br><span class="line">2021-01-07 06:44:40.479 UTC [committer.txvalidator] validateTx -&gt; ERRO 630 Dispatch for transaction txId = 101fe5e0aaaafbabcf31a5ce66fa48b92ab834456ba73cdb29730679bd637847 returned error: validation of endorsement policy for chaincode secured_supply in tx 12:0 failed: implicit policy evaluation failed - 1 sub-policies were satisfied, but this policy requires 3 of the &#x27;Endorsement&#x27; sub-policies to be satisfied</span><br><span class="line">2021-01-07 06:44:40.479 UTC [committer.txvalidator] Validate -&gt; INFO 631 [alljoinchannel] Validated block [12] in 2ms</span><br></pre></td></tr></table></figure><p>错误原因：</p><p>背景是我的测试环境有四个组织安装了相同的链码，链码的背书策略是默认的<code> /Channel/Application/Endorsement</code>所以要求大多数背书，而我只让一个组织签名，所以导致错误。</p><h3 id="查询chaincode是否可以被提交时报错">查询chaincode是否可以被提交时报错</h3><p>再所有的组织都批准了链码之后，查询批准结果返回的全部是false。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name secured_supply --version 2.0 --sequence 2 --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br><span class="line">&#123;</span><br><span class="line">&quot;approvals&quot;: &#123;</span><br><span class="line">&quot;GylCoreOrg1MSP&quot;: false,</span><br><span class="line">&quot;GylFOrg1MSP&quot;: false,</span><br><span class="line">&quot;GylSOrg1MSP&quot;: false,</span><br><span class="line">&quot;GylSOrg2MSP&quot;: false</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>错误原因及解决方案：</strong></p><p>因为批准的时候制定了签名策略，但是查询的时候没有指定；在查询时指定背书策略即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(base) w:supply-finance apple$ peer lifecycle chaincode checkcommitreadiness --channelID alljoinchannel --name secured_supply --version 2.0 --sequence 2 --signature-policy &quot;OR(&#x27;GylCoreOrg1MSP.peer&#x27;,&#x27;GylFOrg1MSP.peer&#x27;,&#x27;GylSOrg1MSP.peer&#x27;,&#x27;GylSOrg2MSP.peer&#x27;)&quot; --tls --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/supply.com/orderers/orderer.supply.com/msp/tlscacerts/tlsca.supply.com-cert.pem --output json</span><br><span class="line">&#123;</span><br><span class="line">&quot;approvals&quot;: &#123;</span><br><span class="line">&quot;GylCoreOrg1MSP&quot;: true,</span><br><span class="line">&quot;GylFOrg1MSP&quot;: true,</span><br><span class="line">&quot;GylSOrg1MSP&quot;: true,</span><br><span class="line">&quot;GylSOrg2MSP&quot;: true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="signature-set-did-not-satisfy-policy-签名集合与策略不一致">signature set did not satisfy policy 签名集合与策略不一致</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2021-01-05 09:40:29.461 UTC [vscc] Validate -&gt; ERRO 3212 VSCC error: stateBasedValidator.Validate failed, err validation of key asset001 (coll&#x27;&#x27;:ns&#x27;secured_supply&#x27;) in tx 59:0 failed: signature set did not satisfy policy</span><br><span class="line">2021-01-05 09:40:29.461 UTC [committer.txvalidator] validateTx -&gt; ERRO 3213 Dispatch for transaction txId = 7d13143d4a24fe370528b0e47e6e8a71d7a8b660798c424769a57b67a9cb69ae returned error: validation of key asset001 (coll&#x27;&#x27;:ns&#x27;secured_supply&#x27;) in tx 59:0 failed: signature set did not satisfy policy</span><br></pre></td></tr></table></figure><p>又遇到了签名和背书策略不一致的问题。</p><p><a href="https://cloud.ibm.com/docs/blockchain-sw?topic=blockchain-sw-ibp-v2-troubleshooting">Troubleshooting</a>网站</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Why are my transactions returning an endorsement policy error: signature set did not satisfy policy?</span><br><span class="line">问题情况</span><br><span class="line">When I invoke a smart contract to submit a transaction, the transaction returns the following endorsement policy failure:</span><br><span class="line"></span><br><span class="line">returned error: VSCC error: endorsement policy failure, err: signature set did not satisfy policy</span><br><span class="line">问题原因</span><br><span class="line">If you have recently joined a channel and installed the smart contract, this error occurs if you have not added your organization to the endorsement policy. Because your organization is not on the list of organizations who can endorse a transaction from the smart contract, the endorsement from your peers is rejected by the channel. If you encounter this problem, you can change the endorsement policy by upgrading the smart contract. For more information, see Specifying an endorsement policy and Upgrading a smart contract.</span><br></pre></td></tr></table></figure><h4 id="错误原因一级解决方案">错误原因一级解决方案</h4><p>这个错误的背景是channel、chaincode和key的背书策略都不一样，具体如下：</p><ul><li>channel：默认的，需要大多数签名</li><li>chaincode：指定了OR(‘GylCoreOrg1MSP.member’,‘GylFOrg1MSP.member’,‘GylSOrg1MSP.member’,‘GylSOrg2MSP.member’)</li><li>key：设置了SetStateValidationParameter，只需要拥有者的签名</li></ul><p>具体的解决方案需要确认链码的编写是否有问题。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Geth源码学习之block</title>
      <link href="2024/11/22/blockchain/ethereum/source_code/Geth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8Bblock/"/>
      <url>2024/11/22/blockchain/ethereum/source_code/Geth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8Bblock/</url>
      
        <content type="html"><![CDATA[<h3 id="学习github-com-ethereum-go-ethereum-core-types-block-go源码Version-1-10-2-unstable">学习<code>github.com/ethereum/go-ethereum/core/types.block.go</code>源码<code>Version: 1.10.2-unstable</code>:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2014 The go-ethereum Authors</span></span><br><span class="line"><span class="comment">// This file is part of the go-ethereum library.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The go-ethereum library is free software: you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">// it under the terms of the GNU Lesser General Public License as published by</span></span><br><span class="line"><span class="comment">// the Free Software Foundation, either version 3 of the License, or</span></span><br><span class="line"><span class="comment">// (at your option) any later version.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The go-ethereum library is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span></span><br><span class="line"><span class="comment">// GNU Lesser General Public License for more details.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// You should have received a copy of the GNU Lesser General Public License</span></span><br><span class="line"><span class="comment">// along with the go-ethereum library. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Package types contains data types related to Ethereum consensus.</span></span><br><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/binary&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;math/big&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"><span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/ethereum/go-ethereum/common&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/ethereum/go-ethereum/common/hexutil&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/ethereum/go-ethereum/rlp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">EmptyRootHash  = common.HexToHash(<span class="string">&quot;56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;</span>)</span><br><span class="line">EmptyUncleHash = rlpHash([]*Header(<span class="literal">nil</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// A BlockNonce is a 64-bit hash which proves (combined with the</span></span><br><span class="line"><span class="comment">// mix-hash) that a sufficient amount of computation has been carried</span></span><br><span class="line"><span class="comment">// out on a block.</span></span><br><span class="line"><span class="keyword">type</span> BlockNonce [<span class="number">8</span>]<span class="keyword">byte</span>  <span class="comment">// 挖矿就是找这个nonce，nonce是一个64位的数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// EncodeNonce converts the given integer to a block nonce.</span></span><br><span class="line"><span class="comment">// 把十进制的数字i转换成BlockNonce</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EncodeNonce</span><span class="params">(i <span class="keyword">uint64</span>)</span> <span class="title">BlockNonce</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> n BlockNonce</span><br><span class="line">binary.BigEndian.PutUint64(n[:], i)</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uint64 returns the integer value of a block nonce.</span></span><br><span class="line"><span class="comment">// 与EncodeNonce相反，把BlockNonce转换成十进制数字</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n BlockNonce)</span> <span class="title">Uint64</span><span class="params">()</span> <span class="title">uint64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> binary.BigEndian.Uint64(n[:])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MarshalText encodes n as a hex string with 0x prefix.</span></span><br><span class="line"><span class="comment">// 返回一个带有0x前缀的十六进制的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n BlockNonce)</span> <span class="title">MarshalText</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> hexutil.Bytes(n[:]).MarshalText()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UnmarshalText implements encoding.TextUnmarshaler.</span></span><br><span class="line"><span class="comment">// 把一个带有0x前缀的十六进制字符串赋值给n</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *BlockNonce)</span> <span class="title">UnmarshalText</span><span class="params">(input []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> hexutil.UnmarshalFixedText(<span class="string">&quot;BlockNonce&quot;</span>, input, n[:])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:generate gencodec -type Header -field-override headerMarshaling -out gen_header_json.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Header represents a block header in the Ethereum blockchain.</span></span><br><span class="line"><span class="comment">// 区块的头</span></span><br><span class="line"><span class="keyword">type</span> Header <span class="keyword">struct</span> &#123;</span><br><span class="line">ParentHash  common.Hash    <span class="string">`json:&quot;parentHash&quot;       gencodec:&quot;required&quot;`</span> <span class="comment">// 父区块的hash</span></span><br><span class="line">UncleHash   common.Hash    <span class="string">`json:&quot;sha3Uncles&quot;       gencodec:&quot;required&quot;`</span> <span class="comment">// 叔区块数组的hash</span></span><br><span class="line">Coinbase    common.Address <span class="string">`json:&quot;miner&quot;            gencodec:&quot;required&quot;`</span> <span class="comment">// 谁挖出的此块</span></span><br><span class="line">Root        common.Hash    <span class="string">`json:&quot;stateRoot&quot;        gencodec:&quot;required&quot;`</span> <span class="comment">//</span></span><br><span class="line">TxHash      common.Hash    <span class="string">`json:&quot;transactionsRoot&quot; gencodec:&quot;required&quot;`</span> <span class="comment">// 交易的hash，使用mpt结构的交易的根hash</span></span><br><span class="line">ReceiptHash common.Hash    <span class="string">`json:&quot;receiptsRoot&quot;     gencodec:&quot;required&quot;`</span> <span class="comment">// 回执（交易响应）的hash，使用mpt结构的回执的根hash</span></span><br><span class="line">Bloom       Bloom          <span class="string">`json:&quot;logsBloom&quot;        gencodec:&quot;required&quot;`</span> <span class="comment">// 使用交易回执算出的Bloom过滤器</span></span><br><span class="line">Difficulty  *big.Int       <span class="string">`json:&quot;difficulty&quot;       gencodec:&quot;required&quot;`</span> <span class="comment">// 当前区块的难度</span></span><br><span class="line">Number      *big.Int       <span class="string">`json:&quot;number&quot;           gencodec:&quot;required&quot;`</span> <span class="comment">// 当前区块的高度</span></span><br><span class="line">GasLimit    <span class="keyword">uint64</span>         <span class="string">`json:&quot;gasLimit&quot;         gencodec:&quot;required&quot;`</span> <span class="comment">// 当前区块的总的gas上限</span></span><br><span class="line">GasUsed     <span class="keyword">uint64</span>         <span class="string">`json:&quot;gasUsed&quot;          gencodec:&quot;required&quot;`</span> <span class="comment">// 当前区块的总共使用的gas</span></span><br><span class="line">Time        <span class="keyword">uint64</span>         <span class="string">`json:&quot;timestamp&quot;        gencodec:&quot;required&quot;`</span> <span class="comment">// 当前区块的生成时间</span></span><br><span class="line">Extra       []<span class="keyword">byte</span>         <span class="string">`json:&quot;extraData&quot;        gencodec:&quot;required&quot;`</span> <span class="comment">// 额外的数据</span></span><br><span class="line">MixDigest   common.Hash    <span class="string">`json:&quot;mixHash&quot;`</span> <span class="comment">// 使用header中的上面的字段算出来的ethash和nonce算出来的hash值</span></span><br><span class="line">Nonce       BlockNonce     <span class="string">`json:&quot;nonce&quot;`</span> <span class="comment">// 当前区块的nonce</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// field type overrides for gencodec</span></span><br><span class="line"><span class="keyword">type</span> headerMarshaling <span class="keyword">struct</span> &#123;</span><br><span class="line">Difficulty *hexutil.Big</span><br><span class="line">Number     *hexutil.Big</span><br><span class="line">GasLimit   hexutil.Uint64</span><br><span class="line">GasUsed    hexutil.Uint64</span><br><span class="line">Time       hexutil.Uint64</span><br><span class="line">Extra      hexutil.Bytes</span><br><span class="line">Hash       common.Hash <span class="string">`json:&quot;hash&quot;`</span> <span class="comment">// adds call to Hash() in MarshalJSON</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hash returns the block hash of the header, which is simply the keccak256 hash of its</span></span><br><span class="line"><span class="comment">// RLP encoding.</span></span><br><span class="line"><span class="comment">// 计算区块头h的hash，使用keccak256hash算法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Header)</span> <span class="title">Hash</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> rlpHash(h)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> headerSize = common.StorageSize(reflect.TypeOf(Header&#123;&#125;).Size())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Size returns the approximate memory used by all internal contents. It is used</span></span><br><span class="line"><span class="comment">// to approximate and limit the memory consumption of various caches.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Header)</span> <span class="title">Size</span><span class="params">()</span> <span class="title">common</span>.<span class="title">StorageSize</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> headerSize + common.StorageSize(<span class="built_in">len</span>(h.Extra)+(h.Difficulty.BitLen()+h.Number.BitLen())/<span class="number">8</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SanityCheck checks a few basic things -- these checks are way beyond what</span></span><br><span class="line"><span class="comment">// any &#x27;sane&#x27; production values should hold, and can mainly be used to prevent</span></span><br><span class="line"><span class="comment">// that the unbounded fields are stuffed with junk data to add processing</span></span><br><span class="line"><span class="comment">// overhead</span></span><br><span class="line"><span class="comment">// 检查区块头的字段</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Header)</span> <span class="title">SanityCheck</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> h.Number != <span class="literal">nil</span> &amp;&amp; !h.Number.IsUint64() &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;too large block number: bitlen %d&quot;</span>, h.Number.BitLen())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> h.Difficulty != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> diffLen := h.Difficulty.BitLen(); diffLen &gt; <span class="number">80</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;too large block difficulty: bitlen %d&quot;</span>, diffLen)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> eLen := <span class="built_in">len</span>(h.Extra); eLen &gt; <span class="number">100</span>*<span class="number">1024</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;too large block extradata: size %d&quot;</span>, eLen)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EmptyBody returns true if there is no additional &#x27;body&#x27; to complete the header</span></span><br><span class="line"><span class="comment">// that is: no transactions and no uncles.</span></span><br><span class="line"><span class="comment">// 检查是否有额外的body数据，没有交易并且没有数块即代表为没有body</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Header)</span> <span class="title">EmptyBody</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> h.TxHash == EmptyRootHash &amp;&amp; h.UncleHash == EmptyUncleHash</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EmptyReceipts returns true if there are no receipts for this header/block.</span></span><br><span class="line"><span class="comment">// 检查回执是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Header)</span> <span class="title">EmptyReceipts</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> h.ReceiptHash == EmptyRootHash</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Body is a simple (mutable, non-safe) data container for storing and moving</span></span><br><span class="line"><span class="comment">// a block&#x27;s data contents (transactions and uncles) together.</span></span><br><span class="line"><span class="comment">// 区块中的body信息，包括交易列表和叔块header列表</span></span><br><span class="line"><span class="keyword">type</span> Body <span class="keyword">struct</span> &#123;</span><br><span class="line">Transactions []*Transaction</span><br><span class="line">Uncles       []*Header</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Block represents an entire block in the Ethereum blockchain.</span></span><br><span class="line"><span class="comment">// 区块</span></span><br><span class="line"><span class="keyword">type</span> Block <span class="keyword">struct</span> &#123;</span><br><span class="line">header       *Header <span class="comment">// 块头</span></span><br><span class="line">uncles       []*Header <span class="comment">// 数块头</span></span><br><span class="line">transactions Transactions <span class="comment">// 交易列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// caches</span></span><br><span class="line">hash atomic.Value <span class="comment">// 区块hash</span></span><br><span class="line">size atomic.Value <span class="comment">// 区块大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Td is used by package core to store the total difficulty</span></span><br><span class="line"><span class="comment">// of the chain up to and including the block.</span></span><br><span class="line">td *big.Int <span class="comment">// total difficulty 当前网络的总难度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// These fields are used by package eth to track</span></span><br><span class="line"><span class="comment">// inter-peer block relay.</span></span><br><span class="line">ReceivedAt   time.Time <span class="comment">// 接收到的时间</span></span><br><span class="line">ReceivedFrom <span class="keyword">interface</span>&#123;&#125; <span class="comment">// 提交区块的Peer</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeprecatedTd is an old relic for extracting the TD of a block. It is in the</span></span><br><span class="line"><span class="comment">// code solely to facilitate upgrading the database from the old format to the</span></span><br><span class="line"><span class="comment">// new, after which it should be deleted. Do not use!</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">DeprecatedTd</span><span class="params">()</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> b.td</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [deprecated by eth/63]</span></span><br><span class="line"><span class="comment">// StorageBlock defines the RLP encoding of a Block stored in the</span></span><br><span class="line"><span class="comment">// state database. The StorageBlock encoding contains fields that</span></span><br><span class="line"><span class="comment">// would otherwise need to be recomputed.</span></span><br><span class="line"><span class="keyword">type</span> StorageBlock Block</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;external&quot; block encoding. used for eth protocol, etc.</span></span><br><span class="line"><span class="keyword">type</span> extblock <span class="keyword">struct</span> &#123;</span><br><span class="line">Header *Header</span><br><span class="line">Txs    []*Transaction</span><br><span class="line">Uncles []*Header</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [deprecated by eth/63]</span></span><br><span class="line"><span class="comment">// &quot;storage&quot; block encoding. used for database.</span></span><br><span class="line"><span class="keyword">type</span> storageblock <span class="keyword">struct</span> &#123;</span><br><span class="line">Header *Header</span><br><span class="line">Txs    []*Transaction</span><br><span class="line">Uncles []*Header</span><br><span class="line">TD     *big.Int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewBlock creates a new block. The input data is copied,</span></span><br><span class="line"><span class="comment">// changes to header and to the field values will not affect the</span></span><br><span class="line"><span class="comment">// block.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The values of TxHash, UncleHash, ReceiptHash and Bloom in header</span></span><br><span class="line"><span class="comment">// are ignored and set to values derived from the given txs, uncles</span></span><br><span class="line"><span class="comment">// and receipts.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBlock</span><span class="params">(header *Header, txs []*Transaction, uncles []*Header, receipts []*Receipt, hasher TrieHasher)</span> *<span class="title">Block</span></span> &#123;</span><br><span class="line">b := &amp;Block&#123;header: CopyHeader(header), td: <span class="built_in">new</span>(big.Int)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> panic if len(txs) != len(receipts)</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(txs) == <span class="number">0</span> &#123;</span><br><span class="line">b.header.TxHash = EmptyRootHash</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">b.header.TxHash = DeriveSha(Transactions(txs), hasher)</span><br><span class="line">b.transactions = <span class="built_in">make</span>(Transactions, <span class="built_in">len</span>(txs))</span><br><span class="line"><span class="built_in">copy</span>(b.transactions, txs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(receipts) == <span class="number">0</span> &#123;</span><br><span class="line">b.header.ReceiptHash = EmptyRootHash</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">b.header.ReceiptHash = DeriveSha(Receipts(receipts), hasher)</span><br><span class="line">b.header.Bloom = CreateBloom(receipts)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(uncles) == <span class="number">0</span> &#123;</span><br><span class="line">b.header.UncleHash = EmptyUncleHash</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">b.header.UncleHash = CalcUncleHash(uncles)</span><br><span class="line">b.uncles = <span class="built_in">make</span>([]*Header, <span class="built_in">len</span>(uncles))</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> uncles &#123;</span><br><span class="line">b.uncles[i] = CopyHeader(uncles[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewBlockWithHeader creates a block with the given header data. The</span></span><br><span class="line"><span class="comment">// header data is copied, changes to header and to the field values</span></span><br><span class="line"><span class="comment">// will not affect the block.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBlockWithHeader</span><span class="params">(header *Header)</span> *<span class="title">Block</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Block&#123;header: CopyHeader(header)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CopyHeader creates a deep copy of a block header to prevent side effects from</span></span><br><span class="line"><span class="comment">// modifying a header variable.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CopyHeader</span><span class="params">(h *Header)</span> *<span class="title">Header</span></span> &#123;</span><br><span class="line">cpy := *h</span><br><span class="line"><span class="keyword">if</span> cpy.Difficulty = <span class="built_in">new</span>(big.Int); h.Difficulty != <span class="literal">nil</span> &#123;</span><br><span class="line">cpy.Difficulty.Set(h.Difficulty)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> cpy.Number = <span class="built_in">new</span>(big.Int); h.Number != <span class="literal">nil</span> &#123;</span><br><span class="line">cpy.Number.Set(h.Number)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(h.Extra) &gt; <span class="number">0</span> &#123;</span><br><span class="line">cpy.Extra = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(h.Extra))</span><br><span class="line"><span class="built_in">copy</span>(cpy.Extra, h.Extra)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;cpy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DecodeRLP decodes the Ethereum</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">DecodeRLP</span><span class="params">(s *rlp.Stream)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> eb extblock</span><br><span class="line">_, size, _ := s.Kind()</span><br><span class="line"><span class="keyword">if</span> err := s.Decode(&amp;eb); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">b.header, b.uncles, b.transactions = eb.Header, eb.Uncles, eb.Txs</span><br><span class="line">b.size.Store(common.StorageSize(rlp.ListSize(size)))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EncodeRLP serializes b into the Ethereum RLP block format.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">EncodeRLP</span><span class="params">(w io.Writer)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> rlp.Encode(w, extblock&#123;</span><br><span class="line">Header: b.header,</span><br><span class="line">Txs:    b.transactions,</span><br><span class="line">Uncles: b.uncles,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [deprecated by eth/63]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *StorageBlock)</span> <span class="title">DecodeRLP</span><span class="params">(s *rlp.Stream)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> sb storageblock</span><br><span class="line"><span class="keyword">if</span> err := s.Decode(&amp;sb); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">b.header, b.uncles, b.transactions, b.td = sb.Header, sb.Uncles, sb.Txs, sb.TD</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> copies</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Uncles</span><span class="params">()</span> []*<span class="title">Header</span></span>          &#123; <span class="keyword">return</span> b.uncles &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Transactions</span><span class="params">()</span> <span class="title">Transactions</span></span> &#123; <span class="keyword">return</span> b.transactions &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Transaction</span><span class="params">(hash common.Hash)</span> *<span class="title">Transaction</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, transaction := <span class="keyword">range</span> b.transactions &#123;</span><br><span class="line"><span class="keyword">if</span> transaction.Hash() == hash &#123;</span><br><span class="line"><span class="keyword">return</span> transaction</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Number</span><span class="params">()</span> *<span class="title">big</span>.<span class="title">Int</span></span>     &#123; <span class="keyword">return</span> <span class="built_in">new</span>(big.Int).Set(b.header.Number) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">GasLimit</span><span class="params">()</span> <span class="title">uint64</span></span>     &#123; <span class="keyword">return</span> b.header.GasLimit &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">GasUsed</span><span class="params">()</span> <span class="title">uint64</span></span>      &#123; <span class="keyword">return</span> b.header.GasUsed &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Difficulty</span><span class="params">()</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123; <span class="keyword">return</span> <span class="built_in">new</span>(big.Int).Set(b.header.Difficulty) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Time</span><span class="params">()</span> <span class="title">uint64</span></span>         &#123; <span class="keyword">return</span> b.header.Time &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">NumberU64</span><span class="params">()</span> <span class="title">uint64</span></span>        &#123; <span class="keyword">return</span> b.header.Number.Uint64() &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">MixDigest</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span>   &#123; <span class="keyword">return</span> b.header.MixDigest &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Nonce</span><span class="params">()</span> <span class="title">uint64</span></span>            &#123; <span class="keyword">return</span> binary.BigEndian.Uint64(b.header.Nonce[:]) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Bloom</span><span class="params">()</span> <span class="title">Bloom</span></span>             &#123; <span class="keyword">return</span> b.header.Bloom &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Coinbase</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Address</span></span> &#123; <span class="keyword">return</span> b.header.Coinbase &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Root</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span>        &#123; <span class="keyword">return</span> b.header.Root &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">ParentHash</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span>  &#123; <span class="keyword">return</span> b.header.ParentHash &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">TxHash</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span>      &#123; <span class="keyword">return</span> b.header.TxHash &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">ReceiptHash</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span> &#123; <span class="keyword">return</span> b.header.ReceiptHash &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">UncleHash</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span>   &#123; <span class="keyword">return</span> b.header.UncleHash &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Extra</span><span class="params">()</span> []<span class="title">byte</span></span>            &#123; <span class="keyword">return</span> common.CopyBytes(b.header.Extra) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Header</span><span class="params">()</span> *<span class="title">Header</span></span> &#123; <span class="keyword">return</span> CopyHeader(b.header) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Body returns the non-header content of the block.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Body</span><span class="params">()</span> *<span class="title">Body</span></span> &#123; <span class="keyword">return</span> &amp;Body&#123;b.transactions, b.uncles&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Size returns the true RLP encoded storage size of the block, either by encoding</span></span><br><span class="line"><span class="comment">// and returning it, or returning a previsouly cached value.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Size</span><span class="params">()</span> <span class="title">common</span>.<span class="title">StorageSize</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> size := b.size.Load(); size != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> size.(common.StorageSize)</span><br><span class="line">&#125;</span><br><span class="line">c := writeCounter(<span class="number">0</span>)</span><br><span class="line">rlp.Encode(&amp;c, b)</span><br><span class="line">b.size.Store(common.StorageSize(c))</span><br><span class="line"><span class="keyword">return</span> common.StorageSize(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SanityCheck can be used to prevent that unbounded fields are</span></span><br><span class="line"><span class="comment">// stuffed with junk data to add processing overhead</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">SanityCheck</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> b.header.SanityCheck()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> writeCounter common.StorageSize</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *writeCounter)</span> <span class="title">Write</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">*c += writeCounter(<span class="built_in">len</span>(b))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(b), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CalcUncleHash</span><span class="params">(uncles []*Header)</span> <span class="title">common</span>.<span class="title">Hash</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(uncles) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> EmptyUncleHash</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rlpHash(uncles)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WithSeal returns a new block with the data from b but the header replaced with</span></span><br><span class="line"><span class="comment">// the sealed one.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">WithSeal</span><span class="params">(header *Header)</span> *<span class="title">Block</span></span> &#123;</span><br><span class="line">cpy := *header</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;Block&#123;</span><br><span class="line">header:       &amp;cpy,</span><br><span class="line">transactions: b.transactions,</span><br><span class="line">uncles:       b.uncles,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WithBody returns a new block with the given transaction and uncle contents.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">WithBody</span><span class="params">(transactions []*Transaction, uncles []*Header)</span> *<span class="title">Block</span></span> &#123;</span><br><span class="line">block := &amp;Block&#123;</span><br><span class="line">header:       CopyHeader(b.header),</span><br><span class="line">transactions: <span class="built_in">make</span>([]*Transaction, <span class="built_in">len</span>(transactions)),</span><br><span class="line">uncles:       <span class="built_in">make</span>([]*Header, <span class="built_in">len</span>(uncles)),</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">copy</span>(block.transactions, transactions)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> uncles &#123;</span><br><span class="line">block.uncles[i] = CopyHeader(uncles[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hash returns the keccak256 hash of b&#x27;s header.</span></span><br><span class="line"><span class="comment">// The hash is computed on the first call and cached thereafter.</span></span><br><span class="line"><span class="comment">// 获取当前区块的hash，如果已经有了直接返回，否则计算当前区块的hash再返回</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">Hash</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> hash := b.hash.Load(); hash != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> hash.(common.Hash)</span><br><span class="line">&#125;</span><br><span class="line">v := b.header.Hash()</span><br><span class="line">b.hash.Store(v)</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Blocks []*Block</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对比etherscan-io的显示的Block字段：">对比etherscan.io的显示的Block字段：</h3><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/etherscan_block.png" alt="etherscan_block"></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> source_code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> swarm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Geth源码学习之共识与奖励</title>
      <link href="2024/11/22/blockchain/ethereum/source_code/Geth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%85%B1%E8%AF%86%E4%B8%8E%E5%A5%96%E5%8A%B1/"/>
      <url>2024/11/22/blockchain/ethereum/source_code/Geth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%85%B1%E8%AF%86%E4%B8%8E%E5%A5%96%E5%8A%B1/</url>
      
        <content type="html"><![CDATA[<h3 id="计算挖矿奖励">计算挖矿奖励</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// AccumulateRewards credits the coinbase of the given block with the mining</span></span><br><span class="line"><span class="comment">// reward. The total reward consists of the static block reward and rewards for</span></span><br><span class="line"><span class="comment">// included uncles. The coinbase of each uncle block is also rewarded.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">accumulateRewards</span><span class="params">(config *params.ChainConfig, state *state.StateDB, header *types.Header, uncles []*types.Header)</span></span> &#123;</span><br><span class="line"><span class="comment">// Select the correct block reward based on chain progression</span></span><br><span class="line"><span class="comment">// 根据不同的阶段，获取静态的区块奖励</span></span><br><span class="line">blockReward := FrontierBlockReward</span><br><span class="line"><span class="keyword">if</span> config.IsByzantium(header.Number) &#123;</span><br><span class="line">blockReward = ByzantiumBlockReward</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> config.IsConstantinople(header.Number) &#123;</span><br><span class="line">blockReward = ConstantinopleBlockReward</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Accumulate the rewards for the miner and any included uncles</span></span><br><span class="line">reward := <span class="built_in">new</span>(big.Int).Set(blockReward)</span><br><span class="line">r := <span class="built_in">new</span>(big.Int)</span><br><span class="line"><span class="keyword">for</span> _, uncle := <span class="keyword">range</span> uncles &#123;</span><br><span class="line">r.Add(uncle.Number, big8) <span class="comment">// r = uncle.Number + 8</span></span><br><span class="line">r.Sub(r, header.Number) <span class="comment">// r = r - header.Number</span></span><br><span class="line">r.Mul(r, blockReward)  <span class="comment">// r = r * blockReward</span></span><br><span class="line">r.Div(r, big8) <span class="comment">// r = r / 8</span></span><br><span class="line">state.AddBalance(uncle.Coinbase, r) <span class="comment">// 挖出叔父区块的miner获得静态的（2个）奖励</span></span><br><span class="line"><span class="comment">//叔父区块number当前区块numberr.Add(uncle.Number, big8)r.Sub(r, header.Number)r.Mul(r, blockReward)r.Div(r, big8)挖出叔父区块的奖励blockReward</span></span><br><span class="line"><span class="comment">//1297141.75八分之七2</span></span><br><span class="line"><span class="comment">//1396121.5八分之六2</span></span><br><span class="line"><span class="comment">//1495101.25八分之五2</span></span><br><span class="line"><span class="comment">//159481八分之四2</span></span><br><span class="line"><span class="comment">//169360.75八分之三2</span></span><br><span class="line"><span class="comment">//179240.5八分之二2</span></span><br><span class="line"><span class="comment">//189120.25八分之一2</span></span><br><span class="line"><span class="comment">//199000八分之零2</span></span><br><span class="line"><span class="comment">//1109-1-2-0.25八分之零2</span></span><br><span class="line"><span class="comment">// 叔块距离当前区块越远，能够得到的奖励越少，最多不超过8个区块</span></span><br><span class="line"><span class="comment">// 不会出现负数的原因应该是在添加叔父区块时有判断，只有距离在8个区块之内的区块才能算是叔父区块，其他的不让添加</span></span><br><span class="line">r.Div(blockReward, big32) <span class="comment">// 当前挖到区块的miner每添加一个叔块获得1/32的静态（2个）的奖励</span></span><br><span class="line">reward.Add(reward, r)</span><br><span class="line">&#125;</span><br><span class="line">state.AddBalance(header.Coinbase, reward)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析源码中叔父区块的挖矿者获得的奖励">解析源码中叔父区块的挖矿者获得的奖励</h4><p>blockReward=2,不会出现负数的原因应该是在添加叔父区块时有判断，只有距离在8个区块之内的区块才能算是叔父区块，其他的不让添加</p><table><thead><tr><th>叔父区块number</th><th>当前区块number</th><th>r.Add(uncle.Number, big8)</th><th>r.Sub(r, header.Number)</th><th>r.Mul(r, blockReward)</th><th>r.Div(r, big8)</th><th>挖出叔父区块的奖励</th><th>blockReward</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>9</td><td>7</td><td>14</td><td>1.75</td><td>八分之七</td><td>2</td></tr><tr><td>1</td><td>3</td><td>9</td><td>6</td><td>12</td><td>1.5</td><td>八分之六</td><td>2</td></tr><tr><td>1</td><td>4</td><td>9</td><td>5</td><td>10</td><td>1.25</td><td>八分之五</td><td>2</td></tr><tr><td>1</td><td>5</td><td>9</td><td>4</td><td>8</td><td>1</td><td>八分之四</td><td>2</td></tr><tr><td>1</td><td>6</td><td>9</td><td>3</td><td>6</td><td>0.75</td><td>八分之三</td><td>2</td></tr><tr><td>1</td><td>7</td><td>9</td><td>2</td><td>4</td><td>0.5</td><td>八分之二</td><td>2</td></tr><tr><td>1</td><td>8</td><td>9</td><td>1</td><td>2</td><td>0.25</td><td>八分之一</td><td>2</td></tr><tr><td>1</td><td>9</td><td>9</td><td>0</td><td>0</td><td>0</td><td>八分之零</td><td>2</td></tr><tr><td>1</td><td>10</td><td>9</td><td>-1</td><td>-2</td><td>-0.25</td><td>八分之零</td><td>2</td></tr></tbody></table><h4 id="块头验证">块头验证</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// VerifyHeader checks whether a header conforms to the consensus rules of the</span></span><br><span class="line"><span class="comment">// stock Ethereum ethash engine.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ethash *Ethash)</span> <span class="title">VerifyHeader</span><span class="params">(chain consensus.ChainHeaderReader, header *types.Header, seal <span class="keyword">bool</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// If we&#x27;re running a full engine faking, accept any input as valid</span></span><br><span class="line"><span class="keyword">if</span> ethash.config.PowMode == ModeFullFake &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Short circuit if the header is known, or its parent not</span></span><br><span class="line">number := header.Number.Uint64()</span><br><span class="line"><span class="comment">// 根据区块号和区块头的hash获取区块信息，只有区块高度为number的区块头的hash等于指定hash才返回数据，否则返回nil</span></span><br><span class="line"><span class="keyword">if</span> chain.GetHeader(header.Hash(), number) != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取父区块，父区块不能为nil</span></span><br><span class="line">parent := chain.GetHeader(header.ParentHash, number<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">if</span> parent == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> consensus.ErrUnknownAncestor</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Sanity checks passed, do a proper verification</span></span><br><span class="line"><span class="keyword">return</span> ethash.verifyHeader(chain, header, parent, <span class="literal">false</span>, seal, time.Now().Unix())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// verifyHeader checks whether a header conforms to the consensus rules of the</span></span><br><span class="line"><span class="comment">// stock Ethereum ethash engine.</span></span><br><span class="line"><span class="comment">// See YP section 4.3.4. &quot;Block Header Validity&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ethash *Ethash)</span> <span class="title">verifyHeader</span><span class="params">(chain consensus.ChainHeaderReader, header, parent *types.Header, uncle <span class="keyword">bool</span>, seal <span class="keyword">bool</span>, unixNow <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// Ensure that the header&#x27;s extra-data section is of a reasonable size</span></span><br><span class="line"><span class="comment">// 块头的扩展数据的字符长度不能超过32</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">uint64</span>(<span class="built_in">len</span>(header.Extra)) &gt; params.MaximumExtraDataSize &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;extra-data too long: %d &gt; %d&quot;</span>, <span class="built_in">len</span>(header.Extra), params.MaximumExtraDataSize)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Verify the header&#x27;s timestamp</span></span><br><span class="line"><span class="keyword">if</span> !uncle &#123;</span><br><span class="line"><span class="comment">// 如果块头的时间超过了当前时间+15秒，抛异常；</span></span><br><span class="line"><span class="keyword">if</span> header.Time &gt; <span class="keyword">uint64</span>(unixNow+allowedFutureBlockTimeSeconds) &#123;</span><br><span class="line"><span class="keyword">return</span> consensus.ErrFutureBlock</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果块头的时间小于父区块的时间，也抛异常</span></span><br><span class="line"><span class="keyword">if</span> header.Time &lt;= parent.Time &#123;</span><br><span class="line"><span class="keyword">return</span> errOlderBlockTime</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Verify the block&#x27;s difficulty based on its timestamp and parent&#x27;s difficulty</span></span><br><span class="line"><span class="comment">// 根据父区块的难度和当前区块的时间获取期望的难度</span></span><br><span class="line">expected := ethash.CalcDifficulty(chain, header.Time, parent)</span><br><span class="line"><span class="comment">// 如果当前区块的难度和计算的难度不一致，则抛异常</span></span><br><span class="line"><span class="keyword">if</span> expected.Cmp(header.Difficulty) != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;invalid difficulty: have %v, want %v&quot;</span>, header.Difficulty, expected)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Verify that the gas limit is &lt;= 2^63-1</span></span><br><span class="line"><span class="comment">// 区块的gas总量不能超过2^63-1</span></span><br><span class="line"><span class="built_in">cap</span> := <span class="keyword">uint64</span>(<span class="number">0x7fffffffffffffff</span>)</span><br><span class="line"><span class="keyword">if</span> header.GasLimit &gt; <span class="built_in">cap</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;invalid gasLimit: have %v, max %v&quot;</span>, header.GasLimit, <span class="built_in">cap</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Verify that the gasUsed is &lt;= gasLimit</span></span><br><span class="line"><span class="comment">// 使用的gas不能超过gas上限</span></span><br><span class="line"><span class="keyword">if</span> header.GasUsed &gt; header.GasLimit &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;invalid gasUsed: have %d, gasLimit %d&quot;</span>, header.GasUsed, header.GasLimit)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Verify that the gas limit remains within allowed bounds</span></span><br><span class="line"><span class="comment">// 当前区块的gas上限与父区块的gas上限相减取绝对值</span></span><br><span class="line">diff := <span class="keyword">int64</span>(parent.GasLimit) - <span class="keyword">int64</span>(header.GasLimit)</span><br><span class="line"><span class="keyword">if</span> diff &lt; <span class="number">0</span> &#123;</span><br><span class="line">diff *= <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">limit := parent.GasLimit / params.GasLimitBoundDivisor</span><br><span class="line"><span class="comment">// 此处的整体意思是每次gas费的上限增加不能超过上一个区块的gas上限的1024分之一；也不能少于区块的gas最小上限5000</span></span><br><span class="line"><span class="comment">// 转账最少都需要21000的gas费，gas费怎么会少于5000呢？</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">uint64</span>(diff) &gt;= limit || header.GasLimit &lt; params.MinGasLimit &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;invalid gas limit: have %d, want %d += %d&quot;</span>, header.GasLimit, parent.GasLimit, limit)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Verify that the block number is parent&#x27;s +1</span></span><br><span class="line"><span class="comment">// 这个校验没有用吧，因为上面的父区块的获取方式是在当前区块高度的基础上-1；所以只要能获取到父区块父区块的高度肯定比当前区块少1</span></span><br><span class="line"><span class="comment">// 因为这个方法中的父区块是传入的，而不是在当前方法查询的，所以有这个判断是没问题的，但是可以把这个放在gasLimit的前面，如果这个父区块不是当前区块的父区块就没有必要验证gasLimit了</span></span><br><span class="line"><span class="keyword">if</span> diff := <span class="built_in">new</span>(big.Int).Sub(header.Number, parent.Number); diff.Cmp(big.NewInt(<span class="number">1</span>)) != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> consensus.ErrInvalidNumber</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Verify the engine specific seal securing the block</span></span><br><span class="line"><span class="keyword">if</span> seal &#123;</span><br><span class="line"><span class="comment">// 验证nonce是否符合难度</span></span><br><span class="line"><span class="keyword">if</span> err := ethash.verifySeal(chain, header, <span class="literal">false</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If all checks passed, validate any special fields for hard forks</span></span><br><span class="line"><span class="keyword">if</span> err := misc.VerifyDAOHeaderExtraData(chain.Config(), header); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := misc.VerifyForkHashes(chain.Config(), header, uncle); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="难度计算">难度计算</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// calcDifficultyByzantium is the difficulty adjustment algorithm. It returns</span></span><br><span class="line"><span class="comment">// the difficulty that a new block should have when created at time given the</span></span><br><span class="line"><span class="comment">// parent block&#x27;s time and difficulty. The calculation uses the Byzantium rules.</span></span><br><span class="line"><span class="comment">// Specification EIP-649: https://eips.ethereum.org/EIPS/eip-649</span></span><br><span class="line"><span class="comment">// 数字3000000是为了计算难度炸弹，目前的区块高度是12184295；2^(12184295-3000000)/100000 = 2^91 = 2.47588e+27！！！</span></span><br><span class="line">calcDifficultyByzantium = makeDifficultyCalculator(big.NewInt(<span class="number">3000000</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// makeDifficultyCalculator creates a difficultyCalculator with the given bomb-delay.</span></span><br><span class="line"><span class="comment">// the difficulty is calculated with Byzantium rules, which differs from Homestead in</span></span><br><span class="line"><span class="comment">// how uncles affect the calculation</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeDifficultyCalculator</span><span class="params">(bombDelay *big.Int)</span> <span class="title">func</span><span class="params">(time <span class="keyword">uint64</span>, parent *types.Header)</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123;</span><br><span class="line"><span class="comment">// Note, the calculations below looks at the parent number, which is 1 below</span></span><br><span class="line"><span class="comment">// the block number. Thus we remove one from the delay given</span></span><br><span class="line">bombDelayFromParent := <span class="built_in">new</span>(big.Int).Sub(bombDelay, big1)</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(time <span class="keyword">uint64</span>, parent *types.Header)</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123;</span><br><span class="line"><span class="comment">// https://github.com/ethereum/EIPs/issues/100.</span></span><br><span class="line"><span class="comment">// algorithm:</span></span><br><span class="line"><span class="comment">// diff = (parent_diff +</span></span><br><span class="line"><span class="comment">//         (parent_diff / 2048 * max((2 if len(parent.uncles) else 1) - ((timestamp - parent.timestamp) // 9), -99))</span></span><br><span class="line"><span class="comment">//        ) + 2^(periodCount - 2)</span></span><br><span class="line"></span><br><span class="line">bigTime := <span class="built_in">new</span>(big.Int).SetUint64(time)</span><br><span class="line">bigParentTime := <span class="built_in">new</span>(big.Int).SetUint64(parent.Time)</span><br><span class="line"></span><br><span class="line"><span class="comment">// holds intermediate values to make the algo easier to read &amp; audit</span></span><br><span class="line">x := <span class="built_in">new</span>(big.Int)</span><br><span class="line">y := <span class="built_in">new</span>(big.Int)</span><br><span class="line"></span><br><span class="line"><span class="comment">// (2 if len(parent_uncles) else 1) - (block_timestamp - parent_timestamp) // 9</span></span><br><span class="line">x.Sub(bigTime, bigParentTime)</span><br><span class="line">x.Div(x, big9)</span><br><span class="line"><span class="keyword">if</span> parent.UncleHash == types.EmptyUncleHash &#123;</span><br><span class="line">x.Sub(big1, x)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">x.Sub(big2, x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// max((2 if len(parent_uncles) else 1) - (block_timestamp - parent_timestamp) // 9, -99)</span></span><br><span class="line"><span class="comment">// 最多减少的难度不能超过99个单元，一个单元 = parent_diff / 2048；即最多减少的难度不能大于99*parent_diff / 2048</span></span><br><span class="line"><span class="keyword">if</span> x.Cmp(bigMinus99) &lt; <span class="number">0</span> &#123;</span><br><span class="line">x.Set(bigMinus99)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// parent_diff + (parent_diff / 2048 * max((2 if len(parent.uncles) else 1) - ((timestamp - parent.timestamp) // 9), -99))</span></span><br><span class="line">y.Div(parent.Difficulty, params.DifficultyBoundDivisor)</span><br><span class="line">x.Mul(y, x)</span><br><span class="line">x.Add(parent.Difficulty, x)</span><br><span class="line"></span><br><span class="line"><span class="comment">// minimum difficulty can ever be (before exponential factor)</span></span><br><span class="line"><span class="comment">// 最小难度不能少于131072，即100000000000000000</span></span><br><span class="line"><span class="keyword">if</span> x.Cmp(params.MinimumDifficulty) &lt; <span class="number">0</span> &#123;</span><br><span class="line">x.Set(params.MinimumDifficulty)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// calculate a fake block number for the ice-age delay</span></span><br><span class="line"><span class="comment">// Specification: https://eips.ethereum.org/EIPS/eip-1234</span></span><br><span class="line"><span class="comment">// 如果已经过了bombDelayFromParent区块高度，则计算直到父区块为止过去了多少个区块了</span></span><br><span class="line">fakeBlockNumber := <span class="built_in">new</span>(big.Int)</span><br><span class="line"><span class="keyword">if</span> parent.Number.Cmp(bombDelayFromParent) &gt;= <span class="number">0</span> &#123;</span><br><span class="line">fakeBlockNumber = fakeBlockNumber.Sub(parent.Number, bombDelayFromParent)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for the exponential factor</span></span><br><span class="line"><span class="comment">// 每隔100000（十万）个区块，periodCount增加1，即每隔十万个区块难度炸弹的难度翻一倍</span></span><br><span class="line">periodCount := fakeBlockNumber</span><br><span class="line">periodCount.Div(periodCount, expDiffPeriod)</span><br><span class="line"></span><br><span class="line"><span class="comment">// the exponential factor, commonly referred to as &quot;the bomb&quot;</span></span><br><span class="line"><span class="comment">// diff = diff + 2^(periodCount - 2)</span></span><br><span class="line"><span class="comment">// 难度再加上难度炸弹的难度</span></span><br><span class="line"><span class="keyword">if</span> periodCount.Cmp(big1) &gt; <span class="number">0</span> &#123;</span><br><span class="line">y.Sub(periodCount, big2)</span><br><span class="line">y.Exp(big2, y, <span class="literal">nil</span>)</span><br><span class="line">x.Add(x, y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> source_code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> swarm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Geth源码学习之Transaction</title>
      <link href="2024/11/22/blockchain/ethereum/source_code/Geth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8BTransaction/"/>
      <url>2024/11/22/blockchain/ethereum/source_code/Geth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8BTransaction/</url>
      
        <content type="html"><![CDATA[<p>学习<code>github.com/ethereum/go-ethereum/core/types.transaction.go</code>源码<code>Version: 1.10.2-unstable</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2014 The go-ethereum Authors</span></span><br><span class="line"><span class="comment">// This file is part of the go-ethereum library.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The go-ethereum library is free software: you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">// it under the terms of the GNU Lesser General Public License as published by</span></span><br><span class="line"><span class="comment">// the Free Software Foundation, either version 3 of the License, or</span></span><br><span class="line"><span class="comment">// (at your option) any later version.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The go-ethereum library is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span></span><br><span class="line"><span class="comment">// GNU Lesser General Public License for more details.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// You should have received a copy of the GNU Lesser General Public License</span></span><br><span class="line"><span class="comment">// along with the go-ethereum library. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;container/heap&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;math/big&quot;</span></span><br><span class="line"><span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/ethereum/go-ethereum/common&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/ethereum/go-ethereum/crypto&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/ethereum/go-ethereum/rlp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ErrInvalidSig           = errors.New(<span class="string">&quot;invalid transaction v, r, s values&quot;</span>)</span><br><span class="line">ErrUnexpectedProtection = errors.New(<span class="string">&quot;transaction type does not supported EIP-155 protected signatures&quot;</span>)</span><br><span class="line">ErrInvalidTxType        = errors.New(<span class="string">&quot;transaction type not valid in this context&quot;</span>)</span><br><span class="line">ErrTxTypeNotSupported   = errors.New(<span class="string">&quot;transaction type not supported&quot;</span>)</span><br><span class="line">errEmptyTypedTx         = errors.New(<span class="string">&quot;empty typed transaction bytes&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Transaction types.</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">LegacyTxType = <span class="literal">iota</span></span><br><span class="line">AccessListTxType</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Transaction is an Ethereum transaction.</span></span><br><span class="line"><span class="keyword">type</span> Transaction <span class="keyword">struct</span> &#123;</span><br><span class="line">inner TxData    <span class="comment">// Consensus contents of a transaction 交易中需要共识的内容</span></span><br><span class="line">time  time.Time <span class="comment">// Time first seen locally (spam avoidance)  第一次收到交易的时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// caches</span></span><br><span class="line">hash atomic.Value <span class="comment">// 交易的hash</span></span><br><span class="line">size atomic.Value <span class="comment">// 交易的大小</span></span><br><span class="line">from atomic.Value <span class="comment">// 交易的发起者</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewTx creates a new transaction.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTx</span><span class="params">(inner TxData)</span> *<span class="title">Transaction</span></span> &#123;</span><br><span class="line">tx := <span class="built_in">new</span>(Transaction)</span><br><span class="line">tx.setDecoded(inner.<span class="built_in">copy</span>(), <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> tx</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TxData is the underlying data of a transaction.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This is implemented by LegacyTx and AccessListTx.</span></span><br><span class="line"><span class="keyword">type</span> TxData <span class="keyword">interface</span> &#123;</span><br><span class="line">txType() <span class="keyword">byte</span> <span class="comment">// returns the type ID</span></span><br><span class="line"><span class="built_in">copy</span>() TxData <span class="comment">// creates a deep copy and initializes all fields</span></span><br><span class="line"></span><br><span class="line">chainID() *big.Int <span class="comment">//链ID</span></span><br><span class="line">accessList() AccessList</span><br><span class="line">data() []<span class="keyword">byte</span> <span class="comment">// 交易中的数据</span></span><br><span class="line">gas() <span class="keyword">uint64</span> <span class="comment">// 交易的消耗了多少gas</span></span><br><span class="line">gasPrice() *big.Int <span class="comment">//交易的gas价格</span></span><br><span class="line">value() *big.Int <span class="comment">// 交易中带的以太币的数量</span></span><br><span class="line">nonce() <span class="keyword">uint64</span> <span class="comment">// 对于发送交易的人来说，这是第几笔交易</span></span><br><span class="line">to() *common.Address <span class="comment">// 交易发送给谁</span></span><br><span class="line"></span><br><span class="line">rawSignatureValues() (v, r, s *big.Int) <span class="comment">// 获取签名相关信息</span></span><br><span class="line">setSignatureValues(chainID, v, r, s *big.Int) <span class="comment">// 设置签名相关信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EncodeRLP implements rlp.Encoder</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">EncodeRLP</span><span class="params">(w io.Writer)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> tx.Type() == LegacyTxType &#123;</span><br><span class="line"><span class="keyword">return</span> rlp.Encode(w, tx.inner)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// It&#x27;s an EIP-2718 typed TX envelope.</span></span><br><span class="line">buf := encodeBufferPool.Get().(*bytes.Buffer)</span><br><span class="line"><span class="keyword">defer</span> encodeBufferPool.Put(buf)</span><br><span class="line">buf.Reset()</span><br><span class="line"><span class="keyword">if</span> err := tx.encodeTyped(buf); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rlp.Encode(w, buf.Bytes())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// encodeTyped writes the canonical encoding of a typed transaction to w.</span></span><br><span class="line"><span class="comment">// 将交易中的inner数据写入到入参w</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">encodeTyped</span><span class="params">(w *bytes.Buffer)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">w.WriteByte(tx.Type())</span><br><span class="line"><span class="keyword">return</span> rlp.Encode(w, tx.inner)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MarshalBinary returns the canonical encoding of the transaction.</span></span><br><span class="line"><span class="comment">// For legacy transactions, it returns the RLP encoding. For EIP-2718 typed</span></span><br><span class="line"><span class="comment">// transactions, it returns the type and payload.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">MarshalBinary</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> tx.Type() == LegacyTxType &#123;</span><br><span class="line"><span class="keyword">return</span> rlp.EncodeToBytes(tx.inner)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">err := tx.encodeTyped(&amp;buf)</span><br><span class="line"><span class="keyword">return</span> buf.Bytes(), err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DecodeRLP implements rlp.Decoder</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">DecodeRLP</span><span class="params">(s *rlp.Stream)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">kind, size, err := s.Kind()</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> err != <span class="literal">nil</span>:</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line"><span class="keyword">case</span> kind == rlp.List:</span><br><span class="line"><span class="comment">// It&#x27;s a legacy transaction.</span></span><br><span class="line"><span class="keyword">var</span> inner LegacyTx</span><br><span class="line">err := s.Decode(&amp;inner)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">tx.setDecoded(&amp;inner, <span class="keyword">int</span>(rlp.ListSize(size)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line"><span class="keyword">case</span> kind == rlp.String:</span><br><span class="line"><span class="comment">// It&#x27;s an EIP-2718 typed TX envelope.</span></span><br><span class="line"><span class="keyword">var</span> b []<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">if</span> b, err = s.Bytes(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">inner, err := tx.decodeTyped(b)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">tx.setDecoded(inner, <span class="built_in">len</span>(b))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> rlp.ErrExpectedList</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UnmarshalBinary decodes the canonical encoding of transactions.</span></span><br><span class="line"><span class="comment">// It supports legacy RLP transactions and EIP2718 typed transactions.</span></span><br><span class="line"><span class="comment">// 将字节数组b解码设置到交易的inner字段</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">UnmarshalBinary</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(b) &gt; <span class="number">0</span> &amp;&amp; b[<span class="number">0</span>] &gt; <span class="number">0x7f</span> &#123;</span><br><span class="line"><span class="comment">// It&#x27;s a legacy transaction.</span></span><br><span class="line"><span class="keyword">var</span> data LegacyTx</span><br><span class="line">err := rlp.DecodeBytes(b, &amp;data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">tx.setDecoded(&amp;data, <span class="built_in">len</span>(b))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// It&#x27;s an EIP2718 typed transaction envelope.</span></span><br><span class="line">inner, err := tx.decodeTyped(b)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">tx.setDecoded(inner, <span class="built_in">len</span>(b))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// decodeTyped decodes a typed transaction from the canonical format.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">decodeTyped</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(TxData, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(b) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errEmptyTypedTx</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> b[<span class="number">0</span>] &#123;</span><br><span class="line"><span class="keyword">case</span> AccessListTxType:</span><br><span class="line"><span class="keyword">var</span> inner AccessListTx</span><br><span class="line">err := rlp.DecodeBytes(b[<span class="number">1</span>:], &amp;inner)</span><br><span class="line"><span class="keyword">return</span> &amp;inner, err</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrTxTypeNotSupported</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setDecoded sets the inner transaction and size after decoding.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">setDecoded</span><span class="params">(inner TxData, size <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">tx.inner = inner</span><br><span class="line">tx.time = time.Now()</span><br><span class="line"><span class="keyword">if</span> size &gt; <span class="number">0</span> &#123;</span><br><span class="line">tx.size.Store(common.StorageSize(size))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sanityCheckSignature</span><span class="params">(v *big.Int, r *big.Int, s *big.Int, maybeProtected <span class="keyword">bool</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> isProtectedV(v) &amp;&amp; !maybeProtected &#123;</span><br><span class="line"><span class="keyword">return</span> ErrUnexpectedProtection</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plainV <span class="keyword">byte</span></span><br><span class="line"><span class="keyword">if</span> isProtectedV(v) &#123;</span><br><span class="line">chainID := deriveChainId(v).Uint64()</span><br><span class="line">plainV = <span class="keyword">byte</span>(v.Uint64() - <span class="number">35</span> - <span class="number">2</span>*chainID)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> maybeProtected &#123;</span><br><span class="line"><span class="comment">// Only EIP-155 signatures can be optionally protected. Since</span></span><br><span class="line"><span class="comment">// we determined this v value is not protected, it must be a</span></span><br><span class="line"><span class="comment">// raw 27 or 28.</span></span><br><span class="line">plainV = <span class="keyword">byte</span>(v.Uint64() - <span class="number">27</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// If the signature is not optionally protected, we assume it</span></span><br><span class="line"><span class="comment">// must already be equal to the recovery id.</span></span><br><span class="line">plainV = <span class="keyword">byte</span>(v.Uint64())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !crypto.ValidateSignatureValues(plainV, r, s, <span class="literal">false</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ErrInvalidSig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isProtectedV</span><span class="params">(V *big.Int)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> V.BitLen() &lt;= <span class="number">8</span> &#123;</span><br><span class="line">v := V.Uint64()</span><br><span class="line"><span class="keyword">return</span> v != <span class="number">27</span> &amp;&amp; v != <span class="number">28</span> &amp;&amp; v != <span class="number">1</span> &amp;&amp; v != <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// anything not 27 or 28 is considered protected</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Protected says whether the transaction is replay-protected.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">Protected</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> tx := tx.inner.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *LegacyTx:</span><br><span class="line"><span class="keyword">return</span> tx.V != <span class="literal">nil</span> &amp;&amp; isProtectedV(tx.V)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type returns the transaction type.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">uint8</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> tx.inner.txType()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChainId returns the EIP155 chain ID of the transaction. The return value will always be</span></span><br><span class="line"><span class="comment">// non-nil. For legacy transactions which are not replay-protected, the return value is</span></span><br><span class="line"><span class="comment">// zero.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">ChainId</span><span class="params">()</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> tx.inner.chainID()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Data returns the input data of the transaction.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">Data</span><span class="params">()</span> []<span class="title">byte</span></span> &#123; <span class="keyword">return</span> tx.inner.data() &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AccessList returns the access list of the transaction.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">AccessList</span><span class="params">()</span> <span class="title">AccessList</span></span> &#123; <span class="keyword">return</span> tx.inner.accessList() &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Gas returns the gas limit of the transaction.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">Gas</span><span class="params">()</span> <span class="title">uint64</span></span> &#123; <span class="keyword">return</span> tx.inner.gas() &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GasPrice returns the gas price of the transaction.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">GasPrice</span><span class="params">()</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123; <span class="keyword">return</span> <span class="built_in">new</span>(big.Int).Set(tx.inner.gasPrice()) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Value returns the ether amount of the transaction.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">Value</span><span class="params">()</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123; <span class="keyword">return</span> <span class="built_in">new</span>(big.Int).Set(tx.inner.value()) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nonce returns the sender account nonce of the transaction.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">Nonce</span><span class="params">()</span> <span class="title">uint64</span></span> &#123; <span class="keyword">return</span> tx.inner.nonce() &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// To returns the recipient address of the transaction.</span></span><br><span class="line"><span class="comment">// For contract-creation transactions, To returns nil.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">To</span><span class="params">()</span> *<span class="title">common</span>.<span class="title">Address</span></span> &#123;</span><br><span class="line"><span class="comment">// Copy the pointed-to address.</span></span><br><span class="line">ito := tx.inner.to()</span><br><span class="line"><span class="keyword">if</span> ito == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">cpy := *ito</span><br><span class="line"><span class="keyword">return</span> &amp;cpy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cost returns gas * gasPrice + value.</span></span><br><span class="line"><span class="comment">// 这个交易的发起者总共需要支付多少以太币</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">Cost</span><span class="params">()</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123;</span><br><span class="line">total := <span class="built_in">new</span>(big.Int).Mul(tx.GasPrice(), <span class="built_in">new</span>(big.Int).SetUint64(tx.Gas()))</span><br><span class="line">total.Add(total, tx.Value())</span><br><span class="line"><span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RawSignatureValues returns the V, R, S signature values of the transaction.</span></span><br><span class="line"><span class="comment">// The return values should not be modified by the caller.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">RawSignatureValues</span><span class="params">()</span> <span class="params">(v, r, s *big.Int)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> tx.inner.rawSignatureValues()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GasPriceCmp compares the gas prices of two transactions.</span></span><br><span class="line"><span class="comment">// 比较当前交易和其他交易的gas价格</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">GasPriceCmp</span><span class="params">(other *Transaction)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> tx.inner.gasPrice().Cmp(other.inner.gasPrice())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GasPriceIntCmp compares the gas price of the transaction against the given price.</span></span><br><span class="line"><span class="comment">// 比较当前交易和其他交易的gas价格</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">GasPriceIntCmp</span><span class="params">(other *big.Int)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> tx.inner.gasPrice().Cmp(other)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hash returns the transaction hash.</span></span><br><span class="line"><span class="comment">// 获取交易的hash，如果已经存在则直接返回，如果不存在则计算</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">Hash</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> hash := tx.hash.Load(); hash != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> hash.(common.Hash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> h common.Hash</span><br><span class="line"><span class="keyword">if</span> tx.Type() == LegacyTxType &#123;</span><br><span class="line">h = rlpHash(tx.inner)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">h = prefixedRlpHash(tx.Type(), tx.inner)</span><br><span class="line">&#125;</span><br><span class="line">tx.hash.Store(h)</span><br><span class="line"><span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Size returns the true RLP encoded storage size of the transaction, either by</span></span><br><span class="line"><span class="comment">// encoding and returning it, or returning a previously cached value.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">Size</span><span class="params">()</span> <span class="title">common</span>.<span class="title">StorageSize</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> size := tx.size.Load(); size != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> size.(common.StorageSize)</span><br><span class="line">&#125;</span><br><span class="line">c := writeCounter(<span class="number">0</span>)</span><br><span class="line">rlp.Encode(&amp;c, &amp;tx.inner)</span><br><span class="line">tx.size.Store(common.StorageSize(c))</span><br><span class="line"><span class="keyword">return</span> common.StorageSize(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WithSignature returns a new transaction with the given signature.</span></span><br><span class="line"><span class="comment">// This signature needs to be in the [R || S || V] format where V is 0 or 1.</span></span><br><span class="line"><span class="comment">// 对交易进行签名，并返回一个新的签名后的交易</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">WithSignature</span><span class="params">(signer Signer, sig []<span class="keyword">byte</span>)</span> <span class="params">(*Transaction, error)</span></span> &#123;</span><br><span class="line">r, s, v, err := signer.SignatureValues(tx, sig)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">cpy := tx.inner.<span class="built_in">copy</span>()</span><br><span class="line">cpy.setSignatureValues(signer.ChainID(), v, r, s)</span><br><span class="line"><span class="keyword">return</span> &amp;Transaction&#123;inner: cpy, time: tx.time&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Transactions implements DerivableList for transactions.</span></span><br><span class="line"><span class="keyword">type</span> Transactions []*Transaction</span><br><span class="line"></span><br><span class="line"><span class="comment">// Len returns the length of s.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Transactions)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> <span class="built_in">len</span>(s) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EncodeIndex encodes the i&#x27;th transaction to w. Note that this does not check for errors</span></span><br><span class="line"><span class="comment">// because we assume that *Transaction will only ever contain valid txs that were either</span></span><br><span class="line"><span class="comment">// constructed by decoding or via public API in this package.</span></span><br><span class="line"><span class="comment">// 将指定下标i的交易的inner数据解码写入w中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Transactions)</span> <span class="title">EncodeIndex</span><span class="params">(i <span class="keyword">int</span>, w *bytes.Buffer)</span></span> &#123;</span><br><span class="line">tx := s[i]</span><br><span class="line"><span class="keyword">if</span> tx.Type() == LegacyTxType &#123;</span><br><span class="line">rlp.Encode(w, tx.inner)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tx.encodeTyped(w)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TxDifference returns a new set which is the difference between a and b.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TxDifference</span><span class="params">(a, b Transactions)</span> <span class="title">Transactions</span></span> &#123;</span><br><span class="line">keep := <span class="built_in">make</span>(Transactions, <span class="number">0</span>, <span class="built_in">len</span>(a))</span><br><span class="line"></span><br><span class="line">remove := <span class="built_in">make</span>(<span class="keyword">map</span>[common.Hash]<span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">for</span> _, tx := <span class="keyword">range</span> b &#123;</span><br><span class="line">remove[tx.Hash()] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, tx := <span class="keyword">range</span> a &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := remove[tx.Hash()]; !ok &#123;</span><br><span class="line">keep = <span class="built_in">append</span>(keep, tx)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> keep</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TxByNonce implements the sort interface to allow sorting a list of transactions</span></span><br><span class="line"><span class="comment">// by their nonces. This is usually only useful for sorting transactions from a</span></span><br><span class="line"><span class="comment">// single account, otherwise a nonce comparison doesn&#x27;t make much sense.</span></span><br><span class="line"><span class="comment">// 实现了排序的交易列表，排序的方式是nonce，只有同一个地址的nonce的比较才有意义，不同地址的nonce比较没有意义</span></span><br><span class="line"><span class="keyword">type</span> TxByNonce Transactions</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s TxByNonce)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(s) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s TxByNonce)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> s[i].Nonce() &lt; s[j].Nonce() &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s TxByNonce)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; s[i], s[j] = s[j], s[i] &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TxByPriceAndTime implements both the sort and the heap interface, making it useful</span></span><br><span class="line"><span class="comment">// for all at once sorting as well as individually adding and removing elements.</span></span><br><span class="line"><span class="keyword">type</span> TxByPriceAndTime Transactions</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s TxByPriceAndTime)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> <span class="built_in">len</span>(s) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s TxByPriceAndTime)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">// If the prices are equal, use the time the transaction was first seen for</span></span><br><span class="line"><span class="comment">// deterministic sorting</span></span><br><span class="line"><span class="comment">// 先按照价格排序，如果价格相等再按照时间排序</span></span><br><span class="line">cmp := s[i].GasPrice().Cmp(s[j].GasPrice())</span><br><span class="line"><span class="keyword">if</span> cmp == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s[i].time.Before(s[j].time)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cmp &gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s TxByPriceAndTime)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123; s[i], s[j] = s[j], s[i] &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *TxByPriceAndTime)</span> <span class="title">Push</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">*s = <span class="built_in">append</span>(*s, x.(*Transaction))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *TxByPriceAndTime)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">old := *s</span><br><span class="line">n := <span class="built_in">len</span>(old)</span><br><span class="line">x := old[n<span class="number">-1</span>]</span><br><span class="line">*s = old[<span class="number">0</span> : n<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransactionsByPriceAndNonce represents a set of transactions that can return</span></span><br><span class="line"><span class="comment">// transactions in a profit-maximizing sorted order, while supporting removing</span></span><br><span class="line"><span class="comment">// entire batches of transactions for non-executable accounts.</span></span><br><span class="line"><span class="keyword">type</span> TransactionsByPriceAndNonce <span class="keyword">struct</span> &#123;</span><br><span class="line">txs    <span class="keyword">map</span>[common.Address]Transactions <span class="comment">// Per account nonce-sorted list of transactions</span></span><br><span class="line">heads  TxByPriceAndTime                <span class="comment">// Next transaction for each unique account (price heap)</span></span><br><span class="line">signer Signer                          <span class="comment">// Signer for the set of transactions</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewTransactionsByPriceAndNonce creates a transaction set that can retrieve</span></span><br><span class="line"><span class="comment">// price sorted transactions in a nonce-honouring way.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Note, the input map is reowned so the caller should not interact any more with</span></span><br><span class="line"><span class="comment">// if after providing it to the constructor.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTransactionsByPriceAndNonce</span><span class="params">(signer Signer, txs <span class="keyword">map</span>[common.Address]Transactions)</span> *<span class="title">TransactionsByPriceAndNonce</span></span> &#123;</span><br><span class="line"><span class="comment">// Initialize a price and received time based heap with the head transactions</span></span><br><span class="line">heads := <span class="built_in">make</span>(TxByPriceAndTime, <span class="number">0</span>, <span class="built_in">len</span>(txs))</span><br><span class="line"><span class="keyword">for</span> from, accTxs := <span class="keyword">range</span> txs &#123;</span><br><span class="line"><span class="comment">// Ensure the sender address is from the signer</span></span><br><span class="line"><span class="keyword">if</span> acc, _ := Sender(signer, accTxs[<span class="number">0</span>]); acc != from &#123;</span><br><span class="line"><span class="built_in">delete</span>(txs, from)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">heads = <span class="built_in">append</span>(heads, accTxs[<span class="number">0</span>])</span><br><span class="line">txs[from] = accTxs[<span class="number">1</span>:]</span><br><span class="line">&#125;</span><br><span class="line">heap.Init(&amp;heads)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assemble and return the transaction set</span></span><br><span class="line"><span class="keyword">return</span> &amp;TransactionsByPriceAndNonce&#123;</span><br><span class="line">txs:    txs,</span><br><span class="line">heads:  heads,</span><br><span class="line">signer: signer,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Peek returns the next transaction by price.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TransactionsByPriceAndNonce)</span> <span class="title">Peek</span><span class="params">()</span> *<span class="title">Transaction</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(t.heads) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t.heads[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shift replaces the current best head with the next one from the same account.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TransactionsByPriceAndNonce)</span> <span class="title">Shift</span><span class="params">()</span></span> &#123;</span><br><span class="line">acc, _ := Sender(t.signer, t.heads[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span> txs, ok := t.txs[acc]; ok &amp;&amp; <span class="built_in">len</span>(txs) &gt; <span class="number">0</span> &#123;</span><br><span class="line">t.heads[<span class="number">0</span>], t.txs[acc] = txs[<span class="number">0</span>], txs[<span class="number">1</span>:]</span><br><span class="line">heap.Fix(&amp;t.heads, <span class="number">0</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">heap.Pop(&amp;t.heads)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pop removes the best transaction, *not* replacing it with the next one from</span></span><br><span class="line"><span class="comment">// the same account. This should be used when a transaction cannot be executed</span></span><br><span class="line"><span class="comment">// and hence all subsequent ones should be discarded from the same account.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TransactionsByPriceAndNonce)</span> <span class="title">Pop</span><span class="params">()</span></span> &#123;</span><br><span class="line">heap.Pop(&amp;t.heads)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Message is a fully derived transaction and implements core.Message</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> In a future PR this will be removed.</span></span><br><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">to         *common.Address</span><br><span class="line">from       common.Address</span><br><span class="line">nonce      <span class="keyword">uint64</span></span><br><span class="line">amount     *big.Int</span><br><span class="line">gasLimit   <span class="keyword">uint64</span></span><br><span class="line">gasPrice   *big.Int</span><br><span class="line">data       []<span class="keyword">byte</span></span><br><span class="line">accessList AccessList</span><br><span class="line">checkNonce <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMessage</span><span class="params">(from common.Address, to *common.Address, nonce <span class="keyword">uint64</span>, amount *big.Int, gasLimit <span class="keyword">uint64</span>, gasPrice *big.Int, data []<span class="keyword">byte</span>, accessList AccessList, checkNonce <span class="keyword">bool</span>)</span> <span class="title">Message</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> Message&#123;</span><br><span class="line">from:       from,</span><br><span class="line">to:         to,</span><br><span class="line">nonce:      nonce,</span><br><span class="line">amount:     amount,</span><br><span class="line">gasLimit:   gasLimit,</span><br><span class="line">gasPrice:   gasPrice,</span><br><span class="line">data:       data,</span><br><span class="line">accessList: accessList,</span><br><span class="line">checkNonce: checkNonce,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AsMessage returns the transaction as a core.Message.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span> <span class="title">AsMessage</span><span class="params">(s Signer)</span> <span class="params">(Message, error)</span></span> &#123;</span><br><span class="line">msg := Message&#123;</span><br><span class="line">nonce:      tx.Nonce(),</span><br><span class="line">gasLimit:   tx.Gas(),</span><br><span class="line">gasPrice:   <span class="built_in">new</span>(big.Int).Set(tx.GasPrice()),</span><br><span class="line">to:         tx.To(),</span><br><span class="line">amount:     tx.Value(),</span><br><span class="line">data:       tx.Data(),</span><br><span class="line">accessList: tx.AccessList(),</span><br><span class="line">checkNonce: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">msg.from, err = Sender(s, tx)</span><br><span class="line"><span class="keyword">return</span> msg, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">From</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Address</span></span>   &#123; <span class="keyword">return</span> m.from &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">To</span><span class="params">()</span> *<span class="title">common</span>.<span class="title">Address</span></span>    &#123; <span class="keyword">return</span> m.to &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">GasPrice</span><span class="params">()</span> *<span class="title">big</span>.<span class="title">Int</span></span>     &#123; <span class="keyword">return</span> m.gasPrice &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">Value</span><span class="params">()</span> *<span class="title">big</span>.<span class="title">Int</span></span>        &#123; <span class="keyword">return</span> m.amount &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">Gas</span><span class="params">()</span> <span class="title">uint64</span></span>            &#123; <span class="keyword">return</span> m.gasLimit &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">Nonce</span><span class="params">()</span> <span class="title">uint64</span></span>          &#123; <span class="keyword">return</span> m.nonce &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">Data</span><span class="params">()</span> []<span class="title">byte</span></span>           &#123; <span class="keyword">return</span> m.data &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">AccessList</span><span class="params">()</span> <span class="title">AccessList</span></span> &#123; <span class="keyword">return</span> m.accessList &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">CheckNonce</span><span class="params">()</span> <span class="title">bool</span></span>       &#123; <span class="keyword">return</span> m.checkNonce &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对比etherscan-io的显示的Transaction字段：">对比etherscan.io的显示的Transaction字段：</h3><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/etherscan_transaction.png" alt="etherscan_transaction"></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> source_code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> swarm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac安装swarm-bee</title>
      <link href="2024/11/22/blockchain/ethereum/storage/Mac%E5%AE%89%E8%A3%85swarm-bee/"/>
      <url>2024/11/22/blockchain/ethereum/storage/Mac%E5%AE%89%E8%A3%85swarm-bee/</url>
      
        <content type="html"><![CDATA[<h2 id="安装swarm-clef">安装swarm-clef</h2><h3 id="安装">安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew tap ethersphere/tap</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install swarm-clef</span><br></pre></td></tr></table></figure><h3 id="启动">启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start swarm-clef</span><br></pre></td></tr></table></figure><h2 id="安装swarm-bee">安装swarm-bee</h2><h3 id="安装-v2">安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install swarm-bee</span><br></pre></td></tr></table></figure><h3 id="启动-v2">启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start swarm-bee</span><br></pre></td></tr></table></figure><h3 id="查看日志验证启动情况">查看日志验证启动情况</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /usr/local/var/log/swarm-bee/bee.log</span><br></pre></td></tr></table></figure><h2 id="常用命令记录">常用命令记录</h2><h3 id="启动和停止">启动和停止</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">brew services start swarm-bee</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止</span></span><br><span class="line">brew services stop swarm-bee</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">brew services restart swarm-bee</span><br></pre></td></tr></table></figure><h3 id="文件路径">文件路径</h3><h4 id="日志文件：">日志文件：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /usr/local/var/log/swarm-bee/bee.log</span><br></pre></td></tr></table></figure><h4 id="配置文件：">配置文件：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/etc/swarm-bee/bee.yaml</span><br></pre></td></tr></table></figure><h3 id="密钥文件">密钥文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll ~/.bee/keys</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> storage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> swarm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与swarm-bee交互</title>
      <link href="2024/11/22/blockchain/ethereum/storage/%E4%B8%8Eswarm-bee%E4%BA%A4%E4%BA%92/"/>
      <url>2024/11/22/blockchain/ethereum/storage/%E4%B8%8Eswarm-bee%E4%BA%A4%E4%BA%92/</url>
      
        <content type="html"><![CDATA[<h2 id="状态检查">状态检查</h2><h3 id="主页">主页</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:1633</span><br></pre></td></tr></table></figure><h3 id="检查运行是否正常">检查运行是否正常</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s http://localhost:1635/health</span><br></pre></td></tr></table></figure><h3 id="查看当前bee节点的地址">查看当前bee节点的地址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bee-get-addr</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s localhost:1635/addresses | jq .ethereum</span><br></pre></td></tr></table></figure><h3 id="查看链接了多少个peer">查看链接了多少个peer</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s http://localhost:1635/peers | jq &#x27;.peers | length&#x27;</span><br></pre></td></tr></table></figure><h3 id="查看网络拓扑">查看网络拓扑</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET http://localhost:1635/topology | jq</span><br></pre></td></tr></table></figure><h2 id="上传文件">上传文件</h2><h3 id="上传文件，返回的是一个hash值">上传文件，返回的是一个hash值</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -F file=@bee.jpg http://localhost:1633/files</span><br><span class="line">&#123;&quot;reference&quot;:&quot;02a03340405f30c1027b885ee39903fb394ba8909e98029dd6c14371437edafc&quot;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --data-binary @bee.jpg  -H &quot;Content-Type: video/jpg&quot; &quot;http://localhost:1633/files?name=bee.jpg&quot;</span><br></pre></td></tr></table></figure><h3 id="下载文件">下载文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -OJ http://localhost:1633/files/042d4fe94b946e2cb51196a8c136b8cc335156525bf1ad7e86356c2402291dd4</span><br><span class="line">https://gateway.ethswarm.org/files/042d4fe94b946e2cb51196a8c136b8cc335156525bf1ad7e86356c2402291dd4</span><br></pre></td></tr></table></figure><p><em><strong>特别注意：不要传一些重要数据到swarm除非已经加密，因为上传上去之后的所有文件都是公开的，只要知道hash就能下载。</strong></em></p><h2 id="上传文件夹">上传文件夹</h2><p>比如有一个<a href="https://github.com/guozhe001/hello-swarm.git">前端vue项目</a>，需要上传到swarm</p><h3 id="项目构建">项目构建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h3 id="把需要上传的文件夹dist打包">把需要上传的文件夹<code>dist</code>打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd dist</span><br><span class="line">tar -cf ../hello-swarm.tar .</span><br></pre></td></tr></table></figure><ol><li>把hello-swarm.tar包上传到swarm</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl \</span><br><span class="line">     -X POST \</span><br><span class="line">     -H &quot;Content-Type: application/x-tar&quot; \</span><br><span class="line">     -H &quot;Swarm-Index-Document: index.html&quot; \</span><br><span class="line">     --data-binary @hello-swarm.tar http://localhost:1633/dirs</span><br></pre></td></tr></table></figure><p>{“reference”:“b2afd8fa4995be121ba6e6cf544d035e07a2b4b775648b5549b14f82e15c5bea”}</p><p>访问主页：</p><p><a href="http://localhost:1633/bzz/b2afd8fa4995be121ba6e6cf544d035e07a2b4b775648b5549b14f82e15c5bea/index.html">http://localhost:1633/bzz/b2afd8fa4995be121ba6e6cf544d035e07a2b4b775648b5549b14f82e15c5bea/index.html</a></p><h2 id="支票信息API">支票信息API</h2><h3 id="查询当前bee节点的余额">查询当前bee节点的余额</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:1635/chequebook/balance | jq</span><br></pre></td></tr></table></figure><h3 id="查看每个节点（当前bee节点连接的）的余额">查看每个节点（当前bee节点连接的）的余额</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:1635/balances | jq</span><br></pre></td></tr></table></figure><h3 id="查看结算信息">查看结算信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:1635/settlements | jq</span><br></pre></td></tr></table></figure><h3 id="查看支票信息">查看支票信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:1635/chequebook/cheque | jq</span><br></pre></td></tr></table></figure><h3 id="支票兑换-地址是上一个命令中显示的地址">支票兑换(地址是上一个命令中显示的地址)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST http://localhost:1635/chequebook/cashout/d7881307e793e389642ea733451db368c4c9b9e23f188cca659c8674d183a56b</span><br></pre></td></tr></table></figure><h3 id="查看支票的兑换状态">查看支票的兑换状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:1635/chequebook/cashout/d7881307e793e389642ea733451db368c4c9b9e23f188cca659c8674d183a56b | jq</span><br></pre></td></tr></table></figure><h3 id="gBZZ提现">gBZZ提现</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST http://localhost:1635/chequebook/withdraw\?amount\=1000 | jq</span><br></pre></td></tr></table></figure><h2 id="管理支票脚本">管理支票脚本</h2><h3 id="下载官方的脚本">下载官方的脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O cashout.sh https://gist.githubusercontent.com/ralph-pichler/3b5ccd7a5c5cd0500e6428752b37e975/raw/cashout.sh</span><br></pre></td></tr></table></figure><h3 id="添加可执行权限">添加可执行权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x cashout.sh</span><br></pre></td></tr></table></figure><h3 id="列出所有的没有兑换的支票信息">列出所有的没有兑换的支票信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cashout.sh</span><br></pre></td></tr></table></figure><h3 id="当超过5BZZ时兑换所有支票：">当超过5BZZ时兑换所有支票：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cashout.sh cashout-all 5</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> storage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> swarm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装swarm-bee</title>
      <link href="2024/11/22/blockchain/ethereum/storage/ubuntu%E5%AE%89%E8%A3%85swarm-bee/"/>
      <url>2024/11/22/blockchain/ethereum/storage/ubuntu%E5%AE%89%E8%A3%85swarm-bee/</url>
      
        <content type="html"><![CDATA[<h2 id="安装swarm-clef">安装swarm-clef</h2><h3 id="安装">安装</h3><p>访问https://github.com/ethersphere/bee-clef/releases并下载最新版本的安装程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i bee-clef_0.4.9_amd64.deb</span><br></pre></td></tr></table></figure><h3 id="修改配置sudo-vi-etc-bee-bee-yaml">修改配置<code>sudo vi /etc/bee/bee.yaml</code></h3><p>修改点如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">full-node: true</span><br><span class="line">swap-endpoint: wss:&#x2F;&#x2F;goerli.infura.io&#x2F;ws&#x2F;v3&#x2F;your-api-key</span><br><span class="line">resolver-options: [&quot;https:&#x2F;&#x2F;mainnet.infura.io&#x2F;v3&#x2F;&lt;&lt;your-api-key&gt;&gt;&quot;]</span><br><span class="line">db-open-files-limit: 2000</span><br><span class="line">debug-api-enable: true</span><br><span class="line">debug-api-addr: 127.0.0.1:1635</span><br></pre></td></tr></table></figure><h3 id="查看状态">查看状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status bee-clef</span><br></pre></td></tr></table></figure><h3 id="查看日志">查看日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">journalctl -f -u bee-clef.service</span><br></pre></td></tr></table></figure><h2 id="安装swarm-bee">安装swarm-bee</h2><h3 id="安装-v2">安装</h3><p>访问https://github.com/ethersphere/bee/releases并下载最新的安装程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i bee_0.5.3_amd64.deb</span><br></pre></td></tr></table></figure><h2 id="常用命令记录">常用命令记录</h2><h3 id="启动和停止">启动和停止</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">sudo systemctl start bee</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止</span></span><br><span class="line">sudo systemctl stop bee</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">sudo systemctl restart bee</span><br></pre></td></tr></table></figure><h3 id="查看状态-v2">查看状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status bee</span><br></pre></td></tr></table></figure><h3 id="查看日志-v2">查看日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">journalctl --lines=100 --follow --unit bee</span><br></pre></td></tr></table></figure><h2 id="文件路径">文件路径</h2><h4 id="Bee-clef">Bee-clef<a href="https://docs.ethswarm.org/docs/installation/quick-start#bee-clef">#</a></h4><p>Configuration files are stored in <code>/etc/bee-clef/</code></p><p>Key material and other data is stored in <code>/var/lib/bee-clef/</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll /var/lib/bee-clef/</span><br></pre></td></tr></table></figure><h4 id="Bee">Bee<a href="https://docs.ethswarm.org/docs/installation/quick-start#bee">#</a></h4><p>Configuration files are stored in <code>/etc/bee/</code></p><p>State, chunks and other data is stored in <code>/var/lib/bee/</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/bee/bee.yaml</span><br></pre></td></tr></table></figure><h2 id="导出钱包">导出钱包</h2><p>把bee-clef的钱包导出，然后就可以导入到自己的钱包（如metamask）。</p><p>运行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bee-clef-keys</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行命令后的输出结果</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> bee-clef-keys</span></span><br><span class="line">Key exported to /root/bee-clef-key-1617347363.json</span><br><span class="line">Pass exported to /root/bee-clef-password-1617347363.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> storage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> swarm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle-预言机</title>
      <link href="2024/11/22/blockchain/ethereum/%E6%A6%82%E5%BF%B5%E5%AD%A6%E4%B9%A0/Oracle-%E9%A2%84%E8%A8%80%E6%9C%BA/"/>
      <url>2024/11/22/blockchain/ethereum/%E6%A6%82%E5%BF%B5%E5%AD%A6%E4%B9%A0/Oracle-%E9%A2%84%E8%A8%80%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么需要预言机？">为什么需要预言机？</h2><ol><li>EVM和智能合约没有内在的随机性来源</li><li>外部数据只能作为交易的数据载荷引入（而不能通过智能合约去查询）</li></ol><h3 id="为什么EVM和智能合约没有内在的随机性来源？">为什么EVM和智能合约没有内在的随机性来源？</h3><p>因为Pow共识，如果一个在EVM和智能合约内部真的有随机性的数据，并且智能合约使用了这些数据。那么极有可能无法达成共识，因为挖矿的矿工获得的随机数和其他验证者获得的随机数会不一样。</p><h3 id="为什么外部数据只能作为交易的数据载荷引入？">为什么外部数据只能作为交易的数据载荷引入？</h3><p>如果在合约内部使用随机数，比如区块的高度，hash函数等伪随机数，那么矿工只打包有利于自己的随机结果即可。而从外部传入随机数据矿工就无法控制了。</p><h2 id="预言机的应用场景和示例">预言机的应用场景和示例</h2><p>理想情况下，预言机提供了一种无信任（即无需信任提供的数据的人或组织）的方式来获取链外信息。</p><h3 id="应用场景">应用场景</h3><p>有些预言机是提供特定的私有数据源的数据，例如：</p><ul><li><p>大学毕业证书</p></li><li><p>政府ID</p></li><li><p>护照</p></li><li><p>征信报告</p></li></ul><p>以上这些这些数据是掌握在大学、政府部门等，你只能信任他们。（不信任也没办法，你无法证明他们提供的数据不正确）</p><p>其他可能由预言机提供的数据示例包括：</p><ul><li>物理随机数源或熵源：如在彩票智能合约中公平地选出获胜者</li><li>与自然灾害相关的参数触发器：触发大型自然灾害债券智能合约</li><li>汇率数据：例如让加密货币与法币精确挂钩</li><li>资本市场数据：例如为一揽子代币化资产或证券定价（数字货币基金）</li><li>指标引用数据：例如将利率纳入智能金融衍生品合约</li><li>统计与准统计数据：安全标识、国家代码、货币代号等</li><li>时间和间隔数据：基于精准的SI（国际单位制）时间度量的事件触发器</li><li>天气数据：例如给予天气预报的保险费计算器</li><li>政治事件：预测市场走势</li><li>运动事件：预测市场走势以及体育博彩相关的合约</li><li>地理定位数据：例如供应链跟踪</li><li>损坏程度核验：保险合约</li><li>其他区块链上发生的事件：可互操作函数</li><li>以太币市场价格：例如gas价格预言机</li><li>航班统计数据：例如用于团体和俱乐部的机票合同</li></ul><h2 id="预言机的设计模式">预言机的设计模式</h2><h3 id="预言机的关键功能">预言机的关键功能</h3><p>根据定义，所有预言机都提供了一些关键功能。这些能力包括：</p><ul><li>从链外的数据源收集数据</li><li>使用签名消息在链上传输数据</li><li>将数据放入智能合约的存储空间，使数据可用</li></ul><h3 id="实现预言机的三种主要方式">实现预言机的三种主要方式</h3><p>设置预言机的三种主要方式可以分为请求/响应、发布于订阅和立即读取。</p><h4 id="立即读取">立即读取</h4><ul><li><p>这种预言机提供及时决策所需的数据</p></li><li><p>这种预言机的例子包括那些持有组织数据或有组织发布数据（例如学术证书、拨号代码、机构会员资格、机场标识符、自主ID等）的预言机</p></li><li><p>这种预言机存储中的数据也可以通过区块链启用应用程序（Geth）直接在本地查找，不需要消耗gas</p></li><li><p>这种预言机存储的数据和实际组织提供的数据可能不一样。（为了保密只需要在合约存储hash即可）</p></li></ul><h4 id="发布与订阅">发布与订阅</h4><ul><li>在这种预言机中，要对预期改变的数据提供有效的广播服务，预言机要么由链上的智能合约轮询，要么由链外的守护进程监视和更新</li><li>这种预言机的示例包括价格推送、天气预报、经济或社会统计、交通数据等</li><li>以太坊时间日志应用程序特别容易注意预言机更新</li><li>但是如果使用智能合约去轮询可能会产生大量的gas支出</li></ul><h4 id="请求与响应">请求与响应</h4><p>这是数据空间太大而无法存储在智能合约中的情况，并且用户每次只需要整个数据集的一小部分。它也是数据提供商业务的适用模型</p><p>请求与响应预言机的步骤可以总结如下：</p><ol><li>接收来自DApp的查询</li><li>解析查询</li><li>检查是否提供了付款和数据访问权限</li><li>从链外数据源检索相关数据（并在必要时加密）</li><li>使用包含的数据对交易进行签名</li><li>将交易广播到网络</li><li>安排任何进一步必要的交易，例如通知等</li></ol><h2 id="数据认证">数据认证</h2><p>两种常见的数据认证方法：</p><ul><li>真实性证明（authenticity proof）</li><li>可信执行环境（Trusted Execution Environment，TEE）</li></ul><h3 id="真实性证明">真实性证明</h3><p>真实性证明是用密码学证据证明数据没有被篡改过。</p><p>TLSNotary：</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/walkthrough_diagram_simplified.svg" alt="img"></p><h3 id="可信执行环境">可信执行环境</h3><p>使用Intel SGX来保证对HTTPS查询的响应可以被验证为可信的。</p><ul><li>SGK提供了完整性保证：使得在安全区中运行的应用程序收到CPU保护。不被其他进程篡改</li><li>SGK提供了机密性：保证应用程序在安全区中运行时，其状态对其他进程来说是不可知的</li><li>SGK通过生成应用程序确定在安全区中运行的数字签名，让证明成为可能，只要验证这个签名就能够确认程序在SGK安全区内安全地运行</li></ul><h2 id="计算性的预言机">计算性的预言机</h2><p>智能合约因为有gas费限制的原因，并不适合做非常复杂的计算。部分提供计算性预言机如下：</p><ul><li><a href="https://provable.xyz/">Provable</a></li><li><a href="https://www.infoq.cn/article/2016/10/azure-bletchley-first-release/">Cryptlet</a></li><li><a href="https://truebit.io/">truebit</a></li></ul><h2 id="去中心化预言机">去中心化预言机</h2><ul><li><a href="https://zh.chain.link/">ChainLink</a></li><li><a href="https://nestprotocol.org/">NEST Protocol</a></li></ul><h2 id="Solidity中的预言机客户端接口">Solidity中的预言机客户端接口</h2><h3 id="轮询ETH-USD价格">轮询ETH/USD价格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.22;</span><br><span class="line">import &quot;github.com&#x2F;provable-things&#x2F;ethereum-api&#x2F;provableAPI_0.4.25.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract ExampleContract is usingProvable &#123;</span><br><span class="line"></span><br><span class="line">    string public ETHUSD;</span><br><span class="line">    event LogConstructorInitiated(string nextStep);</span><br><span class="line">    event LogPriceUpdated(string price);</span><br><span class="line">    event LogNewProvableQuery(string description);</span><br><span class="line"></span><br><span class="line">    function ExampleContract() payable &#123;</span><br><span class="line">        LogConstructorInitiated(&quot;Constructor was initiated. Call &#39;updatePrice()&#39; to send the Provable Query.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __callback(bytes32 myid, string result) &#123;</span><br><span class="line">        if (msg.sender !&#x3D; provable_cbAddress()) revert();</span><br><span class="line">        ETHUSD &#x3D; result;</span><br><span class="line">        LogPriceUpdated(result);</span><br><span class="line">        updatePrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function updatePrice() payable &#123;</span><br><span class="line">        if (provable_getPrice(&quot;URL&quot;) &gt; this.balance) &#123;</span><br><span class="line">            LogNewProvableQuery(&quot;Provable query was NOT sent, please add some ETH to cover for the query fee&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            LogNewProvableQuery(&quot;Provable query was sent, standing by for the answer..&quot;);</span><br><span class="line">            provable_query(60, &quot;URL&quot;, &quot;json(https:&#x2F;&#x2F;api.pro.coinbase.com&#x2F;products&#x2F;ETH-USD&#x2F;ticker).price&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> 概念学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> 智能合约 </tag>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOKEN-代币</title>
      <link href="2024/11/22/blockchain/ethereum/%E6%A6%82%E5%BF%B5%E5%AD%A6%E4%B9%A0/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%B8%AD%E7%9A%84token/"/>
      <url>2024/11/22/blockchain/ethereum/%E6%A6%82%E5%BF%B5%E5%AD%A6%E4%B9%A0/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%B8%AD%E7%9A%84token/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是TOKEN（代币）">什么是TOKEN（代币）</h2><ul><li>通常是指私人发行的，类似硬币形状的物体，具备少量价值；如游戏币</li><li>以太坊上的代币是指基于区块链的一种抽象的资产，可以被持有并且用来代表资产、现金等</li></ul><h2 id="代币有哪些使用方式">代币有哪些使用方式</h2><ul><li>货币</li><li>资产</li><li>访问权限</li><li>权益（股东权益）</li><li>投票权</li><li>收藏品</li><li>身份</li><li>。。。</li></ul><h2 id="代币标准">代币标准</h2><h3 id="ERC20">ERC20</h3><ul><li><a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md">ERC20</a>接口定义</li><li>ERC20-<a href="https://github.com/OpenZeppelin/openzeppelin-solidity/blob/9b3710465583284b8c4c5d2245749246bb2e0094/contracts/token/ERC20/ERC20.sol">OpenZeppelin implementation</a></li><li>ERC20-<a href="https://github.com/ConsenSys/Tokens/blob/fdf687c69d998266a95f15216b1955a4965a0a6d/contracts/eip20/EIP20.sol">ConsenSys implementation</a></li></ul><p>ERC20是一个token标准，体现到合约上是一个接口规范。接口如下（不同编译版本的solidity的接口可能语法不一样，但是描述的是一样的）：</p><h4 id="我的0-8-0版本接口定义：">我的0.8.0版本接口定义：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0</span><br><span class="line"></span><br><span class="line">pragma solidity&#x3D;0.8.0;</span><br><span class="line"></span><br><span class="line">interface ERC20Interface &#123;</span><br><span class="line"></span><br><span class="line">    function balanceOf(address _owner) external view returns (uint256 balance);</span><br><span class="line"></span><br><span class="line">    function transfer(address _to, uint256 _value) external returns (bool success);</span><br><span class="line"></span><br><span class="line">    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);</span><br><span class="line"></span><br><span class="line">    function approve(address _spender, uint256 _value) external returns (bool success);</span><br><span class="line"></span><br><span class="line">    function allowance(address _owner, address _spender) external view returns (uint256 remaining);</span><br><span class="line"></span><br><span class="line">    event Transfer(address indexed _from, address indexed _to, uint256 _value);</span><br><span class="line"></span><br><span class="line">    event Approval(address indexed _owner, address indexed _spender, uint256 _value);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ERC20-ConsenSys定义">ERC20-[ConsenSys定义]</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Abstract contract for the full ERC 20 Token standard</span><br><span class="line">&#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;ethereum&#x2F;EIPs&#x2F;blob&#x2F;master&#x2F;EIPS&#x2F;eip-20.md</span><br><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract EIP20Interface &#123;</span><br><span class="line">    &#x2F;* This is a slight change to the ERC20 base standard.</span><br><span class="line">    function totalSupply() constant returns (uint256 supply);</span><br><span class="line">    is replaced with:</span><br><span class="line">    uint256 public totalSupply;</span><br><span class="line">    This automatically creates a getter function for the totalSupply.</span><br><span class="line">    This is moved to the base contract since public getter functions are not</span><br><span class="line">    currently recognised as an implementation of the matching abstract</span><br><span class="line">    function by the compiler.</span><br><span class="line">    *&#x2F;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; total amount of tokens</span><br><span class="line">    uint256 public totalSupply;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; @param _owner The address from which the balance will be retrieved</span><br><span class="line">    &#x2F;&#x2F;&#x2F; @return The balance</span><br><span class="line">    function balanceOf(address _owner) public view returns (uint256 balance);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; @notice send &#96;_value&#96; token to &#96;_to&#96; from &#96;msg.sender&#96;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; @param _to The address of the recipient</span><br><span class="line">    &#x2F;&#x2F;&#x2F; @param _value The amount of token to be transferred</span><br><span class="line">    &#x2F;&#x2F;&#x2F; @return Whether the transfer was successful or not</span><br><span class="line">    function transfer(address _to, uint256 _value) public returns (bool success);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; @notice send &#96;_value&#96; token to &#96;_to&#96; from &#96;_from&#96; on the condition it is approved by &#96;_from&#96;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; @param _from The address of the sender</span><br><span class="line">    &#x2F;&#x2F;&#x2F; @param _to The address of the recipient</span><br><span class="line">    &#x2F;&#x2F;&#x2F; @param _value The amount of token to be transferred</span><br><span class="line">    &#x2F;&#x2F;&#x2F; @return Whether the transfer was successful or not</span><br><span class="line">    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; @notice &#96;msg.sender&#96; approves &#96;_spender&#96; to spend &#96;_value&#96; tokens</span><br><span class="line">    &#x2F;&#x2F;&#x2F; @param _spender The address of the account able to transfer the tokens</span><br><span class="line">    &#x2F;&#x2F;&#x2F; @param _value The amount of tokens to be approved for transfer</span><br><span class="line">    &#x2F;&#x2F;&#x2F; @return Whether the approval was successful or not</span><br><span class="line">    function approve(address _spender, uint256 _value) public returns (bool success);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; @param _owner The address of the account owning tokens</span><br><span class="line">    &#x2F;&#x2F;&#x2F; @param _spender The address of the account able to transfer the tokens</span><br><span class="line">    &#x2F;&#x2F;&#x2F; @return Amount of remaining tokens allowed to spent</span><br><span class="line">    function allowance(address _owner, address _spender) public view returns (uint256 remaining);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; solhint-disable-next-line no-simple-event-func-name</span><br><span class="line">    event Transfer(address indexed _from, address indexed _to, uint256 _value);</span><br><span class="line">    event Approval(address indexed _owner, address indexed _spender, uint256 _value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ERC721"><a href="https://eips.ethereum.org/EIPS/eip-721">ERC721</a></h3><p>ERC721是NFT（Non-Fungible Token）的标准。直接看官方接口定义<a href="https://eips.ethereum.org/EIPS/eip-721">ERC721</a>和<a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol">openzeppelin的实现</a></p><h3 id="ERC777"><a href="https://eips.ethereum.org/EIPS/eip-777">ERC777</a></h3><pre><code>一种兼容ERC20的代币标准，这个标准在转账的时候会检查接收方支不支持接收当前代币（即有没有实现某个接口）；如果没有实现转账会失败，这可以防止代币转入一个不支持的合约中</code></pre>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> 概念学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背书策略（Endorsement policies）</title>
      <link href="2024/11/22/blockchain/fabric/how_to/Endorsement%20policies%E8%83%8C%E4%B9%A6%E7%AD%96%E7%95%A5/"/>
      <url>2024/11/22/blockchain/fabric/how_to/Endorsement%20policies%E8%83%8C%E4%B9%A6%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="背书策略">背书策略</h1><p>官方文档：<a href="https://hyperledger-fabric.readthedocs.io/en/latest/endorsement-policies.html#endorsement-policy-syntax">Endorsement policies</a></p><p>。。。省略部分</p><h2 id="Setting-chaincode-level-endorsement-policies-设置链码级别的背书策略">Setting chaincode-level endorsement policies(设置链码级别的背书策略)</h2><p>Chaincode-level endorsement policies are agreed to by channel members when they approve a chaincode definition for their organization. A sufficient number of channel members need to approve a chaincode definition to meet the <code>Channel/Application/LifecycleEndorsement</code> policy, which by default is set to a majority of channel members, before the definition can be committed to the channel. Once the definition has been committed, the chaincode is ready to use. Any invoke of the chaincode that writes data to the ledger will need to be validated by enough channel members to meet the endorsement policy.</p><p>通道成员在为其组织批准链码定义时，会同意链码级认可策略。需要足够数量的通道成员批准链码定义才能满足Channel / Application / LifecycleEndorsement策略，该策略默认情况下设置为大多数通道成员，然后才能将链码定义提交给通道。提交定义后，便可以使用链码了。任何将数据写入账本的链码的调用都需要由足够的通道成员来验证，以满足背书策略。</p><p>You can specify an endorsement policy for a chaincode using the Fabric SDKs. For an example, visit the <a href="https://hyperledger.github.io/fabric-sdk-node/master/tutorial-chaincode-lifecycle.html">How to install and start your chaincode</a> in the Node.js SDK documentation. You can also create an endorsement policy from your CLI when you approve and commit a chaincode definition with the Fabric peer binaries by using the <code>--signature-policy</code> flag.</p><p>你可以使用Fabric SDKs来为链码指定背书策略，访问<a href="https://hyperledger.github.io/fabric-sdk-node/master/tutorial-chaincode-lifecycle.html">How to install and start your chaincode</a>来查看使用Node.js SDK的文档。你也可以通过CLI在批准和提交链码定义时来创建背书策略，使用Fabric的peer可执行程序时使用 <code>--signature-policy</code> 标志来实现这个功能。</p><p>For example：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg --channelID mychannel --signature-policy &quot;AND(&#x27;Org1.member&#x27;, &#x27;Org2.member&#x27;)&quot; --name mycc --version 1.0 --package-id mycc_1:3a8c52d70c36313cfebbaf09d8616e7a6318ababa01c7cbe40603c373bcfe173 --sequence 1 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --waitForEvent</span><br></pre></td></tr></table></figure><p>The above command approves the chaincode definition of <code>mycc</code> with the policy <code>AND('Org1.member', 'Org2.member')</code> which would require that a member of both Org1 and Org2 sign the transaction. After a sufficient number of channel members approve a chaincode definition for <code>mycc</code>, the definition and endorsement policy can be committed to the channel using the command below:</p><p>上面的命令使用 <code>AND('Org1.member', 'Org2.member')</code> 策略来批准<code>mycc</code>的链码定义，这个策略要求Org1和Org2的成员都需要对一笔交易进行签名。在有足够的通道成员批准了<code>mycc</code>的链码定义之后，这个定义和背书策略就可以使用下面的命令被提交到通道了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o orderer.example.com:7050 --channelID mychannel --signature-policy &quot;AND(&#x27;Org1.member&#x27;, &#x27;Org2.member&#x27;)&quot; --name mycc --version 1.0 --sequence 1 --init-required --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --waitForEvent --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>Notice that, if the identity classification is enabled (see <a href="https://hyperledger-fabric.readthedocs.io/en/latest/msp.html">Membership Service Providers (MSP)</a>), one can use the <code>PEER</code> role to restrict endorsement to only peers.</p><p>请注意，如果启用了身份分类（请参阅 <a href="https://hyperledger-fabric.readthedocs.io/en/latest/msp.html">Membership Service Providers (MSP)</a>），则可以使用<code>PEER</code>角色将背书限制为仅peer节点。</p><p>For example:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg --channelID mychannel --signature-policy &quot;AND(&#x27;Org1.peer&#x27;, &#x27;Org2.peer&#x27;)&quot; --name mycc --version 1.0 --package-id mycc_1:3a8c52d70c36313cfebbaf09d8616e7a6318ababa01c7cbe40603c373bcfe173 --sequence 1 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --waitForEvent</span><br></pre></td></tr></table></figure><p>In addition to the specifying an endorsement policy from the CLI or SDK, a chaincode can also use policies in the channel configuration as endorsement policies. You can use the <code>--channel-config-policy</code> flag to select a channel policy with format used by the channel configuration and by ACLs.</p><p>除了从CLI或SDK中指定背书策略以外，链码还可以使用通道配置中的策略作为背书策略。你可以使用<code>--channel-config-policy</code>标志来选择一个通道策略，其格式由通道配置和ACL使用。</p><p>For example:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg --channelID mychannel --channel-config-policy Channel/Application/Admins --name mycc --version 1.0 --package-id mycc_1:3a8c52d70c36313cfebbaf09d8616e7a6318ababa01c7cbe40603c373bcfe173 --sequence 1 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --waitForEvent</span><br></pre></td></tr></table></figure><p>If you do not specify a policy, the chaincode definition will use the <code>Channel/Application/Endorsement</code> policy by default, which requires that a transaction be validated by a majority of channel members. This policy depends on the membership of the channel, so it will be updated automatically when organizations are added or removed from a channel. One advantage of using channel policies is that they can be written to be updated automatically with channel membership.</p><p>如果你不指定背书策略，链码定义会使用默认的 <code>Channel/Application/Endorsement</code>策略，这个策略要求交易必须经过大多数通道成员的验证。该策略取决于通道成员，因此从通道中添加或删除组织时，它将自动更新。使用通道策略的一个优势是，可以将其编写为根据通道成员数量自动更新。</p><p>If you specify an endorsement policy using the <code>--signature-policy</code> flag or the SDK, you will need to update the policy when organizations join or leave the channel. A new organization added to the channel after the chaincode has been defined will be able to query a chaincode (provided the query has appropriate authorization as defined by channel policies and any application level checks enforced by the chaincode) but will not be able to execute or endorse the chaincode. Only organizations listed in the endorsement policy syntax will be able sign transactions.</p><p>如果你使用 <code>--signature-policy</code> 标志或者SDK指定了背书策略，你需要在组织加入或者离开通道时更新这个策略。一个新的组织在链码被定义好之后加入这个通道，这个组织可以查询这个链码（提供查询具有通道策略和链码强制执行的任何应用程序级别检查所定义的适当授权），但是不能够执行或认可链码。只有组织在认可策略语法的列表中之后，组织才能签署交易。</p><h3 id="个人验证">个人验证</h3><p>chaincode如果不设置背书策略，则默认的背书策略是：<code> /Channel/Application/Endorsement</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">apple$</span><span class="bash"> peer lifecycle chaincode querycommitted --channelID alljoinchannel --name secured_supply --output json</span></span><br><span class="line">&#123;</span><br><span class="line">&quot;sequence&quot;: 6,</span><br><span class="line">&quot;version&quot;: &quot;3.0&quot;,</span><br><span class="line">&quot;endorsement_plugin&quot;: &quot;escc&quot;,</span><br><span class="line">&quot;validation_plugin&quot;: &quot;vscc&quot;,</span><br><span class="line">&quot;validation_parameter&quot;: &quot;EiAvQ2hhbm5lbC9BcHBsaWNhdGlvbi9FbmRvcnNlbWVudA==&quot;,</span><br><span class="line">&quot;collections&quot;: &#123;&#125;,</span><br><span class="line">&quot;approvals&quot;: &#123;</span><br><span class="line">&quot;GylCoreOrg1MSP&quot;: true,</span><br><span class="line">&quot;GylFOrg1MSP&quot;: true,</span><br><span class="line">&quot;GylSOrg1MSP&quot;: true,</span><br><span class="line">&quot;GylSOrg2MSP&quot;: true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置背书策略为<code>--signature-policy &quot;OR('GylCoreOrg1MSP.peer','GylFOrg1MSP.peer','GylSOrg1MSP.peer','GylSOrg2MSP.peer')&quot;</code>，再次查询链码定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">apple$</span><span class="bash"> peer lifecycle chaincode querycommitted --channelID alljoinchannel --name secured_supply --output json</span></span><br><span class="line">&#123;</span><br><span class="line">&quot;sequence&quot;: 7,</span><br><span class="line">&quot;version&quot;: &quot;3.0&quot;,</span><br><span class="line">&quot;endorsement_plugin&quot;: &quot;escc&quot;,</span><br><span class="line">&quot;validation_plugin&quot;: &quot;vscc&quot;,</span><br><span class="line">&quot;validation_parameter&quot;: &quot;CmUSFBISCAESAggAEgIIARICCAISAggDGhQSEgoOR3lsQ29yZU9yZzFNU1AQAxoREg8KC0d5bEZPcmcxTVNQEAMaERIPCgtHeWxTT3JnMU1TUBADGhESDwoLR3lsU09yZzJNU1AQAw==&quot;,</span><br><span class="line">&quot;collections&quot;: &#123;&#125;,</span><br><span class="line">&quot;approvals&quot;: &#123;</span><br><span class="line">&quot;GylCoreOrg1MSP&quot;: true,</span><br><span class="line">&quot;GylFOrg1MSP&quot;: true,</span><br><span class="line">&quot;GylSOrg1MSP&quot;: true,</span><br><span class="line">&quot;GylSOrg2MSP&quot;: true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解码之后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e</span><br><span class="line">GylCoreOrg1MSP</span><br><span class="line">GylFOrg1MSP</span><br><span class="line">GylSOrg1MSP</span><br><span class="line">GylSOrg2MSP</span><br></pre></td></tr></table></figure><h3 id="Endorsement-policy-syntax（背书策略的语法）">Endorsement policy syntax（背书策略的语法）</h3><p>As you can see above, policies are expressed in terms of principals (“principals” are identities matched to a role). Principals are described as <code>'MSP.ROLE'</code>, where <code>MSP</code> represents the required MSP ID and <code>ROLE</code> represents one of the four accepted roles: <code>member</code>, <code>admin</code>, <code>client</code>, and <code>peer</code>.</p><p>正如您在上面看到的那样，策略是根据主体表达的（“主体”是与角色匹配的身份）。主体被描述为<code>'MSP.ROLE'</code>，其中<code>MSP</code>代表所需的MSP ID,<code>ROLE</code> 代表四个公认的角色之一：<code>member</code>, <code>admin</code>, <code>client</code>，和 <code>peer</code>。</p><p>Here are a few examples of valid principals:</p><ul><li><code>'Org0.admin'</code>: any administrator of the <code>Org0</code> MSP</li><li><code>'Org1.member'</code>: any member of the <code>Org1</code> MSP</li><li><code>'Org1.client'</code>: any client of the <code>Org1</code> MSP</li><li><code>'Org1.peer'</code>: any peer of the <code>Org1</code> MSP</li></ul><p>The syntax of the language is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPR(E[, E...])</span><br></pre></td></tr></table></figure><p>Where <code>EXPR</code> is either <code>AND</code>, <code>OR</code>, or <code>OutOf</code>, and <code>E</code> is either a principal (with the syntax described above) or another nested call to <code>EXPR</code>.</p><p><code>EXPR</code> 可以为<code>AND</code>, <code>OR</code>, or <code>OutOf</code>，<code>E</code>可以是一个具有上面语法的主体，也可以是对另一个<code>EXPR</code>的嵌套调用。</p><p>For example:</p><ul><li><p><code>AND('Org1.member', 'Org2.member', 'Org3.member')</code> requests one signature from each of the three principals.</p></li><li><p><code>OR('Org1.member', 'Org2.member')</code> requests one signature from either one of the two principals.</p></li><li><p><code>OR('Org1.member', AND('Org2.member', 'Org3.member'))</code> requests either one signature from a member of the <code>Org1</code> MSP or one signature from a member of the <code>Org2</code> MSP and one signature from a member of the <code>Org3</code> MSP.</p></li><li><p><code>OutOf(1, 'Org1.member', 'Org2.member')</code>, which resolves to the same thing as <code>OR('Org1.member', 'Org2.member')</code>.</p></li><li><p>Similarly, <code>OutOf(2, 'Org1.member', 'Org2.member')</code> is equivalent to <code>AND('Org1.member', 'Org2.member')</code>, and <code>OutOf(2, 'Org1.member', 'Org2.member', 'Org3.member')</code> is equivalent to <code>OR(AND('Org1.member', 'Org2.member'), AND('Org1.member', 'Org3.member'), AND('Org2.member', 'Org3.member'))</code>.</p></li></ul><p>例如：</p><ul><li><p><code>AND('Org1.member', 'Org2.member', 'Org3.member')</code> 三个主体都需要进行签名。</p></li><li><p><code>OR('Org1.member', 'Org2.member')</code> 只需要两个主体的其中一个提供签名。</p></li><li><p><code>OR('Org1.member', AND('Org2.member', 'Org3.member'))</code> 需要Org1提供签名，或者需要Org2和Org3同时提供签名。</p></li><li><p><code>OutOf(1, 'Org1.member', 'Org2.member')</code>, 和 <code>OR('Org1.member', 'Org2.member')</code>做的事情一样。</p></li><li><p>相似的, <code>OutOf(2, 'Org1.member', 'Org2.member')</code> 与 <code>AND('Org1.member', 'Org2.member')</code>相同</p></li><li><p><code>OutOf(2, 'Org1.member', 'Org2.member', 'Org3.member')</code> 与 <code>OR(AND('Org1.member', 'Org2.member'), AND('Org1.member', 'Org3.member'), AND('Org2.member', 'Org3.member'))</code>相同。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Hyperledger-Fabric </category>
          
          <category> HOW-TO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Hyperledger-Fabric </tag>
            
            <tag> Endorsement policies </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CERTIK针对SOLO.TOP的审计报告学习</title>
      <link href="2024/11/22/blockchain/ethereum/audit/CERTIK%E9%92%88%E5%AF%B9SOLO.TOP%E7%9A%84%E5%AE%A1%E8%AE%A1%E6%8A%A5%E5%91%8A%E5%AD%A6%E4%B9%A0/"/>
      <url>2024/11/22/blockchain/ethereum/audit/CERTIK%E9%92%88%E5%AF%B9SOLO.TOP%E7%9A%84%E5%AE%A1%E8%AE%A1%E6%8A%A5%E5%91%8A%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="学习结论">学习结论</h2><ol><li>审计报告内容比较简单，审计发现的代码问题因给的代码较少难以做进一步的判断</li><li>从审计报告中看项目的代码是比较健康的，审计发现的问题也都做了修复</li><li>代码未开源无法判定其他风险</li></ol><h2 id="基本信息">基本信息</h2><p><a href="https://solo.top/#/index">SOLO.TOP</a></p><p><a href="https://solo.top/Solo_Top_Final_Audit_Report_By_CertiK.pdf">Audit Report </a></p><h3 id="审计结果">审计结果</h3><p>共发现12个问题，其中2个是Minor级别，其余的都是information级别。<br><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/%E6%88%AA%E5%B1%8F2021-05-25%2011.43.48.png" alt></p><h4 id="审计种类">审计种类</h4><ul><li>Gas优化</li><li>数学计算</li><li>逻辑问题</li><li>流程控制</li><li>代码样式</li><li>魔法数字</li><li>编译错误</li></ul>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> 合约审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> solidity </tag>
            
            <tag> 智能合约 </tag>
            
            <tag> 审计报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alpaca项目评估报告</title>
      <link href="2024/11/22/blockchain/ethereum/audit/Alpaca%E9%A1%B9%E7%9B%AE%E8%AF%84%E4%BC%B0%E6%8A%A5%E5%91%8A/"/>
      <url>2024/11/22/blockchain/ethereum/audit/Alpaca%E9%A1%B9%E7%9B%AE%E8%AF%84%E4%BC%B0%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p><a href="https://defisafety.com/2021/06/11/alpaca-finance-bsc/">https://defisafety.com/2021/06/11/alpaca-finance-bsc/</a></p><h2 id="项目安全评估结果">项目安全评估结果</h2><p>Alpaca Finance项目合约审计完善、代码开源，策略基本透明；虽然有一些审计的问题并未部署到生产环境，但是如果不做借贷是比较安全的。</p><p>并且Alpaca Finance项目的AlpacaToken代币是随着区块的增加而铸造的，因此不会出现像AutoShark那样被闪电贷攻击铸造很多SHARK代币。</p><table><thead><tr><th>评估维度</th><th>评估结果</th></tr></thead><tbody><tr><td>审计报告</td><td>合约代码由多家审计公司审计，发现的严重问题基本修复，未修复的问题也不影响非借贷类使用者。</td></tr><tr><td>智能合约</td><td>完全开源，部署的智能合约与审计修复后的智能合约代码基本一致；<br><em>其中有一个DebtToken合约在授信转账后未更新授信额度的问题部署的合约与源码不一致，但是如果不做借贷进行farm并且不授权给其他地址则没有问题。</em></td></tr><tr><td>安全漏洞</td><td>未发现合约后门。<br><em>AlpacaToken有一个owner可以锁定的方法，但是被锁定的地址可以通过调用解锁方法来释放；所以不能让合约持有AlpacaToken，不然被锁定了就提不出来了；这可能也是Alpaca团队预防被合约攻击的一种手段</em></td></tr><tr><td>资金投向</td><td>存入的资金在本平台被其他人借出并最终投向了<a href="https://exchange.pancakeswap.finance/#/swap">pancakeswap</a>和<a href="https://app.wault.finance/bsc/index.html">wault.finance</a></td></tr></tbody></table><h2 id="审计报告">审计报告</h2><p>Alpaca主项目共有两个审计公司做了代码审计，分别如下：</p><ul><li><a href="https://github.com/alpaca-finance/bsc-alpaca-contract/blob/main/audits/protocol/PeckShield-Audit-Report-Alpaca-v1.0.pdf">PeckShield</a></li><li><a href="https://github.com/alpaca-finance/bsc-alpaca-contract/blob/main/audits/protocol/CertiK%20Security%20Assessment%20for%20Alpaca%20Finance%201.pdf">Certik</a></li></ul><p>Alpaca的Grazing Range 合约也有两个审计公司做了代码审计，分别如下：</p><ul><li><p><a href="https://github.com/alpaca-finance/bsc-alpaca-contract/blob/main/audits/grazing-range/">SlowMist</a></p></li><li><p><a href="https://github.com/alpaca-finance/bsc-alpaca-contract/blob/main/audits/grazing-range/Alpaca_GrazingRange_SmartContractReview_fcd2f3c_Report.pdf">Valix/Inspex</a></p></li></ul><h3 id="审计报告分析">审计报告分析</h3><ol start="0"><li><p>由多家审计公司进行审计是加分项</p></li><li><p>审计报告中发现的严重级别的问题都已经修正</p></li></ol><h2 id="合约代码">合约代码</h2><h3 id="是否开源">是否开源</h3><p>合约代码开源，并在官方文档提供代码链接<a href="https://github.com/alpaca-finance/bsc-alpaca-contract/">bsc-alpaca-contract</a></p><h3 id="合约代码检查">合约代码检查</h3><h4 id="GrazingRange-sol合约"><strong>GrazingRange.sol</strong>合约</h4><h5 id="审计报告提供的fix后的源码">审计报告提供的fix后的源码</h5><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210616125519806.png" alt="image-20210616125519806"></p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210616125857105.png" alt="image-20210616125857105"></p><h5 id="部署的智能合约GrazingRange的代码，也是修复后的代码">部署的智能合约<a href="https://bscscan.com/address/0x87d8ebd2055d29d26387b64ddc9e00d11e1d22f5#code">GrazingRange</a>的代码，也是修复后的代码</h5><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210616125337941.png" alt="image-20210616125337941"></p><h4 id="AlpacaToken合约">AlpacaToken合约</h4><ul><li><strong>ATC-03 | Lack of State Update in</strong>已经修复</li></ul><h5 id="审计报告-v2">审计报告</h5><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210616142028325.png" alt="image-20210616142028325"></p><h5 id="合约源码">合约源码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function manualMint(address _to, uint256 _amount) public onlyOwner &#123;</span><br><span class="line">  require(manualMinted.add(_amount) &lt;&#x3D; MANUAL_MINT_LIMIT, &quot;mint limit exceeded&quot;);</span><br><span class="line">  manualMinted &#x3D; manualMinted.add(_amount);</span><br><span class="line">  mint(_to, _amount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="DebtToken合约"><strong>DebtToken</strong>合约</h4><p><strong>DTC-01 | Lack of Allowance Check In</strong>  源码已经修复，但是生产环境部署的是未修复代码；</p><p>此问题如果有影响必须满足两个条件：</p><ol><li>A地址参与此项目的借贷farm</li><li>A地址把获取到的debttoken授信一部分给其他地址B</li></ol><p>满足以上两个条件之后获得授信的地址B就可以转移所有的A的debttoken。</p><h5 id="审计报告问题">审计报告问题</h5><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210616143105352.png" alt="image-20210616143105352"></p><h5 id="合约源码-v2">合约源码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function transferFrom(address from, address to, uint256 amount) public override returns (bool) &#123;</span><br><span class="line">  require(okHolders[from], &quot;debtToken::transferFrom:: unapproved holder in from&quot;);</span><br><span class="line">  require(okHolders[to], &quot;debtToken::transferFrom:: unapproved holder in to&quot;);</span><br><span class="line">  _transfer(from, to, amount);</span><br><span class="line">  _approve(from, _msgSender(), allowance(from, _msgSender()).sub(amount, &quot;BEP20: transfer amount exceeds allowance&quot;));</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="线上部署合约代码DebtToken">线上部署合约代码<a href="https://bscscan.com/address/0x205ec09443debb37a526a384f68622bae69f6fc6#code"><strong>DebtToken</strong></a></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function transferFrom(address from, address to, uint256 amount) public override returns (bool) &#123;</span><br><span class="line">  require(okHolders[from], &quot;debtToken::transferFrom:: unapproved holder in from&quot;);</span><br><span class="line">  require(okHolders[to], &quot;debtToken::transferFrom:: unapproved holder in to&quot;);</span><br><span class="line">  _transfer(from, to, amount);</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Vault合约">Vault合约</h4><p>PeckShield审计报告的3.1Possible Drain of Vault Funds With Double Returns Of Excess Tokens问题</p><h5 id="合约源码-v3">合约源码</h5><p>![image-20210616145054787](/Users/apple/Library/Application Support/typora-user-images/image-20210616145054787.png)</p><h5 id="生产环境部署的合约代码，其他代码与源码不完全一致，但是此问题已经修复">生产环境部署的合约代码，其他代码与源码不完全一致，但是此问题已经修复</h5><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210616145433604.png" alt="image-20210616145433604"></p><h5 id="PeckShield审计报告的3-4-Proper-Leftover-Return-After-Liquidation问题">PeckShield审计报告的3.4 Proper Leftover Return After Liquidation问题</h5><p>此问题是在清算时剩余的金额没有返还给用户，而是给了清算人。</p><h5 id="审计报告提供的问题代码">审计报告提供的问题代码:</h5><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210616145742478.png" alt="image-20210616145742478"></p><h5 id="合约源码-v4">合约源码</h5><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210616145813461.png" alt="image-20210616145813461"></p><h5 id="生产环境部署的代码">生产环境部署的代码</h5><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210616145849931.png" alt="image-20210616145849931"></p><h2 id="安全漏洞">安全漏洞</h2><p>检查合约如下，均未发现明显的管理员或owner有权利转移别人资产的方法：</p><ul><li>GrazingRange</li><li>WaultSwapWorker</li><li>AlpacaToken</li><li>PancakeswapV2Worker</li><li>Vault</li></ul><h3 id="AlpacaToken代码检查">AlpacaToken代码检查</h3><p>AlpacaToken中有一个只允许owner调用的可以锁住任何人资产的方法，但是提供了unlock方法，被锁住的地址可以调用解锁。</p><p>此方法是一个小风险，虽然资产没有被转移还能由自己解锁，但是尚不清楚为什么要给owner锁住某个地址的资产的权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function lock(address _account, uint256 _amount) external onlyOwner &#123;</span><br><span class="line">  require(_account !&#x3D; address(0), &quot;no lock to address(0)&quot;);</span><br><span class="line">  require(_amount &lt;&#x3D; balanceOf(_account), &quot;no lock over balance&quot;);</span><br><span class="line"></span><br><span class="line">  _transfer(_account, address(this), _amount);</span><br><span class="line"></span><br><span class="line">  _locks[_account] &#x3D; _locks[_account].add(_amount);</span><br><span class="line">  _totalLock &#x3D; _totalLock.add(_amount);</span><br><span class="line"></span><br><span class="line">  if (_lastUnlockBlock[_account] &lt; startReleaseBlock) &#123;</span><br><span class="line">    _lastUnlockBlock[_account] &#x3D; startReleaseBlock;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  emit Lock(_account, _amount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function unlock() external &#123;</span><br><span class="line">  require(_locks[msg.sender] &gt; 0, &quot;no locked ALPACAs&quot;);</span><br><span class="line"></span><br><span class="line">  uint256 amount &#x3D; canUnlockAmount(msg.sender);</span><br><span class="line"></span><br><span class="line">  _transfer(address(this), msg.sender, amount);</span><br><span class="line">  _locks[msg.sender] &#x3D; _locks[msg.sender].sub(amount);</span><br><span class="line">  _lastUnlockBlock[msg.sender] &#x3D; block.number;</span><br><span class="line">  _totalLock &#x3D; _totalLock.sub(amount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> 合约审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> solidity </tag>
            
            <tag> 项目评估 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CoinWind审计报告学习</title>
      <link href="2024/11/22/blockchain/ethereum/audit/CoinWind%E5%AE%A1%E8%AE%A1%E6%8A%A5%E5%91%8A%E5%AD%A6%E4%B9%A0/"/>
      <url>2024/11/22/blockchain/ethereum/audit/CoinWind%E5%AE%A1%E8%AE%A1%E6%8A%A5%E5%91%8A%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="学习结论">学习结论</h2><ol><li>审计报告不严谨，如“成都链安”的审计报告存在拼写错误（错误见中文版“审计类型及结果”），“灵踪安全”的审计报告是一个模板但是未替换模板的内容（错误见中文版&quot;引用文档&quot;）。</li><li>代码未开源，无法从官网、审计报告以及搜索引擎获得项目的源码，审计报告中只存在部分代码片段。（个人使用此网站进行审批时调用的合约也<a href="https://bscscan.com/bytecode-decompiler?a=0x6ba7d75ec6576f88a10be832c56f0f27dc040ddd">无法完全反编译</a>）</li><li>成都链安的审计结论说的很中立：“项目中管理权限 owner 和 governance 对整 个项目有较高的控制权，建议做好权限管控。”<ol><li>报告中显示有个只允许owner调用的提现的方法，因为代码不全无法根据上下文判断这个是不是后门。如下图</li><li><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210524171340292.png" alt></li></ol></li></ol><p><strong>因为代码未开源且owner和管理员有较高的权限，注意风险</strong></p><h2 id="基本信息">基本信息</h2><p>官网：<a href="https://coinwind.pro/">https://coinwind.pro/</a></p><p>审计平台：<a href="https://www.fairyproof.com/">灵踪安全</a>、<a href="https://www.lianantech.com/#/index?index=0">成都链安</a></p><h2 id="成都链安"><a href="https://www.lianantech.com/#/index?index=0">成都链安</a></h2><p>审计报告：<a href="https://www.coinwind.com/BEOSIN_en.pdf">英文</a>、<a href="https://www.coinwind.com/BEOSIN_zh.pdf">中文</a></p><ol><li>审计报告中列出了一些审计的代码片段，最终结果为pass</li><li>“owner 和 governance ”权限较高</li></ol><h2 id="灵踪安全"><a href="https://www.fairyproof.com/">灵踪安全</a></h2><p>审计报告：<a href="https://www.coinwind.com/flyhub_en.pdf">英文</a>、<a href="https://www.coinwind.com/flyhub_zh.pdf">中文</a></p><ol><li>审计报告中提到的问题没有对应的代码片段，读了之后并没有办法理解是什么问题</li><li>从灵踪安全的角度来说发现了5个问题并且项目方已经解决</li></ol>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> 合约审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> solidity </tag>
            
            <tag> 智能合约 </tag>
            
            <tag> 审计报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>certik针对pancakeswap的审计报告学习</title>
      <link href="2024/11/22/blockchain/ethereum/audit/certik%E9%92%88%E5%AF%B9pancakeswap%E7%9A%84%E5%AE%A1%E8%AE%A1%E6%8A%A5%E5%91%8A%E5%AD%A6%E4%B9%A0/"/>
      <url>2024/11/22/blockchain/ethereum/audit/certik%E9%92%88%E5%AF%B9pancakeswap%E7%9A%84%E5%AE%A1%E8%AE%A1%E6%8A%A5%E5%91%8A%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="审计报告总结">审计报告总结</h3><ol><li>共发现9个问题，其中5个是information级别，其他更严重级别的问题pancakeswap团队已经修复或者跟certik沟通表示没有影响</li><li>通过审计报告看项目还是很健康的。</li></ol><h3 id="审计项目地址">审计项目地址</h3><p><a href="https://www.certik.org/projects/pancakeswap">https://www.certik.org/projects/pancakeswap</a></p><h3 id="审计发现的问题">审计发现的问题</h3><p>暂时忽略代码格式之类的问题，主要列出中级以上的问题。</p><h4 id="SBR-01-Incorrect-Delegation-Flow">SBR-01: Incorrect Delegation Flow</h4><p>问题比较简单直接看修复提交的代码：在<code>burn</code>时需要把此账户的授权的地址修改为<code>0</code>地址，其实就是把授权移除；这个问题应该是个手误。</p><p><a href="https://github.com/pancakeswap/pancake-farm/commit/dacf82832df75d11ea52c18fd6a6e9ddc59d0834#diff-2de7312011f133f37ba339716dbb7c9304a9364fa63be4471e99980fb0cc92e3">commit</a></p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210521190424282.png" alt></p><h4 id="SCF-01-addressList-Inaccuracy"><a href="https://github.com/pancakeswap/pancake-farm/commit/2b6732162bba5232e7fe5d9d41ac5d71d4b3a1d4#diff-632c61f5103a7f95cd7b6eaf4fdab4f6b91f8d4034cddbf6ff16a09162dbc6ed">SCF-01</a> addressList Inaccuracy</h4><h5 id="Description">Description:</h5><p>The first linked <code>if</code> block pushes a new <code>address</code> to the <code>addressList</code> array in the case the <code>userInfo</code> mapping lookup yields <code>0</code> on the <code>amount</code> member. This case is possible even after the user has already been added to the array, either by invoking <code>emergencyWithdraw</code> or withdrawing the full amount held by the user.</p><h5 id="Recommendation">Recommendation:</h5><p>We advise that the push mechanism is revised to ensure that the user does not already exist in the array.</p><h5 id="Alleviation">Alleviation:</h5><p>The PancakeSwap team altered the condition for pushing new items to the addressList array, however duplicates can still exist. After conversing with the team, we were informed that the array is not utilized on-chain and is meant to aid off-chain processes in an airdrop mechanism which will eliminate duplicate addresses. As such, this issue can be safely ignored. We would like to note that this is not an optimal mechanism to conduct this, as it would be better to instead rely on  emitted events and blockchain analysis rather than contract storage</p><h5 id="修复后的代码如下：">修复后的代码如下：</h5><p>certik提出的问题意思是，在存款时通过用户的amount是否为0判断地址是否存在<code>addressList</code>中不严谨，因为可能之前存过一次然后全部提现了，这样就会导致<code>amount</code>为0并且在<code>addressList</code>中存在。</p><p>pancakeswap团队通过遍历<code>addressList</code>来判断地址是否存在于<code>addressList</code>中。</p><p><a href="https://github.com/pancakeswap/pancake-farm/commit/2b6732162bba5232e7fe5d9d41ac5d71d4b3a1d4#diff-632c61f5103a7f95cd7b6eaf4fdab4f6b91f8d4034cddbf6ff16a09162dbc6ed">commit</a></p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210521184602489.png" alt></p><h5 id="个人理解">个人理解</h5><p><em>通过遍历<code>addressList</code>的方式来查找某个地址是否在这个列表中不太可取，因为这增加了gas费。</em></p><p><em>如果别人想要攻击一直存入很小的<code>amount</code>来增加<code>addressList</code>的大小会导致存款的方法的gas费特别高。</em></p><h4 id="SCF-03-Incorrect-Reset-Mechanism"><a href="https://github.com/pancakeswap/pancake-farm/commit/8604c236388cd6e30fcf09321553324f308d1209#diff-632c61f5103a7f95cd7b6eaf4fdab4f6b91f8d4034cddbf6ff16a09162dbc6ed">SCF-03</a> Incorrect Reset Mechanism</h4><h5 id="Description-v2">Description:</h5><p>The emergencyWithdraw function is meant to “reset” a user’s state and withdraw his deposited tokens. In this case, the rewardPending variable of the user struct is not zeroed out.</p><h5 id="Recommendation-v2">Recommendation:</h5><p>As the rewardPending member is cumulative, it is possible to exploit this behavior and artificially increase the pending rewards of a user. We advise that either a manual 0 assignment statement is introduced in the emergencyWithdraw function or a delete operation is conducted on the full struct located at userInfo[msg.sender].</p><h5 id="Alleviation-v2">Alleviation:</h5><p>The emergencyWithdraw function was properly fixed to zero out all members of the UserInfo struct</p><h5 id="修复后代码如下">修复后代码如下</h5><p>此问题是说在转账之后应该吧user结构里面的值都更新为0，团队已经做了修复。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; Withdraw without caring about rewards. EMERGENCY ONLY.</span><br><span class="line">function emergencyWithdraw() public &#123;</span><br><span class="line">    UserInfo storage user &#x3D; userInfo[msg.sender];</span><br><span class="line">    syrup.safeTransfer(address(msg.sender), user.amount);</span><br><span class="line">    emit EmergencyWithdraw(msg.sender, user.amount);</span><br><span class="line">    user.amount &#x3D; 0;</span><br><span class="line">    user.rewardDebt &#x3D; 0;</span><br><span class="line">    user.rewardPending &#x3D; 0; &#x2F;&#x2F; 此行为修复行</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="个人理解-v2">个人理解</h5><p><em>最好是先修改user结构中的值在进行转账，这样应该是最佳开发实践。</em></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> 合约审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> solidity </tag>
            
            <tag> 智能合约 </tag>
            
            <tag> 审计报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>审计智能合约需要关注哪些内容</title>
      <link href="2024/11/22/blockchain/ethereum/audit/%E5%AE%A1%E8%AE%A1%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%9C%80%E8%A6%81%E5%85%B3%E6%B3%A8%E5%93%AA%E4%BA%9B%E5%86%85%E5%AE%B9/"/>
      <url>2024/11/22/blockchain/ethereum/audit/%E5%AE%A1%E8%AE%A1%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%9C%80%E8%A6%81%E5%85%B3%E6%B3%A8%E5%93%AA%E4%BA%9B%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<p>最近学习了<a href="https://www.certik.org/">CERTIK</a>、<a href="https://www.fairyproof.com/">灵踪安全</a>、<a href="https://www.lianantech.com/#/index?index=0">成都链安</a>、<a href="https://www.trailofbits.com/">Trail of Bits</a> 等公司的合约审计报告；在此做一个总结，通过学习审计报告中的关注点来尽量避免在以后的合约开发过程中踩这些坑。</p><p>虽然列出的内容很多，但是背后的逻辑与思想并没有完全了解与吃透，后续还需要继续学习与消化。</p><h2 id="合约审计的维度">合约审计的维度</h2><p>合约审计主要包括下面这些大类</p><ul><li>代码规范审计</li><li>代码漏洞审计</li><li>测试与验证审计</li><li>业务逻辑审计</li></ul><h2 id="合约审计的方式">合约审计的方式</h2><ul><li>形式化验证</li><li>静态分析</li><li>动态分析</li><li>典型案例测试</li><li>人工审核</li></ul><h2 id="代码规范审计">代码规范审计</h2><h4 id="编译器版本安全审计">编译器版本安全审计</h4><p>老版本的编译器可能会导致各种已知的安全问题，建议开发者在代码中指定合约代码采用最新的编译器版本，并消除编译器告警。</p><h4 id="弃用项审计">弃用项审计</h4><p>Solidity智能合约开发语言处于快速迭代中，部分关键字已被新版本的编译器弃用，如throw、years等，为了消除其可能导致的隐患，合约开发者不应该使用当前编译器版本已弃用的关键字。</p><h4 id="冗余代码审计">冗余代码审计</h4><p>智能合约中的冗余代码会降低代码可读性，并可能需要消耗更多的gas用于合约部署，建议消除冗余代码。</p><h4 id="SafeMath-功能审计">SafeMath 功能审计</h4><p>检查合约中是否正确使用SafeMath库内的函数进行数学运算，或者进行其他防溢出的检查。</p><h4 id="require-assert-使用审计">require/assert 使用审计</h4><p>Solidity使用状态恢复异常来处理错误。这种机制将会撤消对当前调用(及其所有子调用)中的状态所做的所有更改，并向调用者标记错误。函数assert和require可用于检查条件并在条件不满足时抛出异常。</p><ul><li><p>assert函数只能用于测试内部错误，并检查非变量。</p></li><li><p>require函数用于确认条件有效性，例如输入变量，或合约状态变量是否满足条件，或验证外部合约调用的返回值。</p></li></ul><h4 id="gas-消耗审计">gas 消耗审计</h4><h4 id="可见性规范审计">可见性规范审计</h4><h4 id="fallback-函数使用审计">fallback 函数使用审计</h4><h4 id="代码样式">代码样式</h4><h4 id="魔法数字">魔法数字</h4><h4 id="编译错误">编译错误</h4><h4 id="代码封装">代码封装</h4><h4 id="集中化">集中化</h4><h4 id="可升级性">可升级性</h4><h4 id="监控">监控</h4><h2 id="代码漏洞审计">代码漏洞审计</h2><h4 id="整型溢出审计">整型溢出审计</h4><p>整型溢出是很多语言都存在的安全问题，它们在智能合约中尤其危险。Solidity最多能处理256位的数字(2**256-1)，最大数字增加1会溢出得到0。同样，当数字为uint类型时，0减去1会下溢得到最大数字值。溢出情况会导致不正确的结果，特别是如果其可能的结果未被预期，可能会影响程序的可靠性和安全性。</p><h4 id="重入攻击审计">重入攻击审计</h4><p>重入漏洞是最典型的智能合约漏洞，曾导致了The DAO被攻击。该漏洞原因是Solidity中的call.value()函数在被用来发送ETH的时候会消耗它接收到的所有gas，当调用call.value()函数发送ETH的逻辑顺序存在错误时，就会存在重入攻击的风险。</p><h4 id="伪随机数生成审计">伪随机数生成审计</h4><p>智能合约中可能会使用到随机数，在solidity下常见的是用block区块信息作为随机因子生成，但是这样使用是不安全的，区块信息是可以被矿工控制或被攻击者在交易时获取到，这类随机数在一定程度上是可预测或可碰撞的，比较典型的例子就是fomo3d的airdrop随机数可以被碰撞。</p><h4 id="交易顺序依赖审计">交易顺序依赖审计</h4><p>在交易打包执行过程中，面对相同难度的交易时，矿工往往会选择gas费用高的优先打包，因此用户可以指定更高的gas费用，使自己的交易优先被打包执行。</p><h4 id="拒绝服务攻击审计">拒绝服务攻击审计</h4><p>拒绝服务攻击，即Denial of Service，可以使目标无法提供正常的服务。在智能合约中也会存在此类问题，由于智能合约的不可更改性，该类攻击可能使得合约永远无法恢复正常工作状态。导致智能合约拒绝服务的原因有很多种，包括在作为交易接收方时的恶意revert、代码设计缺陷导致gas耗尽等等。</p><h4 id="函数调用权限审计">函数调用权限审计</h4><p>智能合约如果存在高权限功能，如：铸币、自毁、change owner等，需要对函数调用做权限限制，避免权限泄露导致的安全问题。</p><h4 id="call-delegatecall-安全审计">call/delegatecall 安全审计</h4><p>Solidity中提供了call/delegatecall函数来进行函数调用，如果使用不当，会造成call注入漏洞，例如call的参数如果可控，则可以控制本合约进行越权操作或调用其他合约的危险函数</p><h4 id="返回值安全审计">返回值安全审计</h4><p>在Solidity中存在transfer()、send()、call.value()等方法中，transfer转账失败交易会回滚，而send和call.value转账失败会return false，如果未对返回做正确判断，则可能会执行到未预期的逻辑;另外在HRC20 Token的transfer/transferFrom功能实现中，也要避免转账失败returnfalse的情况，以免造成假充值漏洞。</p><h4 id="tx-origin-使用安全审计">tx.origin 使用安全审计</h4><p>在智能合约的复杂调用中，tx.origin表示交易的初始创建者地址，如果使用tx.origin进行权限判断，可能会出现错误;另外，如果合约需要判断调用方是否为合约地址时则需要使用tx.origin，不能使用extcodesize。</p><h4 id="重放攻击审计">重放攻击审计</h4><p>重放攻击是指如果两份合约使用了相同的代码实现，并且身份鉴权在传参中，当用户在向一份合<br>约中执行一笔交易，交易信息可以被复制并且向另一份合约重放执行该笔交易。</p><h4 id="变量覆盖审计">变量覆盖审计</h4><p>智能合约中存在着复杂的变量类型，例如结构体、动态数组等，如果使用不当，对其赋值后，可能导致覆盖已有状态变量的值，造成合约执行逻辑异常。</p><h4 id="其他的攻击与安全检查的点">其他的攻击与安全检查的点</h4><p>下面这些审计的点后续再做持续的学习与解释补充</p><ul><li>重排攻击</li><li>注入攻击</li><li>条件竞争攻击</li><li>时间戳依赖攻击</li><li>冗余的回调函数</li><li>函数状态变量的显式可见性</li><li>逻辑缺陷</li><li>未声明的存储指针</li><li>算术精度误差</li><li>假充值漏洞</li><li>变量覆盖</li><li>设计缺陷</li><li>潜在后门</li><li>代币发行</li><li>代理升级</li><li>委托调用插槽共享</li><li>用户资金安全</li><li>迁移管理</li></ul><h2 id="测试和验证">测试和验证</h2><h4 id="自动化测试与验证工具：">自动化测试与验证工具：</h4><ul><li><a href="https://github.com/crytic/slither">Slither</a></li><li><a href="https://github.com/crytic/echidna">Echidna</a></li></ul><h4 id="测试和验证关注点">测试和验证关注点</h4><ul><li>代码自动化测试覆盖率</li><li>代码测试用例通过率</li></ul><h2 id="业务逻辑审计">业务逻辑审计</h2><p>根据白皮书和被审计公司的业务逻辑进行的审计，包括：</p><ul><li>业务逻辑审计</li><li>业务实现审计</li></ul>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> 合约审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> solidity </tag>
            
            <tag> 智能合约 </tag>
            
            <tag> 审计报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太坊合约开发最佳安全指南与反模式</title>
      <link href="2024/11/22/blockchain/ethereum/how_to/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91%E6%9C%80%E4%BD%B3%E5%AE%89%E5%85%A8%E6%8C%87%E5%8D%97%E4%B8%8E%E5%8F%8D%E6%A8%A1%E5%BC%8F/"/>
      <url>2024/11/22/blockchain/ethereum/how_to/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91%E6%9C%80%E4%BD%B3%E5%AE%89%E5%85%A8%E6%8C%87%E5%8D%97%E4%B8%8E%E5%8F%8D%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="安全">安全</h2><h3 id="以太坊智能合约-——-最佳安全开发指南："><a href="https://github.com/ConsenSys/smart-contract-best-practices/blob/master/README-zh.md">以太坊智能合约 —— 最佳安全开发指南</a>：</h3><p>最佳实践中所体现出的这些特性，其实是所有软件开发中都需要的；而在智能合约代码中尤其重要是因为合约一旦部署无法再做任何更改。</p><ul><li>最小化/简单化</li><li>代码重用</li><li>代码质量</li><li>可读性和可审计性</li><li>测试覆盖率</li></ul><h3 id="安全风险和反模式">安全风险和反模式</h3><h4 id="有漏洞合约的例子"><a href="https://github.com/Arachnid/uscc">有漏洞合约的例子</a></h4><h4 id="重入">重入</h4><p>最有名的例子就是The DAO，code：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function getBalance(address user) constant returns(uint) &#123;</span><br><span class="line">  return userBalances[user];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function addToBalance() &#123;</span><br><span class="line">  userBalances[msg.sender] +&#x3D; msg.amount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function withdrawBalance() &#123;</span><br><span class="line">  amountToWithdraw &#x3D; userBalances[msg.sender];</span><br><span class="line">  if (!(msg.sender.call.value(amountToWithdraw)())) &#123; throw; &#125;</span><br><span class="line">  userBalances[msg.sender] &#x3D; 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="防范技术">防范技术</h5><ol><li>使用transfer方法转账，因为transfer方法转账时只会带2300gas，这些gas不足以让其他合约再做其他的操作</li><li>在转账之前先修改状态（检查-修改-交互）</li></ol><h3 id="算数溢出">算数溢出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0</span><br><span class="line"></span><br><span class="line">pragma solidity&#x3D;0.8.0;</span><br><span class="line"></span><br><span class="line">contract TimeLock &#123;</span><br><span class="line">    mapping(address &#x3D;&gt; uint) public balances;</span><br><span class="line"></span><br><span class="line">    mapping(address &#x3D;&gt; uint) public lockTime;</span><br><span class="line"></span><br><span class="line">    function deposit() public payable &#123;</span><br><span class="line">        balances[msg.sender] +&#x3D; msg.value;</span><br><span class="line">        lockTime[msg.sender] &#x3D; block.timestamp + 1 weeks;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function increaseLockTime(uint _secondsToIncrease) public &#123;</span><br><span class="line">        lockTime[msg.sender] +&#x3D; _secondsToIncrease;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw() public &#123;</span><br><span class="line">        require(lockTime[msg.sender] &lt; block.timestamp);</span><br><span class="line">        require(balances[msg.sender] &gt; 0);</span><br><span class="line">        balances[msg.sender] &#x3D; 0;</span><br><span class="line">        payable(msg.sender).transfer(balances[msg.sender]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="防范技术-v2">防范技术</h5><p>使用SafeMath库</p><h4 id="意外的以太币">意外的以太币</h4><p>有两种方式在合约没有payable方法时也能够强制给合约转入以太币：</p><ul><li>self-destruct：在一个合约使用selfdestruct函数将代码清除时，可以把需要自毁的合约中的以太币转入到指定的地址</li><li>预先发送的以太币：合约的地址是根据创建这个合约的账户地址和交易nonce通过Keccak256计算出来的，所以其实是可以预先给一个合约发送以太币的</li></ul><h5 id="这会导致什么问题呢？">这会导致什么问题呢？</h5><p>好像有人给我的合约发送以太币并不是什么坏事，不是吗？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0</span><br><span class="line"></span><br><span class="line">pragma solidity&#x3D;0.8.0;</span><br><span class="line"></span><br><span class="line">contract EtherGame &#123;</span><br><span class="line">    uint public constant three &#x3D; 3;</span><br><span class="line">    uint public constant six &#x3D; 6;</span><br><span class="line">    uint public constant nine &#x3D; 9;</span><br><span class="line"></span><br><span class="line">    uint public constant finalAmount &#x3D; 10;</span><br><span class="line"></span><br><span class="line">    mapping(address &#x3D;&gt; uint) public redeemableEther;</span><br><span class="line"></span><br><span class="line">    function play() public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 0.5 ether);</span><br><span class="line">        uint currentBalance &#x3D; address(this).balance + msg.value;</span><br><span class="line">        require(currentBalance &lt;&#x3D; finalAmount);</span><br><span class="line">        if (currentBalance &#x3D;&#x3D; three || currentBalance &#x3D;&#x3D; six || currentBalance &#x3D;&#x3D; nine) &#123;</span><br><span class="line">            redeemableEther[msg.sender] +&#x3D; currentBalance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getRedeem() public &#123;</span><br><span class="line"></span><br><span class="line">        require(address(this).balance &#x3D;&#x3D; finalAmount);</span><br><span class="line">        uint transferValue &#x3D; redeemableEther[msg.sender];</span><br><span class="line">        require(transferValue &gt; 0);</span><br><span class="line">        redeemableEther[msg.sender] &#x3D; 0;</span><br><span class="line">        payable(msg.sender).transfer(transferValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="防范技术-v3">防范技术</h5><p>慎用<code>this.balance</code>;如上面的合约可以改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0</span><br><span class="line"></span><br><span class="line">pragma solidity&#x3D;0.8.0;</span><br><span class="line"></span><br><span class="line">contract EtherGame &#123;</span><br><span class="line">    uint public constant three &#x3D; 3;</span><br><span class="line">    uint public constant six &#x3D; 6;</span><br><span class="line">    uint public constant nine &#x3D; 9;</span><br><span class="line"></span><br><span class="line">    uint public constant finalAmount &#x3D; 10;</span><br><span class="line"></span><br><span class="line">    uint public depositedWei;</span><br><span class="line"></span><br><span class="line">    mapping(address &#x3D;&gt; uint) public redeemableEther;</span><br><span class="line"></span><br><span class="line">    function play() public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 0.5 ether);</span><br><span class="line">        uint currentBalance &#x3D; depositedWei + msg.value;</span><br><span class="line">        require(currentBalance &lt;&#x3D; finalAmount);</span><br><span class="line">        if (currentBalance &#x3D;&#x3D; three || currentBalance &#x3D;&#x3D; six || currentBalance &#x3D;&#x3D; nine) &#123;</span><br><span class="line">            redeemableEther[msg.sender] +&#x3D; currentBalance;</span><br><span class="line">        &#125;</span><br><span class="line">        depositedWei +&#x3D; msg.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getRedeem() public &#123;</span><br><span class="line">        require(depositedWei &#x3D;&#x3D; finalAmount);</span><br><span class="line">        uint transferValue &#x3D; redeemableEther[msg.sender];</span><br><span class="line">        require(transferValue &gt; 0);</span><br><span class="line">        redeemableEther[msg.sender] &#x3D; 0;</span><br><span class="line">        payable(msg.sender).transfer(transferValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DELEGATECALL">DELEGATECALL</h4><p>DELEGATECALL调用是使用当前的上下文调用目标合约，并且会以主调用合约的状态来运行。也就是目标合约的状态存储槽的数据会变成主调用合约的状态存储槽的数据。</p><h5 id="防范技术-v4">防范技术</h5><p>DELEGATECALL调用时要非常仔细的注意调用的上下文，并且尽可能的构建无状态的库合约</p><h4 id="默认的可见性">默认的可见性</h4><ul><li>函数的默认可见性是<code>public</code></li><li>状态变量默认可见性是<code>internal</code></li></ul><p>所以如果一个函数忘记了写可见性关键字，则所有人（包括外部账户和合约账户）都可以调用这个函数。</p><h5 id="防范技术-v5">防范技术</h5><p>为合约中的所有函数都明确指定可见性是最佳实践。</p><h4 id="无序错觉">无序错觉</h4><p>以太坊内部几乎没有随机性，如果合约通过判断未来的区块大小、hash、gas上限、时间戳等来进行状态的变更；这些变量都可能被矿工所控制。</p><h5 id="防范技术-v6">防范技术</h5><p>使用外部的oracle最为随机源来保证随机性。如<a href="https://github.com/randao/randao">RANDAO</a></p><h4 id="外部合约引用">外部合约引用</h4><p>如果一个合约要引用其他的外部合约，如何引用是一个问题；如果在构造方法中通过输入地址来引用，则会有可能因为输错地址而导致引用错误。</p><p>蜜罐合约：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> *Submitted for verification at Etherscan.io on 2018-02-09</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.4.19;</span><br><span class="line"></span><br><span class="line">contract Private_Bank</span><br><span class="line">&#123;</span><br><span class="line">    mapping (address &#x3D;&gt; uint) public balances;</span><br><span class="line"></span><br><span class="line">    uint public MinDeposit &#x3D; 1 ether;</span><br><span class="line"></span><br><span class="line">    Log TransferLog;</span><br><span class="line"></span><br><span class="line">    function Private_Bank(address _log)</span><br><span class="line">    &#123;</span><br><span class="line">        TransferLog &#x3D; Log(_log);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function Deposit()</span><br><span class="line">    public</span><br><span class="line">    payable</span><br><span class="line">    &#123;</span><br><span class="line">        if(msg.value &gt;&#x3D; MinDeposit)</span><br><span class="line">        &#123;</span><br><span class="line">            balances[msg.sender]+&#x3D;msg.value;</span><br><span class="line">            TransferLog.AddMessage(msg.sender,msg.value,&quot;Deposit&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function CashOut(uint _am)</span><br><span class="line">    &#123;</span><br><span class="line">        if(_am&lt;&#x3D;balances[msg.sender])</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            if(msg.sender.call.value(_am)())</span><br><span class="line">            &#123;</span><br><span class="line">                balances[msg.sender]-&#x3D;_am;</span><br><span class="line">                TransferLog.AddMessage(msg.sender,_am,&quot;CashOut&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function() public payable&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Log</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    struct Message</span><br><span class="line">    &#123;</span><br><span class="line">        address Sender;</span><br><span class="line">        string  Data;</span><br><span class="line">        uint Val;</span><br><span class="line">        uint  Time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Message[] public History;</span><br><span class="line"></span><br><span class="line">    Message LastMsg;</span><br><span class="line"></span><br><span class="line">    function AddMessage(address _adr,uint _val,string _data)</span><br><span class="line">    public</span><br><span class="line">    &#123;</span><br><span class="line">        LastMsg.Sender &#x3D; _adr;</span><br><span class="line">        LastMsg.Time &#x3D; now;</span><br><span class="line">        LastMsg.Val &#x3D; _val;</span><br><span class="line">        LastMsg.Data &#x3D; _data;</span><br><span class="line">        History.push(LastMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="防范技术-v7">防范技术</h5><ol><li>在构造函数中使用new的方法来引用其他合约</li><li>在引用其他合约时对外部合约地址进行硬编码（就算硬编码也不能100%完全的不输错，但是这很容易审查）</li></ol><h4 id="短地址-参数攻击">短地址/参数攻击</h4><h5 id="漏洞的细节">漏洞的细节</h5><p>当我们向智能合约传递参数时，这些参数需要依照ABI规范进行编码。不过发送的实际数据长度小于标准的参数编码长度也是可以的。在这种情况下，EVM会在数据的末尾补0来使数据长度达到要求。</p><h5 id="防范技术-v8">防范技术</h5><p>所有的外部应用在把输入参数发送到区块链之前都应该对他们进行校验。</p><h4 id="未检查的调用返回值">未检查的调用返回值</h4><p>在使用<code>call</code>或者<code>send</code>进行外部调用时，这两个方法会返回一个<code>bool</code>类型的结果，如果不检查这个结果就继续往下进行，有可能导致<code>call</code>或<code>send</code>的调用失败，而之后的代码执行成功。（很像本应该在同一个事物中执行的两个操作，第一个操作失败了，第二个操作却成功了，最终导致有问题。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0</span><br><span class="line"></span><br><span class="line">pragma solidity&#x3D;0.8.0;</span><br><span class="line"></span><br><span class="line">contract Lotto &#123;</span><br><span class="line"></span><br><span class="line">    address public winner;</span><br><span class="line"></span><br><span class="line">    bool public payedOut &#x3D; false;</span><br><span class="line"></span><br><span class="line">    uint public winAmount;</span><br><span class="line"></span><br><span class="line">    function play() public payable &#123;</span><br><span class="line">        winAmount +&#x3D; msg.value;</span><br><span class="line">        if(msg.sender &#x3D;&#x3D; address(0x2560be5793F9AA00963e163A1287807Feb897e2F)) &#123;</span><br><span class="line">            winner &#x3D; msg.sender;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function sendToWinner() public &#123;</span><br><span class="line">        require(!payedOut);</span><br><span class="line">        payable(winner).send(winAmount);</span><br><span class="line">        payedOut &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdrawLeftOver() public &#123;</span><br><span class="line">        require(payedOut);</span><br><span class="line">        payable(msg.sender).transfer(winAmount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="防范技术-v9">防范技术</h5><p>尽可能的使用<code>transfer</code>函数而不是<code>send</code>，因为<code>transfer</code>函数会在外部调用失败时revert。</p><h4 id="竞争条件-预先交易">竞争条件/预先交易</h4><p>在目前Pow的共识方式下，以太坊网络上的所有的交易都是由矿工从交易池中选择部分交易打包成区块的，而矿工在打包区块的时候会优先打包gas费多的交易。因此如果一个人监听了交易池中某个合约（如猜谜语）的交易，那么他在看到别人猜中的答案时马上发布一个gas费更高的同样答案的交易就很有可能会提前被确认。</p><h5 id="防范技术-v10">防范技术</h5><p>能够发起这种攻击的人有两种：</p><ol><li>普通用户通过提高交易费的方式进行攻击</li><li>矿工自己对交易进行攻击</li></ol><p>第一种防范方法是设置gas费的上限，这样就能一定程度的避免用户通过提交交易费来进行提前确认。但是这种方式无法防范矿工。</p><p>第二种防范方法是（提交-揭示），即先提交一个答案的hash，然后再提交答案。</p><h4 id="拒绝服务">拒绝服务</h4><h5 id="基于可被外部操纵的映射或数组的循环">基于可被外部操纵的映射或数组的循环</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0</span><br><span class="line"></span><br><span class="line">contract DistributeTokens &#123;</span><br><span class="line"></span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    address[] investors;</span><br><span class="line"></span><br><span class="line">    uint[] investorTokens;</span><br><span class="line"></span><br><span class="line">    function inverst() public payable &#123;</span><br><span class="line">        investors.push(msg.sender);</span><br><span class="line">        investorTokens.push(msg.value * 5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlyOwner() &#123;</span><br><span class="line">        require(address(msg.sender) &#x3D;&#x3D; owner);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function distribute() public onlyOwner &#123;</span><br><span class="line">        for (uint i &#x3D; 0; i &lt; investors.length; i++) &#123;</span><br><span class="line">            transferToken(investors[i], investorTokens[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="主人的操作">主人的操作</h5><p>如果一个合约只能由合约的主人做一些操作才能进入下一个状态，那么如果合约的主人失去了行为能力或者丢失了私钥那么这个合约就永远无法进入下一个状态了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0</span><br><span class="line"></span><br><span class="line">pragma solidity&#x3D;0.8.0;</span><br><span class="line"></span><br><span class="line">contract ICO &#123;</span><br><span class="line"></span><br><span class="line">    bool public isFinalized &#x3D; false;</span><br><span class="line"></span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    constructor () &#123;</span><br><span class="line">        owner&#x3D; msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mapping(address &#x3D;&gt; uint) public monery;</span><br><span class="line"></span><br><span class="line">    function giveMe() public payable &#123;</span><br><span class="line">        monery[msg.sender] +&#x3D; msg.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function finalize() public &#123;</span><br><span class="line">        require(msg.sender &#x3D;&#x3D; owner);</span><br><span class="line">        isFinalized &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw() public &#123;</span><br><span class="line">        require(isFinalized);</span><br><span class="line">        payable(msg.sender).transfer(monery[msg.sender]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="基于外部调用来修改状态">基于外部调用来修改状态</h5><p>如果一个合约只有把余额转移到外部的某个账户时才能够更改状态，那么外部的那个账户如果没有fallback之类的用于接收以太币的函数的话，当前的函数永远都无法进入下一个状态。</p><h5 id="防范技术-v11">防范技术</h5><p>第一个例子，合约不应该基于一个可以被外部用户人为操纵的数据结构来执行循环。推荐使用取回模式，让每个取款人单独的调用withdraw函数来取回他们各自的代币。</p><p>第二个例子，将主人设定为多重签名合约；或者是使用时间锁（require(msg.sender ==owner || block.timestamp &gt; unlockTime)）。</p><h4 id="区块时间戳操纵">区块时间戳操纵</h4><p>下面的代码，如果时间戳是15的倍数则能取走当前合约的所有余额。但是时间戳是可以被矿工轻微的调整的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0</span><br><span class="line"></span><br><span class="line">pragma solidity&#x3D;0.8.0;</span><br><span class="line"></span><br><span class="line">contract Roulette &#123;</span><br><span class="line">    uint public pastBlockTime;</span><br><span class="line"></span><br><span class="line">    constructor() payable &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fallback() external payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 10 ether);</span><br><span class="line">        require(block.timestamp !&#x3D; pastBlockTime);</span><br><span class="line">        pastBlockTime &#x3D; block.timestamp;</span><br><span class="line">        if (pastBlockTime % 15 &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            payable(msg.sender).transfer(address(this).balance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="防范技术-v12">防范技术</h5><p>区块的时间戳不应该被用来作为无序数据或生成随机数，也就是说，他们不应该用来作为游戏的获胜条件或者用来判断一个重要的状态变动。</p><p>如果合约需要感知时间的逻辑，如解锁合约（基于时间锁），在ICO开始几周之后来结束它或者强制指定一个过期时间。有些情况推荐使用block.number和平均区块时间来估算时间条件。</p><h4 id="小心使用构造函数">小心使用构造函数</h4><p>在Solidity v0.4.22之前，和合约名称相同的函数就是构造函数。如果合约修改了名称但是忘了改构造函数的名称，那么这个函数就变成了一个普通的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0</span><br><span class="line"></span><br><span class="line">pragma solidity&#x3D;0.4.1;</span><br><span class="line"></span><br><span class="line">contract OwnerWallet &#123;</span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    function ownerWallet() &#123;</span><br><span class="line">        owner &#x3D; msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function () public payable &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw() public &#123;</span><br><span class="line">        require(msg.sender &#x3D;&#x3D; owner);</span><br><span class="line">        msg.sender.transfer(this.balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="防范技术-v13">防范技术</h5><p>Solidity v0.4.22之后的版本的构造函数是通过<code>constructor</code>关键字生命，Solidity的版本变化较快，尽量选择较新的稳定版本。</p><h4 id="未初始化的存储指针">未初始化的存储指针</h4><p>EVM是用存储（storaege）或内存（memory）来保存数据的。函数中轭局部变量默认在存储中还是在内存中，取决于他们的类型。</p><p>// TODO 存储指针这一块还没有搞懂，后续再补充。</p><h4 id="浮点数和精度">浮点数和精度</h4><p>下面的合约<code>buyTokens</code>方法在支付的以太币小于1ether时，得到的token会是0；或者说会把小于1ether的部分全部舍去导致出错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0</span><br><span class="line"></span><br><span class="line">pragma solidity&#x3D;0.8.0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract FunWithNumbers &#123;</span><br><span class="line"></span><br><span class="line">    uint constant public tokensPerEth &#x3D; 10;</span><br><span class="line"></span><br><span class="line">    uint constant public weiPerEth &#x3D; 1e18;</span><br><span class="line"></span><br><span class="line">    mapping(address &#x3D;&gt; uint) public balances;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function buyTokens() public payable &#123;</span><br><span class="line">        uint tokens &#x3D; msg.value &#x2F; weiPerEth * tokensPerEth;</span><br><span class="line">        balances[msg.sender] &#x3D; tokens;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function sellTokens(uint tokens) public &#123;</span><br><span class="line">        require(tokens &lt; balances[msg.sender]);</span><br><span class="line">        balances[msg.sender] -&#x3D;  tokens;</span><br><span class="line">        payable(msg.sender).transfer(tokens &#x2F; tokensPerEth * weiPerEth);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Tx-Origin">Tx.Origin</h4><p>通过<code>tx.origin</code>变量来判断用户授权的合约一般是易受钓鱼攻击的，这种攻击是通过欺骗用户向有漏洞的合约发送需要授权的操作来实现的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0</span><br><span class="line"></span><br><span class="line">pragma solidity &#x3D; 0.8.0;</span><br><span class="line"></span><br><span class="line">contract Phishable &#123;</span><br><span class="line"></span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    constructor () &#123;</span><br><span class="line">        owner &#x3D; msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    receive() external payable&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdrawAll(address _recipient) public &#123;</span><br><span class="line">        require(tx.origin &#x3D;&#x3D; owner);</span><br><span class="line">        payable(_recipient).transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>攻击合约如下,如果有人通过做游戏等方式让<code>Phishable</code>合约的owner给<code>AccackContract</code>合约转一小部分以太币，那么这个owner会损失<code>Phishable</code>合约中的所有以太币。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0</span><br><span class="line"></span><br><span class="line">pragma solidity &#x3D; 0.8.0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import &quot;Phishable.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract AccackContract &#123;</span><br><span class="line"></span><br><span class="line">    Phishable phishableContract;</span><br><span class="line"></span><br><span class="line">    address attacker;</span><br><span class="line"></span><br><span class="line">    constructor(Phishable _phishableContract, address _attackerAddress) &#123;</span><br><span class="line">        phishableContract &#x3D; _phishableContract;</span><br><span class="line">        attacker &#x3D; _attackerAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fallback() external payable &#123;</span><br><span class="line">        phishableContract.withdrawAll(_attackerAddress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="防范技术-v14">防范技术</h5><p>智能合约中不应该使用<code>tx.origin</code>来进行验证授权。</p><p><code>tx.origin</code>的使用场景：如果某人想要拒绝外部合约调用当前合约，他们可以实现一个类似<code>require(tx.origin == msg.sender);</code>这样的检查；这样可以防止当前合约被其他中间合约调用，也就是仅允许外部账户调用当前合约。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> HOW-TO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> solidity </tag>
            
            <tag> 智能合约 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在ubantu上启动go-ethereum客户端</title>
      <link href="2024/11/22/blockchain/ethereum/how_to/ubantu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85go-ethereum%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
      <url>2024/11/22/blockchain/ethereum/how_to/ubantu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85go-ethereum%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备">环境准备</h2><ul><li>安装git:<code>sudo apt install git</code></li><li>安装go:<code>sudo apt install golang-go</code></li></ul><h2 id="go-ethereum（Geth）客户端下载和编译">go-ethereum（Geth）客户端下载和编译</h2><h3 id="clone源码：">clone源码：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitee.com/guozhe001/go-ethereum.git</span><br></pre></td></tr></table></figure><h3 id="从源码构建geth">从源码构建geth</h3><p><em>需要科学上网</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd go-ethereum</span><br><span class="line">make geth</span><br></pre></td></tr></table></figure><p>编译结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br></pre></td><td class="code"><pre><span class="line">env GO111MODULE=on go run build/ci.go install ./cmd/geth</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; /usr/lib/go-1.13/bin/go build -ldflags -X main.gitCommit=54c0d573d75ab9baa239db3f071d6cb4d1ec6aad -X main.gitDate=20210325 -trimpath -v -o /home/guozhe/code/go-ethereum/build/bin/geth ./cmd/geth</span></span><br><span class="line">go: downloading github.com/holiman/uint256 v1.1.1</span><br><span class="line">go: downloading github.com/peterh/liner v1.1.1-0.20190123174540-a2c9a5303de7</span><br><span class="line">go: downloading golang.org/x/sys v0.0.0-20210124154548-22da62e12c0c</span><br><span class="line">go: downloading github.com/edsrzf/mmap-go v1.0.0</span><br><span class="line">go: downloading github.com/prometheus/tsdb v0.7.1</span><br><span class="line">go: downloading github.com/hashicorp/golang-lru v0.5.5-0.20210104140557-80c98217689d</span><br><span class="line">go: downloading github.com/golang/protobuf v1.4.3</span><br><span class="line">go: downloading github.com/holiman/bloomfilter/v2 v2.0.3</span><br><span class="line">go: downloading github.com/rs/cors v1.7.0</span><br><span class="line">go: downloading github.com/tyler-smith/go-bip39 v1.0.1-0.20181017060643-dbb3b84ba2ef</span><br><span class="line">go: extracting github.com/rs/cors v1.7.0</span><br><span class="line">go: downloading github.com/olekukonko/tablewriter v0.0.2-0.20190409134802-7e037d187b0c</span><br><span class="line">go: extracting github.com/edsrzf/mmap-go v1.0.0</span><br><span class="line">go: extracting github.com/holiman/uint256 v1.1.1</span><br><span class="line">go: downloading github.com/karalabe/usb v0.0.0-20190919080040-51dc0efba356</span><br><span class="line">go: extracting github.com/golang/protobuf v1.4.3</span><br><span class="line">go: downloading github.com/golang/snappy v0.0.3-0.20201103224600-674baa8c7fc3</span><br><span class="line">go: extracting golang.org/x/sys v0.0.0-20210124154548-22da62e12c0c</span><br><span class="line">go: downloading github.com/status-im/keycard-go v0.0.0-20190316090335-8537d3370df4</span><br><span class="line">go: extracting github.com/prometheus/tsdb v0.7.1</span><br><span class="line">go: downloading github.com/deckarep/golang-set v0.0.0-20180603214616-504e848d77ea</span><br><span class="line">go: extracting github.com/peterh/liner v1.1.1-0.20190123174540-a2c9a5303de7</span><br><span class="line">go: downloading github.com/rjeczalik/notify v0.9.1</span><br><span class="line">go: extracting github.com/tyler-smith/go-bip39 v1.0.1-0.20181017060643-dbb3b84ba2ef</span><br><span class="line">go: downloading golang.org/x/text v0.3.3</span><br><span class="line">go: extracting github.com/hashicorp/golang-lru v0.5.5-0.20210104140557-80c98217689d</span><br><span class="line">go: downloading github.com/naoina/go-stringutil v0.1.0</span><br><span class="line">go: downloading google.golang.org/protobuf v1.23.0</span><br><span class="line">go: extracting github.com/holiman/bloomfilter/v2 v2.0.3</span><br><span class="line">go: downloading github.com/dop251/goja v0.0.0-20200721192441-a695b0cdd498</span><br><span class="line">go: extracting github.com/olekukonko/tablewriter v0.0.2-0.20190409134802-7e037d187b0c</span><br><span class="line">go: downloading github.com/syndtr/goleveldb v1.0.1-0.20210305035536-64b5b1c73954</span><br><span class="line">go: extracting github.com/karalabe/usb v0.0.0-20190919080040-51dc0efba356</span><br><span class="line">go: downloading github.com/pkg/errors v0.8.1</span><br><span class="line">go: extracting github.com/golang/snappy v0.0.3-0.20201103224600-674baa8c7fc3</span><br><span class="line">go: downloading github.com/mattn/go-isatty v0.0.5-0.20180830101745-3fb116b82035</span><br><span class="line">go: extracting github.com/status-im/keycard-go v0.0.0-20190316090335-8537d3370df4</span><br><span class="line">go: downloading github.com/shirou/gopsutil v2.20.5+incompatible</span><br><span class="line">go: extracting github.com/deckarep/golang-set v0.0.0-20180603214616-504e848d77ea</span><br><span class="line">go: extracting github.com/rjeczalik/notify v0.9.1</span><br><span class="line">go: downloading github.com/davecgh/go-spew v1.1.1</span><br><span class="line">go: extracting github.com/naoina/go-stringutil v0.1.0</span><br><span class="line">go: downloading github.com/huin/goupnp v1.0.1-0.20210310174557-0ca763054c88</span><br><span class="line">go: extracting google.golang.org/protobuf v1.23.0</span><br><span class="line">go: downloading github.com/fatih/color v1.7.0</span><br><span class="line">go: extracting github.com/syndtr/goleveldb v1.0.1-0.20210305035536-64b5b1c73954</span><br><span class="line">go: downloading github.com/graph-gophers/graphql-go v0.0.0-20201113091052-beb923fada29</span><br><span class="line">go: extracting github.com/dop251/goja v0.0.0-20200721192441-a695b0cdd498</span><br><span class="line">go: downloading github.com/jackpal/go-nat-pmp v1.0.2-0.20160603034137-1fa385a6f458</span><br><span class="line">go: extracting github.com/pkg/errors v0.8.1</span><br><span class="line">go: extracting github.com/davecgh/go-spew v1.1.1</span><br><span class="line">go: downloading github.com/jedisct1/go-minisign v0.0.0-20190909160543-45766022959e</span><br><span class="line">go: extracting github.com/mattn/go-isatty v0.0.5-0.20180830101745-3fb116b82035</span><br><span class="line">go: extracting github.com/huin/goupnp v1.0.1-0.20210310174557-0ca763054c88</span><br><span class="line">go: downloading github.com/google/uuid v1.1.5</span><br><span class="line">go: downloading github.com/go-sourcemap/sourcemap v2.1.2+incompatible</span><br><span class="line">go: extracting github.com/shirou/gopsutil v2.20.5+incompatible</span><br><span class="line">go: downloading github.com/go-stack/stack v1.8.0</span><br><span class="line">go: extracting github.com/fatih/color v1.7.0</span><br><span class="line">go: downloading golang.org/x/net v0.0.0-20200822124328-c89045814202</span><br><span class="line">go: extracting github.com/graph-gophers/graphql-go v0.0.0-20201113091052-beb923fada29</span><br><span class="line">go: extracting github.com/jackpal/go-nat-pmp v1.0.2-0.20160603034137-1fa385a6f458</span><br><span class="line">go: downloading gopkg.in/olebedev/go-duktape.v3 v3.0.0-20200619000410-60c24ae608a6</span><br><span class="line">go: extracting github.com/jedisct1/go-minisign v0.0.0-20190909160543-45766022959e</span><br><span class="line">go: downloading github.com/mattn/go-runewidth v0.0.4</span><br><span class="line">go: extracting github.com/go-sourcemap/sourcemap v2.1.2+incompatible</span><br><span class="line">go: downloading github.com/opentracing/opentracing-go v1.1.0</span><br><span class="line">go: extracting golang.org/x/text v0.3.3</span><br><span class="line">go: extracting github.com/google/uuid v1.1.5</span><br><span class="line">go: downloading github.com/gorilla/websocket v1.4.2</span><br><span class="line">go: downloading github.com/VictoriaMetrics/fastcache v1.5.7</span><br><span class="line">go: downloading github.com/dlclark/regexp2 v1.2.0</span><br><span class="line">go: downloading github.com/influxdata/influxdb v1.8.3</span><br><span class="line">go: extracting github.com/go-stack/stack v1.8.0</span><br><span class="line">go: extracting golang.org/x/net v0.0.0-20200822124328-c89045814202</span><br><span class="line">go: downloading golang.org/x/sync v0.0.0-20200317015054-43a5402ce75a</span><br><span class="line">go: extracting gopkg.in/olebedev/go-duktape.v3 v3.0.0-20200619000410-60c24ae608a6</span><br><span class="line">go: extracting github.com/VictoriaMetrics/fastcache v1.5.7</span><br><span class="line">go: downloading github.com/cespare/xxhash v1.1.0</span><br><span class="line">go: extracting github.com/opentracing/opentracing-go v1.1.0</span><br><span class="line">go: extracting github.com/gorilla/websocket v1.4.2</span><br><span class="line">go: extracting github.com/dlclark/regexp2 v1.2.0</span><br><span class="line">go: extracting github.com/mattn/go-runewidth v0.0.4</span><br><span class="line">go: extracting golang.org/x/sync v0.0.0-20200317015054-43a5402ce75a</span><br><span class="line">go: extracting github.com/cespare/xxhash v1.1.0</span><br><span class="line">go: downloading github.com/cespare/xxhash/v2 v2.1.1</span><br><span class="line">go: extracting github.com/cespare/xxhash/v2 v2.1.1</span><br><span class="line">go: extracting github.com/influxdata/influxdb v1.8.3</span><br><span class="line">go: finding gopkg.in/urfave/cli.v1 v1.20.0</span><br><span class="line">go: finding github.com/peterh/liner v1.1.1-0.20190123174540-a2c9a5303de7</span><br><span class="line">go: finding github.com/dop251/goja v0.0.0-20200721192441-a695b0cdd498</span><br><span class="line">go: finding github.com/VictoriaMetrics/fastcache v1.5.7</span><br><span class="line">go: finding github.com/davecgh/go-spew v1.1.1</span><br><span class="line">go: finding github.com/deckarep/golang-set v0.0.0-20180603214616-504e848d77ea</span><br><span class="line">go: finding github.com/jedisct1/go-minisign v0.0.0-20190909160543-45766022959e</span><br><span class="line">go: finding github.com/go-stack/stack v1.8.0</span><br><span class="line">go: finding github.com/edsrzf/mmap-go v1.0.0</span><br><span class="line">go: finding github.com/fjl/memsize v0.0.0-20190710130421-bcb5799ab5e5</span><br><span class="line">go: finding github.com/shirou/gopsutil v2.20.5+incompatible</span><br><span class="line">go: finding github.com/naoina/toml v0.1.2-0.20170918210437-9fafd6967416</span><br><span class="line">go: finding github.com/mattn/go-colorable v0.1.0</span><br><span class="line">go: finding github.com/mattn/go-isatty v0.0.5-0.20180830101745-3fb116b82035</span><br><span class="line">go: finding github.com/holiman/bloomfilter/v2 v2.0.3</span><br><span class="line">go: finding github.com/fatih/color v1.7.0</span><br><span class="line">go: finding github.com/golang/protobuf v1.4.3</span><br><span class="line">go: finding github.com/golang/snappy v0.0.3-0.20201103224600-674baa8c7fc3</span><br><span class="line">go: finding github.com/cespare/xxhash/v2 v2.1.1</span><br><span class="line">go: finding github.com/syndtr/goleveldb v1.0.1-0.20210305035536-64b5b1c73954</span><br><span class="line">go: finding github.com/olekukonko/tablewriter v0.0.2-0.20190409134802-7e037d187b0c</span><br><span class="line">go: finding github.com/hashicorp/golang-lru v0.5.5-0.20210104140557-80c98217689d</span><br><span class="line">go: finding github.com/naoina/go-stringutil v0.1.0</span><br><span class="line">go: finding github.com/dlclark/regexp2 v1.2.0</span><br><span class="line">go: finding github.com/prometheus/tsdb v0.7.1</span><br><span class="line">go: finding golang.org/x/sys v0.0.0-20210124154548-22da62e12c0c</span><br><span class="line">go: finding github.com/google/uuid v1.1.5</span><br><span class="line">go: finding github.com/karalabe/usb v0.0.0-20190919080040-51dc0efba356</span><br><span class="line">go: finding github.com/rjeczalik/notify v0.9.1</span><br><span class="line">go: finding github.com/mattn/go-runewidth v0.0.4</span><br><span class="line">go: finding github.com/go-sourcemap/sourcemap v2.1.2+incompatible</span><br><span class="line">go: finding github.com/pkg/errors v0.8.1</span><br><span class="line">go: finding golang.org/x/text v0.3.3</span><br><span class="line">go: finding github.com/holiman/uint256 v1.1.1</span><br><span class="line">go: finding github.com/gballet/go-libpcsclite v0.0.0-20190607065134-2772fd86a8ff</span><br><span class="line">go: finding github.com/gorilla/websocket v1.4.2</span><br><span class="line">go: finding github.com/status-im/keycard-go v0.0.0-20190316090335-8537d3370df4</span><br><span class="line">go: finding github.com/rs/cors v1.7.0</span><br><span class="line">go: finding github.com/tyler-smith/go-bip39 v1.0.1-0.20181017060643-dbb3b84ba2ef</span><br><span class="line">go: finding google.golang.org/protobuf v1.23.0</span><br><span class="line">go: finding github.com/huin/goupnp v1.0.1-0.20210310174557-0ca763054c88</span><br><span class="line">go: finding github.com/jackpal/go-nat-pmp v1.0.2-0.20160603034137-1fa385a6f458</span><br><span class="line">go: finding github.com/influxdata/influxdb v1.8.3</span><br><span class="line">go: finding github.com/graph-gophers/graphql-go v0.0.0-20201113091052-beb923fada29</span><br><span class="line">go: finding golang.org/x/time v0.0.0-20190308202827-9d24e82272b4</span><br><span class="line">go: finding gopkg.in/olebedev/go-duktape.v3 v3.0.0-20200619000410-60c24ae608a6</span><br><span class="line">go: finding golang.org/x/net v0.0.0-20200822124328-c89045814202</span><br><span class="line">go: finding golang.org/x/sync v0.0.0-20200317015054-43a5402ce75a</span><br><span class="line">go: finding github.com/opentracing/opentracing-go v1.1.0</span><br><span class="line">unicode</span><br><span class="line">unicode/utf8</span><br><span class="line">vendor/golang.org/x/crypto/cryptobyte/asn1</span><br><span class="line">crypto/internal/subtle</span><br><span class="line">math/bits</span><br><span class="line">golang.org/x/sys/internal/unsafeheader</span><br><span class="line">container/list</span><br><span class="line">internal/nettrace</span><br><span class="line">vendor/golang.org/x/crypto/internal/subtle</span><br><span class="line">encoding</span><br><span class="line">golang.org/x/net/html/atom</span><br><span class="line">crypto/subtle</span><br><span class="line">runtime/internal/sys</span><br><span class="line">golang.org/x/text/encoding/internal/identifier</span><br><span class="line">golang.org/x/text/internal/utf8internal</span><br><span class="line">runtime/cgo</span><br><span class="line">google.golang.org/protobuf/internal/flags</span><br><span class="line">unicode/utf16</span><br><span class="line">runtime/internal/atomic</span><br><span class="line">container/ring</span><br><span class="line">vendor/golang.org/x/crypto/curve25519</span><br><span class="line">internal/race</span><br><span class="line">internal/cpu</span><br><span class="line">google.golang.org/protobuf/internal/fieldnum</span><br><span class="line">sync/atomic</span><br><span class="line">google.golang.org/protobuf/internal/genname</span><br><span class="line">github.com/ethereum/go-ethereum/internal/web3ext</span><br><span class="line">runtime/internal/math</span><br><span class="line">internal/testlog</span><br><span class="line">google.golang.org/protobuf/internal/set</span><br><span class="line">internal/bytealg</span><br><span class="line">math</span><br><span class="line">runtime</span><br><span class="line">internal/reflectlite</span><br><span class="line">sync</span><br><span class="line">google.golang.org/protobuf/internal/pragma</span><br><span class="line">internal/singleflight</span><br><span class="line">math/rand</span><br><span class="line">errors</span><br><span class="line">sort</span><br><span class="line">internal/oserror</span><br><span class="line">io</span><br><span class="line">github.com/ethereum/go-ethereum/common/bitutil</span><br><span class="line">github.com/hashicorp/golang-lru/simplelru</span><br><span class="line">vendor/golang.org/x/net/dns/dnsmessage</span><br><span class="line">strconv</span><br><span class="line">syscall</span><br><span class="line">container/heap</span><br><span class="line">golang.org/x/text/internal/tag</span><br><span class="line">bytes</span><br><span class="line">hash</span><br><span class="line">github.com/ethereum/go-ethereum/ethdb</span><br><span class="line">crypto/internal/randutil</span><br><span class="line">strings</span><br><span class="line">text/tabwriter</span><br><span class="line">github.com/go-sourcemap/sourcemap/internal/base64vlq</span><br><span class="line">crypto/hmac</span><br><span class="line">hash/fnv</span><br><span class="line">hash/crc32</span><br><span class="line">golang.org/x/crypto/pbkdf2</span><br><span class="line">vendor/golang.org/x/crypto/hkdf</span><br><span class="line">golang.org/x/crypto/hkdf</span><br><span class="line">crypto/rc4</span><br><span class="line">github.com/dop251/goja/token</span><br><span class="line">crypto</span><br><span class="line">reflect</span><br><span class="line">golang.org/x/crypto/ripemd160</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/comparer</span><br><span class="line">golang.org/x/text/transform</span><br><span class="line">vendor/golang.org/x/text/transform</span><br><span class="line">bufio</span><br><span class="line">path</span><br><span class="line">github.com/influxdata/influxdb/pkg/escape</span><br><span class="line">encoding/base32</span><br><span class="line">html</span><br><span class="line">regexp/syntax</span><br><span class="line">golang.org/x/text/runes</span><br><span class="line">golang.org/x/text/encoding</span><br><span class="line">golang.org/x/text/encoding/internal</span><br><span class="line">golang.org/x/text/encoding/unicode</span><br><span class="line">golang.org/x/text/encoding/charmap</span><br><span class="line">golang.org/x/text/encoding/japanese</span><br><span class="line">golang.org/x/text/encoding/traditionalchinese</span><br><span class="line">golang.org/x/text/encoding/korean</span><br><span class="line">golang.org/x/text/encoding/simplifiedchinese</span><br><span class="line">github.com/ethereum/go-ethereum/common/fdlimit</span><br><span class="line">internal/syscall/unix</span><br><span class="line">github.com/mattn/go-isatty</span><br><span class="line">time</span><br><span class="line">regexp</span><br><span class="line">context</span><br><span class="line">github.com/naoina/toml/ast</span><br><span class="line">github.com/ethereum/go-ethereum/common/mclock</span><br><span class="line">internal/poll</span><br><span class="line">github.com/ethereum/go-ethereum/common/prque</span><br><span class="line">golang.org/x/sync/errgroup</span><br><span class="line">os</span><br><span class="line">internal/fmtsort</span><br><span class="line">encoding/binary</span><br><span class="line">crypto/md5</span><br><span class="line">github.com/cespare/xxhash/v2</span><br><span class="line">encoding/base64</span><br><span class="line">crypto/sha1</span><br><span class="line">crypto/sha256</span><br><span class="line">golang.org/x/crypto/sha3</span><br><span class="line">crypto/cipher</span><br><span class="line">vendor/golang.org/x/crypto/poly1305</span><br><span class="line">crypto/sha512</span><br><span class="line">crypto/ed25519/internal/edwards25519</span><br><span class="line">github.com/golang/snappy</span><br><span class="line">vendor/golang.org/x/sys/cpu</span><br><span class="line">golang.org/x/sys/unix</span><br><span class="line">fmt</span><br><span class="line">runtime/debug</span><br><span class="line">path/filepath</span><br><span class="line">github.com/mattn/go-runewidth</span><br><span class="line">os/signal</span><br><span class="line">google.golang.org/protobuf/internal/detrand</span><br><span class="line">github.com/mattn/go-colorable</span><br><span class="line">net</span><br><span class="line">encoding/pem</span><br><span class="line">crypto/aes</span><br><span class="line">crypto/des</span><br><span class="line">vendor/golang.org/x/crypto/internal/chacha20</span><br><span class="line">golang.org/x/crypto/scrypt</span><br><span class="line">io/ioutil</span><br><span class="line">os/exec</span><br><span class="line">vendor/golang.org/x/crypto/chacha20poly1305</span><br><span class="line">golang.org/x/sys/cpu</span><br><span class="line">database/sql/driver</span><br><span class="line">encoding/json</span><br><span class="line">encoding/hex</span><br><span class="line">github.com/ethereum/go-ethereum/event</span><br><span class="line">github.com/go-stack/stack</span><br><span class="line">log</span><br><span class="line">net/url</span><br><span class="line">github.com/VictoriaMetrics/fastcache</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/util</span><br><span class="line">math/big</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/storage</span><br><span class="line">encoding/csv</span><br><span class="line">github.com/pkg/errors</span><br><span class="line">compress/flate</span><br><span class="line">github.com/hashicorp/golang-lru</span><br><span class="line">vendor/golang.org/x/net/http2/hpack</span><br><span class="line">encoding/gob</span><br><span class="line">mime</span><br><span class="line">mime/quotedprintable</span><br><span class="line">flag</span><br><span class="line">vendor/golang.org/x/text/unicode/norm</span><br><span class="line">net/http/internal</span><br><span class="line">github.com/peterh/liner</span><br><span class="line">vendor/golang.org/x/text/unicode/bidi</span><br><span class="line">github.com/olekukonko/tablewriter</span><br><span class="line">github.com/ethereum/go-ethereum/crypto/blake2b</span><br><span class="line">encoding/xml</span><br><span class="line">golang.org/x/net/html</span><br><span class="line">golang.org/x/text/internal/language</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/cache</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/filter</span><br><span class="line">github.com/status-im/keycard-go/derivationpath</span><br><span class="line">golang.org/x/text/unicode/norm</span><br><span class="line">google.golang.org/protobuf/internal/errors</span><br><span class="line">go/token</span><br><span class="line">google.golang.org/protobuf/internal/version</span><br><span class="line">github.com/karalabe/usb</span><br><span class="line">google.golang.org/protobuf/encoding/protowire</span><br><span class="line">github.com/davecgh/go-spew/spew</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/errors</span><br><span class="line">github.com/shirou/gopsutil/internal/common</span><br><span class="line">google.golang.org/protobuf/reflect/protoreflect</span><br><span class="line">github.com/tyler-smith/go-bip39/wordlists</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/iterator</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/journal</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/opt</span><br><span class="line">compress/gzip</span><br><span class="line">github.com/fjl/memsize</span><br><span class="line">vendor/golang.org/x/text/secure/bidirule</span><br><span class="line">text/template/parse</span><br><span class="line">runtime/trace</span><br><span class="line">os/user</span><br><span class="line">github.com/ethereum/go-ethereum/console/prompt</span><br><span class="line">golang.org/x/time/rate</span><br><span class="line">runtime/pprof</span><br><span class="line">github.com/ethereum/go-ethereum/eth/tracers/internal/tracers</span><br><span class="line">golang.org/x/text/internal/language/compact</span><br><span class="line">go/scanner</span><br><span class="line">github.com/graph-gophers/graphql-go/errors</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/memdb</span><br><span class="line">github.com/syndtr/goleveldb/leveldb/table</span><br><span class="line">testing</span><br><span class="line">text/scanner</span><br><span class="line">github.com/graph-gophers/graphql-go/log</span><br><span class="line">github.com/opentracing/opentracing-go/log</span><br><span class="line">github.com/rjeczalik/notify</span><br><span class="line">github.com/prometheus/tsdb/fileutil</span><br><span class="line">github.com/edsrzf/mmap-go</span><br><span class="line">go/ast</span><br><span class="line">google.golang.org/protobuf/reflect/protoregistry</span><br><span class="line">golang.org/x/text/language</span><br><span class="line">google.golang.org/protobuf/internal/strs</span><br><span class="line">google.golang.org/protobuf/internal/mapsort</span><br><span class="line">google.golang.org/protobuf/internal/fieldsort</span><br><span class="line">github.com/huin/goupnp/scpd</span><br><span class="line">vendor/golang.org/x/net/idna</span><br><span class="line">google.golang.org/protobuf/runtime/protoiface</span><br><span class="line">google.golang.org/protobuf/internal/descfmt</span><br><span class="line">github.com/deckarep/golang-set</span><br><span class="line">github.com/shirou/gopsutil/cpu</span><br><span class="line">google.golang.org/protobuf/internal/encoding/text</span><br><span class="line">google.golang.org/protobuf/internal/descopts</span><br><span class="line">github.com/graph-gophers/graphql-go/internal/common</span><br><span class="line">github.com/influxdata/influxdb/models</span><br><span class="line">github.com/dlclark/regexp2/syntax</span><br><span class="line">github.com/syndtr/goleveldb/leveldb</span><br><span class="line">github.com/dop251/goja/file</span><br><span class="line">github.com/go-sourcemap/sourcemap</span><br><span class="line">github.com/fatih/color</span><br><span class="line">github.com/ethereum/go-ethereum/internal/jsre/deps</span><br><span class="line">google.golang.org/protobuf/internal/encoding/messageset</span><br><span class="line">github.com/naoina/go-stringutil</span><br><span class="line">github.com/shirou/gopsutil/mem</span><br><span class="line">text/template</span><br><span class="line">github.com/ethereum/go-ethereum/common/hexutil</span><br><span class="line">crypto/elliptic</span><br><span class="line">encoding/asn1</span><br><span class="line">crypto/rand</span><br><span class="line">github.com/ethereum/go-ethereum/common/math</span><br><span class="line">github.com/ethereum/go-ethereum/rlp</span><br><span class="line">crypto/dsa</span><br><span class="line">github.com/holiman/uint256</span><br><span class="line">google.golang.org/protobuf/proto</span><br><span class="line">github.com/graph-gophers/graphql-go/internal/schema</span><br><span class="line">github.com/graph-gophers/graphql-go/internal/query</span><br><span class="line">golang.org/x/text/encoding/htmlindex</span><br><span class="line">github.com/dop251/goja/ast</span><br><span class="line">golang.org/x/text/internal</span><br><span class="line">go/parser</span><br><span class="line">go/printer</span><br><span class="line">google.golang.org/protobuf/internal/encoding/defval</span><br><span class="line">golang.org/x/text/internal/colltab</span><br><span class="line">github.com/holiman/bloomfilter/v2</span><br><span class="line">crypto/ed25519</span><br><span class="line">crypto/rsa</span><br><span class="line">github.com/ethereum/go-ethereum/crypto/bn256/cloudflare</span><br><span class="line">github.com/tyler-smith/go-bip39</span><br><span class="line">golang.org/x/net/html/charset</span><br><span class="line">github.com/graph-gophers/graphql-go/internal/exec/packer</span><br><span class="line">github.com/graph-gophers/graphql-go/introspection</span><br><span class="line">github.com/graph-gophers/graphql-go/internal/validation</span><br><span class="line">github.com/dop251/goja/parser</span><br><span class="line">golang.org/x/text/cases</span><br><span class="line">golang.org/x/crypto/ed25519</span><br><span class="line">crypto/x509/pkix</span><br><span class="line">github.com/ethereum/go-ethereum/common</span><br><span class="line">vendor/golang.org/x/crypto/cryptobyte</span><br><span class="line">github.com/naoina/toml</span><br><span class="line">gopkg.in/urfave/cli.v1</span><br><span class="line">html/template</span><br><span class="line">crypto/ecdsa</span><br><span class="line">github.com/ethereum/go-ethereum/crypto/secp256k1</span><br><span class="line">github.com/jedisct1/go-minisign</span><br><span class="line">github.com/graph-gophers/graphql-go/internal/exec/resolvable</span><br><span class="line">github.com/dlclark/regexp2</span><br><span class="line">golang.org/x/text/collate</span><br><span class="line">go/format</span><br><span class="line">github.com/ethereum/go-ethereum/les/vflux</span><br><span class="line">google.golang.org/protobuf/encoding/prototext</span><br><span class="line">google.golang.org/protobuf/internal/filedesc</span><br><span class="line">github.com/graph-gophers/graphql-go/internal/exec/selected</span><br><span class="line">github.com/ethereum/go-ethereum/ethdb/memorydb</span><br><span class="line">github.com/ethereum/go-ethereum/crypto/bls12381</span><br><span class="line">github.com/ethereum/go-ethereum/crypto/bn256</span><br><span class="line">google.golang.org/protobuf/internal/encoding/tag</span><br><span class="line">google.golang.org/protobuf/internal/impl</span><br><span class="line">log/syslog</span><br><span class="line">vendor/golang.org/x/net/http/httpproxy</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/enr</span><br><span class="line">github.com/jackpal/go-nat-pmp</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/netutil</span><br><span class="line">net/textproto</span><br><span class="line">github.com/gballet/go-libpcsclite</span><br><span class="line">github.com/google/uuid</span><br><span class="line">crypto/x509</span><br><span class="line">gopkg.in/olebedev/go-duktape.v3</span><br><span class="line">github.com/ethereum/go-ethereum/log</span><br><span class="line">vendor/golang.org/x/net/http/httpguts</span><br><span class="line">mime/multipart</span><br><span class="line">github.com/ethereum/go-ethereum/signer/storage</span><br><span class="line">github.com/ethereum/go-ethereum/les/flowcontrol</span><br><span class="line">github.com/ethereum/go-ethereum/metrics</span><br><span class="line">crypto/tls</span><br><span class="line">github.com/ethereum/go-ethereum/ethdb/leveldb</span><br><span class="line">google.golang.org/protobuf/internal/filetype</span><br><span class="line">github.com/dop251/goja</span><br><span class="line">google.golang.org/protobuf/runtime/protoimpl</span><br><span class="line">github.com/golang/protobuf/proto</span><br><span class="line">google.golang.org/protobuf/types/descriptorpb</span><br><span class="line">net/http/httptrace</span><br><span class="line">net/http</span><br><span class="line">github.com/golang/protobuf/protoc-gen-go/descriptor</span><br><span class="line">github.com/ethereum/go-ethereum/accounts/usbwallet/trezor</span><br><span class="line">github.com/fjl/memsize/memsizeui</span><br><span class="line">github.com/ethereum/go-ethereum/metrics/prometheus</span><br><span class="line">github.com/rs/cors</span><br><span class="line">expvar</span><br><span class="line">github.com/influxdata/influxdb/client</span><br><span class="line">net/http/pprof</span><br><span class="line">github.com/huin/goupnp/soap</span><br><span class="line">github.com/huin/goupnp/httpu</span><br><span class="line">github.com/opentracing/opentracing-go</span><br><span class="line">github.com/gorilla/websocket</span><br><span class="line">github.com/opentracing/opentracing-go/ext</span><br><span class="line">github.com/ethereum/go-ethereum/metrics/exp</span><br><span class="line">github.com/graph-gophers/graphql-go/trace</span><br><span class="line">github.com/huin/goupnp/ssdp</span><br><span class="line">github.com/ethereum/go-ethereum/metrics/influxdb</span><br><span class="line">github.com/graph-gophers/graphql-go/internal/exec</span><br><span class="line">github.com/ethereum/go-ethereum/internal/debug</span><br><span class="line">github.com/huin/goupnp</span><br><span class="line">github.com/graph-gophers/graphql-go</span><br><span class="line">github.com/ethereum/go-ethereum/rpc</span><br><span class="line">github.com/huin/goupnp/dcps/internetgateway1</span><br><span class="line">github.com/huin/goupnp/dcps/internetgateway2</span><br><span class="line">github.com/ethereum/go-ethereum/internal/jsre</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/nat</span><br><span class="line">github.com/ethereum/go-ethereum/crypto</span><br><span class="line">github.com/ethereum/go-ethereum/crypto/ecies</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/enode</span><br><span class="line">github.com/ethereum/go-ethereum/params</span><br><span class="line">github.com/ethereum/go-ethereum/accounts/abi</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/rlpx</span><br><span class="line">github.com/ethereum/go-ethereum/internal/flags</span><br><span class="line">github.com/ethereum/go-ethereum/core/types</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/discover/v4wire</span><br><span class="line">github.com/ethereum/go-ethereum/les/utils</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/dnsdisc</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/nodestate</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/discover/v5wire</span><br><span class="line">github.com/ethereum/go-ethereum/les/vflux/client</span><br><span class="line">github.com/ethereum/go-ethereum/les/vflux/server</span><br><span class="line">github.com/ethereum/go-ethereum</span><br><span class="line">github.com/ethereum/go-ethereum/eth/gasprice</span><br><span class="line">github.com/ethereum/go-ethereum/core/forkid</span><br><span class="line">github.com/ethereum/go-ethereum/core/bloombits</span><br><span class="line">github.com/ethereum/go-ethereum/core/rawdb</span><br><span class="line">github.com/ethereum/go-ethereum/core/vm</span><br><span class="line">github.com/ethereum/go-ethereum/p2p/discover</span><br><span class="line">github.com/ethereum/go-ethereum/accounts</span><br><span class="line">github.com/ethereum/go-ethereum/ethclient</span><br><span class="line">github.com/ethereum/go-ethereum/accounts/scwallet</span><br><span class="line">github.com/ethereum/go-ethereum/accounts/keystore</span><br><span class="line">github.com/ethereum/go-ethereum/accounts/usbwallet</span><br><span class="line">github.com/ethereum/go-ethereum/p2p</span><br><span class="line">github.com/ethereum/go-ethereum/console</span><br><span class="line">github.com/ethereum/go-ethereum/trie</span><br><span class="line">github.com/ethereum/go-ethereum/core/state/snapshot</span><br><span class="line">github.com/ethereum/go-ethereum/core/state</span><br><span class="line">github.com/ethereum/go-ethereum/consensus</span><br><span class="line">github.com/ethereum/go-ethereum/consensus/misc</span><br><span class="line">github.com/ethereum/go-ethereum/core/state/pruner</span><br><span class="line">github.com/ethereum/go-ethereum/consensus/clique</span><br><span class="line">github.com/ethereum/go-ethereum/consensus/ethash</span><br><span class="line">github.com/ethereum/go-ethereum/core</span><br><span class="line">github.com/ethereum/go-ethereum/eth/filters</span><br><span class="line">github.com/ethereum/go-ethereum/eth/protocols/eth</span><br><span class="line">github.com/ethereum/go-ethereum/eth/fetcher</span><br><span class="line">github.com/ethereum/go-ethereum/light</span><br><span class="line">github.com/ethereum/go-ethereum/eth/protocols/snap</span><br><span class="line">github.com/ethereum/go-ethereum/eth/downloader</span><br><span class="line">github.com/ethereum/go-ethereum/miner</span><br><span class="line">github.com/ethereum/go-ethereum/internal/ethapi</span><br><span class="line">github.com/ethereum/go-ethereum/signer/core</span><br><span class="line">github.com/ethereum/go-ethereum/accounts/external</span><br><span class="line">github.com/ethereum/go-ethereum/node</span><br><span class="line">github.com/ethereum/go-ethereum/accounts/abi/bind</span><br><span class="line">github.com/ethereum/go-ethereum/contracts/checkpointoracle/contract</span><br><span class="line">github.com/ethereum/go-ethereum/accounts/abi/bind/backends</span><br><span class="line">github.com/ethereum/go-ethereum/contracts/checkpointoracle</span><br><span class="line">github.com/ethereum/go-ethereum/eth/ethconfig</span><br><span class="line">github.com/ethereum/go-ethereum/graphql</span><br><span class="line">github.com/ethereum/go-ethereum/les/checkpointoracle</span><br><span class="line">github.com/ethereum/go-ethereum/eth</span><br><span class="line">github.com/ethereum/go-ethereum/les</span><br><span class="line">github.com/ethereum/go-ethereum/ethstats</span><br><span class="line">github.com/ethereum/go-ethereum/eth/tracers</span><br><span class="line">github.com/ethereum/go-ethereum/cmd/utils</span><br><span class="line">github.com/ethereum/go-ethereum/cmd/geth</span><br><span class="line">Done building.</span><br><span class="line">Run &quot;./build/bin/geth&quot; to launch geth.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过查看geth版本来确认geth是否已经安装正确：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./build/bin/geth version</span></span><br><span class="line">Geth</span><br><span class="line">Version: 1.10.2-unstable</span><br><span class="line">Git Commit: 54c0d573d75ab9baa239db3f071d6cb4d1ec6aad</span><br><span class="line">Git Commit Date: 20210325</span><br><span class="line">Architecture: amd64</span><br><span class="line">Go Version: go1.13.8</span><br><span class="line">Operating System: linux</span><br><span class="line">GOPATH=</span><br><span class="line">GOROOT=go</span><br></pre></td></tr></table></figure><h2 id="首次同步以太坊区块数据">首次同步以太坊区块数据</h2><p>查看go-ethereum的readme文档，默认是fast方式同步数据，直接运行<code>geth console</code>即可，因为数据比较大我单独挂载了一个磁盘，所以指定了数据存放的目录<code>--datadir /data/ethereum/node</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./build/bin/geth console --datadir /data/ethereum/node/</span></span><br><span class="line">INFO [03-27|16:25:39.409] Starting Geth on Ethereum mainnet...</span><br><span class="line">INFO [03-27|16:25:39.409] Bumping default cache on mainnet         provided=1024 updated=4096</span><br><span class="line">INFO [03-27|16:25:39.411] Maximum peer count                       ETH=50 LES=0 total=50</span><br><span class="line">INFO [03-27|16:25:39.411] Smartcard socket not found, disabling    err=&quot;stat /run/pcscd/pcscd.comm: no such file or directory&quot;</span><br><span class="line">INFO [03-27|16:25:39.412] Set global gas cap                       cap=25000000</span><br><span class="line">INFO [03-27|16:25:39.412] Allocated trie memory caches             clean=614.00MiB dirty=1024.00MiB</span><br><span class="line">INFO [03-27|16:25:39.412] Allocated cache and file handles         database=/data/ethereum/node/geth/chaindata cache=2.00GiB handles=524288</span><br><span class="line">INFO [03-27|16:25:39.504] Opened ancient database                  database=/data/ethereum/node/geth/chaindata/ancient readonly=false</span><br><span class="line">INFO [03-27|16:25:39.504] Writing default main-net genesis block</span><br><span class="line">INFO [03-27|16:25:39.645] Persisted trie from memory database      nodes=12356 size=1.78MiB time=48.710818ms gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B</span><br><span class="line">INFO [03-27|16:25:39.645] Initialised chain configuration          config=&quot;&#123;ChainID: 1 Homestead: 1150000 DAO: 1920000 DAOSupport: true EIP150: 2463000 EIP155: 2675000 EIP158: 2675000 Byzantium: 4370000 Constantinople: 7280000 Petersburg: 7280000 Istanbul: 9069000, Muir Glacier: 9200000, Berlin: 12244000, YOLO v3: &lt;nil&gt;, Engine: ethash&#125;&quot;</span><br><span class="line">INFO [03-27|16:25:39.645] Disk storage enabled for ethash caches   dir=/data/ethereum/node/geth/ethash count=3</span><br><span class="line">INFO [03-27|16:25:39.645] Disk storage enabled for ethash DAGs     dir=/home/guozhe/.ethash            count=2</span><br><span class="line">INFO [03-27|16:25:39.646] Initialising Ethereum protocol           network=1 dbversion=&lt;nil&gt;</span><br><span class="line">WARN [03-27|16:25:39.646] Upgrade blockchain database version      from=&lt;nil&gt; to=8</span><br><span class="line">INFO [03-27|16:25:39.646] Loaded most recent local header          number=0 hash=&quot;d4e567…cb8fa3&quot; td=17179869184 age=51y11mo3w</span><br><span class="line">INFO [03-27|16:25:39.646] Loaded most recent local full block      number=0 hash=&quot;d4e567…cb8fa3&quot; td=17179869184 age=51y11mo3w</span><br><span class="line">INFO [03-27|16:25:39.646] Loaded most recent local fast block      number=0 hash=&quot;d4e567…cb8fa3&quot; td=17179869184 age=51y11mo3w</span><br><span class="line">WARN [03-27|16:25:39.646] Failed to load snapshot, regenerating    err=&quot;missing or corrupted snapshot&quot;</span><br><span class="line">INFO [03-27|16:25:39.646] Rebuilding state snapshot</span><br><span class="line">INFO [03-27|16:25:39.646] Deleted state snapshot leftovers         kind=accounts wiped=0 elapsed=&quot;47.755µs&quot;</span><br><span class="line">INFO [03-27|16:25:39.647] Deleted state snapshot leftovers         kind=storage  wiped=0 elapsed=&quot;17.809µs&quot;</span><br><span class="line">INFO [03-27|16:25:39.647] Compacting snapshot account area</span><br><span class="line">INFO [03-27|16:25:39.647] Regenerated local transaction journal    transactions=0 accounts=0</span><br><span class="line">INFO [03-27|16:25:39.650] Wiper running, state snapshotting paused accounts=0 slots=0 storage=0.00B elapsed=&quot;361.935µs&quot;</span><br><span class="line">INFO [03-27|16:25:39.676] Allocated fast sync bloom                size=2.00GiB</span><br><span class="line">WARN [03-27|16:25:39.677] Error reading unclean shutdown markers   error=&quot;leveldb: not found&quot;</span><br><span class="line">INFO [03-27|16:25:39.677] Starting peer-to-peer node               instance=Geth/v1.10.2-unstable-54c0d573-20210325/linux-amd64/go1.13.8</span><br><span class="line">INFO [03-27|16:25:39.741] Initialized state bloom                  items=12356 errorrate=0.000 elapsed=64.036ms</span><br><span class="line">INFO [03-27|16:25:39.817] New local node record                    seq=1 id=0d81eb9b177ba542 ip=127.0.0.1 udp=30303 tcp=30303</span><br><span class="line">INFO [03-27|16:25:39.817] Started P2P networking                   self=enode://dbb9a7d3a1ca59a200c1fa920b2cc467c342182b0f818c491028da1c564391f2cb91f0ce88bb7826264e609aa407dd8544224c0dd3d1a3f6bc449fd063dbdde7@127.0.0.1:30303</span><br><span class="line">INFO [03-27|16:25:39.818] IPC endpoint opened                      url=/data/ethereum/node/geth.ipc</span><br><span class="line">WARN [03-27|16:25:39.858] Served eth_coinbase                      reqid=3 t=&quot;12.338µs&quot; err=&quot;etherbase must be explicitly specified&quot;</span><br><span class="line">Welcome to the Geth JavaScript console!</span><br><span class="line"></span><br><span class="line">instance: Geth/v1.10.2-unstable-54c0d573-20210325/linux-amd64/go1.13.8</span><br><span class="line">at block: 0 (Thu Jan 01 1970 08:00:00 GMT+0800 (CST))</span><br><span class="line"> datadir: /data/ethereum/node</span><br><span class="line"> modules: admin:1.0 debug:1.0 eth:1.0 ethash:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0</span><br><span class="line"></span><br><span class="line">To exit, press ctrl-d</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> INFO [03-27|16:25:39.924] Compacting snapshot storage area</span></span><br><span class="line">INFO [03-27|16:25:39.924] Compacted snapshot area in database      elapsed=277.624ms</span><br><span class="line">INFO [03-27|16:25:39.924] Resuming state snapshot generation       root=&quot;d7f897…0f0544&quot; accounts=0 slots=0 storage=0.00B elapsed=&quot;9.119µs&quot;</span><br><span class="line">INFO [03-27|16:25:39.996] Generated state snapshot                 accounts=8893 slots=0 storage=409.64KiB elapsed=71.524ms</span><br><span class="line">INFO [03-27|16:25:46.015] New local node record                    seq=2 id=0d81eb9b177ba542 ip=115.171.250.78 udp=52360 tcp=30303</span><br><span class="line">INFO [03-27|16:25:50.847] Looking for peers                        peercount=0 tried=8 static=0</span><br><span class="line">INFO [03-27|16:25:56.124] Block synchronisation started</span><br><span class="line">INFO [03-27|16:26:01.068] Looking for peers                        peercount=0 tried=4 static=0</span><br><span class="line">WARN [03-27|16:26:05.414] Dropping unsynced node during sync       id=46e8efbdd811cf2e conn=dyndial addr=207.148.3.150:30303 type=Geth/v1.9.25-stable-...</span><br><span class="line">INFO [03-27|16:26:11.068] Looking for peers                        peercount=2 tried=15 static=0</span><br><span class="line">WARN [03-27|16:26:12.135] Dropping unsynced node during sync       id=53455744030e83cc conn=dyndial addr=108.61.176.254:30303 type=Geth/v1.9.25-stable-...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查看-data-ethereum-node目录">查看<code>/data/ethereum/node</code>目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ll</span></span><br><span class="line">总用量 1</span><br><span class="line">drwxrwxrwx 1 root root 472 3月  27 16:28 geth/</span><br><span class="line">srwxrwxrwx 1 root root   1 3月  27 16:25 geth.ipc=</span><br><span class="line">drwxrwxrwx 1 root root   0 3月  27 16:25 keystore/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="调用geth的json-rpc接口">调用geth的json-rpc接口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -H &quot;Content-Type: application/json&quot; --data &#x27;&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;web3_clientVersion&quot;,&quot;params&quot;:[],&quot;id&quot;:1&#125;&#x27; http://localhost:8545</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> HOW-TO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调用erc20合约的转账方法</title>
      <link href="2024/11/22/blockchain/ethereum/how_to/%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8erc20%E5%90%88%E7%BA%A6%E7%9A%84%E8%BD%AC%E8%B4%A6%E6%96%B9%E6%B3%95/"/>
      <url>2024/11/22/blockchain/ethereum/how_to/%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8erc20%E5%90%88%E7%BA%A6%E7%9A%84%E8%BD%AC%E8%B4%A6%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="solidity编译器的版本选择">solidity编译器的版本选择</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 选择solc的指定版本</span></span><br><span class="line">solc-select use 0.8.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果没有制定版本先安装</span></span><br><span class="line">solc-select install 0.8.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成制定合约的abi</span></span><br><span class="line">solc --abi GZToken.sol</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用go-ethereum的abigen工具生成go源文件">使用go-ethereum的abigen工具生成go源文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /Users/apple/code/open-source/blockchain/ethereum/go-ethereum/cmd/abigen</span><br><span class="line"><span class="meta">#</span><span class="bash"> 制定bin和abi文件生成go文件</span></span><br><span class="line">go run main.go --abi=WETH.abi --bin=WETH.bin --pkg=contract --out=WETH.go</span><br></pre></td></tr></table></figure><h3 id="报错记录">报错记录</h3><h4 id="replacement-transaction-underpriced">replacement transaction underpriced</h4><p>使用相同的nonce再次发起交易时，gasPrice必须大于上次交易gasPrice10%以上。</p><h4 id="交易一直是pending状态，无法确认">交易一直是pending状态，无法确认</h4><h4 id="invalid-sender">invalid sender</h4><p>在调用json rpc接口时，返回以上的错误，原因是因为chainId与实际的chainId不一致。</p><h4 id="交易发送出去但是交易状态是失败，点击详情提示：a-status-code-indicating-if-the-top-level-call-succeeded-or-failed">交易发送出去但是交易状态是失败，点击详情提示：a status code indicating if the top-level call succeeded or failed</h4><p>其中一个原因可能是abi错误，然后生成的methodId不正确导致，可以在应用页面调用一次这个方法，确认真实的方法和参数。</p><p>这是个坑人的问题，合约源码与真实的链上部署的不一致，如solo.top项目的<a href="https://bscscan.com/address/0xa51e5205c33eaa25e100ae8fa881be0e5cca4fe5#code">bank</a>合约，deposit提供的源码与页面调用的参数就不一致。</p><h5 id="提供的智能合约代码如下：">提供的智能合约代码如下：</h5><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210615181314870.png" alt="image-20210615181314870"></p><h5 id="从页面调用的方法如下：">从页面调用的方法如下：</h5><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210615181223485.png" alt="image-20210615181223485"></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> HOW-TO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> solidity </tag>
            
            <tag> 智能合约 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用solidity开发以太坊智能合约</title>
      <link href="2024/11/22/blockchain/ethereum/how_to/%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
      <url>2024/11/22/blockchain/ethereum/how_to/%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="一些开发合约相关资料">一些开发合约相关资料</h2><ul><li>合约开发语言：<a href="https://docs.soliditylang.org/en/v0.7.0/">soliditylang</a>；<a href="https://learnblockchain.cn/docs/solidity/">中文版</a></li><li>开发工具：<a href="https://github.com/ethereum/remix-project">remix-project</a></li><li>开发网络：<a href="https://www.trufflesuite.com/ganache">ganache</a>，<a href="https://hardhat.org/">hardhat</a>，<a href="https://github.com/austintgriffith/scaffold-eth">scaffold-eth:以太坊开发all in one</a></li><li><a href="http://solc-bin.ethereum.org/bin/list.json">solc版本列表</a></li></ul><h3 id="环境搭建（MAC）">环境搭建（MAC）</h3><h4 id="安装solidity">安装solidity</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install solidity</span><br></pre></td></tr></table></figure><h4 id="安装truffle">安装truffle</h4><p>truffle是集成安装、部署、测试合约为一体的开发框架；如果没有node环境需要先安装node:<code>brew install node</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install truffle -g</span><br></pre></td></tr></table></figure><h3 id="合约开发">合约开发</h3><h4 id="初始化项目路径">初始化项目路径</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truffle init</span><br></pre></td></tr></table></figure><h4 id="初始化npm环境">初始化npm环境</h4><p>在初始化的过程中会让你输入一些参数的值，可以一路按回车全部使用默认值即可</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><h4 id="安装npm依赖库">安装npm依赖库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install dotenv truffle-wallet-provider ethereumjs-wallet</span><br></pre></td></tr></table></figure><h4 id="配置网络">配置网络</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  networks: &#123;</span><br><span class="line">    localnode: &#123;</span><br><span class="line">      network_id: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">      host: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">      port: <span class="string">&quot;8545&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mocha: &#123;</span><br><span class="line">    <span class="comment">// timeout: 100000</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  compilers: &#123;</span><br><span class="line">    solc: &#123;</span><br><span class="line">      version: <span class="string">&quot;0.8.0+commit.c7dfd78e&quot;</span>,    <span class="comment">// Fetch exact version from solc-bin (default: truffle&#x27;s version)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  db: &#123;</span><br><span class="line">    enabled: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="开发合约">开发合约</h4><p>按照《精通以太坊》书本的例子写了一个“水龙头”的合约，只有两个函数，一个提取以太币（withdraw），一个接收以太币（receive）。合约的代码放在项目的<code>contracts</code>目录下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0</span><br><span class="line"></span><br><span class="line">pragma solidity &gt;&#x3D;0.7.0 &lt;0.8.0;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; my first contract</span><br><span class="line">contract Faucet &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Give out ether to anyone who asks</span><br><span class="line">    function withdraw(uint withdraw_amount) public &#123;</span><br><span class="line">        &#x2F;&#x2F; limit withdrawal amount</span><br><span class="line">        require(withdraw_amount &lt;&#x3D; 1 * 1000 * 1000 * 1000 * 1000);</span><br><span class="line"></span><br><span class="line">        msg.sender.transfer(withdraw_amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Accept any incoming amount 一个默认的函数</span><br><span class="line">    &#x2F;&#x2F; fallback () external payable &#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 推荐使用receive()函数来接收以太币</span><br><span class="line">    receive() external payable&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编译合约">编译合约</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truffle compile</span><br></pre></td></tr></table></figure><h4 id="部署合约">部署合约</h4><p>参考<code>migrations/1_initial_migration.js</code>文件，新建一个``migrations/2_initial_migration.js<code>；(*注意：2_initial_migration.js这个名字不能以</code>0`开头，否则部署的时候会忽略。。。*)修改文件内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Faucet = artifacts.require(<span class="string">&quot;Faucet&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(Faucet);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后部署到本地的测试网络（要在本地启动truffle的ethereum测试网络）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truffle migrate --network localnode</span><br></pre></td></tr></table></figure><p>执行完成之后的日志如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">(base) w:Faucet apple$ truffle migrate --network localnode</span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling ./contracts/Faucet.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Artifacts written to /Users/apple/code/open-source/my-projects/etherum/Faucet/build/contracts</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiled successfully using:</span></span><br><span class="line">   - solc: 0.8.0+commit.c7dfd78e.Emscripten.clang</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting migrations...</span><br><span class="line">======================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Network name:    <span class="string">&#x27;localnode&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Network id:      1337</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Block gas <span class="built_in">limit</span>: 6721975 (0x6691b7)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Replacing &#x27;Migrations&#x27;</span><br><span class="line">   ----------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> transaction <span class="built_in">hash</span>:    0xaf813946c7470d83c7fb1e8b535efebcfdd90540c72ee9092ae9e04775bf56bc</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Blocks: 0            Seconds: 0</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> contract address:    0x4445151f84Fd5E71aB93f0d9A1AC93fd7a454c10</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block number:        1</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block timestamp:     1615445677</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> account:             0xc0F680767D4Ae17C7adaF8C6d0b4805Bc207805e</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> balance:             99.99511424</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas used:            244288 (0x3ba40)</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas price:           20 gwei</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> value sent:          0 ETH</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> total cost:          0.00488576 ETH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving migration to chain.</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving artifacts</span></span><br><span class="line">   -------------------------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Total cost:          0.00488576 ETH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Replacing &#x27;Faucet&#x27;</span><br><span class="line">   ------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> transaction <span class="built_in">hash</span>:    0xcb451bc9f9347fa9983e5182ccc4453f1a3c7ac74b5c7785679913a7325f7715</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Blocks: 0            Seconds: 0</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> contract address:    0x6B7d6480BC95EF2C51d2Ae247bDd2aC3bBA5690c</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block number:        3</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block timestamp:     1615445677</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> account:             0xc0F680767D4Ae17C7adaF8C6d0b4805Bc207805e</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> balance:             99.9888339</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas used:            271504 (0x42490)</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas price:           20 gwei</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> value sent:          0 ETH</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> total cost:          0.00543008 ETH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving migration to chain.</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving artifacts</span></span><br><span class="line">   -------------------------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Total cost:          0.00543008 ETH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">=======</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Total deployments:   2</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Final cost:          0.01031584 ETH</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用truffle部署智能合约到ropsten测试网络">使用truffle部署智能合约到ropsten测试网络</h3><p>可以在https://infura.io/网站建立账号，可以把它看成一个geth节点，然后他提供了rpc接口。</p><p>首次执行部署，报错说HDWalletProvider没有定义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> truffle migrate --network ropsten</span></span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling ./contracts/GZToken.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling ./contracts/Token2.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling ./contracts/Token3.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Artifacts written to /Users/apple/code/open-source/my-projects/etherum/Faucet/build/contracts</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiled successfully using:</span></span><br><span class="line">   - solc: 0.8.0+commit.c7dfd78e.Emscripten.clang</span><br><span class="line"></span><br><span class="line">ReferenceError: HDWalletProvider is not defined</span><br><span class="line">    at Object.provider (/Users/apple/code/open-source/my-projects/etherum/Faucet/truffle-config.js:62:21)</span><br><span class="line">    at Object.getProvider (/usr/local/lib/node_modules/truffle/build/webpack:/packages/provider/index.js:20:1)</span><br><span class="line">    at Object.create (/usr/local/lib/node_modules/truffle/build/webpack:/packages/provider/index.js:13:1)</span><br><span class="line">    at TruffleConfig.get [as provider] (/usr/local/lib/node_modules/truffle/build/webpack:/packages/config/dist/configDefaults.js:204:1)</span><br><span class="line">    at Object.detect (/usr/local/lib/node_modules/truffle/build/webpack:/packages/environment/environment.js:19:1)</span><br><span class="line">    at Object.run (/usr/local/lib/node_modules/truffle/build/webpack:/packages/core/lib/commands/migrate.js:206:1)</span><br><span class="line">    at Command.run (/usr/local/lib/node_modules/truffle/build/webpack:/packages/core/lib/command.js:136:1)</span><br><span class="line">Truffle v5.2.3 (core: 5.2.3)</span><br><span class="line">Node v14.16.0</span><br></pre></td></tr></table></figure><h4 id="解决方案：">解决方案：</h4><h5 id="添加依赖：">添加依赖：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install truffle-hdwallet-provider</span><br><span class="line">npm install dotenv</span><br></pre></td></tr></table></figure><h5 id="在与truffle-config-js相同的目录下添加-evn文件，然后写入你的助记词，如：">在与truffle-config.js相同的目录下添加<code>.evn</code>文件，然后写入你的助记词，如：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mnemonic&#x3D;topic foster find apple famous have bonus month remain middle funny smart</span><br></pre></td></tr></table></figure><p><em>注意在gitignore文件中把这个文件（<code>.evn</code>）忽略，避免上传到github</em></p><h5 id="修改truffle-config-js：在最上面添加：">修改truffle-config.js：在最上面添加：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在使用infura作为rpc-api的提供方时，因为infura不管理我们的私钥所以要在本地有一个钱包用于签名</span></span><br><span class="line"><span class="keyword">var</span> HDWalletProvider = <span class="built_in">require</span>(<span class="string">&quot;truffle-hdwallet-provider&quot;</span>);</span><br><span class="line"><span class="comment">// 默认读取项目根目录下的.env文件,用process.env.调用</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).config();</span><br><span class="line"><span class="keyword">if</span> (result.error) &#123;</span><br><span class="line">  <span class="keyword">throw</span> result.error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="修改ropsten的配置如下：">修改ropsten的配置如下：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ropsten: &#123;</span><br><span class="line">      provider: <span class="function">() =&gt;</span> <span class="keyword">new</span> HDWalletProvider(process.env.mnemonic, <span class="string">`https://ropsten.infura.io/v3/your-id`</span>),</span><br><span class="line">      network_id: <span class="number">3</span>,       <span class="comment">// Ropsten&#x27;s id</span></span><br><span class="line">      gas: <span class="number">5500000</span>,        <span class="comment">// Ropsten has a lower block limit than mainnet</span></span><br><span class="line">      confirmations: <span class="number">2</span>,    <span class="comment">// # of confs to wait between deployments. (default: 0)</span></span><br><span class="line">      timeoutBlocks: <span class="number">200</span>,  <span class="comment">// # of blocks before a deployment times out  (minimum/default: 50)</span></span><br><span class="line">      skipDryRun: <span class="literal">true</span>     <span class="comment">// Skip dry run before migrations? (default: false for public nets )</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h4 id="重新部署：">重新部署：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">truffle migrate --network ropsten</span></span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling ./contracts/GZToken.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling ./contracts/Token3.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Artifacts written to /Users/apple/code/open-source/my-projects/etherum/Faucet/build/contracts</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiled successfully using:</span></span><br><span class="line">   - solc: 0.8.0+commit.c7dfd78e.Emscripten.clang</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting migrations...</span><br><span class="line">======================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Network name:    <span class="string">&#x27;ropsten&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Network id:      3</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Block gas <span class="built_in">limit</span>: 8000000 (0x7a1200)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Deploying &#x27;Migrations&#x27;</span><br><span class="line">   ----------------------</span><br><span class="line"></span><br><span class="line">Error:  *** Deployment Failed ***</span><br><span class="line"></span><br><span class="line">&quot;Migrations&quot; -- insufficient funds for gas * price + value.</span><br><span class="line"></span><br><span class="line">    at /usr/local/lib/node_modules/truffle/build/webpack:/packages/deployer/src/deployment.js:365:1</span><br><span class="line">    at processTicksAndRejections (internal/process/task_queues.js:93:5)</span><br><span class="line">    at Migration._deploy (/usr/local/lib/node_modules/truffle/build/webpack:/packages/migrate/Migration.js:74:1)</span><br><span class="line">    at Migration._load (/usr/local/lib/node_modules/truffle/build/webpack:/packages/migrate/Migration.js:61:1)</span><br><span class="line">    at Migration.run (/usr/local/lib/node_modules/truffle/build/webpack:/packages/migrate/Migration.js:212:1)</span><br><span class="line">    at Object.runMigrations (/usr/local/lib/node_modules/truffle/build/webpack:/packages/migrate/index.js:150:1)</span><br><span class="line">    at Object.runFrom (/usr/local/lib/node_modules/truffle/build/webpack:/packages/migrate/index.js:110:1)</span><br><span class="line">    at Object.run (/usr/local/lib/node_modules/truffle/build/webpack:/packages/migrate/index.js:87:1)</span><br><span class="line">    at runMigrations (/usr/local/lib/node_modules/truffle/build/webpack:/packages/core/lib/commands/migrate.js:263:1)</span><br><span class="line">    at Object.run (/usr/local/lib/node_modules/truffle/build/webpack:/packages/core/lib/commands/migrate.js:228:1)</span><br><span class="line">    at Command.run (/usr/local/lib/node_modules/truffle/build/webpack:/packages/core/lib/command.js:136:1)</span><br><span class="line">Truffle v5.2.3 (core: 5.2.3)</span><br><span class="line">Node v14.16.0</span><br></pre></td></tr></table></figure><p>原因是没有足够的汽油费，去https://faucet.ropsten.be/获取即可。</p><p>在此重新部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> truffle migrate --network ropsten</span></span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling ./contracts/Token3.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Artifacts written to /Users/apple/code/open-source/my-projects/etherum/Faucet/build/contracts</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiled successfully using:</span></span><br><span class="line">   - solc: 0.8.0+commit.c7dfd78e.Emscripten.clang</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting migrations...</span><br><span class="line">======================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Network name:    <span class="string">&#x27;ropsten&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Network id:      3</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Block gas <span class="built_in">limit</span>: 8000000 (0x7a1200)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Deploying &#x27;Migrations&#x27;</span><br><span class="line">   ----------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> transaction <span class="built_in">hash</span>:    0x212e4eee81d5fc3024db8d6787b36a51f070f832b94961605de18675d8f597d3</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Blocks: 2            Seconds: 13</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> contract address:    0x0d4f7ff83b66e1E3377aacE5EFA70d9E036890c2</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block number:        9941219</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block timestamp:     1617088554</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> account:             0x2560be5793F9AA00963e163A1287807Feb897e2F</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> balance:             0.99508824</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas used:            245588 (0x3bf54)</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas price:           20 gwei</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> value sent:          0 ETH</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> total cost:          0.00491176 ETH</span></span><br><span class="line"></span><br><span class="line">   Pausing for 2 confirmations...</span><br><span class="line">   ------------------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> confirmation number: 2 (block: 9941221)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving migration to chain.</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving artifacts</span></span><br><span class="line">   -------------------------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Total cost:          0.00491176 ETH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Deploying &#x27;Faucet&#x27;</span><br><span class="line">   ------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> transaction <span class="built_in">hash</span>:    0x40ead4c9b0fa1efb90d551e43587c10457e0c99deeaf4f804222645395435090</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Blocks: 2            Seconds: 21</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> contract address:    0xE18C40cEf01bEedA140033892b4638CFBc464BbD</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block number:        9941227</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block timestamp:     1617088603</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> account:             0x2560be5793F9AA00963e163A1287807Feb897e2F</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> balance:             0.9887139</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas used:            272804 (0x429a4)</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas price:           20 gwei</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> value sent:          0 ETH</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> total cost:          0.00545608 ETH</span></span><br><span class="line"></span><br><span class="line">   Pausing for 2 confirmations...</span><br><span class="line">   ------------------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> confirmation number: 1 (block: 9941229)</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> confirmation number: 2 (block: 9941230)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving migration to chain.</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving artifacts</span></span><br><span class="line">   -------------------------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Total cost:          0.00545608 ETH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Deploying &#x27;GZToken&#x27;</span><br><span class="line">   -------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> transaction <span class="built_in">hash</span>:    0xf28b9b32e6cbf0b12a44249dd4c6eb914706820daafc671e43cabb4541d5396b</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Blocks: 2            Seconds: 25</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> contract address:    0xB8DfEe0D9aC703E75EE3D031148227B3BbB26524</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block number:        9941234</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block timestamp:     1617088662</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> account:             0x2560be5793F9AA00963e163A1287807Feb897e2F</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> balance:             0.9713052</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas used:            841622 (0xcd796)</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas price:           20 gwei</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> value sent:          0 ETH</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> total cost:          0.01683244 ETH</span></span><br><span class="line"></span><br><span class="line">   Pausing for 2 confirmations...</span><br><span class="line">   ------------------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> confirmation number: 1 (block: 9941235)</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> confirmation number: 2 (block: 9941236)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving migration to chain.</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving artifacts</span></span><br><span class="line">   -------------------------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Total cost:          0.01683244 ETH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">=======</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Total deployments:   3</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Final cost:          0.02720028 ETH</span></span><br></pre></td></tr></table></figure><p>调用合约的报错汇总：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Received unexpected error:</span><br><span class="line">                    out of gas</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intrinsic gas too low: have 0, want 21420 (supplied gas 0)</span><br></pre></td></tr></table></figure><p>上面这些全部都是因为gas费设置的太少导致的。</p><h3 id="与合约交互">与合约交互</h3><h4 id="在remix中调用合约">在<a href="https://remix.ethereum.org/">remix</a>中调用合约</h4><p>在<a href="https://remix.ethereum.org/">remix</a>网页中部署完成合约之后，在下面可以看到withdraw函数，输入提现的金额然后点击transact按钮，就可以调起MetaMask调用智能合约。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210309173249673.png" alt="image-20210309173249673"></p><h4 id="使用truffle的命令调用合约">使用truffle的命令调用合约</h4><h5 id="启动truffle的console控制台：">启动truffle的console控制台：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truffle console --network localnode</span><br></pre></td></tr></table></figure><h5 id="打开之后双击两次tab键会有命令提示，我们查看一下部署的Faucet合约的地址：">打开之后双击两次<code>tab</code>键会有命令提示，我们查看一下部署的<code>Faucet</code>合约的地址：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">truffle(localnode)&gt;</span><span class="bash"> Faucet.address</span></span><br><span class="line">&#x27;0x6B7d6480BC95EF2C51d2Ae247bDd2aC3bBA5690c&#x27;</span><br></pre></td></tr></table></figure><h5 id="查看我们合约的账户余额：">查看我们合约的账户余额：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">truffle(localnode)&gt;</span><span class="bash"> web3.eth.getBalance(Faucet.address)</span></span><br><span class="line">&#x27;0&#x27;</span><br></pre></td></tr></table></figure><h4 id="truffle-develop">truffle develop</h4><p>develop   Open a console with a local development blockchain</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">truffle(develop)&gt;</span><span class="bash"> Faucet.deployed().<span class="keyword">then</span>(i =&gt; &#123;FaucetDeployed = i&#125;)</span></span><br><span class="line">// 发送给合约1个eth</span><br><span class="line"><span class="meta">truffle(develop)&gt;</span><span class="bash"> FaucetDeployed.send(web3.utils.toWei(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;ether&quot;</span>)).<span class="keyword">then</span>(res =&gt; &#123; console.log(res.logs[0].event, res.logs[0].args) &#125;)</span></span><br><span class="line">Deposit Result &#123;</span><br><span class="line">  &#x27;0&#x27;: &#x27;0xAC3509D2d2746B6fEC873087AAB9394d03472131&#x27;,</span><br><span class="line">  &#x27;1&#x27;: BN &#123;</span><br><span class="line">    negative: 0,</span><br><span class="line">    words: [ 56885248, 2993385, 222, &lt;1 empty item&gt; ],</span><br><span class="line">    length: 3,</span><br><span class="line">    red: null</span><br><span class="line">  &#125;,</span><br><span class="line">  __length__: 2,</span><br><span class="line">  to: &#x27;0xAC3509D2d2746B6fEC873087AAB9394d03472131&#x27;,</span><br><span class="line">  amount: BN &#123;</span><br><span class="line">    negative: 0,</span><br><span class="line">    words: [ 56885248, 2993385, 222, &lt;1 empty item&gt; ],</span><br><span class="line">    length: 3,</span><br><span class="line">    red: null</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 从合约提取0.1eth</span><br><span class="line"><span class="meta">truffle(develop)&gt;</span><span class="bash"> FaucetDeployed.withdraw(web3.utils.toWei(<span class="string">&quot;0.1&quot;</span>, <span class="string">&quot;ether&quot;</span>)).<span class="keyword">then</span>(res =&gt; &#123; console.log(res.logs[0].event, res.logs[0].args) &#125;)</span></span><br><span class="line">Withdrawal Result &#123;</span><br><span class="line">  &#x27;0&#x27;: &#x27;0xAC3509D2d2746B6fEC873087AAB9394d03472131&#x27;,</span><br><span class="line">  &#x27;1&#x27;: BN &#123;</span><br><span class="line">    negative: 0,</span><br><span class="line">    words: [ 25821184, 13721111, 22, &lt;1 empty item&gt; ],</span><br><span class="line">    length: 3,</span><br><span class="line">    red: null</span><br><span class="line">  &#125;,</span><br><span class="line">  __length__: 2,</span><br><span class="line">  to: &#x27;0xAC3509D2d2746B6fEC873087AAB9394d03472131&#x27;,</span><br><span class="line">  amount: BN &#123;</span><br><span class="line">    negative: 0,</span><br><span class="line">    words: [ 25821184, 13721111, 22, &lt;1 empty item&gt; ],</span><br><span class="line">    length: 3,</span><br><span class="line">    red: null</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="与Gas费相关的注意事项">与Gas费相关的注意事项</h3><p>如果在执行过程中gas费耗尽，会触发如下一系列事件：</p><ul><li>抛出“out of gas”异常</li><li>状态被恢复到执行开始之前</li><li>所有在这次执行过程中的gas开销都会被作为交易费用，以太坊不会因为交易中止而退回gas或以太币。</li></ul><h4 id="如何把合约函数调用的gas费消耗最小化">如何把合约函数调用的gas费消耗最小化</h4><h5 id="避免动态尺寸的数组">避免动态尺寸的数组</h5><p>例如对数组的每个元素进行操作，或者通过遍历的方式查找数组中的某个值。</p><h5 id="避免调用其他合约">避免调用其他合约</h5><p>调用其他合约，特别是那些gas消耗未知的合约，可能会产生高昂的gas开销。</p><h5 id="估计gas开销">估计gas开销</h5>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> HOW-TO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> solidity </tag>
            
            <tag> 智能合约 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Geth源码学习之MPT</title>
      <link href="2024/11/22/blockchain/ethereum/source_code/Geth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8BMPT/"/>
      <url>2024/11/22/blockchain/ethereum/source_code/Geth%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8BMPT/</url>
      
        <content type="html"><![CDATA[<h3 id="数据结构mpt学习-go-ethereum-trie-trie-go：">数据结构mpt学习<code>/go-ethereum/trie/trie.go</code>：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2014 The go-ethereum Authors</span></span><br><span class="line"><span class="comment">// This file is part of the go-ethereum library.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The go-ethereum library is free software: you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">// it under the terms of the GNU Lesser General Public License as published by</span></span><br><span class="line"><span class="comment">// the Free Software Foundation, either version 3 of the License, or</span></span><br><span class="line"><span class="comment">// (at your option) any later version.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The go-ethereum library is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span></span><br><span class="line"><span class="comment">// GNU Lesser General Public License for more details.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// You should have received a copy of the GNU Lesser General Public License</span></span><br><span class="line"><span class="comment">// along with the go-ethereum library. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Package trie implements Merkle Patricia Tries.</span></span><br><span class="line"><span class="keyword">package</span> trie</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/ethereum/go-ethereum/common&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/ethereum/go-ethereum/crypto&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/ethereum/go-ethereum/log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// emptyRoot is the known root hash of an empty trie.</span></span><br><span class="line">emptyRoot = common.HexToHash(<span class="string">&quot;56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// emptyState is the known hash of an empty state trie entry.</span></span><br><span class="line">emptyState = crypto.Keccak256Hash(<span class="literal">nil</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// LeafCallback is a callback type invoked when a trie operation reaches a leaf</span></span><br><span class="line"><span class="comment">// node. It&#x27;s used by state sync and commit to allow handling external references</span></span><br><span class="line"><span class="comment">// between account and storage tries.</span></span><br><span class="line"><span class="keyword">type</span> LeafCallback <span class="function"><span class="keyword">func</span><span class="params">(path []<span class="keyword">byte</span>, leaf []<span class="keyword">byte</span>, parent common.Hash)</span> <span class="title">error</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Trie is a Merkle Patricia Trie.</span></span><br><span class="line"><span class="comment">// The zero value is an empty trie with no database.</span></span><br><span class="line"><span class="comment">// Use New to create a trie that sits on top of a database.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Trie is not safe for concurrent use.</span></span><br><span class="line"><span class="keyword">type</span> Trie <span class="keyword">struct</span> &#123;</span><br><span class="line">db   *Database</span><br><span class="line">root node</span><br><span class="line"><span class="comment">// Keep track of the number leafs which have been inserted since the last</span></span><br><span class="line"><span class="comment">// hashing operation. This number will not directly map to the number of</span></span><br><span class="line"><span class="comment">// actually unhashed nodes</span></span><br><span class="line">unhashed <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// newFlag returns the cache flag value for a newly created node.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">newFlag</span><span class="params">()</span> <span class="title">nodeFlag</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> nodeFlag&#123;dirty: <span class="literal">true</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New creates a trie with an existing root node from db.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If root is the zero hash or the sha3 hash of an empty string, the</span></span><br><span class="line"><span class="comment">// trie is initially empty and does not require a database. Otherwise,</span></span><br><span class="line"><span class="comment">// New will panic if db is nil and returns a MissingNodeError if root does</span></span><br><span class="line"><span class="comment">// not exist in the database. Accessing the trie loads nodes from db on demand.</span></span><br><span class="line"><span class="comment">// 无论root是zero hash还是一个空字符串，都需要传入Database，否则会panic</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(root common.Hash, db *Database)</span> <span class="params">(*Trie, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> db == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;trie.New called without a database&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">trie := &amp;Trie&#123;</span><br><span class="line">db: db,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果root不为zero hash并且也不是一个空字符串，则从数据库中获取节点数据</span></span><br><span class="line"><span class="keyword">if</span> root != (common.Hash&#123;&#125;) &amp;&amp; root != emptyRoot &#123;</span><br><span class="line">rootnode, err := trie.resolveHash(root[:], <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">trie.root = rootnode</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> trie, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NodeIterator returns an iterator that returns nodes of the trie. Iteration starts at</span></span><br><span class="line"><span class="comment">// the key after the given start key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">NodeIterator</span><span class="params">(start []<span class="keyword">byte</span>)</span> <span class="title">NodeIterator</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> newNodeIterator(t, start)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get returns the value for key stored in the trie.</span></span><br><span class="line"><span class="comment">// The value bytes must not be modified by the caller.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">Get</span><span class="params">(key []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">res, err := t.TryGet(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Error(fmt.Sprintf(<span class="string">&quot;Unhandled trie error: %v&quot;</span>, err))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TryGet returns the value for key stored in the trie.</span></span><br><span class="line"><span class="comment">// The value bytes must not be modified by the caller.</span></span><br><span class="line"><span class="comment">// If a node was not found in the database, a MissingNodeError is returned.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">TryGet</span><span class="params">(key []<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">value, newroot, didResolve, err := t.tryGet(t.root, keybytesToHex(key), <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; didResolve &#123;</span><br><span class="line">t.root = newroot</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">tryGet</span><span class="params">(origNode node, key []<span class="keyword">byte</span>, pos <span class="keyword">int</span>)</span> <span class="params">(value []<span class="keyword">byte</span>, newnode node, didResolve <span class="keyword">bool</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> n := (origNode).(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> valueNode:</span><br><span class="line"><span class="keyword">return</span> n, n, <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> *shortNode:</span><br><span class="line"><span class="comment">// 如果key的长度小于n.key的长度，则说明这个key不是当前node的子节点也不是当前node本身</span></span><br><span class="line"><span class="comment">// 如果key的len(n.key)的前缀与n.key不一样，也说明这个key不在当前node的子节点中</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(key)-pos &lt; <span class="built_in">len</span>(n.Key) || !bytes.Equal(n.Key, key[pos:pos+<span class="built_in">len</span>(n.Key)]) &#123;</span><br><span class="line"><span class="comment">// key not found in trie</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, n, <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 到这里时，key的len(n.key)长度的前缀与n.key相同，说明key在node的子节点，（而不是当前节点本身）</span></span><br><span class="line">value, newnode, didResolve, err = t.tryGet(n.Val, key, pos+<span class="built_in">len</span>(n.Key))</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; didResolve &#123;</span><br><span class="line">n = n.<span class="built_in">copy</span>()</span><br><span class="line">n.Val = newnode</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value, n, didResolve, err</span><br><span class="line"><span class="keyword">case</span> *fullNode:</span><br><span class="line">value, newnode, didResolve, err = t.tryGet(n.Children[key[pos]], key, pos+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; didResolve &#123;</span><br><span class="line">n = n.<span class="built_in">copy</span>()</span><br><span class="line">n.Children[key[pos]] = newnode</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value, n, didResolve, err</span><br><span class="line"><span class="keyword">case</span> hashNode:</span><br><span class="line">child, err := t.resolveHash(n, key[:pos])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, n, <span class="literal">true</span>, err</span><br><span class="line">&#125;</span><br><span class="line">value, newnode, _, err := t.tryGet(child, key, pos)</span><br><span class="line"><span class="keyword">return</span> value, newnode, <span class="literal">true</span>, err</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;%T: invalid node: %v&quot;</span>, origNode, origNode))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TryGetNode attempts to retrieve a trie node by compact-encoded path. It is not</span></span><br><span class="line"><span class="comment">// possible to use keybyte-encoding as the path might contain odd nibbles.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">TryGetNode</span><span class="params">(path []<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">byte</span>, <span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">item, newroot, resolved, err := t.tryGetNode(t.root, compactToHex(path), <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, resolved, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> resolved &gt; <span class="number">0</span> &#123;</span><br><span class="line">t.root = newroot</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> item == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, resolved, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> item, resolved, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">tryGetNode</span><span class="params">(origNode node, path []<span class="keyword">byte</span>, pos <span class="keyword">int</span>)</span> <span class="params">(item []<span class="keyword">byte</span>, newnode node, resolved <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// If we reached the requested path, return the current node</span></span><br><span class="line"><span class="keyword">if</span> pos &gt;= <span class="built_in">len</span>(path) &#123;</span><br><span class="line"><span class="comment">// Although we most probably have the original node expanded, encoding</span></span><br><span class="line"><span class="comment">// that into consensus form can be nasty (needs to cascade down) and</span></span><br><span class="line"><span class="comment">// time consuming. Instead, just pull the hash up from disk directly.</span></span><br><span class="line"><span class="keyword">var</span> hash hashNode</span><br><span class="line"><span class="keyword">if</span> node, ok := origNode.(hashNode); ok &#123;</span><br><span class="line">hash = node</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">hash, _ = origNode.cache()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> hash == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, origNode, <span class="number">0</span>, errors.New(<span class="string">&quot;non-consensus node&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">blob, err := t.db.Node(common.BytesToHash(hash))</span><br><span class="line"><span class="keyword">return</span> blob, origNode, <span class="number">1</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Path still needs to be traversed, descend into children</span></span><br><span class="line"><span class="keyword">switch</span> n := (origNode).(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line"><span class="comment">// Non-existent path requested, abort</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="number">0</span>, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> valueNode:</span><br><span class="line"><span class="comment">// Path prematurely ended, abort</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="number">0</span>, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> *shortNode:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(path)-pos &lt; <span class="built_in">len</span>(n.Key) || !bytes.Equal(n.Key, path[pos:pos+<span class="built_in">len</span>(n.Key)]) &#123;</span><br><span class="line"><span class="comment">// Path branches off from short node</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, n, <span class="number">0</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">item, newnode, resolved, err = t.tryGetNode(n.Val, path, pos+<span class="built_in">len</span>(n.Key))</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; resolved &gt; <span class="number">0</span> &#123;</span><br><span class="line">n = n.<span class="built_in">copy</span>()</span><br><span class="line">n.Val = newnode</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> item, n, resolved, err</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> *fullNode:</span><br><span class="line">item, newnode, resolved, err = t.tryGetNode(n.Children[path[pos]], path, pos+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; resolved &gt; <span class="number">0</span> &#123;</span><br><span class="line">n = n.<span class="built_in">copy</span>()</span><br><span class="line">n.Children[path[pos]] = newnode</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> item, n, resolved, err</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> hashNode:</span><br><span class="line">child, err := t.resolveHash(n, path[:pos])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, n, <span class="number">1</span>, err</span><br><span class="line">&#125;</span><br><span class="line">item, newnode, resolved, err := t.tryGetNode(child, path, pos)</span><br><span class="line"><span class="keyword">return</span> item, newnode, resolved + <span class="number">1</span>, err</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;%T: invalid node: %v&quot;</span>, origNode, origNode))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update associates key with value in the trie. Subsequent calls to</span></span><br><span class="line"><span class="comment">// Get will return value. If value has length zero, any existing value</span></span><br><span class="line"><span class="comment">// is deleted from the trie and calls to Get will return nil.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The value bytes must not be modified by the caller while they are</span></span><br><span class="line"><span class="comment">// stored in the trie.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">Update</span><span class="params">(key, value []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := t.TryUpdate(key, value); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Error(fmt.Sprintf(<span class="string">&quot;Unhandled trie error: %v&quot;</span>, err))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TryUpdate associates key with value in the trie. Subsequent calls to</span></span><br><span class="line"><span class="comment">// Get will return value. If value has length zero, any existing value</span></span><br><span class="line"><span class="comment">// is deleted from the trie and calls to Get will return nil.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The value bytes must not be modified by the caller while they are</span></span><br><span class="line"><span class="comment">// stored in the trie.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If a node was not found in the database, a MissingNodeError is returned.</span></span><br><span class="line"><span class="comment">// 这个方法是更新t，如果value不为0则意味着插入一个新的节点或者更新原来的节点的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">TryUpdate</span><span class="params">(key, value []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">t.unhashed++</span><br><span class="line">k := keybytesToHex(key)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(value) != <span class="number">0</span> &#123;</span><br><span class="line">_, n, err := t.insert(t.root, <span class="literal">nil</span>, k, valueNode(value))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">t.root = n</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">_, n, err := t.<span class="built_in">delete</span>(t.root, <span class="literal">nil</span>, k)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">t.root = n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert 向节点n中插入（或更新）key等于key，value等于value的数据</span></span><br><span class="line"><span class="comment">// 返回值bool表示是否更新</span></span><br><span class="line"><span class="comment">// node是更新后的新的node</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">insert</span><span class="params">(n node, prefix, key []<span class="keyword">byte</span>, value node)</span> <span class="params">(<span class="keyword">bool</span>, node, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果key的长度为0</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(key) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// 判断n是不是valueNode类型，如果是</span></span><br><span class="line"><span class="keyword">if</span> v, ok := n.(valueNode); ok &#123;</span><br><span class="line"><span class="comment">// 返回n中的value和传入的value是否相同</span></span><br><span class="line"><span class="keyword">return</span> !bytes.Equal(v, value.(valueNode)), value, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果key的长度为0并且n不是valueNode类型，直接返回</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, value, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> n := n.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *shortNode:</span><br><span class="line"><span class="comment">// 计算key和n.key的公共前缀长度</span></span><br><span class="line">matchlen := prefixLen(key, n.Key)</span><br><span class="line"><span class="comment">// If the whole key matches, keep this short node as is</span></span><br><span class="line"><span class="comment">// and only update the value.</span></span><br><span class="line"><span class="comment">// 如果前缀的长度等于整个key的长度，则表示这个是最终的节点了，直接插入值</span></span><br><span class="line"><span class="keyword">if</span> matchlen == <span class="built_in">len</span>(n.Key) &#123;</span><br><span class="line">dirty, nn, err := t.insert(n.Val, <span class="built_in">append</span>(prefix, key[:matchlen]...), key[matchlen:], value)</span><br><span class="line"><span class="keyword">if</span> !dirty || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, n, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, &amp;shortNode&#123;n.Key, nn, t.newFlag()&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Otherwise branch out at the index where they differ.</span></span><br><span class="line"><span class="comment">// 如果key和n.key的前缀长度不等于n.key的长度，说明需要在现在的基础上扩展一个branchNode，（即fullNode）</span></span><br><span class="line">branch := &amp;fullNode&#123;flags: t.newFlag()&#125;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="comment">// node节点的值放在branchNode中</span></span><br><span class="line">_, branch.Children[n.Key[matchlen]], err = t.insert(<span class="literal">nil</span>, <span class="built_in">append</span>(prefix, n.Key[:matchlen+<span class="number">1</span>]...), n.Key[matchlen+<span class="number">1</span>:], n.Val)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 新的key和value也放在branchNode中</span></span><br><span class="line">_, branch.Children[key[matchlen]], err = t.insert(<span class="literal">nil</span>, <span class="built_in">append</span>(prefix, key[:matchlen+<span class="number">1</span>]...), key[matchlen+<span class="number">1</span>:], value)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Replace this shortNode with the branch if it occurs at index 0.</span></span><br><span class="line"><span class="comment">// 如果key和n.key没有公共前缀，则使用branchNode替代当前的extensionNode（即shortNode）</span></span><br><span class="line"><span class="keyword">if</span> matchlen == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, branch, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Otherwise, replace it with a short node leading up to the branch.</span></span><br><span class="line"><span class="comment">// 其他情况则使用新的branchNode替换shortNode的value</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, &amp;shortNode&#123;key[:matchlen], branch, t.newFlag()&#125;, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> *fullNode:</span><br><span class="line"><span class="comment">// 如果是fullNode，则根据key的第一个字符获得应该插入的节点，然后插入到这个节点</span></span><br><span class="line">dirty, nn, err := t.insert(n.Children[key[<span class="number">0</span>]], <span class="built_in">append</span>(prefix, key[<span class="number">0</span>]), key[<span class="number">1</span>:], value)</span><br><span class="line"><span class="keyword">if</span> !dirty || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, n, err</span><br><span class="line">&#125;</span><br><span class="line">n = n.<span class="built_in">copy</span>()</span><br><span class="line">n.flags = t.newFlag()</span><br><span class="line">n.Children[key[<span class="number">0</span>]] = nn</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, n, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, &amp;shortNode&#123;key, value, t.newFlag()&#125;, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> hashNode:</span><br><span class="line"><span class="comment">// We&#x27;ve hit a part of the trie that isn&#x27;t loaded yet. Load</span></span><br><span class="line"><span class="comment">// the node and insert into it. This leaves all child nodes on</span></span><br><span class="line"><span class="comment">// the path to the value in the trie.</span></span><br><span class="line">rn, err := t.resolveHash(n, prefix)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">dirty, nn, err := t.insert(rn, prefix, key, value)</span><br><span class="line"><span class="keyword">if</span> !dirty || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, rn, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, nn, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;%T: invalid node: %v&quot;</span>, n, n))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete removes any existing value for key from the trie.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">Delete</span><span class="params">(key []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := t.TryDelete(key); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Error(fmt.Sprintf(<span class="string">&quot;Unhandled trie error: %v&quot;</span>, err))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TryDelete removes any existing value for key from the trie.</span></span><br><span class="line"><span class="comment">// If a node was not found in the database, a MissingNodeError is returned.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">TryDelete</span><span class="params">(key []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">t.unhashed++</span><br><span class="line">k := keybytesToHex(key)</span><br><span class="line">_, n, err := t.<span class="built_in">delete</span>(t.root, <span class="literal">nil</span>, k)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">t.root = n</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete returns the new root of the trie with key deleted.</span></span><br><span class="line"><span class="comment">// It reduces the trie to minimal form by simplifying</span></span><br><span class="line"><span class="comment">// nodes on the way up after deleting recursively.</span></span><br><span class="line"><span class="comment">// 返回值bool代表是否删除</span></span><br><span class="line"><span class="comment">// 返回值node代表删除后的node</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">delete</span><span class="params">(n node, prefix, key []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">bool</span>, node, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> n := n.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *shortNode:</span><br><span class="line">matchlen := prefixLen(key, n.Key)</span><br><span class="line"><span class="comment">// 如果key和n.key的公共前缀长度小于n.key的长度，说明key这个节点不再当前的n节点，因此直接返回不删除</span></span><br><span class="line"><span class="keyword">if</span> matchlen &lt; <span class="built_in">len</span>(n.Key) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, n, <span class="literal">nil</span> <span class="comment">// don&#x27;t replace n on mismatch</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果key和n.key的公共前缀长度等于key的长度，说明当前的n就是需要删除的目标，直接删除</span></span><br><span class="line"><span class="keyword">if</span> matchlen == <span class="built_in">len</span>(key) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span>, <span class="literal">nil</span> <span class="comment">// remove n entirely for whole matches</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The key is longer than n.Key. Remove the remaining suffix</span></span><br><span class="line"><span class="comment">// from the subtrie. Child can never be nil here since the</span></span><br><span class="line"><span class="comment">// subtrie must contain at least two other values with keys</span></span><br><span class="line"><span class="comment">// longer than n.Key.</span></span><br><span class="line"><span class="comment">// 到这里说明如果的长度大于n.key的长度，如果key存在与当前节点下那么当前节点的value肯定是一个branchNode，如果是一个branchNode则里面的值肯定不止一个，不然没有必要是branchNode。</span></span><br><span class="line">dirty, child, err := t.<span class="built_in">delete</span>(n.Val, <span class="built_in">append</span>(prefix, key[:<span class="built_in">len</span>(n.Key)]...), key[<span class="built_in">len</span>(n.Key):])</span><br><span class="line"><span class="keyword">if</span> !dirty || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, n, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> child := child.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *shortNode:</span><br><span class="line"><span class="comment">// Deleting from the subtrie reduced it to another</span></span><br><span class="line"><span class="comment">// short node. Merge the nodes to avoid creating a</span></span><br><span class="line"><span class="comment">// shortNode&#123;..., shortNode&#123;...&#125;&#125;. Use concat (which</span></span><br><span class="line"><span class="comment">// always creates a new slice) instead of append to</span></span><br><span class="line"><span class="comment">// avoid modifying n.Key since it might be shared with</span></span><br><span class="line"><span class="comment">// other nodes.</span></span><br><span class="line"><span class="comment">// 如果删除之后的返回child是shortNode类型，说明原来的branchNode一共有两个值，删除之后现在只剩下一个值，就不需要再有child了，直接把当前的节点的值改为child的值</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, &amp;shortNode&#123;concat(n.Key, child.Key...), child.Val, t.newFlag()&#125;, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, &amp;shortNode&#123;n.Key, child, t.newFlag()&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> *fullNode:</span><br><span class="line">dirty, nn, err := t.<span class="built_in">delete</span>(n.Children[key[<span class="number">0</span>]], <span class="built_in">append</span>(prefix, key[<span class="number">0</span>]), key[<span class="number">1</span>:])</span><br><span class="line"><span class="keyword">if</span> !dirty || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, n, err</span><br><span class="line">&#125;</span><br><span class="line">n = n.<span class="built_in">copy</span>()</span><br><span class="line">n.flags = t.newFlag()</span><br><span class="line">n.Children[key[<span class="number">0</span>]] = nn</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check how many non-nil entries are left after deleting and</span></span><br><span class="line"><span class="comment">// reduce the full node to a short node if only one entry is</span></span><br><span class="line"><span class="comment">// left. Since n must&#x27;ve contained at least two children</span></span><br><span class="line"><span class="comment">// before deletion (otherwise it would not be a full node) n</span></span><br><span class="line"><span class="comment">// can never be reduced to nil.</span></span><br><span class="line"><span class="comment">// 检查删除后的branchNode有多少个非nil的为止，如果只有一个则把它缩短为shortNode。</span></span><br><span class="line"><span class="comment">// 在删除元素之前，节点n肯定至少包含两个子节点，因为如果不包含两个子节点他就不是一个fullNode，因此n不会减少为nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// When the loop is done, pos contains the index of the single</span></span><br><span class="line"><span class="comment">// value that is left in n or -2 if n contains at least two</span></span><br><span class="line"><span class="comment">// values.</span></span><br><span class="line">pos := <span class="number">-1</span></span><br><span class="line"><span class="comment">// 遍历n的所有子节点</span></span><br><span class="line"><span class="keyword">for</span> i, cld := <span class="keyword">range</span> &amp;n.Children &#123;</span><br><span class="line"><span class="comment">// 如果子节点不为nil</span></span><br><span class="line"><span class="keyword">if</span> cld != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 第一次到这里时，pos肯定等于-1，所以&quot;pos == -1&quot;是true</span></span><br><span class="line"><span class="keyword">if</span> pos == <span class="number">-1</span> &#123;</span><br><span class="line">pos = i</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 有第二个子节点不为nil，并且pos已经不是-1时才会进入到这里，因此说明删除后的n还有至少两个子节点不为nil</span></span><br><span class="line">pos = <span class="number">-2</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果pos&gt;=0说明删除后的n只剩下一个子节点有值</span></span><br><span class="line"><span class="keyword">if</span> pos &gt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// pos != 16说明删除后的branchNode的最后一个child为nil</span></span><br><span class="line"><span class="keyword">if</span> pos != <span class="number">16</span> &#123;</span><br><span class="line"><span class="comment">// If the remaining entry is a short node, it replaces</span></span><br><span class="line"><span class="comment">// n and its key gets the missing nibble tacked to the</span></span><br><span class="line"><span class="comment">// front. This avoids creating an invalid</span></span><br><span class="line"><span class="comment">// shortNode&#123;..., shortNode&#123;...&#125;&#125;.  Since the entry</span></span><br><span class="line"><span class="comment">// might not be loaded yet, resolve it just for this</span></span><br><span class="line"><span class="comment">// check.</span></span><br><span class="line">cnode, err := t.resolve(n.Children[pos], prefix)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> cnode, ok := cnode.(*shortNode); ok &#123;</span><br><span class="line">k := <span class="built_in">append</span>([]<span class="keyword">byte</span>&#123;<span class="keyword">byte</span>(pos)&#125;, cnode.Key...)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, &amp;shortNode&#123;k, cnode.Val, t.newFlag()&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Otherwise, n is replaced by a one-nibble short node</span></span><br><span class="line"><span class="comment">// containing the child.</span></span><br><span class="line"><span class="comment">// 到这里说明pos等于16，说明前面的16个child都是nil，把当前节点缩短为shortNode</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, &amp;shortNode&#123;[]<span class="keyword">byte</span>&#123;<span class="keyword">byte</span>(pos)&#125;, n.Children[pos], t.newFlag()&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// n still contains at least two values and cannot be reduced.</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, n, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> valueNode:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> hashNode:</span><br><span class="line"><span class="comment">// We&#x27;ve hit a part of the trie that isn&#x27;t loaded yet. Load</span></span><br><span class="line"><span class="comment">// the node and delete from it. This leaves all child nodes on</span></span><br><span class="line"><span class="comment">// the path to the value in the trie.</span></span><br><span class="line">rn, err := t.resolveHash(n, prefix)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">dirty, nn, err := t.<span class="built_in">delete</span>(rn, prefix, key)</span><br><span class="line"><span class="keyword">if</span> !dirty || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, rn, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, nn, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;%T: invalid node: %v (%v)&quot;</span>, n, n, key))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// concat 拼接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">concat</span><span class="params">(s1 []<span class="keyword">byte</span>, s2 ...<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">r := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(s1)+<span class="built_in">len</span>(s2))</span><br><span class="line"><span class="built_in">copy</span>(r, s1)</span><br><span class="line"><span class="built_in">copy</span>(r[<span class="built_in">len</span>(s1):], s2)</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">resolve</span><span class="params">(n node, prefix []<span class="keyword">byte</span>)</span> <span class="params">(node, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n, ok := n.(hashNode); ok &#123;</span><br><span class="line"><span class="keyword">return</span> t.resolveHash(n, prefix)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// resolveHash 根据hashNode从数据库中获取node数据，如果获取不到则返回MissingNodeError错误</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">resolveHash</span><span class="params">(n hashNode, prefix []<span class="keyword">byte</span>)</span> <span class="params">(node, error)</span></span> &#123;</span><br><span class="line">hash := common.BytesToHash(n)</span><br><span class="line"><span class="keyword">if</span> node := t.db.node(hash); node != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> node, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, &amp;MissingNodeError&#123;NodeHash: hash, Path: prefix&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hash returns the root hash of the trie. It does not write to the</span></span><br><span class="line"><span class="comment">// database and can be used even if the trie doesn&#x27;t have one.</span></span><br><span class="line"><span class="comment">// 返回trie的root的hash，这个hash不进行持久化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">Hash</span><span class="params">()</span> <span class="title">common</span>.<span class="title">Hash</span></span> &#123;</span><br><span class="line">hash, cached, _ := t.hashRoot()</span><br><span class="line">t.root = cached</span><br><span class="line"><span class="keyword">return</span> common.BytesToHash(hash.(hashNode))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Commit writes all nodes to the trie&#x27;s memory database, tracking the internal</span></span><br><span class="line"><span class="comment">// and external (for account tries) references.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">Commit</span><span class="params">(onleaf LeafCallback)</span> <span class="params">(root common.Hash, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> t.db == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;commit called on trie with nil database&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> t.root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> emptyRoot, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Derive the hash for all dirty nodes first. We hold the assumption</span></span><br><span class="line"><span class="comment">// in the following procedure that all nodes are hashed.</span></span><br><span class="line">rootHash := t.Hash()</span><br><span class="line">h := newCommitter()</span><br><span class="line"><span class="keyword">defer</span> returnCommitterToPool(h)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do a quick check if we really need to commit, before we spin</span></span><br><span class="line"><span class="comment">// up goroutines. This can happen e.g. if we load a trie for reading storage</span></span><br><span class="line"><span class="comment">// values, but don&#x27;t write to it.</span></span><br><span class="line"><span class="keyword">if</span> _, dirty := t.root.cache(); !dirty &#123;</span><br><span class="line"><span class="keyword">return</span> rootHash, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">if</span> onleaf != <span class="literal">nil</span> &#123;</span><br><span class="line">h.onleaf = onleaf</span><br><span class="line">h.leafCh = <span class="built_in">make</span>(<span class="keyword">chan</span> *leaf, leafChanSize)</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">h.commitLoop(t.db)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newRoot hashNode</span><br><span class="line">newRoot, err = h.Commit(t.root, t.db)</span><br><span class="line"><span class="keyword">if</span> onleaf != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// The leafch is created in newCommitter if there was an onleaf callback</span></span><br><span class="line"><span class="comment">// provided. The commitLoop only _reads_ from it, and the commit</span></span><br><span class="line"><span class="comment">// operation was the sole writer. Therefore, it&#x27;s safe to close this</span></span><br><span class="line"><span class="comment">// channel here.</span></span><br><span class="line"><span class="built_in">close</span>(h.leafCh)</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> common.Hash&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line">t.root = newRoot</span><br><span class="line"><span class="keyword">return</span> rootHash, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hashRoot calculates the root hash of the given trie</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">hashRoot</span><span class="params">()</span> <span class="params">(node, node, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> t.root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> hashNode(emptyRoot.Bytes()), <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If the number of changes is below 100, we let one thread handle it</span></span><br><span class="line">h := newHasher(t.unhashed &gt;= <span class="number">100</span>)</span><br><span class="line"><span class="keyword">defer</span> returnHasherToPool(h)</span><br><span class="line">hashed, cached := h.hash(t.root, <span class="literal">true</span>)</span><br><span class="line">t.unhashed = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> hashed, cached, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reset drops the referenced root node and cleans all internal state.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">Reset</span><span class="params">()</span></span> &#123;</span><br><span class="line">t.root = <span class="literal">nil</span></span><br><span class="line">t.unhashed = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> source_code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> swarm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太坊官方文档【private-network】学习</title>
      <link href="2024/11/22/blockchain/ethereum/how_to/%E5%A6%82%E4%BD%95%E7%94%A8go-ethereum%E8%BF%90%E8%90%A5%E4%B8%80%E4%B8%AA%E7%A7%81%E6%9C%89%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BD%91%E7%BB%9C/"/>
      <url>2024/11/22/blockchain/ethereum/how_to/%E5%A6%82%E4%BD%95%E7%94%A8go-ethereum%E8%BF%90%E8%90%A5%E4%B8%80%E4%B8%AA%E7%A7%81%E6%9C%89%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p>本文档是官方文档<a href="https://geth.ethereum.org/docs/interface/private-network">private-network</a>的翻译</p><h2 id="运营一个私有区块链网络">运营一个私有区块链网络</h2><p>维护自己的私有网络比较麻烦，因为很多在官方网络中习以为常的配置都需要手动设置。</p><p>本指南解释了如何设置多个 Geth 节点的私有网络。如果一个以太坊网络的节点没有连接到主网络，则它就是一个私有网络。在这种情况下，私有仅意味着保留或隔离，而不是受保护或安全。</p><h3 id="选择一个网络ID">选择一个网络ID</h3><p>网络 ID 是一个整数，用于隔离以太坊对等网络。只有当所有对等节点使用相同的创世块和网络 ID 时，区块链节点之间才会发生连接。使用 <code>--networkid</code>命令行选项设置 geth 使用的网络 ID。</p><p>主网络的ID是1。如果您提供自己的不同于主网络的自定义网络 ID，您的节点将不会连接到其他节点，而是形成了一个私有网络。 如果你计划在互联网上能够连接到你的私有链，最好选择一个没有被用到的网络ID。您可以在 <a href="https://chainid.network">https://chainid.network</a> 找到由社区运行的以太坊网络注册表。</p><h3 id="选择一个共识算法">选择一个共识算法</h3><p>While the main network uses proof-of-work to secure the blockchain, Geth also supports the the ‘clique’ proof-of-authority consensus algorithm as an alternative for private networks. We strongly recommend ‘clique’ for new private network deployments because it is much less resource intensive than proof-of-work. The clique system is also used for several public Ethereum testnets such as Rinkeby and Görli.</p><p>虽然主网络使用工作量证明来保护区块链，但 Geth 还支持“clique”权威证明共识算法作为私有网络的替代方案。我们强烈建议将“clique”用于新的专用网络部署，因为它比工作量证明占用的资源要少得多。clique 共识算法还用于多个公共以太坊测试网，例如 Rinkeby 和 Görli。</p><p>Here are the key differences between the two consensus algorithms available in Geth:<br>以下是 Geth 中可用的两种共识算法之间的主要区别：</p><p>Ethash consensus, being a proof-of-work algorithm, is a system that allows open participation by anyone willing to dedicate resources to mining. While this is a great property to have for a public network, the overall security of the blockchain strictly depends on the total amount of resources used to secure it. As such, proof-of-work is a poor choice for private networks with few miners. The Ethash mining ‘difficulty’ is adjusted automatically so that new blocks are created approximately 12 seconds apart. As more mining resources are deployed on the network, creating a new block becomes harder so that the average block time matches the target block time.</p><p>Ethash是一个工作量证明的共识算法，是一个允许任何愿意将资源用于挖矿的人公开参与的系统。虽然这对于公共网络来说是一个很好的属性，但区块链的整体安全性严格取决于用于保护它的资源总量。因此，对于矿工很少的私有网络来说，工作量证明是一个糟糕的选择。Ethash 挖矿“难度”会自动调整，以便每隔大约 12 秒创建新块。随着网络上部署的挖矿资源越来越多，创建新区块变得更加困难，以使平均区块时间与目标区块时间相匹配。</p><p>Clique consensus is a proof-of-authority system where new blocks can be created by authorized ‘signers’ only. The clique consenus protocol is specified in EIP-225. The initial set of authorized signers is configured in the genesis block. Signers can be authorized and de-authorized using a voting mechanism, thus allowing the set of signers to change while the blockchain operates. Clique can be configured to target any block time (within reasonable limits) since it isn’t tied to the difficulty adjustment.</p><p>Clique 是一种权威证明的共识系统，新区块只能由授权的“签名者”创建。Clique共识协议是在<a href="https://eips.ethereum.org/EIPS/eip-225">EIP-225</a>中指定的。初始授权签名者集合在创世块中配置。可以使用投票机制对签名者进行授权和取消授权，从而允许签名者集在区块链运行时更改。Clique 可以配置为针对任何出块时间（在合理范围内），因为它与难度调整无关。</p><h3 id="创建创世区块">创建创世区块</h3><p>Every blockchain starts with the genesis block. When you run Geth with default settings for the first time, it commits the main net genesis to the database. For a private network, you usually want a different genesis block.<br>每个区块链都是从创世区块开始的。当你使用默认设置第一次运行Geth时，它会将主网络创世提交到数据库。对于一个私有网络来说，你通常想要一个不一样的创世区块，</p><p>The genesis block is configured using the <em>genesis.json</em> file. When creating a genesis block, you need to decide on a few initial parameters for your blockchain:</p><p>创世区块使用 genesis.json文件进行配置。在创建创世区块时，您需要为区块链确定一些初始参数：</p><ul><li><p>Ethereum platform features enabled at launch (<code>config</code>). Enabling protocol features while the blockchain is running requires scheduling a hard fork.</p><p>启动时启用的以太坊平台功能（<code>config</code>）。在区块链运行时启用协议功能需要安排硬分叉。</p></li><li><p>Initial block gas limit (<code>gasLimit</code>). Your choice here impacts how much EVM computation can happen within a single block. We recommend using the main Ethereum network as a <a href="https://etherscan.io/chart/gaslimit">guideline to find a good amount</a>. The block gas limit can be adjusted after launch using the <code>--miner.gastarget</code> command-line flag.</p><p>初始的区块gas上限 (<code>gasLimit</code>)。您在此处的选择会影响单个区块内可以发生多少 EVM 计算。我们建议使用以太坊主网络作为<a href="https://etherscan.io/chart/gaslimit">找到合适gas数量的指南</a>。启动后可以使用 <code>--miner.gastarget</code> 命令行参数来调整gas上限。</p></li><li><p>Initial allocation of ether (<code>alloc</code>). This determines how much ether is available to the addresses you list in the genesis block. Additional ether can be created through mining as the chain progresses.</p><p>初始分配以太(<code>alloc</code>)。这决定了您在创世区块中列出的地址可以使用多少以太币(单位是wei)。随着链的进展，可以通过挖掘创建额外的以太币。</p></li></ul><h4 id="Clique共识协议的配置样例">Clique共识协议的配置样例</h4><p>This is an example of a genesis.json file for a proof-of-authority network. The <code>config</code> section ensures that all known protocol changes are available and configures the ‘clique’ engine to be used for consensus.</p><p>这是权威证明网络的 genesis.json 文件示例。<code>config</code> 部分确保所有已知的协议更改都可用，并配置“clique”共识引擎以用于达成共识。</p><p>Note that the initial signer set must be configured through the <code>extradata</code> field. This field is required for clique to work.</p><p>请注意，必须通过 <code>extradata</code> 字段配置初始签名者集。该字段是 clique 工作所必需的。</p><p>First create the signer account keys using the <a href="https://geth.ethereum.org/docs/interface/managing-your-accounts">geth account</a> command (run this command multiple times to create more than one signer key).</p><p>首先使用 <a href="https://geth.ethereum.org/docs/interface/managing-your-accounts">geth account</a> 命令创建签名者帐户密钥（多次运行此命令以创建多个签名者密钥）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> geth account new --datadir data</span></span><br><span class="line">INFO [04-02|16:37:33.521] Maximum peer count                       ETH=50 LES=0 total=50</span><br><span class="line">INFO [04-02|16:37:33.521] Smartcard socket not found, disabling    err=&quot;stat /run/pcscd/pcscd.comm: no such file or directory&quot;</span><br><span class="line">Your new account is locked with a password. Please give a password. Do not forget this password.</span><br><span class="line">Password:</span><br><span class="line">Repeat password:</span><br><span class="line"></span><br><span class="line">Your new key was generated</span><br><span class="line"></span><br><span class="line">Public address of the key:   0x72a43a99415943087ca78B0f56864BB872172A0B</span><br><span class="line">Path of the secret key file: data/keystore/UTC--2022-04-02T08-37-39.509059069Z--72a43a99415943087ca78b0f56864bb872172a0b</span><br><span class="line"></span><br><span class="line">- You can share your public address with anyone. Others need it to interact with you.</span><br><span class="line">- You must NEVER share the secret key with anyone! The key controls access to your funds!</span><br><span class="line">- You must BACKUP your key file! Without the key, it&#x27;s impossible to access account funds!</span><br><span class="line">1234567890</span><br><span class="line">- You must REMEMBER your password! Without the password, it&#x27;s impossible to decrypt the key!</span><br></pre></td></tr></table></figure><p>Take note of the Ethereum address printed by this command.</p><p>记录此命令输出的以太坊地址。</p><p>此命令会自动创建data目录，data目录下面有个名为<code>keystore</code>的目录用于保存密钥文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ll data/keystore/</span></span><br><span class="line">total 4</span><br><span class="line">-rw------- 1 guozhe guozhe 491 Apr  2 16:38 UTC--2022-04-02T08-38-00.725585452Z--b64337679d907ec8e7f8acecc4996f511b63aca3</span><br></pre></td></tr></table></figure><p>To create the initial extradata for your network, collect the signer addresses and encode <code>extradata</code> as the concatenation of 32 zero bytes, all signer addresses, and 65 further zero bytes. In the example below, <code>extradata</code> contains a single initial signer address, <code>0x7df9a875a174b3bc565e6424a0050ebc1b2d1d82</code>.</p><p>要为您的网络创建初始额外数据，请收集签名者地址并将额外数据编码为： 32 个零字节+所有签名者地址+另外 65 个零字节。在下面的示例中，extradata 包含一个初始签名者地址 0x7df9a875a174b3bc565e6424a0050ebc1b2d1d82。</p><p>您可以使用 <code>period</code> 配置选项来设置链的目标出块时间。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;config&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;chainId&quot;</span>: <span class="number">15</span>,</span><br><span class="line">    <span class="attr">&quot;homesteadBlock&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;eip150Block&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;eip155Block&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;eip158Block&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;byzantiumBlock&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;constantinopleBlock&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;petersburgBlock&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;clique&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;period&quot;</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">&quot;epoch&quot;</span>: <span class="number">30000</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;difficulty&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;gasLimit&quot;</span>: <span class="string">&quot;8000000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;extradata&quot;</span>: <span class="string">&quot;0x000000000000000000000000000000000000000000000000000000000000000072a43a99415943087ca78B0f56864BB872172A0B2a63a0155852B1B6756E336036E957925adCa7eC0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;alloc&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;72a43a99415943087ca78B0f56864BB872172A0B&quot;</span>: &#123; <span class="attr">&quot;balance&quot;</span>: <span class="string">&quot;30000000000000000000000000&quot;</span> &#125;,</span><br><span class="line">    <span class="attr">&quot;2a63a0155852B1B6756E336036E957925adCa7eC&quot;</span>: &#123; <span class="attr">&quot;balance&quot;</span>: <span class="string">&quot;40000000000000000000000000&quot;</span> &#125;,</span><br><span class="line">    <span class="attr">&quot;556136F8c1853fB7A393994Ee6058a8d2Ec5999C&quot;</span>: &#123; <span class="attr">&quot;balance&quot;</span>: <span class="string">&quot;50000000000000000000000000000000000000000000&quot;</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化-Geth-数据库">初始化 Geth 数据库</h3><p>To create a blockchain node that uses this genesis block, run the following command. This imports and sets the canonical genesis block for your chain.</p><p>要创建使用此创世区块的区块链节点，请运行以下命令。这会为您的链导入并设置规范的创世块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth init --datadir data genesis.json</span><br></pre></td></tr></table></figure><p>Future runs of geth using this data directory will use the genesis block you have defined.</p><p>以后使用此数据目录运行 geth 将使用您定义的创世块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir data --networkid 15</span><br></pre></td></tr></table></figure><h3 id="调度硬分叉">调度硬分叉</h3><p>As Ethereum protocol development progresses, new Ethereum features become available. To enable these features on your private network, you must schedule a hard fork.</p><p>随着以太坊协议开发的进展，新的以太坊功能变得可用。要在您的专用网络上启用这些功能，您必须安排一次硬分叉。</p><p>First, choose any future block number where the hard fork will activate. Continuing from the genesis.json example above, let’s assume your network is running and its current block number is 35421. To schedule the ‘Istanbul’ fork, we pick block 40000 as the activation block number and modify our genesis.json file to set it:</p><p>首先，选择硬分叉将激活的任何未来区块号。继续上面的 genesis.json 示例，假设您的网络正在运行，并且它的当前块号是 35421。为了安排“伊斯坦布尔”分叉，我们选择块 40000 作为激活块号并修改我们的 genesis.json 文件以设置它：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;config&quot;</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;istanbulBlock&quot;: 40000,</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In order to update to the new fork, first ensure that all Geth instances on your private network actually support the Istanbul fork (i.e. ensure you have the latest version of Geth installed). Now shut down all nodes and re-run the <code>init</code> command to enable the new chain configuration:</p><p>为了更新到新的分叉，首先确保您的私有网络上的所有 Geth 实例实际上都支持伊斯坦布尔分叉（即确保您安装了最新版本的 Geth）。现在关闭所有节点并重新运行 <code>init</code> 命令以启用新的链配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth init --datadir data genesis.json</span><br></pre></td></tr></table></figure><h3 id="启动网络">启动网络</h3><p>Once your node is initialized to the desired genesis state, it is time to set up the peer-to-peer network. Any node can be used as an entry point. We recommend dedicating a single node as the rendezvous point which all other nodes use to join. This node is called the ‘bootstrap node’.<br>一旦你的节点被初始化为所需的创始状态，那么就该设置点对点网络了。任何节点都可以用作入口点。我们建议将单个节点用作所有其他节点用来加入的集合点。该节点称为“引导节点”。</p><p>First, determine the IP address of the machine your bootstrap node will run on. If you are using a cloud service such as Amazon EC2, you’ll find the IP of the virtual machine in the management console. Please also ensure that your firewall configuration allows both UDP and TCP traffic on port 30303.<br>首先，确定运行您的引导节点的服务器的IP地址。如果你使用例如亚马逊EC2之类的云服务器，你需要在虚拟机管理页面查看机器的IP地址。还请确保您的防火墙配置允许端口 30303 上的 UDP 和 TCP 流量。</p><p>The bootstrap node needs to know about its own IP address in order to be able to relay it others. The IP is set using the --nat flag (insert your own IP instead of the example address below).<br>引导节点需要知道他自己的IP地址，以便能够将其中继给其他节点.使用<code>--nat</code>设置IP地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir data --networkid 15 --nat extip:172.16.254.4</span><br></pre></td></tr></table></figure><p>Now extract the ‘node record’ of the bootnode using the JS console.<br>现在使用 JS 控制台提取引导节点的“节点记录”。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth attach data/geth.ipc --exec admin.nodeInfo.enr</span><br></pre></td></tr></table></figure><p>This command should print a base64 string such as the following example. Other nodes will use the information contained in the bootstrap node record to connect to your peer-to-peer network.<br>这个命令应该会输出一个像下面例子一样的base64编码的字符串。其他节点将使用引导节点记录中包含的信息连接到您的对等网络。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;enr:-Je4QEiMeOxy_h0aweL2DtZmxnUMy-XPQcZllrMt_2V1lzynOwSx7GnjCf1k8BAsZD5dvHOBLuldzLYxpoD5UcqISiwDg2V0aMfGhGlQhqmAgmlkgnY0gmlwhKwQ_gSJc2VjcDI1NmsxoQKX_WLWgDKONsGvxtp9OeSIv2fRoGwu5vMtxfNGdut4cIN0Y3CCdl-DdWRwgnZf&quot;</span><br></pre></td></tr></table></figure><p>Setting up peer-to-peer networking depends on your requirements. If you connect nodes across the Internet, please ensure that your bootnode and all other nodes have public IP addresses assigned, and both TCP and UDP traffic can pass the firewall.<br>设置对等网络取决于您的要求。如果您通过 Internet 连接节点，请确保您的引导节点和所有其他节点都分配了公共 IP 地址，并且 TCP 和 UDP 流量都可以通过防火墙。</p><p>If Internet connectivity is not required or all member nodes connect using well-known IPs, we strongly recommend setting up Geth to restrict peer-to-peer connectivity to an IP subnet. Doing so will further isolate your network and prevents cross-connecting with other blockchain networks in case your nodes are reachable from the Internet. Use the --netrestrict flag to configure a whitelist of IP networks:<br>如果不需要 Internet 连接或所有成员节点都使用已知 IP 连接，我们强烈建议设置 Geth 以限制对 IP 子网的对等连接。这样做将进一步隔离您的网络并防止与其他区块链网络交叉连接，以防您的节点可以从 Internet 访问。使用<code>--netrestrict</code> 标志配置 IP 网络白名单：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth &lt;other-flags&gt; --netrestrict 172.16.254.0/24</span><br></pre></td></tr></table></figure><p>With the above setting, Geth will only allow connections from the 172.16.254.0/24 subnet, and will not attempt to connect to other nodes outside of the set IP range.<br>使用上述设置，Geth 将只允许来自 172.16.254.0/24 子网的连接，而不会试图连接到设定的 IP 范围之外的其他节点。</p><h3 id="运行成员节点">运行成员节点</h3><p>Before running a member node, you have to initialize it with the same genesis file as used for the bootstrap node.<br>在运行一个成员节点之前，你必须使用与引导节点相同的创世文件进行初始化。</p><p>With the bootnode operational and externally reachable (you can try telnet <ip> <port> to ensure it’s indeed reachable), you can start more Geth nodes and connect them via the bootstrap node using the <code>--bootnodes</code> flag.<br>随着 bootnode 可操作且外部可访问（您可以尝试 telnet <ip> <port> 以确保它确实可访问），您可以启动更多 Geth 节点并使用 <code>--bootnodes</code> 标志通过引导节点连接它们。</port></ip></port></ip></p><p>To create a member node running on the same machine as the bootstrap node, choose a separate data directory (example: data-2) and listening port (example: 30305):<br>要创建与引导节点在同一台机器上运行的成员节点，请选择单独的数据目录（例如：data-2）和监听端口（例如：30305）：</p><p>下面的命令中<bootstrap-node-record>部分，需要替换成引导节点的信息，具体信息可以在引导节点的日志中获取，比如我的如下：</bootstrap-node-record></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO [04-05|13:13:46.760] Started P2P networking                   self&#x3D;enode:&#x2F;&#x2F;ded53747cabc10400ffd59fb329c2cb3d048ea8eacc078641177abab7054afd71a3c7404f9461257ef678af0875c93f4d70792c02a27bbb449ad844bf176ab5d@127.0.0.1:30303</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir data-2 --networkid 15 --port 30305 --bootnodes &lt;bootstrap-node-record&gt;</span><br></pre></td></tr></table></figure><p>With the member node running, you can check whether it is connected to the bootstrap node or any other node in your network by attaching a console and running <code>admin.peers</code>. It may take up to a few seconds for the nodes to get connected.<br>在成员节点运行时，你可以通过连接控制台和运行<code>admin.peers</code>来检查它是否连接到引导节点或网络中的任何其他节点。节点可能需要几秒钟的时间来连接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth attach data-2/geth.ipc --exec admin.peers</span><br></pre></td></tr></table></figure><h3 id="Clique-启动一个签名者">Clique: 启动一个签名者</h3><p>To set up Geth for signing blocks in proof-of-authority mode, a signer account must be available. The account must be unlocked to mine blocks. The following command will prompt for the account password, then start signing blocks:<br>要设置Geth在权威证明模式下签署区块，必须有一个签名者账户。该账户必须被解锁以挖掘区块。下面的命令将提示输入账户密码，然后开始签署区块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth &lt;other-flags&gt; --unlock 0x7df9a875a174b3bc565e6424a0050ebc1b2d1d82 --mine</span><br></pre></td></tr></table></figure><p>You can further configure mining by changing the default gas limit blocks converge to (with --miner.gastarget) and the price transactions are accepted at (with --miner.gasprice).<br>你可以通过改变区块的默认气体上限（用<code>--miner.gastarget</code>）和接受交易的价格（用–<code>miner.gasprice</code>）来进一步配置挖矿。</p><h3 id="Ethash-Running-A-Miner">Ethash: Running A Miner</h3><p>For proof-of-work in a simple private network, a single CPU miner instance is enough to create a stable stream of blocks at regular intervals. To start a Geth instance for mining, run it with all the usual flags and add the following to configure mining:</p><p>geth <other-flags> --mine --miner.threads=1 --miner.etherbase=0x0000000000000000000000000000000000000000<br>This will start mining bocks and transactions on a single CPU thread, crediting all block rewards to the account specified by --miner.etherbase.</other-flags></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> HOW-TO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> 私有区块链网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建一个私有以太坊网络</title>
      <link href="2024/11/22/blockchain/ethereum/how_to/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%BD%91%E7%BB%9C/"/>
      <url>2024/11/22/blockchain/ethereum/how_to/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p>本文档是参考官方文档实践的记录，如有不当支持欢迎指正。参考文档：</p><p><a href="https://geth.ethereum.org/docs/interface/private-network">https://geth.ethereum.org/docs/interface/private-network</a></p><h3 id="环境准备">环境准备</h3><h4 id="安装geth等工具">安装geth等工具</h4><p>参考文档：<a href="https://geth.ethereum.org/docs/install-and-build/installing-geth#install-on-ubuntu-via-ppas">Install on Ubuntu via PPAs</a></p><h4 id="创建工作目录">创建工作目录</h4><p>创建工作目录<code>gethpoa</code>，并在此目录下创建另外两个node节点目录。完成之后的目录结构如下：创建账户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">geth --datadir data account new</span></span><br><span class="line">INFO [04-07|16:48:50.857] Maximum peer count                       ETH=50 LES=0 total=50</span><br><span class="line">INFO [04-07|16:48:50.857] Smartcard socket not found, disabling    err=&quot;stat /run/pcscd/pcscd.comm: no such file or directory&quot;</span><br><span class="line">Your new account is locked with a password. Please give a password. Do not forget this password.</span><br><span class="line">Password:</span><br><span class="line">Repeat password:</span><br><span class="line"></span><br><span class="line">Your new key was generated</span><br><span class="line"></span><br><span class="line">Public address of the key:   0x4852C36DeC855E487D46ddDD015A92612dE5Bf20</span><br><span class="line">Path of the secret key file: data/keystore/UTC--2022-04-07T08-48-58.777243596Z--4852c36dec855e487d46dddd015a92612de5bf20</span><br><span class="line"></span><br><span class="line">- You can share your public address with anyone. Others need it to interact with you.</span><br><span class="line">- You must NEVER share the secret key with anyone! The key controls access to your funds!</span><br><span class="line">- You must BACKUP your key file! Without the key, it&#x27;s impossible to access account funds!</span><br><span class="line">- You must REMEMBER your password! Without the password, it&#x27;s impossible to decrypt the key!</span><br></pre></td></tr></table></figure><p>执行完以上操作之后的目录结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tree gethpoa/</span></span><br><span class="line">gethpoa/</span><br><span class="line">├── node1</span><br><span class="line">│   └── data</span><br><span class="line">│       └── keystore</span><br><span class="line">│           └── UTC--2022-04-07T11-43-40.475412645Z--7adc4a5a65ab33595ade0ed15903e8c406f69230</span><br><span class="line">└── node2</span><br><span class="line">    └── data</span><br><span class="line">        └── keystore</span><br><span class="line">            └── UTC--2022-04-07T08-50-53.751660870Z--0691e168e8cc151a76a04705290702631a86c948</span><br></pre></td></tr></table></figure><h3 id="使用puppeth创建创世区块的配置">使用puppeth创建创世区块的配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> puppeth</span></span><br><span class="line">+-----------------------------------------------------------+</span><br><span class="line">| Welcome to puppeth, your Ethereum private network manager |</span><br><span class="line">|                                                           |</span><br><span class="line">| This tool lets you create a new Ethereum network down to  |</span><br><span class="line">| the genesis block, bootnodes, miners and ethstats servers |</span><br><span class="line">| without the hassle that it would normally entail.         |</span><br><span class="line">|                                                           |</span><br><span class="line">| Puppeth uses SSH to dial in to remote servers, and builds |</span><br><span class="line">| its network components out of Docker containers using the |</span><br><span class="line">| docker-compose toolset.                                   |</span><br><span class="line">+-----------------------------------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 首先指定一个名称</span></span><br><span class="line">Please specify a network name to administer (no spaces, hyphens or capital letters please)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> blockpoa</span></span><br><span class="line"></span><br><span class="line">Sweet, you can set this via --network=blockpoa next time!</span><br><span class="line"></span><br><span class="line">INFO [04-07|19:55:26.726] Administering Ethereum network           name=blockpoa</span><br><span class="line">INFO [04-07|19:55:26.732] No remote machines to gather stats from</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后会提示选择要做的操作，我这里选择配置一个新的创世区块</span></span><br><span class="line">What would you like to do? (default = stats)</span><br><span class="line"> 1. Show network stats</span><br><span class="line"> 2. Configure new genesis</span><br><span class="line"> 3. Track new remote server</span><br><span class="line"> 4. Deploy network components</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建创世区块配置还是导入已有的创世区块配置？</span> </span><br><span class="line">What would you like to do? (default = create)</span><br><span class="line"> 1. Create new genesis from scratch</span><br><span class="line"> 2. Import already existing genesis</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择共识引擎，这里选择Clique</span></span><br><span class="line">Which consensus engine to use? (default = clique)</span><br><span class="line"> 1. Ethash - proof-of-work</span><br><span class="line"> 2. Clique - proof-of-authority</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 多少秒出一个区块，默认时15秒</span></span><br><span class="line">How many seconds should blocks take? (default = 15)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 哪些账户允许打包区块？当我选两个账户时报错：signed recently, must <span class="built_in">wait</span> <span class="keyword">for</span> others，因此这里只选了一个账户可以打包。</span></span><br><span class="line">Which accounts are allowed to seal? (mandatory at least one)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 0x7adC4A5a65ab33595adE0ed15903e8c406f69230</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 0x</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 哪些账户需要预先初始化一部分资金？</span></span><br><span class="line">Which accounts should be pre-funded? (advisable at least one)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 0x7adC4A5a65ab33595adE0ed15903e8c406f69230</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 0x0691e168E8cC151a76a04705290702631A86C948</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 0x</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这些地址需要初始化1wei的资金吗？选择的yes，其实对这块不太了解为什么</span></span><br><span class="line">Should the precompile-addresses (0x1 .. 0xff) be pre-funded with 1 wei? (advisable yes)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> yes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定网络ID，我这里直接随机</span></span><br><span class="line">Specify your chain/network ID if you want an explicit one (default = random)</span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="bash">INFO [04-07|19:59:20.325] Configured new genesis block</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 经过以上的配置，已经配置好了，现在再次让我选择要做什么操作。我这里选择2:管理已经存在的创世区块配置</span></span><br><span class="line">What would you like to do? (default = stats)</span><br><span class="line"> 1. Show network stats</span><br><span class="line"> 2. Manage existing genesis</span><br><span class="line"> 3. Track new remote server</span><br><span class="line"> 4. Deploy network components</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择管理现有的创世区块配置之后，会出现下面三个选项，分别是修改，导出和删除；我这里选择导出创世区块的配置。</span></span><br><span class="line"> 1. Modify existing configurations</span><br><span class="line"> 2. Export genesis configurations</span><br><span class="line"> 3. Remove genesis configuration</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择导出之后会询问导出到哪个文件夹，选择默认的当前文件夹； 下面有两个是报错，从字面意思理解是这两个配置不支持poa的共识协议，所以这次忽略。</span></span><br><span class="line">Which folder to save the genesis specs into? (default = current)</span><br><span class="line">  Will create blockpoa.json, blockpoa-aleth.json, blockpoa-harmony.json, blockpoa-parity.json</span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="bash">INFO [04-07|19:59:47.758] Saved native genesis chain spec          path=blockpoa.json</span></span><br><span class="line">ERROR[04-07|19:59:47.758] Failed to create Aleth chain spec        err=&quot;unsupported consensus engine&quot;</span><br><span class="line">ERROR[04-07|19:59:47.758] Failed to create Parity chain spec       err=&quot;unsupported consensus engine&quot;</span><br><span class="line">INFO [04-07|19:59:47.761] Saved genesis chain spec                 client=harmony path=blockpoa-harmony.json</span><br><span class="line"></span><br><span class="line">What would you like to do? (default = stats)</span><br><span class="line"> 1. Show network stats</span><br><span class="line"> 2. Manage existing genesis</span><br><span class="line"> 3. Track new remote server</span><br><span class="line"> 4. Deploy network components</span><br></pre></td></tr></table></figure><p>配置完成之后的创世区块配置json文件如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;config&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;chainId&quot;</span>: <span class="number">3030</span>,</span><br><span class="line">    <span class="attr">&quot;homesteadBlock&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;eip150Block&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;eip150Hash&quot;</span>: <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eip155Block&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;eip158Block&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;byzantiumBlock&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;constantinopleBlock&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;petersburgBlock&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;istanbulBlock&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;clique&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;period&quot;</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">&quot;epoch&quot;</span>: <span class="number">30000</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;nonce&quot;</span>: <span class="string">&quot;0x0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;0x624ed1f0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;extraData&quot;</span>: <span class="string">&quot;0x00000000000000000000000000000000000000000000000000000000000000007adc4a5a65ab33595ade0ed15903e8c406f692300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;gasLimit&quot;</span>: <span class="string">&quot;0x47b760&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;difficulty&quot;</span>: <span class="string">&quot;0x1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;mixHash&quot;</span>: <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;coinbase&quot;</span>: <span class="string">&quot;0x0000000000000000000000000000000000000000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;alloc&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;0000000000000000000000000000000000000000&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;balance&quot;</span>: <span class="string">&quot;0x1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;0691e168e8cc151a76a04705290702631a86c948&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;balance&quot;</span>: <span class="string">&quot;0x200000000000000000000000000000000000000000000000000000000000000&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;7adc4a5a65ab33595ade0ed15903e8c406f69230&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;balance&quot;</span>: <span class="string">&quot;0x200000000000000000000000000000000000000000000000000000000000000&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;number&quot;</span>: <span class="string">&quot;0x0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;gasUsed&quot;</span>: <span class="string">&quot;0x0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parentHash&quot;</span>: <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;baseFeePerGas&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导出创世区块配置之后的目录结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tree gethpoa/</span></span><br><span class="line">gethpoa/</span><br><span class="line">├── blockpoa-harmony.json</span><br><span class="line">├── blockpoa.json</span><br><span class="line">├── node1</span><br><span class="line">│   └── data</span><br><span class="line">│       └── keystore</span><br><span class="line">│           └── UTC--2022-04-07T11-43-40.475412645Z--7adc4a5a65ab33595ade0ed15903e8c406f69230</span><br><span class="line">└── node2</span><br><span class="line">    └── data</span><br><span class="line">        └── keystore</span><br><span class="line">            └── UTC--2022-04-07T08-50-53.751660870Z--0691e168e8cc151a76a04705290702631a86c948</span><br></pre></td></tr></table></figure><h3 id="初始化创世区块配置">初始化创世区块配置</h3><p>初始化创世区块配置(分别在每个节点目录下执行此命令)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> geth --datadir data init ../blockpoa.json</span></span><br><span class="line">INFO [04-07|20:22:34.955] Maximum peer count                       ETH=50 LES=0 total=50</span><br><span class="line">INFO [04-07|20:22:34.955] Smartcard socket not found, disabling    err=&quot;stat /run/pcscd/pcscd.comm: no such file or directory&quot;</span><br><span class="line">INFO [04-07|20:22:34.957] Set global gas cap                       cap=50,000,000</span><br><span class="line">INFO [04-07|20:22:34.957] Allocated cache and file handles         database=/home/guozhe/work/blockchain/gethpoa/node1/data/geth/chaindata cache=16.00MiB handles=16</span><br><span class="line">INFO [04-07|20:22:34.975] Writing custom genesis block</span><br><span class="line">INFO [04-07|20:22:34.984] Persisted trie from memory database      nodes=357 size=50.70KiB time=1.847678ms gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B</span><br><span class="line">INFO [04-07|20:22:34.986] Successfully wrote genesis state         database=chaindata hash=9d6e3d..f10d54</span><br><span class="line">INFO [04-07|20:22:34.986] Allocated cache and file handles         database=/home/guozhe/work/blockchain/gethpoa/node1/data/geth/lightchaindata cache=16.00MiB handles=16</span><br><span class="line">INFO [04-07|20:22:35.004] Writing custom genesis block</span><br><span class="line">INFO [04-07|20:22:35.012] Persisted trie from memory database      nodes=357 size=50.70KiB time=2.258964ms gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B</span><br><span class="line">INFO [04-07|20:22:35.013] Successfully wrote genesis state         database=lightchaindata hash=9d6e3d..f10d54</span><br></pre></td></tr></table></figure><h3 id="启动引导节点">启动引导节点</h3><p>创建一个目录<code>bnode</code>,然后进入到此目录执行<code>bootnode -genkey boot.key</code>命令生成<code>boot.key</code>。执行完成之后，工作目录下会有<code>boot.key</code>文件，整体目录结构如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tree gethpoa/</span></span><br><span class="line">gethpoa/</span><br><span class="line">├── blockpoa-harmony.json</span><br><span class="line">├── blockpoa.json</span><br><span class="line">├── bnode</span><br><span class="line">│   └── boot.key</span><br><span class="line">├── node1</span><br><span class="line">│   └── data</span><br><span class="line">│       └── keystore</span><br><span class="line">│           └── UTC--2022-04-07T11-43-40.475412645Z--7adc4a5a65ab33595ade0ed15903e8c406f69230</span><br><span class="line">└── node2</span><br><span class="line">    └── data</span><br><span class="line">        └── keystore</span><br><span class="line">            └── UTC--2022-04-07T08-50-53.751660870Z--0691e168e8cc151a76a04705290702631a86c948</span><br></pre></td></tr></table></figure><p>使用<code>bootnode</code>和刚才生成的<code>boot.key</code>启动引导节点:</p><p>提示信息说<code>bootnode</code>是开发工具，如果是生产环境的话使用一个正常的节点作为引导节点。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bootnode -nodekey boot.key</span></span><br><span class="line">enode://5b0427c6efd2b8c1e107061527a7bfc39b74ab42db1561f8da8302622b0504d7f3afe3e7ba74b7561ddc00c256d4cacea756ff983080cb78bd8f56fd89959e88@127.0.0.1:0?discport=30301</span><br><span class="line">Note: you&#x27;re using cmd/bootnode, a developer tool.</span><br><span class="line">We recommend using a regular node as bootstrap node for production deployments.</span><br><span class="line">INFO [04-07|17:04:08.597] New local node record                    seq=1,649,322,248,596 id=1ae5556065ce551c ip=&lt;nil&gt; udp=0 tcp=0</span><br></pre></td></tr></table></figure><h3 id="启动成员节点">启动成员节点</h3><p>在<code>node1</code>和<code>node2</code>目录下创建<code>password.txt</code>文件，然后把账户密钥的密码保存到此文件中。然后分别在两个目录下运行下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> node1目录下执行</span></span><br><span class="line"><span class="meta">$</span><span class="bash">geth --datadir data --networkid 3030 --bootnodes enode://5b0427c6efd2b8c1e107061527a7bfc39b74ab42db1561f8da8302622b0504d7f3afe3e7ba74b7561ddc00c256d4cacea756ff983080cb78bd8f56fd89959e88@127.0.0.1:0?discport=30301 --ipcdisable --syncmode full --http --allow-insecure-unlock --http.addr 0.0.0.0 --unlock 0x7adc4a5a65ab33595ade0ed15903e8c406f69230 --password password.txt --mine console</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> node2目录下执行</span></span><br><span class="line">geth --datadir data --networkid 3030 --bootnodes enode://5b0427c6efd2b8c1e107061527a7bfc39b74ab42db1561f8da8302622b0504d7f3afe3e7ba74b7561ddc00c256d4cacea756ff983080cb78bd8f56fd89959e88@127.0.0.1:0?discport=30301 --port 30304 --ipcdisable --syncmode full --http --allow-insecure-unlock --http.addr 0.0.0.0 --http.port 8546 console</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>如果关掉终端之后需要重启网络的话，直接执行上面两个命令即可，不用再启用引导节点</strong></p><h3 id="验证">验证</h3><h4 id="配置matemask">配置matemask</h4><p>配置网络，把刚才生成的账户导入到matemask。</p><h4 id="发送一个交易">发送一个交易</h4><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20220407204329123.png" alt="image-20220407204329123"></p><p>后台日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO [04-07|20:41:00.283] Submitted transaction                    hash=0xce38e66cbc6267110fc31a4f07fbfd740c784439ba87666c5fddf1c036136f46 from=0x7adC4A5a65ab33595adE0ed15903e8c406f69230 nonce=0 recipient=0x2560be5793F9AA00963e163A1287807Feb897e2F value=111,000,000,000,000,000,000</span><br></pre></td></tr></table></figure><h4 id="错误处理">错误处理</h4><h5 id="因为没有启用rpcapi接口，因此使用matemask无法配置私有网络">因为没有启用rpcapi接口，因此使用matemask无法配置私有网络</h5><h5 id="解决方法，启用rpcapi功能">解决方法，启用rpcapi功能</h5><p>如果您需要在其他的机器上连此node节点，则命令选项需要添加<code>--http.addr 0.0.0.0</code>选项。</p><p>Do not forget <code>--http.addr 0.0.0.0</code>, if you want to access RPC from other containers and/or hosts. By default, <code>geth</code> binds to the local interface and RPC endpoints are not accessible from the outside.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth &lt;other-flags&gt; --http --http.addr 0.0.0.0</span><br></pre></td></tr></table></figure><h5 id="发送ETH失败，日志报错：err-“header-not-found”">发送ETH失败，日志报错：err=“header not found”</h5><p>如果在matemask上面发送ETH之后日志报下面的错误，检查一下网络配置是否正确。我出现这个错误是因为网络ID配置不正确导致。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARN [04-07|20:39:29.911] Served eth_getTransactionCount           conn=192.168.31.153:64458 reqid=5607614675047                        duration=&quot;84.518µs&quot;  err=&quot;header not found&quot;</span><br></pre></td></tr></table></figure><h5 id="WARN-04-05-14-46-19-861-Block-sealing-failed-err-“signed-recently-must-wait-for-others”">WARN [04-05|14:46:19.861] Block sealing failed                     err=“signed recently, must wait for others”</h5><p>我配置两个节点作为签名节点时报此错误，然后只保留一个签名节点可以正常打包区块也不报次错误了。目前原因尚不清楚。</p><h5 id="Fatal-Account-unlock-with-HTTP-access-is-forbidden">Fatal: Account unlock with HTTP access is forbidden!</h5><p><code>--http</code>和<code>--unlock</code>两个选项不能同时启用，应该是考虑到安全的问题。<br>也可以使用<code>--allow-insecure-unlock</code>选项：Allow insecure account unlocking when account-related RPCs are exposed by http。但是生产环境不建议使用此选项。</p><h5 id="错误记录：WARN-04-05-13-28-32-568-Block-sealing-failed-err-“unauthorized-signer”">错误记录：WARN [04-05|13:28:32.568] Block sealing failed                     err=“unauthorized signer”</h5><p>如果运行一个签名的节点时出现上面的错误，可以查看<code>genesis.json</code>文件中的extradata是否包含启动时解锁的用户地址，如果不包含则使用包含的账户地址进行启动签名者节点。</p><h3 id="后续工作">后续工作</h3><p>因为现在启动节点都是在终端执行命令启动的，终端一旦关闭网络也就关了。可以有两种方案：</p><ol><li>使用docker启动</li><li>使用后台运行的方式执行启动命令</li></ol><p>个人更倾向于使用第一种，后面有时间再用docker启动。</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> HOW-TO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> 私有以太坊网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太坊使用MetaMask钱包发起交易</title>
      <link href="2024/11/22/blockchain/ethereum/how_to/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%BD%BF%E7%94%A8MetaMask%E9%92%B1%E5%8C%85%E5%8F%91%E8%B5%B7%E4%BA%A4%E6%98%93/"/>
      <url>2024/11/22/blockchain/ethereum/how_to/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%BD%BF%E7%94%A8MetaMask%E9%92%B1%E5%8C%85%E5%8F%91%E8%B5%B7%E4%BA%A4%E6%98%93/</url>
      
        <content type="html"><![CDATA[<h3 id="钱包软件">钱包软件</h3><p><a href="https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn">MetaMask</a>：可以链接测试网络rinkeby，然后在<a href="https://faucet.ropsten.be/">ropsten</a>，<a href="https://www.rinkeby.io/#stats">rinkeby</a>获取相应的测试以太币。</p><h3 id="发起交易">发起交易</h3><p>发起交易和普通的银行转帐一样，需要指定地址（银行账户）和转账数额；交易时会有手续费（Gas Fee），钱包会显示当前的价格，自己可以设置Gas Fee的上限。</p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210309144213914.png" alt="image-20210309144213914" style="zoom: 33%;"><h3 id="交易的结构">交易的结构</h3><p>可以在https://ropsten.etherscan.io/或者https://www.rinkeby.io/#explorer查看交易详情。</p><p>好玩的是，可以自己给自己转账，如下是我自己的测试账户给自己转账的交易截图。（<em>WARN：请勿给截图中的地址转账，这是测试账号</em>）：</p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210309145016136.png" alt="image-20210309145016136" style="zoom: 33%;"><p>需要说明的只有Nonce那一行：</p><ul><li>Nonce： 表示的是当前的账户的第一次交易，截图的1表示是第二个交易（交易序号从0开始）</li><li>Position：表示当前的交易在区块中的序号。</li></ul><h3 id="区块中的交易列表">区块中的交易列表</h3><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210309145647419.png" alt="image-20210309145647419" style="zoom:33%;"><h3 id="区块的结构">区块的结构</h3><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210309145918512.png" alt="image-20210309145918512"></p><h2 id></h2>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> HOW-TO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> MetaMask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>北京大学肖臻老师《区块链技术与应用》学习笔记</title>
      <link href="2024/11/22/blockchain/1%E5%8C%97%E4%BA%AC%E5%A4%A7%E5%AD%A6%E8%82%96%E8%87%BB%E8%80%81%E5%B8%88%E3%80%8A%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E3%80%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>2024/11/22/blockchain/1%E5%8C%97%E4%BA%AC%E5%A4%A7%E5%AD%A6%E8%82%96%E8%87%BB%E8%80%81%E5%B8%88%E3%80%8A%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E3%80%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="3-数据结构">3 数据结构</h1><h2 id="hash-printers-（hash指针）">hash printers （hash指针）</h2><p>hash指针既可以找到块的位置，也可以验证hash的正确性</p><h3 id="Block-chain-is-a-linked-list-using-hash-pointers">Block chain is a linked list using hash pointers</h3><p>每一个区块都包含前一个区块的hash指针</p><ul><li>后面一个区块的hash指针是通过前一个区块的值算出来的。</li><li>通过上面的数据结构可以实现：tamper-evident-log</li></ul><p>只要记住最后一个块的hash值，就可以保证整个链的值无法篡改。</p><ul><li>我们也可以只保存其中的部分区块，区块的前面的部分我们不必保存，如果需要的时候找别人要；然后验证要的区块的hash值是否是当前区块的hash值即可</li></ul><h2 id="Merkle-tree">Merkle tree</h2><p><img src="/2024/11/22/blockchain/1%E5%8C%97%E4%BA%AC%E5%A4%A7%E5%AD%A6%E8%82%96%E8%87%BB%E8%80%81%E5%B8%88%E3%80%8A%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E3%80%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/apple/code/open-source/python/che168/291.png" alt="291"></p><p>上图：</p><ul><li>最下面的一层是数据块，data blocks；每个数据块都是交易（tx）</li><li>上面的那些都是hash pointers</li><li>最上面的节点是根hash值（root hash）</li></ul><h3 id="Merkle-tree数据结构的好处：">Merkle tree数据结构的好处：</h3><p>只要记住root hash就可以检测出节点的修改</p><p>每个区块分成块头（block header）和块身（block body）</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/295.png" alt="295"></p><h3 id="默克尔证明（Merkle-proof）：指一笔交易到跟节点的路径">默克尔证明（Merkle proof）：指一笔交易到跟节点的路径</h3><p>这种证明也叫做：proof of membership或proof of inclusion（证明节点存在于Merkle tree之中）</p><h3 id="proof-of-non-membership（证明节点存不在于Merkle-tree之中）">proof of non-membership（证明节点存不在于Merkle tree之中）</h3><p>排序所有交易节点的hash值（Sorted Merkle tree），然后计算需要证明的交易的hash值，找到此hash值应该出现的位置，如果应该出现的位置的两边的节点的hash满足Merkle proof，则说明需要证明的节点不在此Merkle tree之中。</p><p><strong>只要不是有环的数据结构，都可以使用hash指针</strong></p><h1 id="4-BTC-协议">4 BTC 协议</h1><h2 id="如何发行数字货币">如何发行数字货币</h2><h3 id="央行发行数字货币，如果只使用私钥签名，可以吗？">央行发行数字货币，如果只使用私钥签名，可以吗？</h3><p>无法防止double spending attack：花两次攻击</p><h3 id="中心化方案：">中心化方案：</h3><p>如果央行给发行的货币打上编号并且记录货币当前属于谁，那么可以解决double spending attack；</p><p><strong>但是每次花钱都要去央行验证货币是否是真的，并且属于当前花钱的人，花钱之后再变更钱的归属。</strong></p><h3 id="去中心化方案">去中心化方案</h3><h4 id="每个交易（如A给B转账）中都包含输入和输出两个部分">每个交易（如A给B转账）中都包含输入和输出两个部分</h4><ul><li>输入部分需要说明币的来源</li><li>输入部分需要包含付款人的公钥（因为付款时有付款人的签名，带上公钥为了供别人校验）</li><li>输出部分要给出收款人公钥的hash</li></ul><p><strong>铸币交易（coinbase tx）里面有A的公钥的hash，这样就知道铸币交易的钱是给谁的。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/471.png" alt="471"></p><p>上图中的数据结构有两种hash指针</p><ul><li>第一种是链接块的hash指针（即前一个区块的hash指针）</li><li>第二种hash指针是说明币的来源</li></ul><p><strong>问题：是否可以检测dobule spending？</strong></p><p>如果币的来源是不合法的（验证不合法的方式是币的来源是否存在与UTXO），是不会添加到区块链中，可以检测dobule spending</p><p><strong>问题：在A给B转账时，所有人都需要知道A的公钥，为了验证A的签名；那么怎么才能知道A的公钥呢？</strong></p><p>在交易的输入部分，付款人需要给出自己的公钥</p><p>在比特币的系统里，地址是通过公钥推算出来的，地址相当于银行账号，A需要给B转钱需要B的地址；比特币系统里面是没有功能查询某个人的地址</p><p>BitCoin Script：交易脚本，把A的输入部分和上一步的输出脚本拼在一起执行，如果不报错说明交易是合法的。</p><p>每一个块包含不止一个交易，每个块包含Block header和Block body</p><p>哈希指针包含的hash，是通过Block header做hash的值</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/474.png" alt="474"></p><h3 id="Block-header包含：">Block header包含：</h3><ul><li>version：用的哪个比特币协议的版本</li><li>hash of previous block header：上一个区块头的hash</li><li>Merkle root hash：整个Tree的root hash值</li><li>target：挖矿的目标target（满足H(block header + nonce) &lt;= target）</li><li>随机数nonce</li></ul><h3 id="Block-body包含：">Block body包含：</h3><ul><li>transaction list</li></ul><h3 id="系统中的节点分为全节点和轻节点">系统中的节点分为全节点和轻节点</h3><h4 id="full-node">full node</h4><p>全节点是保存区块链的所有信息的，验证每一个交易，所以全节点也叫做fully validating node</p><h4 id="light-node">light node</h4><p>轻节点无法独立验证交易的合法性</p><p><strong>问题：每个账户都可以发布交易，谁来决定哪个交易写到区块中？顺序是什么样的？</strong></p><p>挖矿决定谁有记账权，有记账权的节点可以申请写入区块，顺序由拥有记账权的节点定</p><h2 id="账本的内容要取得分布式的共识">账本的内容要取得分布式的共识</h2><p>distributed consensus（分布式共识）</p><p>distributed hash table</p><p>需要取得共识的内容是什么？</p><h3 id="FLP-impossibility-result：">FLP impossibility result：</h3><p>在一个异步的系统里，即使只有一个成员是有问题的，也不可能取得共识</p><h3 id="CAP-Theorem（定理）">CAP Theorem（定理）</h3><p>CAP：</p><ul><li><a href="https://baike.baidu.com/item/%E4%B8%80%E8%87%B4%E6%80%A7/9840083">一致性</a>（Consistency）</li><li><a href="https://baike.baidu.com/item/%E5%8F%AF%E7%94%A8%E6%80%A7/109628">可用性</a>（Availability）</li><li><a href="https://baike.baidu.com/item/%E5%88%86%E5%8C%BA%E5%AE%B9%E9%94%99%E6%80%A7/23734073">分区容错性</a>（Partition tolerance）</li></ul><p>这三个特性分布式系统中最多同时满足两个</p><p>分布式的一个协议：<a href="https://zhuanlan.zhihu.com/p/31780743">Paxos</a>，能够保证Consistency</p><h2 id="比特币中的共识协议Consensus-in-BitCoin">比特币中的共识协议Consensus in BitCoin</h2><p>假设系统中大部分的节点是好的，小部分有恶意。</p><p>直接投票选择哪些交易是合法的，如果超过半数就接受可以吗？</p><p>membership，谁有投票权</p><p>hyperledger fabric（联盟链）：可以投票决定</p><p>sybil attack（女巫攻击）：超级计算机一直制造账户，参与投票，直到制造的恶意账户超过半数。</p><h3 id="比特币的投票，按照算力值">比特币的投票，按照算力值</h3><p>谁先获得下面公式中的nonce，谁就能获得记账权，并且给予初块奖励</p><p>Puzzle friendly: H(block header) &lt;= target</p><p>longest valid chain 最长合法链</p><p>如果不在最长合法链上，新的区块也不会被接受；</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/476.png" alt="476"></p><p>上面的图片是分叉攻击（forking attack）</p><h3 id="block-reward-初块奖励">block reward 初块奖励</h3><h4 id="一次性能造多少币？">一次性能造多少币？</h4><p>刚发布的时候50 BTC，21万个区块之后可以铸造25个比特币</p><p>50 BTC -&gt; 25 BTC -&gt; 12.5 BTC</p><p>coinbase transaction</p><p>mining（挖矿）：争夺记账权</p><p>digital gold：数字黄金</p><p>miner：矿工</p><h1 id="5-BTC-实现">5-BTC 实现</h1><p>transaction-based ledger：基于交易的账本模式</p><p>每个区块记录的是交易信息，包括转账交易和铸币交易</p><p>UTXO：Unspent Transaction Output（还没有被花出去的输出）</p><p>UTXO数据结构，以便快速检测double spending；如果想花掉的币不存在UTXO中，说明不存在或已经花出</p><p>total inputs = total outputs</p><p>比特币的第二个激励机制：transaction fee</p><p>其他的模式：account-based ledger，在这种模式中，系统要显示的记录账户的余额，以太坊是基于此种模式记账。</p><h2 id="每次尝试nonce可以看作是Bernoulli-trial：a-random-experiment-with-binary-outcome">每次尝试nonce可以看作是Bernoulli trial：a random experiment with binary outcome</h2><p>所有的尝试的集合构成了Bernoulli Process：a sequence of independent Bernoulli trials</p><p>尝试计算nonce是memoryless的：即无论以前尝试过多少次下一次的概率还是一样</p><p>可以使用Poisson Process近似</p><p>出块时间服从指数分布：exponential distribution</p><p>BitCoin is secured by mining</p><h2 id="比特币的安全性">比特币的安全性</h2><p><strong>问题：能不能把别人的钱转给自己？</strong></p><p>不可以，因为你没有别人的私钥，无法签名。（<em>比特币在花每一笔钱的时候都要制定币的来源，即某次交易的output，这个output中有币的所有人的公钥，在花钱的时候币的所有人需要用自己的私钥做签名，然后别人通过当前交易的input和币来源的output来验证这个交易的合法性。</em>）</p><p><strong>问题：能不能double spending？</strong></p><p>不可以，因为第二次花的时候在UTXO里面不存在，会验证不通过。</p><h1 id="6-BTC-网络">6-BTC-网络</h1><p>application layer：BitCoin Block chain</p><p>network layer：P2P Overlay Network</p><p>设计原则：simple, robust, but not efficient</p><h1 id="7-BTC-挖矿难度">7-BTC-挖矿难度</h1><p>如何调整挖矿难度：调整挖矿难度就是调整目标空间在整个输出空间中所占的比例。</p><p>挖矿即是算出满足：H(block header) &lt;= target的nonce值</p><p>sha-256: 可能的值是2的256次方</p><p>difficulty = difficulty_1_target/target</p><p><strong>问题：为什么要调整挖矿难度？</strong></p><p>为了保证出块时间平均10分钟</p><p><strong>问题：出块时间太短会有什么问题？</strong></p><p>两个节点同时发布区块，可能会出现分叉</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/487.png" alt="487"></p><p>平均出块时间过短可能导致上图的很多分叉，这会分散诚实节点的算力</p><p>平均出块时间不论设置的多长，都不可以无限的减小下去</p><p>如果分叉过多就无法防止51% attack</p><p>以太坊的共识协议：ghost</p><h3 id="什么时候调整难度？">什么时候调整难度？</h3><p>每2016个区块之后调整一次</p><h3 id="如何调整挖矿难度：">如何调整挖矿难度：</h3><h4 id="调整的target值">调整的target值</h4><p>**公式：**target = target_current * (actual time)/(expected time)</p><p>当actual time大于expected time，说明难度太大， (actual time)/(expected time)得出的值就大于1，最终算出来的target会比当前的target大，也就是变得容易</p><h4 id="调整难度">调整难度</h4><p>next_difficulty = previous_diffculty * (2 weeks)/ (time to mine last 2016 blocks)</p><p>调整难度与目标域值（target）成反比</p><p>expected time = 2016 * 10min</p><p>actual time = time spent mining the last 2016 blocks</p><p>目标域值调整最大不会超过4倍，最小不会小于1/4</p><h3 id="怎么让所有的矿工都调整域值呢？">怎么让所有的矿工都调整域值呢？</h3><p>代码里自动调，如果恶意节点修改了源码不调整，他发布的区块的检查区块合法性就通不过。</p><h1 id="8-BTC-挖矿">8-BTC-挖矿</h1><h2 id="全节点">全节点</h2><ul><li>一直在线</li><li>在本地硬盘上维护完整的区块链信息</li><li>在内存里维护UTXO，以便快速验证交易的正确性</li><li>监听比特币网络上的交易信息，验证每个交易的合法性</li><li>决定哪些交易会被打包到区块里</li><li>监听别的矿工挖出来的区块，验证其合法性</li><li>挖矿</li><li>决定沿着哪条链挖下去？</li><li>当出现等长的分叉的时候，选择哪个分叉？</li><li>缺省情况下是沿着最先听到的区块</li></ul><h2 id="轻节点">轻节点</h2><ul><li>不是一直在线</li><li>不用保存整个区块链，只要保存每个区块的块头</li><li>不用保存全部交易，只保存与自己相关的交易</li><li>无法检验大多数交易的合法性，只能检测与自己相关的那些交易的合法性</li><li>无法检测网上发布的区块的正确性</li><li>可以验证挖矿的难度</li><li>只能检测哪个是最长链，不知道哪个是最长合法链</li></ul><p>挖矿具有特性：</p><p>memoryless或叫做progress free</p><h2 id="挖矿的设备">挖矿的设备</h2><ul><li>第一代，CPU</li><li>闲置的cpu、内存、硬盘</li><li>第二代，GPU</li><li>为了通用并行计算而设计的</li><li>也存在浪费</li><li>第三代，ASIC：Application Specific Integrated Circuit</li></ul><p>挖矿的设备的趋势是从通用到专业</p><h2 id="puzzle">puzzle</h2><p>mining puzzle:挖矿时求解的puzzle</p><p>merge mining：使用别的币的mining puzzle</p><p>Alternative mining puzzle: 抗ASIC芯片</p><h2 id="矿池">矿池</h2><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/489.png" alt="489"></p><p>（share almost valid block）</p><h3 id="假如一个矿池占了51-的比例，他能发动哪些攻击呢？">假如一个矿池占了51%的比例，他能发动哪些攻击呢？</h3><ul><li>forking attack</li><li>Boycott（封锁）</li></ul><h1 id="9-BTC-比特币脚本">9-BTC-比特币脚本</h1><p>比特币脚本是stack-based的脚本，包括下面三种类型</p><ul><li><p>P2PK（Pay to Public Key）</p></li><li><p>P2PH（Pay to Public Key Hash）</p></li><li><p>P2SH（Pay to Script Hash）对多重签名的支持</p></li></ul><h3 id="redeemScript：">redeemScript：</h3><p>当一个需要联合签名的账号B（如需要5个中的三个签名）需要支付时，需要至少有三个签名才可以，那么在B支付给C时需要验证B的币来来源的output和当前的交易的input做验证。如果需要验证成功则需要在上一步交易的output中包含这些公钥信息。</p><p>当一个账号A支付给另一个需要联合签名的账号B时，如果需要A支付时提供B的所有的账户的公钥信息，会导致A支付时特别麻烦。</p><p><strong>redeemScript</strong>就是解决上面的问题而存在的，详情参考<a href="https://zhuanlan.zhihu.com/p/93823558">深入理解比特币脚本</a></p><h2 id="Proof-of-Burn">Proof of Burn</h2><p>燃烧证明，在输出脚本中添加return，使这个output在验证时永远报错，也就是这个输出的币永远也花不出去。</p><p><strong>自问：如果A在给B付款时，output中面包含return语句，那么B虽然真实收到了款，但是永远花不出去。B能够在接收时验证吗？还是只能等到花钱时才能发现这个问题呢？</strong></p><p>**自答：**因为B需要验证这比交易有没有写入区块链中，所以A会把交易发给B，此时B需要检查output是否包含return，如果包含则认为这比交易无效；假如B是商家并在交易刚发生时不验证，把货发送给A，那么B就收到一笔花不出去的钱。</p><h3 id="digital-commitment">digital commitment</h3><p>发布交易不需要记账权，发布区块才需要记账权</p><h1 id="10-BTC-分叉">10-BTC-分叉</h1><p>fork</p><ul><li>state fork</li><li>forking attack（deliberate fork）</li><li>protocol fork（协议分叉）</li><li>hard fork</li><li>soft fork</li></ul><h2 id="hard-fork">hard fork</h2><p>系统中只有有一部分节点不更新软件，就会出现永久性的分叉</p><p>eg：block size limit</p><p>block size不超过1M，计算出7tx/sec（每秒7笔交易）；如果new nodes把软件升级为区块大小最多可以4M，那么旧的节点如果不一起升级继续沿着旧链挖就会导致硬分叉；旧节点认为超过1M大小的区块为非法的。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image%20(1).png" alt="image (1)"></p><p>只要old nodes不更新软件，分叉就不会变更</p><h2 id="soft-fork">soft fork</h2><p>只要系统中有半数中的节点更新软件，就不会出现永久性的分叉；只会出现临时性的分叉</p><p>接着使用调整区块大小的例子，如果调整为限制不超过0.5M，那么新节点产生的区块旧节点也认可；但是旧节点产生的区块新节点不认可，如果新节点占多数时就会迫使旧节点升级。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/499.png" alt="499"></p><h3 id="软分叉的例子（P2SH：Pay-to-Script-Hash）">软分叉的例子（P2SH：Pay to Script Hash）</h3><h1 id="11-BTC-问答">11-BTC-问答</h1><h2 id="如果转账的时候地址写错了怎么办？">如果转账的时候地址写错了怎么办？</h2><p>答：没有办法取消一经发布的交易</p><h2 id="Proof-of-Burn，如果OP-RETURN无条件的返回错误，这笔交易是如何写入到区块链里的呢？">Proof of Burn，如果OP_RETURN无条件的返回错误，这笔交易是如何写入到区块链里的呢？</h2><p>答：因为OP_RETURN是写在当前交易的输出脚本里，所以当前交易的验证不会验证这个脚本</p><h2 id="你怎么知道哪个矿工最先找到的同一个nonce？">你怎么知道哪个矿工最先找到的同一个nonce？</h2><p>答：不可以偷答案，因为区块里面的coinbase tx指向的收款账户是真正计算出nonce的账户，这个信息如果被修改了，交易就不会验证通过。</p><h2 id="transaction-fee，如何确定交易费给哪个矿工，给多少？">transaction fee，如何确定交易费给哪个矿工，给多少？</h2><p>只要total inputs &gt; total outputs，之间的差额就是交易费</p><h1 id="12-BTC-比特币中的匿名性">12-BTC-比特币中的匿名性</h1><p>BitCoin and anonymity</p><p>pseudonymity</p><h2 id="什么情况下会破坏匿名性？">什么情况下会破坏匿名性？</h2><p>在多个inputs的时候，多个输入可能是同一个人</p><h2 id="什么情况下别人能直到比特币账户对应现实中的某个人呢？">什么情况下别人能直到比特币账户对应现实中的某个人呢？</h2><p>资金的转入转出，购买比特币或者比特币套现；比特币支付的时候也可以</p><p>silk road：eBay for illegal drugs</p><h2 id="采取什么方法提高匿名性？">采取什么方法提高匿名性？</h2><h2 id="零知识证明">零知识证明</h2><p>零知识证明是指一方（证明者）向另一方（验证着）证明一个陈述是正确的，而无需透露除该陈述是正确的外的任何信息。</p><p>**我的理解：**如比特币的转账（A转给B）签名就是零知识证明，因为这个签名证明了这个交易是A转出去的，却不需要让A提供其他信息。</p><h1 id="13-BTC-思考">13-BTC-思考</h1><h2 id="为什么比特币系统能够绕过被证明的分布式系统的不可能的结论？">为什么比特币系统能够绕过被证明的分布式系统的不可能的结论？</h2><p>比特币并没有绕过</p><h1 id="14-ETH-以太坊概述">14-ETH-以太坊概述</h1><ul><li><p>memory hard mining puzzle</p></li><li><p>ASIC resistance：挖矿时需要访问内存</p></li><li><p>proof of work -&gt; proof of stake：目标是从工作量证明过度到权益证明</p></li><li><p>smart contract: 智能合约</p></li><li><p>BitCoin: decentralized currency（去中心化的货币）</p></li><li><p>Ethereum: decentralized contract（去中心化的合同）</p></li></ul><h1 id="15-ETH-账户">15-ETH-账户</h1><ul><li><p>以太坊是一个accounting-based ledger（基于账户的去中心化的账本）</p></li><li><p>天然防御double spending attack</p></li><li><p>记录交易次数（nonce），以防御replay attack（重放攻击）</p></li></ul><h2 id="账户类型">账户类型</h2><h3 id="externally-owned-account（外部账户）">externally owned account（外部账户）</h3><p>记录：</p><ul><li>balance</li><li>nonce</li></ul><h3 id="Smart-contract-account（智能合约账户）">Smart contract account（智能合约账户）</h3><p>记录：</p><ul><li>balance</li><li>nonce</li><li>code</li><li>storage</li></ul><h4 id="智能合约账户有以下几个特点：">智能合约账户有以下几个特点：</h4><ul><li><p>合约账户无法主动发起一个交易</p></li><li><p>创建合约账户的时候会返回一个地址，可以调用这个地址</p></li></ul><h1 id="16-ETH-以太坊中的状态树">16-ETH-以太坊中的状态树</h1><p>维护的功能是账户地址到账户状态的映射：addr -&gt; state</p><p><strong>问题：如果把所有账户直接组成一个merkle tree 可以吗？</strong></p><p>不可以，因为修改账户时成了串行</p><p><strong>问题：为什么比特币可以把所有交易组成一个merkle tree呢？</strong></p><p>因为比特币只有一个人拥有记账权，所以这个有记账权的人随意记录即可</p><p>即使以太坊使用sorted merkle tree，在有新的账户出现时也会大量的更新merkle tree中的hash值。</p><h2 id="数据结构：trie（retrieval-检索）">数据结构：trie（retrieval-检索）</h2><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/628.png" alt="628"></p><h2 id="数据结构：Patricia-tree（trie）">数据结构：Patricia tree（trie）</h2><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/629.png" alt="629"></p><ul><li>树的高度变短</li><li>如果插入新的单词，原来压缩的节点可能需要扩展开</li></ul><h2 id="数据结构：MPT（Merkle-Patricia-tree）">数据结构：MPT（Merkle Patricia tree）</h2><p>把Patricia tree的指针改为Hash Pointer就成了MPT</p><h2 id="数据结构：Modified-MPT">数据结构：Modified MPT</h2><p>下面状态树的例子中的节点有三种：</p><ul><li>Extention Node：如果路径出现压缩，就会出现此节点</li><li>Branch Node：分支节点</li><li>Leaf Node：最终的节点</li></ul><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20201126151730381.png" alt="image-20201126151730381"></p><h1 id="16-ETH-交易树和收据树">16-ETH-交易树和收据树</h1><p>用处：</p><ul><li>提供Merkle proof</li></ul><h2 id="数据结构：bloom-filter">数据结构：bloom filter</h2><p>**用途：**支持查找某个元素是否在一个比较大的集合中</p><p>**实现：**把集合中的所有的hash值映射到一个小的数组中，然后把数组中的对应位置的值由0改为1。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/630.png" alt="630"></p><ul><li><p>有可能出现误报（一个值的hash映射的数组中的位置，如果是1只能说明可能存在，因为存在hash碰撞）</p></li><li><p>不会出现漏报（因为只要某个值的hash映射的数组的位置的值是0，说明此值不存在）</p></li></ul><h3 id="以太坊中如何使用bloom-filter">以太坊中如何使用bloom filter</h3><p>包含在块头里面，可以快速过滤某些节点不包含指定交易；然后再在可能包含的节点中检索。</p><p>transaction-driven state machine（交易驱动的状态机）</p><h1 id="18-ETH-GHOST协议">18-ETH-GHOST协议</h1><h2 id="如果只有和父节点平级的才是uncle-block">如果只有和父节点平级的才是uncle block</h2><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/633.png" alt="633"></p><h3 id="存在问题：">存在问题：</h3><p>1、uncle block的个数只能是两个，如果分叉超过3个就无法全部包含进来。<br>2、故意不包含某个叔父区块</p><h2 id="只要与当前节点有共同的主链就认为是uncle-block">只要与当前节点有共同的主链就认为是uncle block</h2><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/634.png" alt="634"></p><h3 id="存在问题：-v2">存在问题：</h3><p>某个矿工在挖矿难度低的时候产生多个分叉（即以后节点的叔父）区块，期待以后被包含进去以获取初块奖励</p><h2 id="GHOST协议：与当前区块在7代以内，才被认为是uncle-block">GHOST协议：与当前区块在7代以内，才被认为是uncle block</h2><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/637.png" alt="637"></p><p>距离当前区块越远的uncle block，得到的奖励越少；为了防止分叉过多，有利于鼓励出现分叉尽快合并。叔父区块得不到gas fee（汽油费）</p><h1 id="19-ETH-挖矿算法（ethash）">19-ETH-挖矿算法（ethash）</h1><p>Block chain is secured by mining。</p><p>bug bounty：bug赏金</p><p>one cpu， one vote（一个cpu，一张投票）</p><p>设计puzzle的原则：difficult to solve， but easy to verify</p><p>以太坊的挖矿算法的目标是做到：AISC resistance</p><p>memory hard mining puzzle</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/676.png" alt="676"></p><h1 id="20-ETH-难度调整">20-ETH-难度调整</h1><h2 id="自适应难度调整">自适应难度调整</h2><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/680.png" alt="680"></p><h3 id="子公式解释">子公式解释</h3><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/681.png" alt="681"></p><h2 id="难度炸弹（difficulty-bomb）">难度炸弹（difficulty bomb）</h2><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/682.png" alt="682"></p><h2 id="以太坊发展的四个阶段">以太坊发展的四个阶段</h2><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//%E4%B8%8B%E8%BD%BD.png" alt=" 以太坊发展的四个阶段"></p><h1 id="21-权益证明（Proof-of-stake）">21-权益证明（Proof of stake）</h1><p>TWH：Terawatt hours</p><p><strong>问题：为什么需要权益证明？</strong></p><p>工作量证明太费电了</p><p>初块奖励是为了激励矿工参与比特币系统的维护。</p><p>virtual mining</p><p><strong>权益证明：</strong></p><ul><li><p>每个人按照持有币的数量来投票，省去了挖矿的过程；持有的币越多，权益越大。</p></li><li><p>持有的币只能从加密货币的系统中获取，如果有人大量购买这个币以获取权益然后搞垮他，会导致币价大涨；涨价会让搞垮这个币所付出的代价很大。</p></li></ul><p>AltCoin Infanticide：把新币扼杀在摇篮里</p><p>Proof of Deposit</p><p>如果出现分叉的时候，一个人两边都挖，并不会影响他的币的数量。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/674.png" alt="674"></p><p>Casper the Friendly Finality Gadget（FFG）</p><p>验证者有任期，验证者在任期外有等待期，如果没有人检举则给验证者保证金和奖励。</p><p>EOS币的权益证明：</p><p>DPOS：Delegated Proof of Stake</p><h1 id="22-ETH-智能合约">22-ETH-智能合约</h1><h2 id="外部账户如何调用智能合约？">外部账户如何调用智能合约？</h2><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/638.png" alt="638"></p><ul><li><p>SENDER ADDRESS：调用者的地址</p></li><li><p>TO CONTRACT ADDRESS：智能合约的地址</p></li><li><p>VALUE：调用时转多少ETH</p></li><li><p>GAS USED：汽油费</p></li><li><p>GAS PRICE：汽油费的价格</p></li><li><p>CAS LIMIT：此调用愿意支付的汽油费上限</p></li><li><p>TX DATA：调用的函数及其参数的编码值</p></li></ul><h2 id="一个合约如何调用另一个合约中的函数">一个合约如何调用另一个合约中的函数</h2><h3 id="1、直接调用">1、直接调用</h3><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/639.png" alt="639"></p><h3 id="2、使用adress类型的call-函数">2、使用adress类型的call()函数</h3><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/640.png" alt="640"></p><h3 id="3、代理调用delegatecall">3、代理调用delegatecall()</h3><h3 id="错误处理">错误处理</h3><ul><li><p>assert：一般用来判断内部条件</p></li><li><p>required：一般用于判断外部条件</p></li><li><p>revert：无条件的抛出异常</p></li></ul><h2 id="嵌套调用">嵌套调用</h2><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/641.png" alt="641"></p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/642.png" alt="642"></p><p>先执行交易再挖矿,因为挖矿之后发布的账户状态需要先执行交易。</p><p>就算账户的代码执行错误，也会被发布；然后收取汽油费，为了防止有恶意节点发送大量的不能验证通过的交易。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/658.png" alt="658"></p><p><strong>问题：智能合约的代码支持多线程执行吗？</strong></p><p>不支持多线程,多线程可能造成执行结果的不一致。</p><h2 id="智能合约可以获得的区块信息">智能合约可以获得的区块信息</h2><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/659.png" alt="659"></p><h2 id="智能合约可以获得的调用信息">智能合约可以获得的调用信息</h2><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/660.png" alt="660"></p><h2 id="地址类型">地址类型</h2><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/661.png" alt="661"></p><p>地址类型中的不同方法转账时的特点：</p><ul><li>transfer：会导致连锁性回滚</li><li>send：不会导致连锁性回滚</li><li>call：不会导致连锁式回滚，call的方式转账会把剩余的汽油全部发送过去</li></ul><h2 id="一个例子：简单拍卖">一个例子：简单拍卖</h2><h3 id="构造方法">构造方法</h3><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/662.png" alt="662"></p><h3 id="出价和结束拍卖的方法">出价和结束拍卖的方法</h3><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/663.png" alt="663"></p><h3 id="如果黑客的智能合约中没有callback方法怎么办？">如果黑客的智能合约中没有callback方法怎么办？</h3><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/664.png" alt="664"></p><p>没有办法。。。</p><h2 id="Code-is-low：">Code is low：</h2><p>优点：没有人能够修改规则</p><p>缺点：如果规则有问题，也无法修正，导致上面的问题成为所有人的钱都取不出来</p><h2 id="优化后的拍卖代码">优化后的拍卖代码</h2><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/665.png" alt="665"></p><h3 id="无法防止重入攻击（Re-entrancy-Attack）">无法防止重入攻击（Re-entrancy Attack）</h3><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/666.png" alt="666"></p><p>解决的方法是，先把金额修改为0，再发起转账。</p><p>转账交易时需要使用这个步骤：先判断条件，再改变条件，再发生交互</p><p>better safe by sorry</p><h3 id="不要使用call方法转账，因为call支付的汽油费太多">不要使用call方法转账，因为call支付的汽油费太多</h3><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/667.png" alt="667"></p><h1 id="23-ETH-TheDAO">23-ETH-TheDAO</h1><p>DAO：Decentralized Autonomous Organization（去中心化的自治的组织）</p><p>DAC：Decentralized Autonomous Corporation（去中心化的自治的公司）</p><p>因为先转账再更改余额导致被发起了重入攻击：</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20201126161738940.png" alt="image-20201126161738940"></p><p>too big to fail</p><p>升级后产生两个分叉：通过在链上增加ChainID（为了防止回放），以区分ETC(Ethereum Classic)和ETH</p><h2 id="为什么不能只针对黑客的账户？">为什么不能只针对黑客的账户？</h2><p>因为智能合约有bug，所以就算只针对黑客的账户其他人也可以针对这个bug进行攻击。</p><h1 id="24-ETH-思考">24-ETH-思考</h1><h2 id="Is-smart-contract-really-smart？（智能合约真的智能吗）">Is smart contract really smart？（智能合约真的智能吗）</h2><p>smart contract is anything but smart</p><h2 id="Nothing-is-irrevocable（没有什么是不可篡改的）">Nothing is irrevocable（没有什么是不可篡改的）</h2><p>如TheDAO的例子；所以不能迷信“不可篡改”</p><h2 id="Is-solidity-the-right-programming-language？">Is solidity the right programming language？</h2><p>solidity存在一些问题，但是没有什么东西是没有问题的。所以随着时间的检验可能会出现</p><ul><li><p>智能合约模板</p></li><li><p>编写智能合约的公司</p></li></ul><p>虽然智能合约的内容是开源的，但是Many eyeball fallacy；在涉及到自己的利益时还是需要自己检查代码。</p><h2 id="What-does-decentralization（权利下放）-mean？">What does decentralization（权利下放） mean？</h2><p>分叉是去中心化和民主的体现</p><h2 id="decentralized-distributed-去中心化不等于分布式">decentralized != distributed(去中心化不等于分布式)</h2><p>state machine的应用场景：</p><ul><li>mission critical application（关键任务应用程序）</li><li>air traffic control（空中交通管制）</li><li>stock exchange（证券交易）</li><li>space shuttle（航天飞机）</li></ul><p>智能合约是用来编写控制程序的，只有在互不信任的实体之间建立共识的操作才需要写在智能合约里</p><h1 id="25-ETH-Beauty-Chain（美链）">25-ETH-Beauty Chain（美链）</h1><p>IPO：Initial Public Offering</p><p>ICO：Initial Coin Offering</p><h2 id="美链背景介绍">美链背景介绍</h2><p>下图中出现的ERC为Ethereum Request for Comments（以太坊征求意见）</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/683.png" alt="683"></p><h2 id="因为下面的代码在计算时出现了溢出，从而导致被攻击，凭空出现了很多的代币BEC">因为下面的代码在计算时出现了溢出，从而导致被攻击，凭空出现了很多的代币BEC</h2><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20201126163601352.png" alt="image-20201126163601352"></p><h2 id="如何预防此类（计算溢出）问题？">如何预防此类（计算溢出）问题？</h2><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20201126163925215.png" alt="image-20201126163925215"></p><h1 id="26-总结">26-总结</h1><ul><li><p>加密货币应该用在法币支持的不太好的地方，而不是用在法币已经支持的很好的地方。</p></li><li><p>下一代的的互联网是价值交换网络</p></li><li><p>Democracy is the worst from of Government except for all those other forms that have bean tried from time to time</p></li><li><p>Is decentralized aways right thing?</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> 肖臻老师《区块链技术与应用》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> bitcoin </tag>
            
            <tag> ethereum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Corda资料整理</title>
      <link href="2024/11/22/blockchain/corda/2%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6-Corda%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>2024/11/22/blockchain/corda/2%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6-Corda%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="0-Corda资料整理">0. Corda资料整理</h1><p><a href="https://www.corda.net/">官网</a><br><a href="https://www.youtube.com/channel/UCoOuUZatvIC1U65OisCrIKg">油管频道</a><br><a href="https://cncorda.readthedocs.io/zh_CN/latest/">Corda中文文档</a><br><a href="https://docs.corda.net/">开发文档</a><br><a href="https://cncorda.com/">Corda中文社区</a><br><a href="https://stackoverflow.com/questions/tagged/corda">Stack Overflow讨论区, corda标签</a><br><a href="https://training.corda.net/">Corda Training</a></p><h1 id="1-Corda是什么？">1. Corda是什么？</h1><p>Corda是为企业构建的开源区块链/分布式账本帐平台；Corda使企业可以使用智能合约在严格的隐私下直接进行交易，从而降低交易和记录保存成本，并简化业务运营。<br>Corda不会定期将需要确认的交易分批处理再分成块之后一次性确认。相反，Corda会实时确认每笔交易。</p><h2 id="1-0-Corda有哪些概念">1.0 Corda有哪些概念</h2><h3 id="1-0-1-网络">1.0.1 网络</h3><ul><li>一个Corda网络由运行着Corda和CorDapps的节点构成的</li><li>不同的节点间的沟通是点对点的，不依赖于全局广播</li><li>每个节点都可以使用一个数字证书来将真实世界中的法律身份和网络身份相关联</li><li>这个网络是一个需要许可的网络，需要从网络维护者那里申请一个数字证书来获得访问权限</li></ul><h3 id="1-0-2-账本">1.0.2 账本</h3><ul><li>每个账本是针对于每一个节点的</li><li>对于账本上的共享事实，共享的两方（或多方）总是能够保证存在他们自己的账本中的事实是完全一致的</li><li>在 Corda 中是 <strong>没有唯一的中心化存储的数据</strong> 的。每个节点维护着一个独立的数据库，其中包含了所知道的事实。所以每个 peer 只能够看到账本中的事实中的一部分，没有节点能够知道所有的内容。</li></ul><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/ledger-venn.png" alt="img"></p><h3 id="1-0-3-States">1.0.3 States</h3><ul><li><em>State 代表的是存在账本上的事实</em></li><li><em>State 通过将原来的 State 变为历史记录然后添加一条新版本的 state 的方式来对 state 进行更新</em></li><li><em>每个节点都有一个 vault 来存储该节点所有相关的 States</em></li></ul><h4 id="1-0-3-0-State-顺序">1.0.3.0 State 顺序</h4><p>个共享的事实的生命周期是可以通过 <strong>state 顺序</strong> 来体现。当一个 state 需要更新的时候，我们会创建一个代表新的 state 的新版本的 state，然后将原来的那个 state 标注为历史版本。</p><h4 id="1-0-3-1-Vault">1.0.3.1 Vault</h4><p>Corda 网络中的每一个节点都维护着一个 <em>vault</em> - 它是一个数据库，其中跟踪了所有 states 的当前以及历史的 states 数据，以及跟它有关的数据：</p><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/vault-simple.png" alt="_images/vault-simple.png"></p><h4 id="1-0-3-2-参考-states">1.0.3.2 参考 states</h4><p>并不是所有的 states 都需要被使用他们的节点来更新的。对于参数数据的情况，有一种常见的模式，一方创建了参考数据，这些数据会被其他方使用（但是不会被更新）。对于这种情况，states 中包含的参考数据被称为 “参考 states”。</p><h3 id="1-0-4-Transactions">1.0.4 Transactions</h3><ul><li>Transaction 是关于更新账本的提议；（<strong>个人理解</strong>：<em>更准确的说应该是更新账本上的某些states的提议</em>）</li><li>一个 transaction 提议只能在满足以下条件的时候才会被提交：<ul><li>它不包含“双花”</li><li>它是合约有效的</li><li>它需要被所有相关方提供签名</li></ul></li></ul><p>Corda 使用 UTXO (未消费的 transaction output) 模型来使账本上的每条 state 都不可更改。对于账本上数据的变更都是通过使用 transaction 的方式来做的，就是将 0 条或多条已经存在的账本 states 变为历史记录（inputs），然后再新增0条或多条新的账本 states （outputs）。交易代表了 state 顺序中的一个单独的链接。</p><p>**个人理解：**<em>这一点和比特币很像，不同点是比特币的交易只需要支付的人的签名，而这里的transaction需要所有人相关人的签名</em></p><p>一个 transaction 中可以包含任何数量任何类型的 inputs 和 outputs：</p><ul><li>可以包含多种类型的 state（cash, bonds）</li><li>可以是 issuances 类型（有0个input）或者 exists 类型（有0个 output）</li><li>可以合并或拆分可替换的资产（比如把一个 $2 的 state 和 $5 的 state 合并为 $7 的 cash state）</li></ul><p>Transaction 是 原子性操作，一个 transaction 里边的所有 changes 必须要全部执行，或者一个也不会执行。</p><p>有两种基本类型的 transactions：</p><ul><li>Notary-change transactions（用来变更 state 的 notary - 查看 Notaries）</li><li>General transactions（其他任何类型的 transaction）</li></ul><h4 id="1-0-4-1-交易链">1.0.4.1 交易链</h4><p>一个新的 transaction 的 output state 在账本中应该是还不存在的，所以需要提出 transaction 的一方来创建。但是 transaction 中包含的 input 应该是在账本中已经存在的，应该是前一个 transaction 添加进去的 output。所以我们需要在新的 transaction 中引用这些已经存在的记录。</p><p>这些 Input state 的引用包含两部分(<strong>个人理解</strong>：与比特币的交易链一样)：</p><ul><li>创建这个 input 的 transaction 的 hash</li><li>这个 input 所指的前一个 transaction 带来的 output state 在 output list 中的位置或者索引值</li></ul><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/tx-chain1.png" alt="_images/tx-chain1.png"></p><h4 id="1-0-4-2-提交交易">1.0.4.2 提交交易</h4><p>初始的时候，一个 transaction 仅仅是一个更新账本的 提议。它表示了经过这次更新后账本的新的状态：</p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/uncommitted_tx.png" alt="_images/uncommitted_tx.png" style="zoom:30%;"><p>为了成为真正的一笔交易，transaction 必须要获得所有 要求的签名*（查看下边的 *<em>command</em>）。每一个要求的签名者会将签名附加在 transaction 上来表示他们已经同意了这次更新：</p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/tx_with_sigs.png" alt="_images/tx_with_sigs.png" style="zoom:30%;"><p>如果得到了所有需要的签名，这个 transaction 就会被提交了：</p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/committed_tx.png" alt="_images/committed_tx.png" style="zoom:30%;"><p>一旦提交就意味着：</p><ul><li>Transaction 的 input 被标注为历史记录，并且不能再被之后的 transactions 使用了</li><li>Transaction 的 output 变为账本上的当前状态的一部分</li></ul><h4 id="1-0-4-3-交易的有效性">1.0.4.3 交易的有效性</h4><p>每一个被要求的签名方应该只有在满足以下两个条件的时候才应该提供签名：</p><ul><li><strong>Transaction 是有效的</strong>：对于当前的 transaction 提案以及产生当前提案的 Input 相关的所有以前的所有 transactions 的链条中：<ul><li>Transaction 应该获得所有相关方的数字签名</li><li>Transaction 是 <em>合约有效</em> 的</li></ul></li><li><strong>Transaction 唯一性</strong>：本次 transaction 提案要消费的 inputs 没有被任何已经存在的其他的已提交的 transaction 消费过</li></ul><h4 id="1-0-4-4-参考-states">1.0.4.4 参考 states</h4><p>正如 States 所描述的，一些 states 需要被其他的 input 或者 output states 的合约代码所引用，但是不需要被修改/消费。这就需要参考 states。当一个 state 被添加到一笔交易的参考 states 列表中，而不是 inputs 或者 outputs 列表的时候，那么它就被作为 参考 state。在常规的 states 和参考 states 间有两点区别：</p><ul><li>交易的节点指定的 notary 会检查参考 state 是不是当前的。然而，当包含他们的交易被提交到账本的时候，参考 states 是不会被消费的。</li><li>对于参考 states 的合约代码也不会被包含他们的交易所执行。</li></ul><h4 id="1-0-4-5-其他的交易组件">1.0.4.5 其他的交易组件</h4><p>就像 input states 和 output states 一样，transactions 还可能会包含下边的组件：</p><ul><li>Commands</li><li>Attachments</li><li>Timestamps</li><li>Notary</li></ul><p>比如一个交易中，Alice 使用 £5 的现金向 Bob 支付了一个 IOU 的 £5。该笔交易包含了两个附件，并且只能够在 notary pool 在指定的时间窗内收到该笔交易的时候被 NotaryClusterA 进行公证，看起来像下边这样：</p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/full-tx.png" alt="_images/full-tx.png" style="zoom:30%;"><h4 id="1-0-4-5-1-Commands">1.0.4.5.1 Commands</h4><p><a href="https://zhuanlan.zhihu.com/p/33792878">翻译视频讲解Corda 核心概念 - Commands</a></p><p>Commands是什么？</p><ul><li>Commands 是一些动词（verbs）</li><li>Commands 将 transaction 进行参数化（parameterise），这样除了从 State 中能够获取的信息外，commands 又能提供了更多的一些信息</li><li>Commands 也提示（hint）了 transaction 的意图（intent）</li><li>Commands 也可能包含通过 Oracle Service 提供的数据（off-ledger data）</li></ul><p>一些 Commands 典型的例子：</p><ul><li>发布（issue）新的 State 到账本上</li><li>交换（transfer）资产到账本中的另一方</li><li>付钱（pay）给账本中的另一方</li><li>偿还（redeem）一笔资产并结束/清除代表该资产的state</li><li>尝试（exercise）一个选项 option</li><li>履行（settle）一个义务来递交一个资产</li></ul><p>如何知道一个 transaction 都需要谁来提供签名呢？我们会把一个公钥列表关联至一个 command，来说明都谁需要对这个 command 提供签名。</p><ul><li>一个 command中会包含一个公钥列表（public key list），通过这个列表就知道了都会涉及哪些人来确认/签名该 state transaction</li><li>在 transaction中，input 和 output states 经常会被按照类别分组（还可能根据其他的条件进行分组）</li><li>每一组 state 都需要有一个 command</li></ul><h4 id="1-0-4-5-2-Attachments">1.0.4.5.2 Attachments</h4><p>有些时候，我们会有一些数据可以在不同的 transactions 中被重用。比如：</p><ul><li>一个公共假期的 calendar</li><li>支持的法律文档</li><li>一个货币代码的表格</li></ul><p>针对这些情况，我们使用附件。一个 transaction 可以通过 hash 引用 0 个或者多个附件。这些附件是 ZIP/JAR 文件，可以包含任何内容。这些附件中信息可以用来验证 transaction 的有效性。</p><h4 id="1-0-4-5-3-Time-window">1.0.4.5.3 Time-window</h4><p>一些时候，我们希望一个交易仅仅在一个指定的时间点被批准执行。例如：</p><ul><li>在一个指定的日期之后执行一个选项</li><li>一个债券只能在它的过期日期前被赎回</li></ul><p>在这些情况下，我们给 transaction 添加一个 time-window。time-windows 制定了交易会在哪个时间点被提交。</p><h4 id="1-0-4-5-4-Notary">1.0.4.5.4 Notary</h4><p>**个人理解：**为了在issuance/genesis 交易中提供公证证明的，证明此交易的合法性。</p><h3 id="1-0-5-Contracts">1.0.5 Contracts</h3><p>**个人理解：**与以太坊的智能合约类似</p><ul><li>一个有效的 transaction 必须要被它的所有 input 和 output states中的 contract 接受</li><li>Contracts 需要使用 JVM 编程语言编写（java 或者 kotlin）</li><li>Contract 的执行是一定要有一个确定性结果的，并且它对于一个 transaction 的接受是仅仅基于 transaction 的内容</li></ul><h4 id="1-0-5-1-Transaction-验证">1.0.5.1 Transaction 验证</h4><p>一个 transaction 仅仅当被所有要求的签名方提供了签名之后才会被认为是有效的。但是，除了获得到所有人的签名之后，还必须要满足 合约有效 才会被最终认为有效。</p><p>合约有效 的定义包含以下几点：</p><ul><li>每个 state 都指定了一个 合约 类别</li><li>合约将交易(transaction)作为输入，并根据合约规则说明该交易是否有效</li><li>仅当<strong>every input state</strong>和** every output state **的合约都认为其有效时，交易(transaction)才有效</li></ul><p>我们可以用下图来描述这个关系：</p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/tx-validation.png" alt="_images/tx-validation.png" style="zoom:30%;"><p>合约代码可以用任何JVM语言编写，并可以使用该语言的全部功能，包括：</p><ul><li>检查 inputs，outputs，commands 的数量，时间，附件</li><li>检查这些组件中的任何一个的内容</li><li>循环构造，变量分配，函数调用，辅助方法等</li><li>将一些类似的 states 分组来验证（比如对于所有的现金 state 的组合定义一个规则）</li></ul><p>一个 transaction 如果不是合约有效的话，是不会被视为一个对账本的有效更新，也就不可能被提交至账本。通过这种方式，合同对state随时间的变化施加了规则，这些规则与所需签名者签署给定交易的意愿无关。</p><h4 id="1-0-5-2-The-contract-sandbox">1.0.5.2 The contract sandbox</h4><p>**个人理解：**为了保证验证的结果不根据外部的条件而改变，Corda提供了一个沙箱，以防止代码引入可能会造成不确定性结果的外部库</p><p><a href="https://cncorda.readthedocs.io/zh_CN/latest/deterministic-modules.html">Deterministic Corda Modules</a></p><p>Transaction 验证必须是 一个确定性的结果： 在一个确定的transaction提议中，一个 contract 必须总是接受 或者 总是拒绝。比如 transaction 是否有效不能够取决于你在什么时间做的 verify 或者是基于某一方具有的信息量的多少来决定是有效的还是无效的。这是一个很重要的条件来确保网络上的相关节点能够在这个对账本的更新的操作达成共识。</p><h4 id="1-0-5-3-Contract-的局限性">1.0.5.3 Contract 的局限性</h4><p>因为 contract 没有办法访问到外部的信息，它只能检查 transaction 内部的有效性，比如它不能够检查确认当前这个 transaction 是不是已经同其他相关方达成了共识取得了其他方的确认。</p><p>所以在各方提供最终的签名确认之前，各方应该对transaction 的内容进行检查来确定他们是否同意这个对账本的更新，即使这个 transaction 是合约有效的。任何一方都没有义务因为transaction是是合约有效而提供签名。比如他们可能不愿意去提供一个巨额的借款，或者可能不会同意购买一个资产花费的钱的金额。</p><h4 id="1-0-5-4-Oracles">1.0.5.4 Oracles</h4><p>有时，交易有效性将取决于某些外部信息，例如汇率。在这些情况下，需要一个oracle。有关更多详细信息，请参见Oracle。</p><h4 id="1-0-5-5-Legal-prose">1.0.5.5 Legal prose</h4><p>每一个合约也会引用一个 legal prose 文档，这个文档中定义了合约中规定的内容，legal prose 也会被传统的法律系统所接受。这个文档会在发生法律纠纷的时候被用来进行判定依据。</p><h3 id="1-0-6-Flows">1.0.6 Flows</h3><ul><li>Flows 使同意更新账本的流程变得自动化</li><li>节点之间的沟通只能够在这些 Flows 的上下文中发生，并且是点对点的</li><li>内置的 flows 提供了常用的一些任务</li></ul><p>Corda 网络使用点对点的消息传输而不是全局广播。也就是说协调一个关于账本的更新需要网络上的参与者明确的指定需要发送什么信息，发送给谁，按照什么顺序发送。</p><h4 id="1-0-6-1-Flow-框架">1.0.6.1 Flow 框架</h4><p>一个 flow 是一系列有顺序的步骤来告诉一个节点应该如何实现一个指定的账本更新，比如发行一个资产或者结算一笔交易。<br>下边是一个上边图片所描述的简单账本更新所涉及到的顺序的流程：</p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/flow-sequence.png" alt="_images/flow-sequence.png" style="zoom:30%;"><h4 id="1-0-6-2-运行-flows">1.0.6.2 运行 flows</h4><p>一旦一个业务流程被封装在了一个 flow 中并且在节点中作为 CorDapp 的一部分被安装好之后，节点的所有者可以在任何时间通过使用一个 RPC call 来告诉节点开始这个业务流程。Flow 将所有的网络，I/O 和并发问题都抽象了出来，这个节点 owner 就不需要关注这些了。</p><p>节点上所有的动作都是发生在这些 flows 的上下文上的。与 contract 不同，flows 不是在 sandbox 里执行的，也就是说节点可以在执行一个 flow 的过程中来进行一些动作比如 networking，I/O 或者随机地使用一些资源。</p><h4 id="1-0-6-3-节点内部通信">1.0.6.3 节点内部通信</h4><p>节点间是通过在不同的 flows间传递消息来进行沟通的。每个节点有0个或者多个注册的 flow classes 来回复另外个一个单独的 flow 的消息。</p><p>假设 Alice 是网络中的一个节点，并且她希望同 Bob（网络中的另一个节点） 一起同意一次账本的更新。为了跟 Bob 进行沟通， Alice 必须：</p><ul><li>开始一个 Bob 已经注册过的 flow</li><li>Alice 在这个 flow 的上下文中给 Bob 发送一个消息</li><li>Bob 会启动它注册的这个 conterparty flow</li></ul><p>连接已经建立起来了，Alice 和 Bob 就可以像 flow 步骤中描述的那样来回地沟通关于一个更新账本的改动并且最终达成一致。</p><h4 id="1-0-6-4-Subflows">1.0.6.4 Subflows</h4><p>Flows 可以通过在另外一个 flow 的上下文中开始一个新的 flow 作为一个子流程的方式被组成。作为子流程被启动的 Flow 被称为 subflow。父 flow 需要等待所有的 subflow 完成后才会继续运行。</p><h4 id="1-0-6-5-Flow-类库">1.0.6.5 Flow 类库</h4><p>Corda 对于一些常规的任务都提供了一套代码库（<a href="https://cncorda.readthedocs.io/zh_CN/latest/api-flows.html">API: Flows</a>），所以开发者就不需要自己去定义这些常见流程背后的逻辑了，比如：</p><ul><li>公正和记录一个 transaction</li><li>从相关节点搜集签名</li><li>验证交易链</li></ul><h4 id="1-0-6-6-并发">1.0.6.6  并发</h4><p>Flow 框架允许节点可以同时运行多个 flows。这些 flows 可能由于节点的重启甚至升级会持续几天。<br>这个可以通过在 flow 变成阻塞的状态的时候，将 flows 序列化到硬盘中的方式来实现（比如他们在等待 I/O 或者是网络的调用）。出现这种情况的时候，节点不会等待这个阻塞状态的 flow变成非阻塞的状态，而会立即运行其他的 flow，只会在稍后返回到原来这个阻塞的flow。</p><h3 id="1-0-7-consensus-共识">1.0.7 consensus(共识)</h3><ul><li>为了交易能够被提交，transaction 必须要同时满足有效性和 唯一性的共识</li><li>有效性共识需要 transaction 和 它的所有依赖都是合约有效的</li><li>唯一性共识可以避免“双花”</li></ul><h4 id="1-0-7-1-两种类型的共识">1.0.7.1 两种类型的共识</h4><p>判断一个交易的提案是否是一次有效的账本更新要达到两种类型的共识：</p><ul><li>有效性共识：这给是交易所要求的签名者在提供他们签名之前去校验的</li><li>唯一性共识：这个只会被 notary service 去验证</li></ul><h5 id="1-0-7-1-1-有效性共识">1.0.7.1.1 有效性共识</h5><p>有效性共识是关于验证下边所描述的条件对于提交的 transaction 和生成该该 transaction 的 inputs 的交易链中的每次 transaction 都必须要满足：</p><ul><li>Transaction 中的每个 input 和 output 的 contracts 所接受</li><li>Transaction 得到了所有要求的签名</li></ul><p>仅仅检查交易提案本身信息是不够的。我们还需要检查跟产生当前这个 transaction 的 inputs 有关的所有以前的 transaction 链。<br>这个被称作 walking the chain。假设，例如网络中的一个节点提交了一个交换债券的一笔交易。我们只有了解下边的情况才能确保这个债券的交换是有效的：</p><ul><li>这个债券应该是由中心银行发行的，而且应该是在一次有效的发行交易中</li><li>关于这个债券的后续交易记录也应该都是有效的</li></ul><p>确保两点都满足的唯一方式就是查看整个交易链。我们可以用下图表示：</p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/validation-consensus.png" alt="_images/validation-consensus.png" style="zoom:30%;"><p>当确认一个交易提案的时候，给定的一方可能没有它需要验证的交易链上的所有交易信息。这种情况下，他可以向交易的提出方索要缺少的那部分交易。交易的提出方应该永远会有整个的交易链信息，因为他们应该在验证之前的交易中已经获取了相关的交易链信息。</p><h5 id="1-0-7-1-2-唯一性共识">1.0.7.1.2 唯一性共识</h5><p>设想一下 Bob 持有有效的由中央银行发行的 $1,000,000 现金 state。Bob 可以创建两个交易提案：</p><ul><li>一笔交易要跟 Charlie 用这 $1,000,000 交换 £800,000</li><li>一笔交易要跟 Dan 用这 $1,000,000 交换 €900,000</li></ul><p>这会是一个问题，因为尽管这两笔交易都可以通过有效性共识，但是 Bob 确实现了一次“双花 double spend” 他的美元来获得了两倍价值的 GBP 和 EUR。我们可以用下图表示这个流程：</p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/uniqueness-consensus.png" alt="_images/uniqueness-consensus.png" style="zoom:30%;"><p>为了避免这样的问题发生，一个有效的交易提案同时也要满足唯一性共识。唯一性共识要求一个 transaction 的 input 不能被任何其他的 transaction 消费掉过。</p><p>当一个交易中的一个或多个 inputs 已经被其他的交易消费掉的情况，通常被称为 双花，那么相关的交易应该被视为无效的交易。</p><p>唯一性共识是由 notaries 提供的。查看 Notaries 了解更多详细信息。</p><h3 id="1-0-8-Notaries">1.0.8 Notaries</h3><ul><li>Notary 集群避免 “双花”</li><li>Notary 集群也可以是时间戳授权。如果一笔交易包含一个 time-window，那么它只能在这个 time-window 内被公证</li><li>Notary 集群也可以可选地用来验证交易，在这种情况下他们被称为 “用于验证” 的 notaries，相对于 “非验证” 的 notaries</li><li>一个网络中可以有多个 notaries，每一个 notary 运行一个不同的共识算法</li></ul><h4 id="1-0-8-1-概览">1.0.8.1 概览</h4><p>一个 notary 集群 是一个网络服务，通过证明一个给定的交易的 input 是没有被其他的交易消费过的方式提供了 唯一性共识。</p><p>当被要求为一笔交易进行公证的时候，一个 notary 集群会进行下边两种操作中的一种：</p><ul><li>如果对于给定的交易中的 input，没有任何其他的交易已经消费该 input 的时候，会提供签名</li><li>拒绝这笔交易并且标明产生了双花的情况</li></ul><p>通过这样做，notary 集群就在系统中提供了一个终结点。在最终获得 notary 集群的签名之前，交易各方并不能确定交易的有效性。但是当收到了 notary 集群的签名之后，我们可以确认的是，交易中的 Input 是没有被其他任何的交易所消费过的。因此公证（notarisation）在系统里是最后的一步。</p><p>每个 state 都会有一个指定的 notary 集群，而且一个 notary 集群也只会去公正那些 input 指定它为 notary 集群的 transaction。</p><h4 id="1-0-8-2-共识算法">1.0.8.2 共识算法</h4><p>Corda 拥有一套 “可插拔” 的共识，允许 notary 集群根据不同的需求（私有化、扩展性、法律系统的兼容性和算法的便捷性）来选择一种共识算法。</p><p>特别的，notary 集群可能含有下边的不同：</p><ul><li>结构： 一个 notary 集群可能是一个单独的网络节点，或者是互相信任的节点集群，或者是互不信任的节点集群</li><li>共识算法： 一个 notary 集群可能会选择运行一个高速，高信任的算法（比如 RAFT），或者一个低速低信任的算法（比如 BFT），又或者是任何其他的选择的共识算法</li></ul><h4 id="1-0-8-3-验证">1.0.8.3 验证</h4><p>一个 notary 集群还需要选择是否在提交之前通过验证每个 transaction 的有效性来提供这种 有效性共识 服务。为了做出这个选择，他们需要面对下边的取舍问题：</p><ul><li>如果一个 transaction 没有 被验证了正确与否（非验证 notary），那么这就增加了 “denial of state” 袭击的风险，指的就是某个节点知道这是一个不正确的 transaction 会消费到一些 states，然后该节点还是把这个 transaction 发送给 notary 集群，但是 notary 如果不进行正确性验证的话，会把这个 state 变为历史记录被消费掉，这显然是不正确的</li><li>如果 transaction 已经 被验证了正确与否（验证 notary），notary 需要查看该 transaction 的全部内容以及它的所有依赖。这就向 notary 暴露了一些潜在的隐私数据。</li></ul><p>当我们考量这些取舍的时候，有一个后续观点需要始终要考虑的。对于非验证模式，Corda 的控制的数据分布模型意味着未被消费的 states 不会被大面积的共享。另外， Corda 的 permissioned network 也意味着 notary 能够存储造成 “denial of state” transaction 的一方的身份信息，这就允许能够在账本外去解决掉这个袭击。</p><p>对于验证模式，对于匿名的使用，使用新生成的公钥而不是使用法律的标识来标记一笔交易的各方也限制了 notary 集群能够看到的信息。</p><h4 id="1-0-8-4-数据的可视性">1.0.8.4 数据的可视性</h4><p>下边是关于哪些特殊的交易组件必须要暴露给每种类型的 notary 的一个总结：</p><table><thead><tr><th><strong>Transaction components</strong></th><th><strong>Validating</strong></th><th><strong>Non-validating</strong></th></tr></thead><tbody><tr><td>Input states</td><td>Fully visible</td><td>References only [1]</td></tr><tr><td>Output states</td><td>Fully visible</td><td>Hidden</td></tr><tr><td>Commands (with signer identities)</td><td>Fully visible</td><td>Hidden</td></tr><tr><td>Attachments</td><td>Fully visible</td><td>Hidden</td></tr><tr><td>Time window</td><td>Fully visible</td><td>Fully visible</td></tr><tr><td>Notary identity</td><td>Fully visible</td><td>Fully visible</td></tr><tr><td>Signatures</td><td>Fully visible</td><td>Hidden</td></tr></tbody></table><p>两种类型的 notaries 都会记录调用方的身份信息：公钥以及 X.500 唯一的名字。</p><h4 id="1-0-8-5-多个-Notaries">1.0.8.5 多个 Notaries</h4><p>每个 Corda 网络可以存在多个 notary 集群，每个 notary 集群可能会运行一套不同的共识算法。这会带来以下的好处：</p><ul><li><strong>隐私性</strong> - 我们可以在同一个网络中同时拥有验证和非验证的 notary 集群，每个集群运行着不同的算法。这就允许节点针对每个 transaction 来选择更喜欢的不同的 notary。</li><li><strong>负载平衡</strong> - 将 transaction 的工作分发给多个 notary 集群可以提高平台整体的交易吞吐量</li><li><strong>低延迟</strong> - 通过选择物理上离交易方最近的 notary 集群来获得最小化的延迟</li></ul><h4 id="1-0-8-6-更换-notaries">1.0.8.6 更换 notaries</h4><p>一个 notary 集群只有当它是这个 transaction 里的所有 input states 指定的 notary 的情况下才可以提供签名。然而下边的情况可能需要换一个 state 的指定的 notary 集群，包括：</p><ul><li>当一个 transaction 需要消费的 states 中指定了不同的 notary 集群</li><li>当一个节点因为隐私和效率的考虑希望选择一个不同的 notary 集群</li></ul><p>当这样的 transactions 被创建之前，states 必须首先被指定到同一个 notary 集群。这可以通过一个改变 notary 的 transaction 来实现:</p><ul><li>一个 input state</li><li>output state与input state相同，但指定的notary群集已更改</li></ul><p>如果该 transaction 不会造成“双花”，这个 input state 指定的 notary 会为该 transaction 提供签名，这种情况下，一个新的 state 会产生，它的所有属性和旧的 state相同，但是会指向一个不同的 notary 集群。</p><h3 id="1-0-9-Vault">1.0.9  Vault</h3><p>Vault 中存储的是跟节点的所有者相关的从账本上得到的数据，以关系模型存储以方便查询和使用。</p><p>Vault 同时会追踪未消费掉的和已消费掉的 states：</p><ul><li><strong>Unconsumed</strong>：未消费掉的 （或者未使用的） states 代表了可以用来花费的 fungible states （包括 spend-to-self 交易）以及可以用来更新的 linear states （比如对于一笔交易的生命周期）或者从一方转换给另一方。</li><li><strong>Consumed</strong>：已消费掉的 （或者已使用的） states 代表了为了交易报表、审计和归档的目的而在账本上存储的不可更改的 state，包括进行同 app-private 数据进行关联的能力（比如客户的 notes）。</li></ul><p>一个称为 soft locking 的功能提供了自动或者显式地预定 states 而避免同一个节点尝试同时在多笔交易中使用相同的 output 的能力。这种情况最终会被一个 notary 发现，soft locking 提供了一种能够在早期就发现这种无根据和不正确的情况的机制。Soft Locking 提供了更详细的的关于这个功能的描述。</p><p>Vault 支持管理需授权的（“on-ledger”）的数据，也可以管理 shadow（“off-ledger”）形式的数据：</p><ul><li>“On-ledger” 数据指的是指公司参与的分布式账本的state （现金、交易、）。</li><li>“Off-ledger” 数据指的是公司内部的参考数据、静态或者系统数据。</li></ul><p>下边的图表展示了将 vault 拆分为子系统组件：</p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/vault.png" alt="_images/vault.png" style="zoom:80%;"><p>注意以下几点：</p><ul><li>Vault “On Ledger” 存储并追踪未消费掉的 state，并且在将一笔交易记录到账本的时候由节点内部进行更新（会按照成功执行了智能合约验证以及受到所有参与方的签名）</li><li>Vault “Off Ledger” 存储了交易记录以外节点的所有者添加的额外的数据</li><li>Vault 对 fungible state 进行了花费（并且在将来，fungible state 的优化管理包括合并、拆分以及再发行）。</li><li>Vault 扩展代表了开发者可以编写的额外的自定义 plugin 代码，用来查询指定的自定义 contract state 属性。</li><li>客户的 “Off Ledger”（私有的存储）代表了内部的组织型数据，可能被用来跟 vault 数据进行关联来进行额外的报表或者处理。</li><li><a href="https://cncorda.readthedocs.io/zh_CN/latest/api-vault-query.html">Vault Query API</a> 可以使用标准的 Corda RPC 和 CorDapp plugin 机制暴露给开发者。</li><li>Vault 更新 API 可以被交易记录的 flows 内部使用。</li><li>Vault 数据库 schemas 可以通过 JDBC 和自定义的 joins 和查询进行直接地访问。</li></ul><h3 id="1-0-10-Time-windows">1.0.10 Time-windows</h3><ul><li>如果一个 transaction 包含了一个 time-window，那么这个 transaction 只能在这个 time-window 里被提交</li><li>Notary 具有控制发生的时间的权利，当在 time-window 之外的时候，notary 可以拒绝提交 transaction</li><li>Time-window 可以有开始和结束时间，或者只有两者之中的一个</li></ul><h4 id="1-0-10-1-分布式系统中的时间">1.0.10.1 分布式系统中的时间</h4><p>Notary 也可以作为 时间戳的验证者，在它确认一笔交易前，需要确保这笔交易是发生在指定的时间窗里。</p><p>为了让一个时间窗有意义，它必须要在一方请求它的时候被绑定。一方可以获得一个 time-window 的签名，以此来证明有些事件是在特定时间点 之前、当时 或者 之后 发生的。然而，如果交易参与者不能够在指定的 time-window 内提交到相关的交易，它可以选择是否在未来的某个时间点将这个事实暴露出去。因此，我们需要确保 notary 或者能够在一些可容错的时间范围内对交易进行签名，或者同时进行打时间戳 和 对交易进行公证。后边的这种方式是这个模型中使用的方式。</p><p>在创建交易的一方和 notary 之间是无法实现时间的同步的。这并不仅仅是因为物理或者网络的延迟，还会因为在插入命令和获得 notary 签名之间可能会发生很多其他的步骤（比如发送交易到涉及到的其他节点，请求人工的审批等）。所以交易被发送到 notary 的时间和交易创建的时间可能会不同。</p><h4 id="1-0-10-2-Time-windows">1.0.10.2 Time-windows</h4><p>因为上面的原因，交易中涉及到的时间会被制定为一个时间窗，而不是一个绝对的时间。在一个分布式系统中是永远不会有 “真实的时间” 的，只有一个大概的时间。时间窗可以是开放的（比如在某个时间点后，或者某个时间点之前）或者是一个闭合的范围。</p><p>通过这种方式，我们表达了我们的想法，就是 “当前的时间” 永远都是未知的。甚至当在某个时间之前和之后都被包含的时候，交易也可能会在那个时间窗中的任何时间发生。</p><p>通过在一端创建一个关闭或者开放的范围，我们允许用以下的方式生成时间窗模型：</p><ul><li>一笔交易在指定时间之后的某个时间发生（比如在一个终止事件之后）</li><li>一笔交易在指定时间之前的任何时间发生（比如破产事件之前）</li><li>一笔交易在指定时间区间的某个时间发生（比如在指定的某一天）</li></ul><h3 id="1-0-11-Oracles">1.0.11 Oracles</h3><ul><li>一个事实（fact）可以作为 command 的一部分被添加到一个 transaction 中</li><li>一个 oracle 是一个服务，它只会为那些包含正确事实的 transaction 提供签名</li></ul><p>很多时候 transaction 的合约有效性需要依赖一些外部的数据，比如当前的汇率是多少。如果让每个参与方给予他们对于汇率的观点来验证 transaction 的有效性的话，合约的执行就会变得没有确定性了：一些参与者可能会认为 transaction 是有效的，而其他的参与者可能认为无效。因此，在真正账本中的 state 之上就会提出一些不同的意见。</p><p>Corda 通过使用 Oracle 来解决这个问题。Oracle 是一个网络服务，可以根据要求提供包含某一事实的命令（比如在某个时间的汇率）并且将 Oracle 列为要求签名的一方。</p><p>如果一个节点希望在一个 transaction 中使用某一个事实，那么它可以提出从 Oracle 来获取该事实的一个命令。如果 Orale 认为这个事实是正确的，它会返回这个要求的命令。然后这个节点就可以把这个命令添加到 transaction 中了，然后 oracle 会为这个事实是真的提供签名。</p><p>为了隐私性的目的，Oracle 不需要能够访问交易的每个部分，他们唯一需要的信息就是看到他们内置的、跟这个 Oracle 相关的 command(s)。我们也应该提供让这些需要提供签名的 Oracle 实体能够看到这些 commands 的保证，但是不包括其他的部分。为了实现这个，我们使用过滤过的交易，是指交易的提案方使用一个内嵌的默克尔树的方式来将一些非相关的交易的部分隐藏掉。查看 Transaction tear-offs 了解关于交易如何拿掉工作的详细信息。</p><p>如果他们想为他们的服务定价，Oracles 可以选择只为那些包含服务费的交易提供签名并证明它包含的事实的有效性。</p><h3 id="1-0-12-node（节点）">1.0.12 node（节点）</h3><ul><li>Corda 中的节点指的是在网络中具有唯一标识的运行着 Corda 服务和 CorDapps 的 JVM 运行时环境。</li><li>节点对于外部世界包含两个接口：<ul><li>网络层，用来同其他的节点通信</li><li>RPC，为了跟节点的所有者通信</li></ul></li><li>节点的功能是通过在 plugin registry 里安装 CorDapps 方式来扩展的</li></ul><h4 id="1-0-12-1-节点架构">1.0.12.1 节点架构</h4><p>下边是节点的内部架构图：</p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/node-architecture.png" alt="_images/node-architecture.png" style="zoom:40%;"><p>架构中的核心元素包括：</p><ul><li>存储数据的持久化层</li><li>同其他节点沟通的网络接口</li><li>同节点的所有者进行沟通的 RPC 接口</li><li>允许节点的 flows 来调用节点其他服务的 service hub</li><li>plugin registry 用来通过安装 CorDapps 来扩展节点</li></ul><h4 id="1-0-12-2-持久层">1.0.12.2 持久层</h4><p>持久层包含两部分：</p><ul><li>Vault，节点用来存储相关的当前和历史的 states 数据</li><li>存储服务，用来存储 transaction, attachment 和 flow checkpoints<br>节点的所有者可以通过使用 RPC 接口来查询节点的 storage。</li></ul><h4 id="1-0-12-3-网络接口">1.0.12.3 网络接口</h4><p>同网络中的其他节点进行沟通是节点自己来处理的，作为运行一个 flow 的一部分。节点的所有者不会直接地同网络中其他的节点进行交互。</p><h4 id="1-0-12-4-RPC-接口">1.0.12.4 RPC 接口</h4><p>节点的所有者是通过使用 Remote Procedure Calls(RPC) 来跟节点进行交互的。关键的节点暴露的 RPC 操作可以查看 <a href="https://cncorda.readthedocs.io/zh_CN/latest/api-rpc.html">API: RPC 操作</a>。</p><h4 id="1-0-12-4-The-service-hub">1.0.12.4 The service hub</h4><p>在节点内部，节点可以在 flow 的执行过程中访问丰富的服务来协助更新账本。主要的服务包括：</p><ul><li>有关网络上其他节点及其提供的服务的信息</li><li>访问 vault 和存储服务的内容</li><li>访问和生成节点的公钥私钥对</li><li>节点本身的信息</li><li>节点跟踪的当前时间</li></ul><h4 id="1-0-12-5-CorDapp-提供者">1.0.12.5 CorDapp 提供者</h4><p>CorDapp 提供者是新的 CorDapps 被安装的地方，来扩展节点的行为。</p><p>节点默认会安装一些 CorDapps 来处理一些常见的任务，比如：</p><ul><li>从合作方那边获得交易和附件信息</li><li>更新合约</li><li>向交易其他方广播同意的账本更新信息</li></ul><h4 id="1-0-12-6-排空节点模式">1.0.12.6 排空节点模式</h4><p>为了执行一次干净的关闭节点操作，没有正在执行的 flows 非常重要，也就是说应该没有任何的 checkpoints 被持久化。节点能够被设置为排空状态，在这个状态中：</p><ul><li>通过 RPC 要求的启动新的 flows 的命令会被拒绝</li><li>预约的 flows 会被忽略</li><li>初始化 P2P 的会话消息将不会被处理，意味着 peers 将不能够初始化新的 flows</li><li>其他所有的活动还会照常进行，来确保正在执行的 flows 的数量在不断减少。</li></ul><p>对于他们的数量 - 可以通过 RPC 来进行监控 - 达到0，那么就是安全的了，可以进行关闭节点的操作了。这个属性是持久的，也就是说重新启动这个节点也不会重置这个值到默认和值，并且需要一个 RPC 命令。</p><p>节点可以使用 shell 来被排空然后安全地关闭。</p><h3 id="1-0-13-Transaction-tear-offs（交易剥离）">1.0.13 Transaction tear-offs（交易剥离）</h3><ul><li>隐藏交易组件出于隐私目的</li><li>Oracle和非验证公证人只能看到其“相关”交易组件，而不能看到完整的交易详细信息</li></ul><h3 id="1-0-13-1-总览">1.0.13.1 总览</h3><p>在某些情况下，交易中涉及的某些实体可能只对交易部分具有部分可见性。例如，当一个甲骨文应该签署一个交易时，它唯一需要查看的信息就是与该甲骨文命令相关的嵌入式信息。同样，非验证公证人只需要查看交易的输入状态即可。向Oracle提供任何其他交易数据将构成隐私泄漏。</p><p>为了解决这个问题，我们使用过滤交易的概念，其中交易提议者使用嵌套的默克尔树方法“剥离”Oracles/Notraries不需要的交易任何部分，然后再提交给他们进行签名。默克尔树是一种众所周知的加密方案，通常用于提供包含和数据完整性的证明。 Merkle树被广泛用于对等网络，区块链系统和git。</p><p>默克尔树的优点是，在向Oracle提交交易时被剥离的交易部分以后就无法更改，而又不会使Oracle的数字签名无效。</p><h3 id="1-0-13-2-Transaction-Merkle-trees">1.0.13.2 Transaction Merkle trees</h3><p>通过将transaction拆分为叶子，从transaction中构造Merkle树，其中每个叶子包含输入，输出，命令或附件。最终的嵌套树结构还包含事务的其他字段，例如时间窗口，公证人和必需的签名者。<br>如下图所示，唯一需要两棵树而不是一棵树的组件类型是command，为了可视性目的，该命令分为命令数据和必需的签名者。</p><p>Corda使用每种组件类型的嵌套Merkle树。简而言之，针对每种组件类型（即输入，输出，附件）生成一个组件子树。然后，这些子树的根形成顶部的Merkle树的叶子，最后，该树的根代表交易ID。</p><p>另一个重要特征是，以每个随机数独立的方式为每个组件确定性地生成一个随机数。然后，我们使用随机数及其对应的组件来计算组件哈希，即实际的Merkle树叶。需要使用随机数来防止暴力攻击，否则可能会泄露低熵散列值（即单个单词的文本附件）的内容。</p><p>计算完叶子后，通过散列当前节点下面的哈希值的连接，以正常方式构建每棵Merkle树。</p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/merkleTreeFull.png" alt="img" style="zoom:60%;"><p>上图中的交易有三个input，两个output，两个command，一个attachment，一个notary和一个 time-window。请注意，如果树不是完整的二叉树，则将叶子填充为具有零哈希值的最接近的2的幂（因为找到sha256（x）== 0的原像是困难的计算任务）-上面标记为浅绿色。最后，根的哈希是交易的标识符，它也用于签名和验证数据完整性。叶子级别上的每次交易更改都会更改其标识符。</p><h3 id="1-0-13-3-Hiding-data">1.0.13.3 Hiding data</h3><p>隐藏数据并提供证明它构成事务一部分的证据是通过构造部分Merkle树（或Merkle分支）来完成的。 Merkle分支是一组散列，根据叶的数据，这些散列用于计算根的散列。然后，将该哈希与整个交易的哈希进行比较，如果它们匹配，则意味着我们获得的数据属于该特定交易。</p><p>假设只有第一个命令对Oracle是可见的。我们还应该保证所有需要该Oracle签名的命令对于Oracle实体都应该是可见的，而其余部分则不可见。这是此过滤后的交易将如何在Merkle树结构中表示的方式。</p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/SubMerkleTree_Oracle.png" alt="_images/SubMerkleTree_Oracle.png" style="zoom:30%;"><p>向Oracle服务提供了蓝色节点和H(c2)，而省略了黑色节点。 HH(c2)是必需的，这样Oracle可以计算H(commandData)而不必看到第二条命令，但同时确保CommandData1是事务的一部分。突出显示所有签名者都是可见的，以证明没有恶意删除任何相关命令（Oracle应该看到）。此外，当前的Corda协议中还提供了子树的哈希（紫色节点）。在特殊情况下需要知道他们下面的数据，例如需要知道组件组是否为空时。</p><p>同样，如果我们想将同一交易发送给非验证notary，则应隐藏除输入状态，时间窗口和公证人信息之外的所有组件。该数据足以使公证人知道应检查哪些input statues进行双花，时间窗口是否有效以及此事务是否应由该notary公证。</p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/SubMerkleTree_Notary.png" alt="_images/SubMerkleTree_Notary.png" style="zoom:30%;"><h3 id="1-0-14-权衡">1.0.14 权衡</h3><ul><li><em>许可的网络会更好的适合金融的 user-cases</em></li><li><em>点对点的通信允许信息是基于需要知道的原则被共享</em></li><li><em>UTXO model 允许每秒钟能够处理更多的 transactions</em></li></ul><h4 id="1-0-14-1-需要许可-vs-和不需要许可的">1.0.14.1 需要许可 vs 和不需要许可的</h4><p>传统的 blockchain 是 不需要许可 的。网络中的各方都是匿名的，而且可以随时加入或离开。</p><p>不同的是， Corda 网络是 需要许可 的。网络中的每一方都有一个大家都知道的标识，这个会在同其他节点进行沟通的时候使用，并且访问网络是由一个 doorman 来控制的。这有一下的好处：</p><ul><li>匿名的用户对于大多数跟金融有关的情况都是不适用的</li><li>知道你的合作方的身份可以允许当出现冲突的时候，可以使用已经存在的法律系统在账本外进行解决</li><li>可以不通过使用昂贵的机制（比如工作量证明 proof-of-work）来避免女巫攻击（Sybil attacks）</li></ul><h4 id="1-0-14-2-点对点-vs-全局广播">1.0.14.2 点对点 vs 全局广播</h4><p>传统的 blockchain networks 将每一条信息广播给网络上的所有参与者。原因是：</p><ul><li>合作方的身份是不知道的，所以一条消息需要发给网络上的所有人来确保原本需要收到这条消息的接受者能够接收到</li><li>让所有参与者知道每一个 transaction 能够允许网络防止“双花”<br>不好的地方是所有的参与者都能看到所有其他人的数据。这在很多的 use-cases 是无法接受的。</li></ul><p>在 Corda 中，每条消息都会指定一个具体的合作方，而且是不会被任何其他无关方看到的。开发者能够完全掌控什么消息被发送了，发送给了谁，应该按照什么顺序发送。所以 数据是根据需要知道的原则来共享的。为了避免“双花”，我们引入了 notaries 来替换掉工作量证明（proof-of-work）。</p><p>Corda 也是用了其他的一些技术来最大化的包括网络上的隐私：</p><ul><li><strong>Transaction 隐藏</strong>：Transactions 被结构化成不暴露 transaction 的内容就可以被数字化地签名。这个是通过使用一种叫默克尔树的数据结构来实现的。</li><li><strong>随机化秘钥</strong>：一个 transaction 的所有参与方是通过他们的公钥进行识别的，并且针对每一个 transaction 都会生成 一个新的 keypairs。所以一个监视者无法识别出来对于一个给定 transaction 都哪些方参与了。</li></ul><h4 id="1-0-14-3-UTXO-vs-账户模型">1.0.14.3 UTXO vs. 账户模型</h4><p>Corda 使用 <em>UTXO</em>（Unspent Transaction Output）model。每个 transaction 都会消费一系列的已经存在的 states 然后再生成一些新的 states。</p><p>相反的一种方式是 账户 模型。在账户模型中，stateful 对象被存在账本上，transaction 会通过请求的方式来对这些对象的当前的 state 进行更新。</p><p>UTXO 模型的主要优点在于含有不同的 inputs 的 transactions 能够并行地被执行，很大程度上地增加了网络中每秒能够处理的 transactions。在账户模型中，每秒钟能够处理的 transactions 数量有限，因为对于一个给定的 object 的更新需要按照给定的顺序来执行。</p><h4 id="1-0-14-4-代码即法律-vs-既有的法律系统">1.0.14.4 代码即法律 vs. 既有的法律系统</h4><p>金融体系需要在需要的时候使用传统的法律体系来解决冲突的能力。Corda 被设计用来使这个成为可能：</p><ul><li>拥有需要准入的网络，意味着所有参与方都能够知道在每一个 transaction 中他们都在跟谁打交道</li><li>所有代码合约背后都存在有描述着合约意图行为的法律文档，这个文档可以在解决冲突的时候使用</li></ul><h4 id="1-0-14-5-构建-vs-重用">1.0.14.5 构建 vs. 重用</h4><p>任何可能的情况，Corda 会使用 已经存在的技术来让这个平台更加的健壮。比如 Corda 重用了：</p><ul><li>用于开发CorDapps的标准JVM编程语言</li><li>已经存在的 SQL database</li><li>已经存在的 消息队列实现</li></ul><h3 id="1-0-15-Deterministic-JVM">1.0.15 <a href="https://cncorda.readthedocs.io/zh_CN/latest/key-concepts-djvm.html">Deterministic JVM</a></h3><p><strong>个人理解</strong>：为了达成共识，Corda要求所有的节点运行相同的JVM沙箱，叫做DJVM；DJVM为了让智能合约的代码每次执行的结果都相同而做了一些限制。</p><h2 id="1-1-开发语言语言是什么？">1.1 开发语言语言是什么？</h2><ul><li>开发语言与智能合约的语言都是使用 JVM 编程语言编写（java 或者 kotlin）</li><li>源码使用kotlin语言编写</li></ul><h2 id="1-2-网络是什么样的？">1.2 网络是什么样的？</h2><p>可以选择加入<a href="https://corda.network/">corda.network</a>，Corda Network由总部位于荷兰的非营利基金会管理。 Corda Network参与者有资格投票并代表基金会董事会做出重要决定，包括网络标准，参数和政策。</p><p>或者搭建自己的私有网络，<a href="https://www.r3.com/download-corda-enterprise-network-manager/">下载corda网络管理软件，需要填写信息</a></p><h2 id="1-3-Corda是如何达成共识的？">1.3 Corda是如何达成共识的？</h2><p>假如A发起一个交易给B转账500元，那么A需要提交一个交易（transaction）并签名；然后把交易发送给B（如果需要Notary和Oracle参与也会把need-to-know的部分发送给他们）；B验证交易没有问题（包括整个交易链、智能合约是否验证通过、是否同意当前的交易、Notary和Oracle是否签名等）就会提供签名然后提交这次交易。并把签名后的交易发送给A，A也执行相同的提交交易动作。</p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/flow-sequence.png" alt="_images/flow-sequence.png" style="zoom:30%;"><h2 id="1-4-CorDapps是什么？">1.4 CorDapps是什么？</h2><p>CorDapps是以plugin的形式运行在node上的“应用”；一个node可以有多个CorDapps，比如一个银行的node可以既有贷款的CorDapp，也有存款的CorDapp。</p><p>CorDapp包含state, transaction, contract和flow类。</p><h2 id="1-5-Corda的隐私保护是怎么做的？">1.5 Corda的隐私保护是怎么做的？</h2><h3 id="1-5-1-在网络中的各节点之间的隐私保护">1.5.1 在网络中的各节点之间的隐私保护</h3><p>Corda的网络需要申请加入并且对应了现实世界中的一个合法身份，所以不可以把交易信息公开。</p><p>Corda的交易是通过一个节点发起的，除了交易涉及的其他节点知道全部的交易内容；和Oracle以及Notary知道交易的部分需要验证的内容之外，对其他节点来说是不知道这个交易的。所以在隐私性方面是比较好的。</p><p><em>比特币和以太坊中的身份信息与现实世界的身份是没有对应关系的，所以把所有的账户和交易信息放在互联网上也是安全的。</em></p><h3 id="1-5-2-在验证双花和依赖Oracle签名时的隐私保护">1.5.2 在验证双花和依赖Oracle签名时的隐私保护</h3><p>Corda通过<strong>Transaction tear-offs</strong>的方式在需要Notary做唯一性校验或需要Oracle提供签名时，提供的只有need-to-know的部分，并不包含交易的所有内容，所以隐私得到了保护。</p><h2 id="1-6-Corda交易的实时性怎么样？">1.6 Corda交易的实时性怎么样？</h2><p>Corda交易相较于比特币和以太坊来说比较实时，因为Corda不必等待挖矿只要交易被校验通过，所有人都签了名就写在了区块链上了。（以太坊和比特币需要在挖到矿之后打包很多个交易，所以实时性会差一些）</p><h2 id="1-7-Corda中是否有以太坊中的账本的概念？">1.7 Corda中是否有以太坊中的账本的概念？</h2><p><strong>个人理解</strong>：Corda也有账本的概念，但是Corda账本所包含的内容远比以太坊的账本（只有余额）要多；Corda的账本有很多不同类型的state，Corda只保管了当前的state和历史state，但是Corda没有一个汇总的显示余额的“账本”；应该可以在账本外记录。</p><h2 id="1-8-Corda中账户（Accounts）是什么？">1.8 Corda中账户（Accounts）是什么？</h2><p>Corda中的Accounts是一个虚拟的概念，值得是一个节点的Vault的states打上标签来表示归属的账户；这个账户和节点的账户不一样，Account就像个人在银行（节点）开的账户（Account）。</p><h2 id="1-9-Corda可以发布币吗？可以挖矿吗？">1.9 Corda可以发布币吗？可以挖矿吗？</h2><p>没有数字货币，因此也不能挖矿。因为共识协议也并不是通过工作量证明完成，而是通过交易的涉及方和一些公证人和Oracle来达成共识的，所以也不需要挖矿。</p><h2 id="1-10-Corda的Contract和以太坊中的智能合约有什么区别？">1.10 Corda的Contract和以太坊中的智能合约有什么区别？</h2><h3 id="不同点：">不同点：</h3><p>Corda的Contract主要是为了来做验证交易是否正确的，不可以做以太坊智能合约的转账的操作。</p><p>以太坊中的智能合约是一个特殊的账户，里面有余额、交易次数、代码、存储等；但是Corda的Contract只有代码，只用来验证交易是否正确。</p><h3 id="相同点：">相同点：</h3><p>只要执行中遇到异常就表示验证不通过；能够证明交易非法（不符合合约内容）。</p><h1 id="3、如何基于Corda构建应用">3、如何基于Corda构建应用</h1><p>详情查看：</p><ol><li><p><a href="3%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AACorDapp.md">如何开发一个CorDapp</a></p></li><li><p><a href="4%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AACorda%E7%BD%91%E7%BB%9C.md">如何搭建一个Corda网络</a></p></li></ol><h1 id="4、Corda汇总">4、Corda汇总</h1><h2 id="Corda优点">Corda优点</h2><ul><li>隐私保护做的很好，交易只有涉及到的节点才知道</li><li>提供了一些通用的State类，如现金、商品、商业票据、利率交换、债务等</li><li>开发CorDapp简单，可以直接使用Java开发并且有模板和套路可循</li></ul>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Corda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Corda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何开发一个CorDapp</title>
      <link href="2024/11/22/blockchain/corda/3%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AACorDapp/"/>
      <url>2024/11/22/blockchain/corda/3%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AACorDapp/</url>
      
        <content type="html"><![CDATA[<h1 id="环境准备">环境准备</h1><ul><li>JDK（8u131以上）</li></ul><h2 id="corda训练营">corda训练营</h2><h3 id="代码地址：">代码地址：</h3><p><a href="https://github.com/corda/bootcamp-cordapp">https://github.com/corda/bootcamp-cordapp</a></p><p>个人gitee项目：<a href="https://gitee.com/zheshiyigegexingwangzhan/bootcamp-cordapp.git">https://gitee.com/zheshiyigegexingwangzhan/bootcamp-cordapp.git</a></p><h3 id="添加国内镜像">添加国内镜像</h3><h4 id="当前项目修改">当前项目修改</h4><p>下载代码之后为了更快的下载依赖，添加国内的镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maven &#123; url &#39;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&#39;&#125;</span><br></pre></td></tr></table></figure><h4 id="直接修改全局的gradle配置">直接修改全局的gradle配置</h4><p>在**~/.gradle<strong>目录下新建</strong>init.gradle**文件，写入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">allprojects&#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        def ALIYUN_REPOSITORY_URL &#x3D; &#39;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#39;</span><br><span class="line">        def ALIYUN_JCENTER_URL &#x3D; &#39;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;jcenter&#39;</span><br><span class="line">        all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">            if(repo instanceof MavenArtifactRepository)&#123;</span><br><span class="line">                def url &#x3D; repo.url.toString()</span><br><span class="line">                if (url.startsWith(&#39;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#39;)) &#123;</span><br><span class="line">                    project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_REPOSITORY_URL.&quot;</span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">                if (url.startsWith(&#39;https:&#x2F;&#x2F;jcenter.bintray.com&#x2F;&#39;)) &#123;</span><br><span class="line">                    project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_JCENTER_URL.&quot;</span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url ALIYUN_REPOSITORY_URL</span><br><span class="line">            url ALIYUN_JCENTER_URL</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试代码">测试代码</h3><p>运行ProjectImportedOKTest单测，如果通过说明环境没有问题</p><p>我的运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; Configure project :</span><br><span class="line">Repository https:&#x2F;&#x2F;jcenter.bintray.com&#x2F; replaced by http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;jcenter.</span><br><span class="line">&gt; Task :compileJava</span><br><span class="line">&gt; Task :processResources NO-SOURCE</span><br><span class="line">&gt; Task :classes</span><br><span class="line">&gt; Task :compileTestJava</span><br><span class="line">&gt; Task :processTestResources NO-SOURCE</span><br><span class="line">&gt; Task :testClasses</span><br><span class="line">&gt; Task :test</span><br></pre></td></tr></table></figure><h1 id="代码开发">代码开发</h1><h2 id="State开发">State开发</h2><p>一个state需要实现ContractState，ContractState中有一个方法<code>getParticipants()</code>，返回的是<code>List&lt;AbstractParty&gt;</code>,表示在这个state发生了交易时需要通知谁，让谁知道。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bootcamp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.ImmutableList;</span><br><span class="line"><span class="keyword">import</span> net.corda.core.contracts.ContractState;</span><br><span class="line"><span class="keyword">import</span> net.corda.core.identity.AbstractParty;</span><br><span class="line"><span class="keyword">import</span> net.corda.core.identity.Party;</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.annotations.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IouState</span> <span class="keyword">implements</span> <span class="title">ContractState</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发行人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Party issuer;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拥有者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Party owner;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> amount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IouState</span><span class="params">(Party issuer, Party owner, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.issuer = issuer;</span><br><span class="line">        <span class="keyword">this</span>.owner = owner;</span><br><span class="line">        <span class="keyword">this</span>.amount = amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AbstractParty&gt; <span class="title">getParticipants</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ImmutableList.of(issuer, owner);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Party <span class="title">getIssuer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> issuer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Party <span class="title">getOwner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Contract开发">Contract开发</h2><p>一个contract简单的理解就是一些校验的规则，需要实现<code>Contract</code>类，<code>Contract</code>类如下，只有一个<code>verify</code>方法，验证<code>LedgerTransaction</code>是否正确，如果不正确就抛<code>IllegalArgumentException</code>异常。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Contract</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Takes an object that represents a state transition, and ensures the inputs/outputs/commands make sense.</span></span><br><span class="line"><span class="comment">     * Must throw an exception if there&#x27;s a problem that should prevent state transition. Takes a single object</span></span><br><span class="line"><span class="comment">     * rather than an argument so that additional data can be added without breaking binary compatibility with</span></span><br><span class="line"><span class="comment">     * existing contract code.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Throws(IllegalArgumentException::class)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">verify</span><span class="params">(tx: <span class="type">LedgerTransaction</span>)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在开发一个contract时，Corda提议的三个验证的类型：</p><ul><li>输入与输出个数的校验（Shape Constraint，No. input states, No. output states, command）</li><li>输入与输出的内容的校验（Context Constraint），业务校验</li><li>需要的签名的校验（Required Singer Constraint）</li></ul><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/image-20201202115747238.png" alt="image-20201202115747238"></p><p>按照上图的规则IouContract的实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bootcamp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.corda.core.contracts.Command;</span><br><span class="line"><span class="keyword">import</span> net.corda.core.contracts.CommandData;</span><br><span class="line"><span class="keyword">import</span> net.corda.core.contracts.Contract;</span><br><span class="line"><span class="keyword">import</span> net.corda.core.contracts.ContractState;</span><br><span class="line"><span class="keyword">import</span> net.corda.core.transactions.LedgerTransaction;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IouContract</span> <span class="keyword">implements</span> <span class="title">Contract</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String ID = <span class="string">&quot;bootcamp.IouContract&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">verify</span><span class="params">(LedgerTransaction tx)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、Shape Constraint，No. input states, No. output states, command</span></span><br><span class="line">        <span class="keyword">if</span> (tx.getCommands().size() != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;command size must be one&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Command&lt;CommandData&gt; command = tx.getCommand(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!(command.getValue() <span class="keyword">instanceof</span> Commands.Issue)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;command must be Issue&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(tx.getInputs())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Issue must be not inputs&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tx.getOutputs().size() != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Issue outputs must be one&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ContractState output = tx.getOutput(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 2、Context Constraint</span></span><br><span class="line">        <span class="keyword">if</span> (!(output <span class="keyword">instanceof</span> IouState)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;state must be IouState&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        IouState iouState = (IouState) output;</span><br><span class="line">        <span class="keyword">if</span> (iouState.getAmount() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;issue amount must big than zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、Required Singer Constraint</span></span><br><span class="line">        <span class="keyword">if</span> (!command.getSigners().contains(iouState.getIssuer().getOwningKey())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;issue business must be sing by issuer&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Commands</span> <span class="keyword">extends</span> <span class="title">CommandData</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Issue</span> <span class="keyword">implements</span> <span class="title">Commands</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Flow开发">Flow开发</h2><p>flow有两种</p><ul><li>可以在本地主动启动的flow</li><li>只能通过其他的flow启动的flow</li></ul><p>发起一个交易的flow都是可以在本地主动启动的flow，有以下特点</p><ul><li>需要添加注解<code>@InitiatingFlow</code>来表示他是一个可以初始化的flow</li><li>需要添加注<code>@StartableByRPC</code>或者<code>@StartableByService</code>来说明启动的方式</li><li>flow需要继承自<code>FlowLogic</code>，业务逻辑在call方法中实现</li><li>call方法需要添加<code>@Suspendable</code>注解</li><li>指定notary，校验是否双花</li><li>创建交易，交易中必须包含command，如果有output必须指定contract来进行验证；可以没有input</li><li>然后就是通用的流程，验证交易、收集签名、交易入库</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bootcamp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> co.paralleluniverse.fibers.Suspendable;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.ImmutableList;</span><br><span class="line"><span class="keyword">import</span> net.corda.core.contracts.StateAndRef;</span><br><span class="line"><span class="keyword">import</span> net.corda.core.flows.*;</span><br><span class="line"><span class="keyword">import</span> net.corda.core.identity.Party;</span><br><span class="line"><span class="keyword">import</span> net.corda.core.transactions.SignedTransaction;</span><br><span class="line"><span class="keyword">import</span> net.corda.core.transactions.TransactionBuilder;</span><br><span class="line"><span class="keyword">import</span> net.corda.core.utilities.ProgressTracker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Collections.singletonList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> nicai</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@InitiatingFlow</span></span><br><span class="line"><span class="meta">@StartableByRPC</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IouIssueFlowInitiator</span> <span class="keyword">extends</span> <span class="title">FlowLogic</span>&lt;<span class="title">SignedTransaction</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Party owner;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> amount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IouIssueFlowInitiator</span><span class="params">(Party owner, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.owner = owner;</span><br><span class="line">        <span class="keyword">this</span>.amount = amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ProgressTracker progressTracker = <span class="keyword">new</span> ProgressTracker();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProgressTracker <span class="title">getProgressTracker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> progressTracker;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Suspendable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SignedTransaction <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> FlowException </span>&#123;</span><br><span class="line">        <span class="comment">// We choose our transaction&#x27;s notary (the notary prevents double-spends).</span></span><br><span class="line">        Party notary = getServiceHub().getNetworkMapCache().getNotaryIdentities().get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// We get a reference to our own identity.</span></span><br><span class="line">        Party issuer = getOurIdentity();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We create our new IouState.</span></span><br><span class="line">        IouState iouState = <span class="keyword">new</span> IouState(issuer, owner, amount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We build our transaction.</span></span><br><span class="line">        TransactionBuilder transactionBuilder = <span class="keyword">new</span> TransactionBuilder(notary)</span><br><span class="line"><span class="comment">//                .addInputState()</span></span><br><span class="line">                .addOutputState(iouState, IouContract.ID)</span><br><span class="line">                .addCommand(<span class="keyword">new</span> IouContract.Commands.Issue(), ImmutableList.of(issuer.getOwningKey(), owner.getOwningKey()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We check our transaction is valid based on its contracts.</span></span><br><span class="line">        transactionBuilder.verify(getServiceHub());</span><br><span class="line"></span><br><span class="line">        FlowSession session = initiateFlow(owner);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We sign the transaction with our private key, making it immutable.</span></span><br><span class="line">        SignedTransaction signedTransaction = getServiceHub().signInitialTransaction(transactionBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The counterparty signs the transaction</span></span><br><span class="line">        SignedTransaction fullySignedTransaction = subFlow(<span class="keyword">new</span> CollectSignaturesFlow(signedTransaction, singletonList(session)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We get the transaction notarised and recorded automatically by the platform.</span></span><br><span class="line">        <span class="keyword">return</span> subFlow(<span class="keyword">new</span> FinalityFlow(fullySignedTransaction, singletonList(session)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>被动启动的flow有以下特点：</p><ul><li>需要注解<code>@InitiatedBy(IouIssueFlowInitiator.class)</code>指定谁能启动这个flow</li><li>flow需要继承自<code>FlowLogic</code>，业务逻辑在call方法中实现</li><li>call方法需要添加<code>@Suspendable</code>注解</li><li>需要有实例变量FlowSession，保存调用者的FlowSession</li><li>call方法需要验证交易，然后执行接收交易的标准流程<code>ReceiveFinalityFlow</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bootcamp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> co.paralleluniverse.fibers.Suspendable;</span><br><span class="line"><span class="keyword">import</span> net.corda.core.flows.*;</span><br><span class="line"><span class="keyword">import</span> net.corda.core.transactions.SignedTransaction;</span><br><span class="line"></span><br><span class="line"><span class="meta">@InitiatedBy(IouIssueFlowInitiator.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IouIssueFlowResponder</span> <span class="keyword">extends</span> <span class="title">FlowLogic</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FlowSession otherSide;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IouIssueFlowResponder</span><span class="params">(FlowSession otherSide)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.otherSide = otherSide;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Suspendable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Void <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> FlowException </span>&#123;</span><br><span class="line">        SignedTransaction signedTransaction = subFlow(<span class="keyword">new</span> SignTransactionFlow(otherSide) &#123;</span><br><span class="line">            <span class="meta">@Suspendable</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">checkTransaction</span><span class="params">(SignedTransaction stx)</span> <span class="keyword">throws</span> FlowException </span>&#123;</span><br><span class="line">                <span class="comment">// Implement responder flow transaction checks here</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        subFlow(<span class="keyword">new</span> ReceiveFinalityFlow(otherSide, signedTransaction.getId()));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行">运行</h2><h3 id="打包">打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew deployNodes</span><br></pre></td></tr></table></figure><h3 id="运行所有的节点">运行所有的节点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./build/nodes/runnodes</span><br></pre></td></tr></table></figure><h3 id="启动一个流程">启动一个流程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flow start IouIssueFlow owner: PartyB, amount: 99</span><br></pre></td></tr></table></figure><p>我本地日志如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> ✅   Starting</span><br><span class="line">          Requesting signature by notary service</span><br><span class="line">              Requesting signature by Notary service</span><br><span class="line">              Validating response from Notary service</span><br><span class="line">     ✅   Broadcasting transaction to participants</span><br><span class="line">➡️   Done</span><br><span class="line">Flow completed with result: SignedTransaction(id=14D268667D208D26BF92ADC1F58003DFC9EAF7E036ACB2C2CABC153E627500C0)</span><br></pre></td></tr></table></figure><h3 id="查询生成的数据">查询生成的数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run vaultQuery contractStateType: bootcamp.IouState</span><br></pre></td></tr></table></figure><p>我本地的结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">states:</span><br><span class="line">- state:</span><br><span class="line">    data: !&lt;bootcamp.IouState&gt;</span><br><span class="line">      issuer: &quot;O=PartyA, L=London, C=GB&quot;</span><br><span class="line">      owner: &quot;O=PartyB, L=New York, C=US&quot;</span><br><span class="line">      amount: 99</span><br><span class="line">    contract: &quot;bootcamp.IouContract&quot;</span><br><span class="line">    notary: &quot;O=Notary, L=London, C=GB&quot;</span><br><span class="line">    encumbrance: null</span><br><span class="line">    constraint: !&lt;net.corda.core.contracts.SignatureAttachmentConstraint&gt;</span><br><span class="line">      key: &quot;aSq9DsNNvGhYxYyqA9wd2eduEAZ5AXWgJTbTEw3G5d2maAq8vtLE4kZHgCs5jcB1N31cx1hpsLeqG2ngSysVHqcXhbNts6SkRWDaV7xNcr6MtcbufGUchxredBb6&quot;</span><br><span class="line">  ref:</span><br><span class="line">    txhash: &quot;14D268667D208D26BF92ADC1F58003DFC9EAF7E036ACB2C2CABC153E627500C0&quot;</span><br><span class="line">    index: 0</span><br><span class="line">statesMetadata:</span><br><span class="line">- ref:</span><br><span class="line">    txhash: &quot;14D268667D208D26BF92ADC1F58003DFC9EAF7E036ACB2C2CABC153E627500C0&quot;</span><br><span class="line">    index: 0</span><br><span class="line">  contractStateClassName: &quot;bootcamp.IouState&quot;</span><br><span class="line">  recordedTime: &quot;2020-12-03T09:49:48.373Z&quot;</span><br><span class="line">  consumedTime: null</span><br><span class="line">  status: &quot;UNCONSUMED&quot;</span><br><span class="line">  notary: &quot;O=Notary, L=London, C=GB&quot;</span><br><span class="line">  lockId: null</span><br><span class="line">  lockUpdateTime: null</span><br><span class="line">  relevancyStatus: &quot;RELEVANT&quot;</span><br><span class="line">  constraintInfo:</span><br><span class="line">    constraint:</span><br><span class="line">      key: &quot;aSq9DsNNvGhYxYyqA9wd2eduEAZ5AXWgJTbTEw3G5d2maAq8vtLE4kZHgCs5jcB1N31cx1hpsLeqG2ngSysVHqcXhbNts6SkRWDaV7xNcr6MtcbufGUchxredBb6&quot;</span><br><span class="line">totalStatesAvailable: -1</span><br><span class="line">stateTypes: &quot;UNCONSUMED&quot;</span><br><span class="line">otherResults: []</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="节点可视化工具">节点可视化工具</h1><p>参考网站：<a href="https://docs.corda.net/docs/corda-os/4.6/node-explorer.html">https://docs.corda.net/docs/corda-os/4.6/node-explorer.html</a></p><p>可以下载<a href="https://github.com/corda/node-explorer/releases">node-explorer</a>来查看节点信息。</p><p>第一次打开界面</p><p><img src="https://docs.corda.net/docs/corda-os/4.6/resources/node-explorer/node-explorer-ssh-login.png" alt="login"></p><ul><li>Node Hostname：localhost</li><li>Node Port：<strong>RPC connection address</strong>可以在启动的窗口查看，或者配置文件查看</li><li>RPC Username：在配置文件</li><li>RPC Password:在配置文件查看</li></ul><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/node-explorer-cl.png" alt="RPC connection address"></p><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/image-20201207165759379.png" alt="image-20201207165759379"></p><p>使用spring开发corda：</p><p><a href="https://manosbatsis.github.io/corbeans/">https://manosbatsis.github.io/corbeans/</a></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Corda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Corda </tag>
            
            <tag> CorDapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建一个Corda网络</title>
      <link href="2024/11/22/blockchain/corda/4%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AACorda%E7%BD%91%E7%BB%9C/"/>
      <url>2024/11/22/blockchain/corda/4%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AACorda%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p>在查看此文档之前，先查看<a href="%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AACorDapp.md">如何开发一个CorDapp</a></p><p>参考文档：<a href="https://gitlab.com/cordite/network-map-service">NMS</a>的FAQ.md文件</p><h3 id="1、网络服务启动，docker版的网络服务启动：">1、网络服务启动，docker版的网络服务启动：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=network-map -e NMS_ROOT_CA_FILE_PATH=&quot;&quot; -p 8080:8080 cordite/network-map:latest</span><br></pre></td></tr></table></figure><h3 id="2、启动后打开接口文档用于验证启动是否成功">2、启动后打开接口文档用于验证启动是否成功</h3><p><a href="http://localhost:8080/swagger/#/">http://localhost:8080/swagger/#/</a></p><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/image-20201207175926945.png" alt="image-20201207175926945"></p><h3 id="3、build和配置CorDapp">3、build和配置CorDapp</h3><h4 id="build之前修改build-gradle的配置，修改cordapp节点不给cordapp签名">build之前修改build.gradle的配置，修改cordapp节点不给cordapp签名</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cordapp &#123;</span><br><span class="line">    signing &#123;</span><br><span class="line">        enabled <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行build命令">运行build命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew clean deployNodes</span><br></pre></td></tr></table></figure><h4 id="修改配置删除自动生成的key等文件">修改配置删除自动生成的key等文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pushd build/nodes</span><br><span class="line">for N in */; do</span><br><span class="line">      echo &#x27;compatibilityZoneURL=&quot;http://localhost:8080&quot;&#x27; &gt;&gt; $N/node.conf</span><br><span class="line">      echo &#x27;devModeOptions.allowCompatibilityZone=true&#x27; &gt;&gt; $N/node.conf</span><br><span class="line">      pushd $N</span><br><span class="line">      rm -rf network-parameters nodeInfo-* persistence.mv.db certificates additional-node-infos</span><br><span class="line">      popd</span><br><span class="line">done</span><br><span class="line">popd</span><br></pre></td></tr></table></figure><h3 id="4、把节点注册到网络">4、把节点注册到网络</h3><p>下载网络的truststore</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8080/network-map/truststore -o ~/tmp/network-truststore.jks</span><br></pre></td></tr></table></figure><p>每个节点都初始化注册</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pushd build/nodes</span><br><span class="line">for N in */; do</span><br><span class="line">      pushd $N</span><br><span class="line">      java -jar corda.jar --initial-registration --network-root-truststore ~/tmp/network-truststore.jks --network-root-truststore-password trustpass</span><br><span class="line">      popd</span><br><span class="line">done</span><br><span class="line">popd</span><br></pre></td></tr></table></figure><h3 id="5、指定Notary节点">5、指定Notary节点</h3><h4 id="启动Notary节点">启动Notary节点</h4><p>进到Notary节点的目录下执行,如果没有权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar corda.jar</span><br></pre></td></tr></table></figure><p><em>注意：如果报错：Unable to create logging directory /Users/apple/code/open-source/blockchain/my-corda/logs. Node will now shutdown.说明没有权限，在命令前加sudo即可</em></p><h4 id="指定Notary节点">指定Notary节点</h4><p>1、登陆NMS（network-map-service）并获取token信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOKEN=`curl -X POST &quot;http://localhost:8080//admin/api/login&quot; -H  &quot;accept: text/plain&quot; -H  &quot;Content-Type: application/json&quot; -d &quot;&#123;  \&quot;user\&quot;: \&quot;sa\&quot;,  \&quot;password\&quot;: \&quot;admin\&quot;&#125;&quot;`</span><br></pre></td></tr></table></figure><p>2、上传notary</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pushd build/nodes/Notary</span><br><span class="line">NODEINFO=`ls nodeInfo*`</span><br><span class="line">curl -X POST -H &quot;Authorization: Bearer $TOKEN&quot; -H &quot;accept: text/plain&quot; -H &quot;Content-Type: application/octet-stream&quot; --data-binary @$NODEINFO http://localhost:8080//admin/api/notaries/validating</span><br><span class="line">popd</span><br></pre></td></tr></table></figure><p>在执行上面的命令时，注意自己当前的所在的目录，如果已经在build/nodes/Notary目录下需要退出到bootcamp-cordapp目录</p><h3 id="6、停止Notary节点">6、停止Notary节点</h3><p>在notary节点的shell命令行执行 <code>bye</code></p><h3 id="7、修改notary节点的validating">7、修改notary节点的validating</h3><p>因为在第5步指定Notary的时候调用的是validating接口，所以确认一下notary的配置是的validating是否为true，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">notary &#123;</span><br><span class="line">    validating&#x3D;true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果配置的是<code>validating=false</code>则会报异常：<br><code>[ERROR] 16:25:22+0800 [main] internal.NodeStartupLogging. - Exception during node startup: There is a discrepancy in the configured notary type and the one advertised in the network parameters - shutting down. Configured as validating: false. Advertised as validating: true [errorCode=r8le54, moreInformationAt=https://errors.corda.net/OS/4.3/r8le54]</code></p><h3 id="8、删除Notary节点的network-parameters文件">8、删除Notary节点的network-parameters文件</h3><p>进入到notary节点的目录，删除<code>network-parameters</code>文件</p><h3 id="9、启动notary节点和其他节点">9、启动notary节点和其他节点</h3><p>进入到各个节点的目录，启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar corda.jar</span><br></pre></td></tr></table></figure><h3 id="10、发起交易测试">10、发起交易测试</h3><p>可以下载<a href="https://github.com/corda/node-explorer/releases">node-explorer</a>来查看节点信息并发起交易，我的测试结果如下：</p><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master/image-20201209165525748.png" alt="image-20201209165525748"></p><h3 id="扩展">扩展</h3><p>因为上面的文档是按照</p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> Corda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> Corda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结合交易页面与源码看1INCH的兑换逻辑</title>
      <link href="2024/11/22/blockchain/ethereum/DeFi/%E7%BB%93%E5%90%88%E6%BA%90%E7%A0%81%E7%9C%8B1inch%E7%9A%84%E5%85%91%E6%8D%A2%E9%80%BB%E8%BE%91/"/>
      <url>2024/11/22/blockchain/ethereum/DeFi/%E7%BB%93%E5%90%88%E6%BA%90%E7%A0%81%E7%9C%8B1inch%E7%9A%84%E5%85%91%E6%8D%A2%E9%80%BB%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<h2 id="1INCH的主要优缺点">1INCH的主要优缺点</h2><h3 id="优点">优点</h3><ol><li>支持主流的DEX，计算的兑换路径比较</li><li>支持用户自定义允许的最大划点、交易速度（gas费价格）</li></ol><h3 id="缺点">缺点</h3><ol><li>在计算好兑换路径之后，可能会因为兑换链路过长而导致价格已经变化；此时会回滚交易，浪费了gas费又没有成交</li><li>在交易时如果gas费没有用完，会归1INCH合约所有而不是返还给调用者。</li></ol><h2 id="1INCH的主要逻辑">1INCH的主要逻辑</h2><p>总结成一句话是在以太坊网络上查询其他的去中心化交易所的兑换汇率，然后通过<strong>拆分</strong>或者<strong>过渡令牌</strong>交换的方式选择最佳的兑换方式。</p><h3 id="两种兑换方式">两种兑换方式</h3><h4 id="过渡令牌">过渡令牌</h4><p>如下图ETH/USDT的交易对，1inch算出的最佳方案是先兑换成sUSD，再用sUSD兑换WETH，再用WETH兑换ETH。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210415160725165.png" alt="image-20210415160725165"></p><h4 id="拆分">拆分</h4><p>下面的SNX/USDT交易对的图显示先用过渡令牌，最后一步时拆分到两个交易所兑换SNX。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/SNX:USDT%E6%8B%86%E5%88%86.png" alt="SNX:USDT拆分"></p><h3 id="目前支持的DEX">目前支持的DEX</h3><ul><li><p><a href="https://v1.uniswap.exchange/">Uniswap</a></p></li><li><p><a href="https://uniswap.exchange/">Uniswap V2</a></p></li><li><p><a href="https://kyber.network/">Kyber</a></p></li><li><p><a href="https://bancor.network/">Bancor</a></p></li><li><p><a href="https://oasis.app/">Oasis</a></p></li><li><p><a href="https://curve.fi/">Curve</a></p></li><li><p><a href="https://github.com/1inch/1inchProtocol/blob/master">Mooniswap</a></p></li><li><p><a href="https://trade.dforce.network/">Dforce XSwap</a></p></li><li><p><a href="https://www.shellprotocol.io/">Shell</a></p></li><li><p><a href="https://app.mstable.org/">mStable</a></p></li><li><p><a href="https://chai.money/">CHAI</a></p></li><li><p><a href="https://btu-protocol.com/">BDAI</a></p></li><li><p><a href="https://aave.com/">Aave</a></p></li><li><p><a href="https://fulcrum.trade/">Fulcrum</a></p></li><li><p><a href="https://compound.finance/">Compound</a></p></li><li><p><a href="https://iearn.finance/">Iearn</a></p></li><li><p><a href="https://idle.finance/">Idle</a></p></li><li><p><a href="https://weth.io/ru/">WETH</a></p></li></ul><h2 id="背后的逻辑">背后的逻辑</h2><h3 id="代币源码：1INCH">代币源码：<a href="https://cn.etherscan.com/token/0x111111111117dC0aa78b770fA6A738034120C302">1INCH</a></h3><ul><li>是一个ERC20代币</li><li>总共发行15亿枚</li><li>可以被销毁（必须由持有者允许）</li></ul><p>合约代码如下，没有其他的特殊性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">contract OneInch is ERC20Permit, ERC20Burnable, Ownable &#123;</span><br><span class="line">    constructor(address _owner) public ERC20(&quot;1INCH Token&quot;, &quot;1INCH&quot;) EIP712(&quot;1INCH Token&quot;, &quot;1&quot;) &#123;</span><br><span class="line">        _mint(_owner, 1.5e9 ether);</span><br><span class="line">        transferOwnership(_owner);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function mint(address to, uint256 amount) external onlyOwner &#123;</span><br><span class="line">        _mint(to, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="协议源码：1inchProtocol">协议源码：<a href="https://github.com/1inch/1inchProtocol">1inchProtocol</a></h3><p>此协议描述了1INCH的工作原理（<em>此协议的代码比较多，只看了一下主要的流程忽略了具体的交易所实现</em>），在兑换时的步骤具体如下：</p><ol><li>使用<code>getExpectedReturn</code>方法试算本次的最佳兑换方式</li><li>使用<code>getExpectedReturnWithGas</code>方法试算在考虑gas费的情况下的最佳兑换方式</li><li>使用前面的方法返回的值（兑换多少，和兑换渠道）作为参数调用<code>swap</code>方法进行兑换</li></ol><h4 id="试算兑换金额和路径的getExpectedReturn">试算兑换金额和路径的<code>getExpectedReturn</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; @notice Calculate expected returning amount of &#96;destToken&#96;</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param fromToken (IERC20) Address of token or &#96;address(0)&#96; for Ether</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param destToken (IERC20) Address of token or &#96;address(0)&#96; for Ether</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param amount (uint256) Amount for &#96;fromToken&#96;</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param parts (uint256) Number of pieces source volume could be splitted,</span><br><span class="line">&#x2F;&#x2F;&#x2F; works like granularity, higly affects gas usage. Should be called offchain,</span><br><span class="line">&#x2F;&#x2F;&#x2F; but could be called onchain if user swaps not his own funds, but this is still considered as not safe.</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param flags (uint256) Flags for enabling and disabling some features, default 0</span><br><span class="line">function getExpectedReturn(</span><br><span class="line">    IERC20 fromToken, &#x2F;&#x2F; 从A币</span><br><span class="line">    IERC20 destToken, &#x2F;&#x2F; 兑换成B币</span><br><span class="line">    uint256 amount,   &#x2F;&#x2F; 出多少A币</span><br><span class="line">    uint256 parts,&#x2F;&#x2F; 允许拆分成多少份</span><br><span class="line">    uint256 flags &#x2F;&#x2F; See contants in IOneSplit.sol &#x2F;&#x2F; gas费</span><br><span class="line">)</span><br><span class="line">    public</span><br><span class="line">    view</span><br><span class="line">    returns(</span><br><span class="line">        uint256 returnAmount, &#x2F;&#x2F; 可以兑换多少B币</span><br><span class="line">        uint256[] memory distribution &#x2F;&#x2F; 拆分权重数组，描述的是在哪个交易所兑换多少</span><br><span class="line">    )</span><br><span class="line">&#123;</span><br><span class="line">    (returnAmount, , distribution) &#x3D; getExpectedReturnWithGas(</span><br><span class="line">        fromToken,</span><br><span class="line">        destToken,</span><br><span class="line">        amount,</span><br><span class="line">        parts,</span><br><span class="line">        flags,</span><br><span class="line">        0</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="交换方法swap">交换方法<code>swap</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F; @notice Swap &#96;amount&#96; of first element of &#96;tokens&#96; to the latest element of &#96;destToken&#96;</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param tokens (IERC20[]) Addresses of token or &#96;address(0)&#96; for Ether</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param amount (uint256) Amount for &#96;fromToken&#96;</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param minReturn (uint256) Minimum expected return, else revert</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param distribution (uint256[]) Array of weights for volume distribution returned by &#96;getExpectedReturn&#96;</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param flags (uint256[]) Flags for enabling and disabling some features, default 0</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param referral (address) Address of referral</span><br><span class="line">&#x2F;&#x2F;&#x2F; @param feePercent (uint256) Fees percents normalized to 1e18, limited to 0.03e18 (3%)</span><br><span class="line">function swapWithReferralMulti(</span><br><span class="line">    IERC20[] memory tokens,</span><br><span class="line">    uint256 amount,</span><br><span class="line">    uint256 minReturn,</span><br><span class="line">    uint256[] memory distribution,</span><br><span class="line">    uint256[] memory flags,</span><br><span class="line">    address referral,</span><br><span class="line">    uint256 feePercent</span><br><span class="line">) public payable returns(uint256 returnAmount) &#123;</span><br><span class="line">    require(tokens.length &gt;&#x3D; 2 &amp;&amp; amount &gt; 0, &quot;OneSplit: swap makes no sense&quot;);</span><br><span class="line">    require(flags.length &#x3D;&#x3D; tokens.length - 1, &quot;OneSplit: flags array length is invalid&quot;);</span><br><span class="line">    require((msg.value !&#x3D; 0) &#x3D;&#x3D; tokens.first().isETH(), &quot;OneSplit: msg.value should be used only for ETH swap&quot;);</span><br><span class="line">    require(feePercent &lt;&#x3D; 0.03e18, &quot;OneSplit: feePercent out of range&quot;);</span><br><span class="line"></span><br><span class="line">    uint256 gasStart &#x3D; gasleft();</span><br><span class="line"></span><br><span class="line">    Balances memory beforeBalances &#x3D; _getFirstAndLastBalances(tokens, true);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Transfer From</span><br><span class="line">    if (amount &#x3D;&#x3D; uint256(-1)) &#123;</span><br><span class="line">        amount &#x3D; Math.min(</span><br><span class="line">            tokens.first().balanceOf(msg.sender),</span><br><span class="line">            tokens.first().allowance(msg.sender, address(this))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    tokens.first().universalTransferFromSenderToThis(amount);</span><br><span class="line">    uint256 confirmed &#x3D; tokens.first().universalBalanceOf(address(this)).sub(beforeBalances.ofFromToken);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Swap</span><br><span class="line">    tokens.first().universalApprove(address(oneSplitImpl), confirmed);</span><br><span class="line">    oneSplitImpl.swapMulti.value(tokens.first().isETH() ? confirmed : 0)(</span><br><span class="line">        tokens,</span><br><span class="line">        confirmed,</span><br><span class="line">        minReturn,</span><br><span class="line">        distribution,</span><br><span class="line">        flags</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    Balances memory afterBalances &#x3D; _getFirstAndLastBalances(tokens, false);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Return</span><br><span class="line">    returnAmount &#x3D; afterBalances.ofDestToken.sub(beforeBalances.ofDestToken);</span><br><span class="line">    require(returnAmount &gt;&#x3D; minReturn, &quot;OneSplit: actual return amount is less than minReturn&quot;);</span><br><span class="line">    tokens.last().universalTransfer(referral, returnAmount.mul(feePercent).div(1e18));</span><br><span class="line">    tokens.last().universalTransfer(msg.sender, returnAmount.sub(returnAmount.mul(feePercent).div(1e18)));</span><br><span class="line"></span><br><span class="line">    emit Swapped(</span><br><span class="line">        tokens.first(),</span><br><span class="line">        tokens.last(),</span><br><span class="line">        amount,</span><br><span class="line">        returnAmount,</span><br><span class="line">        minReturn,</span><br><span class="line">        distribution,</span><br><span class="line">        flags,</span><br><span class="line">        referral,</span><br><span class="line">        feePercent</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Return remainder</span><br><span class="line">    if (afterBalances.ofFromToken &gt; beforeBalances.ofFromToken) &#123;</span><br><span class="line">        tokens.first().universalTransfer(msg.sender, afterBalances.ofFromToken.sub(beforeBalances.ofFromToken));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ((flags[0] &amp; (FLAG_ENABLE_CHI_BURN | FLAG_ENABLE_CHI_BURN_BY_ORIGIN)) &gt; 0) &#123;</span><br><span class="line">        uint256 gasSpent &#x3D; 21000 + gasStart - gasleft() + 16 * msg.data.length;</span><br><span class="line">        _chiBurnOrSell(</span><br><span class="line">            ((flags[0] &amp; FLAG_ENABLE_CHI_BURN_BY_ORIGIN) &gt; 0) ? tx.origin : msg.sender,</span><br><span class="line">            (gasSpent + 14154) &#x2F; 41947</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    else if ((flags[0] &amp; FLAG_ENABLE_REFERRAL_GAS_SPONSORSHIP) &gt; 0) &#123;</span><br><span class="line">        uint256 gasSpent &#x3D; 21000 + gasStart - gasleft() + 16 * msg.data.length;</span><br><span class="line">        IReferralGasSponsor(referral).makeGasDiscount(gasSpent, returnAmount, msg.data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> DeFi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> 1INCH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurgerSwap被攻击分析</title>
      <link href="2024/11/22/blockchain/ethereum/Exploit&amp;Attack/BurgerSwap%E8%A2%AB%E6%94%BB%E5%87%BB%E5%88%86%E6%9E%90/"/>
      <url>2024/11/22/blockchain/ethereum/Exploit&amp;Attack/BurgerSwap%E8%A2%AB%E6%94%BB%E5%87%BB%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="事件影响">事件影响</h3><ol start="0"><li><p>本次攻击主要是因为burgerswap的智能合约分层时的验证不足，导致被重入攻击成功</p></li><li><p>BURGER-BNB流动池中的BNB和BURGER都被大量拿走，导致流动性不足</p></li><li><p>因为黑客手里有大量BURGER，后续就算官方补充流动性也会因为黑客抛售BURGER而导致BURGER的价格变低</p></li></ol><h3 id="事件信息">事件信息</h3><p>此项目由<a href="https://drive.google.com/file/d/1MyCx2T_BqHVn_bAtCn4lb2rS4c-wIN5N/view">成都链安</a>进行审计</p><p><a href="https://www.jinse.com/news/blockchain/1102202.html">慢雾安全团队BurgerSwap 被黑分析</a></p><h4 id="地址对应的tag与解释：">地址对应的tag与解释：</h4><table><thead><tr><th>TAG</th><th>解释</th></tr></thead><tbody><tr><td><a href="https://bscscan.com/address/0x16b9a82891338f9bA80E2D6970FddA79D1eb0daE">Pancake-BUSDT-BNB-LP</a></td><td>Pancake的BUSDT-BNB流动池</td></tr><tr><td><a href="https://bscscan.com/address/0xae0f538409063e66ff0e382113cb1a051fc069cd">BS-A-Contract</a></td><td>BuegerSwap攻击者使用的合约地址</td></tr><tr><td><a href="https://bscscan.com/address/0x6c9f2b95ca3432e5ec5bcd9c19de0636a23a4994">BS-Attacker</a></td><td>BuegerSwap攻击者的地址</td></tr><tr><td><a href="https://bscscan.com/address/0xa61275f7fbd1959d2a1c9a298e602929f412d2e1">BS-A-Fake-Token</a></td><td>BuegerSwap攻击者的“假币”</td></tr><tr><td><a href="https://bscscan.com/address/0xae9269f27437f0fcbc232d39ec814844a51d6b8f">BURGER</a></td><td>BURGER Token</td></tr><tr><td><a href="https://bscscan.com/address/0x7ac55ac530f2c29659573bde0700c6758d69e677">Demax-BURGER-BNB-LP</a></td><td>Demax的BURGER-BNB流动池</td></tr><tr><td><a href="https://bscscan.com/address/0x1a21cC36242dC733Cf6BdE2ff19437B0dA7A2B4E">BLP-Fake-BURGER</a></td><td>Burger的假币-BURGER流动池</td></tr><tr><td><a href="https://bscscan.com/address/0x7704c4f30c1203Cab03D87836932F01A9497D6E9">Demax-Fake-BURGER-LP</a></td><td>Demax的假币-BURGER流动池</td></tr><tr><td></td><td></td></tr></tbody></table><h4 id="攻击交易">攻击交易</h4><p><a href="https://bscscan.com/tx/0xac8a739c1f668b13d065d56a03c37a686e0aa1c9339e79fcbc5a2d0a6311e333">https://bscscan.com/tx/0xac8a739c1f668b13d065d56a03c37a686e0aa1c9339e79fcbc5a2d0a6311e333</a></p><h3 id="事件分析">事件分析</h3><p>本次攻击共分成六个步骤：</p><ol><li>攻击者在Pancake的BUSDT-BNB流动池使用闪电贷贷出6,047个BNB</li><li>攻击者用兑换出的6,028个BNB在burgerswap的BURGER-BNB池兑换出92,677（直到目前为止没有任何问题）<ol><li><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210531154523512.png" alt></li></ol></li><li>攻击者使用兑换出的近一半（45,452）的BURGER和自己的token创建一个交易对</li><li>攻击者使用100个自己的token兑换BNB，兑换路径为FakeToken-&gt;BURGER-&gt;BNB<ol><li>在兑换之前，会调用<code>_getAmountsOut</code>先计算出来路径上的金额是多少</li><li>在兑换时会调用&quot;FakeToken&quot;的<code>transfer</code>方法，此时发起重入攻击，使用剩余的45,316个BURGER兑换4,478个BNB</li><li>在攻击完成之后继续兑换路径上的其他<code>transfer</code>方法，原本因为4.2步已经使用45,316个BURGER兑换了4,478个BNB，无法再使用45,452个BURGER兑换出4,478个BNB（因为此时的BNB的价格已经升高，应该兑换的BNB更少才对）；但是因为此处依然使用4.1步骤计算好的兑换金额，并且最底层的兑换逻辑并没有根据<code>x*y=k</code>的公式进行校验，因此导致又以相同的价格兑换了BNB，即兑换出的BNB变多了</li><li><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210531154403820.png" alt></li></ol></li><li>在完成第四步的攻击之后，BURGER-BNB池中的BNB数量变少，BURGER的价格变低，因此攻击者又使用491个的BNB兑换出了108,791个BURGER。（注意第一步使用6,028个BNB才换了92,677个BURGER！）<ol><li><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210531154634930.png" alt></li></ol></li><li>归还闪电贷6,062个BNB（闪电贷归还的金额必须大于借出的BNB）</li></ol><h3 id="事件涉及的源码">事件涉及的源码</h3><h4 id="步骤4的调用DemaxPlatform合约的swapExactTokensForTokens方法如下">步骤4的调用<code>DemaxPlatform</code>合约的<code>swapExactTokensForTokens</code>方法如下:</h4><p>从合约代码中可以看出，在这里已经计算好了所有兑换路径的所有的兑换出的金额是多少，然后调用<code>_swap</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function swapExactTokensForTokens(</span><br><span class="line">    uint256 amountIn,</span><br><span class="line">    uint256 amountOutMin,</span><br><span class="line">    address[] calldata path,</span><br><span class="line">    address to,</span><br><span class="line">    uint256 deadline</span><br><span class="line">) external ensure(deadline) returns (uint256[] memory amounts) &#123;</span><br><span class="line"></span><br><span class="line">    uint256 percent &#x3D; _getSwapFeePercent();</span><br><span class="line">    &#x2F;&#x2F; 计算路径上的token的out</span><br><span class="line">    amounts &#x3D; _getAmountsOut(amountIn, path, percent);</span><br><span class="line">    &#x2F;&#x2F; 最后一个目标token的数量必须大于等于期待的最小兑换数量</span><br><span class="line">    require(amounts[amounts.length - 1] &gt;&#x3D; amountOutMin, &#39;DEMAX PLATFORM : INSUFFICIENT_OUTPUT_AMOUNT&#39;);</span><br><span class="line">    address pair &#x3D; DemaxSwapLibrary.pairFor(FACTORY, path[0], path[1]);</span><br><span class="line">    &#x2F;&#x2F; 先收取交易费</span><br><span class="line">    _innerTransferFrom(</span><br><span class="line">        path[0],</span><br><span class="line">        msg.sender,</span><br><span class="line">        pair,</span><br><span class="line">        SafeMath.mul(amountIn, SafeMath.sub(PERCENT_DENOMINATOR, percent)) &#x2F; PERCENT_DENOMINATOR</span><br><span class="line">    );</span><br><span class="line">    &#x2F;&#x2F; 兑换已经计算好的金额和path</span><br><span class="line">    _swap(amounts, path, to);</span><br><span class="line">    &#x2F;&#x2F; 把收取交易费后的金额转给pair</span><br><span class="line">    _innerTransferFrom(path[0], msg.sender, pair, SafeMath.mul(amounts[0], percent) &#x2F; PERCENT_DENOMINATOR);</span><br><span class="line">    _swapFee(amounts, path, percent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤4中调用的DemaxPlatform合约的-swap方法如下：">步骤4中调用的<code>DemaxPlatform</code>合约的<code>_swap</code>方法如下：</h4><p>下面的代码展示了在计算好金额之后，如果满足兑换之前的校验就按照计算好的金额在指定的路径进行兑换；最终兑换的逻辑会调用<code>IDemaxPair</code>的<code>swap</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function _swap(</span><br><span class="line">    uint256[] memory amounts,</span><br><span class="line">    address[] memory path,</span><br><span class="line">    address _to</span><br><span class="line">) internal &#123;</span><br><span class="line">    require(!isPause, &quot;DEMAX PAUSED&quot;);</span><br><span class="line">    &#x2F;&#x2F; 做一些swap之前的校验</span><br><span class="line">    require(swapPrecondition(path[path.length - 1]), &#39;DEMAX PLATFORM : CHECK DGAS&#x2F;TOKEN TO VALUE FAIL&#39;);</span><br><span class="line">    for (uint256 i; i &lt; path.length - 1; i++) &#123;</span><br><span class="line">        (address input, address output) &#x3D; (path[i], path[i + 1]);</span><br><span class="line">        require(swapPrecondition(input), &#39;DEMAX PLATFORM : CHECK DGAS&#x2F;TOKEN VALUE FROM FAIL&#39;);</span><br><span class="line">        require(IDemaxConfig(CONFIG).checkPair(input, output), &#39;DEMAX PLATFORM : SWAP PAIR CONFIG CHECK FAIL&#39;);</span><br><span class="line">        (address token0, address token1) &#x3D; DemaxSwapLibrary.sortTokens(input, output);</span><br><span class="line">        uint256 amountOut &#x3D; amounts[i + 1];</span><br><span class="line">        (uint256 amount0Out, uint256 amount1Out) &#x3D; input &#x3D;&#x3D; token0</span><br><span class="line">            ? (uint256(0), amountOut)</span><br><span class="line">            : (amountOut, uint256(0));</span><br><span class="line">        address to &#x3D; i &lt; path.length - 2 ? DemaxSwapLibrary.pairFor(FACTORY, output, path[i + 2]) : _to;</span><br><span class="line">        &#x2F;&#x2F; 调用DemaxPair的swap方法，这里直接传递了amount0Out和amount1Out两个金额</span><br><span class="line">        IDemaxPair(DemaxSwapLibrary.pairFor(FACTORY, input, output)).swap(amount0Out, amount1Out, to, new bytes(0));</span><br><span class="line">        if (amount0Out &gt; 0)</span><br><span class="line">            _transferNotify(DemaxSwapLibrary.pairFor(FACTORY, input, output), to, token0, amount0Out);</span><br><span class="line">        if (amount1Out &gt; 0)</span><br><span class="line">            _transferNotify(DemaxSwapLibrary.pairFor(FACTORY, input, output), to, token1, amount1Out);</span><br><span class="line">    &#125;</span><br><span class="line">    emit SwapToken(_to, path[0], path[path.length - 1], amounts[0], amounts[path.length - 1]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="合约DemaxPair的swap方法如下：">合约<code>DemaxPair</code>的<code>swap</code>方法如下：</h4><p>此合约直接根据传入的金额进行代币的<code>_safeTransfer</code>，最终只是校验了一下<code>amount0In &gt; 0 || amount1In &gt; 0</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; this low-level function should be called from a contract which performs important safety checks</span><br><span class="line">function swap(</span><br><span class="line">    uint256 amount0Out,</span><br><span class="line">    uint256 amount1Out,</span><br><span class="line">    address to,</span><br><span class="line">    bytes calldata data</span><br><span class="line">) external onlyPlatform lock &#123;</span><br><span class="line">    require(amount0Out &gt; 0 || amount1Out &gt; 0, &#39;DEMAX PAIR : INSUFFICIENT_OUTPUT_AMOUNT&#39;);</span><br><span class="line">    (uint112 _reserve0, uint112 _reserve1, ) &#x3D; getReserves(); &#x2F;&#x2F; gas savings</span><br><span class="line">    require(amount0Out &lt; _reserve0 &amp;&amp; amount1Out &lt; _reserve1, &#39;DEMAX PAIR :  INSUFFICIENT_LIQUIDITY&#39;);</span><br><span class="line">    uint256 balance0;</span><br><span class="line">    uint256 balance1;</span><br><span class="line">    &#123;</span><br><span class="line">        address _token0 &#x3D; token0;</span><br><span class="line">        address _token1 &#x3D; token1;</span><br><span class="line">        require(to !&#x3D; _token0 &amp;&amp; to !&#x3D; _token1, &#39;DEMAX PAIR : INVALID_TO&#39;);</span><br><span class="line">        if (amount0Out &gt; 0) _safeTransfer(_token0, to, amount0Out);</span><br><span class="line">        if (amount1Out &gt; 0) _safeTransfer(_token1, to, amount1Out);</span><br><span class="line">        &#x2F;&#x2F; 因为在demaxPlatform调用此方法时data传入的是空，因此这个地方不会被调用</span><br><span class="line">        if (data.length &gt; 0) IDemaxCallee(to).demaxCall(msg.sender, amount0Out, amount1Out, data);</span><br><span class="line">        balance0 &#x3D; _balanceOf(_token0, address(this));</span><br><span class="line">        balance1 &#x3D; _balanceOf(_token1, address(this));</span><br><span class="line">    &#125;</span><br><span class="line">    uint256 amount0In &#x3D; balance0 &gt; _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;</span><br><span class="line">    uint256 amount1In &#x3D; balance1 &gt; _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;</span><br><span class="line">    uint256 _amount0Out &#x3D; amount0Out;</span><br><span class="line">    uint256 _amount1Out &#x3D; amount1Out;</span><br><span class="line">    require(amount0In &gt; 0 || amount1In &gt; 0, &#39;DEMAX PAIR : INSUFFICIENT_INPUT_AMOUNT&#39;);</span><br><span class="line">    _update(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">    emit Swap(msg.sender, amount0In, amount1In, _amount0Out, _amount1Out, to);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="作为对比uniswapV2的UniswapV2Pair的swap方法如下：">作为对比uniswapV2的<code>UniswapV2Pair</code>的<code>swap</code>方法如下：</h5><p>在最后验证了新的x’和y‘的乘积必须大于等于原来的x和y的乘积：<code>x‘ * y‘ &gt;= x * y</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; this low-level function should be called from a contract which performs important safety checks</span><br><span class="line">function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock &#123;</span><br><span class="line">    require(amount0Out &gt; 0 || amount1Out &gt; 0, &#39;UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT&#39;);</span><br><span class="line">    (uint112 _reserve0, uint112 _reserve1,) &#x3D; getReserves(); &#x2F;&#x2F; gas savings</span><br><span class="line">    require(amount0Out &lt; _reserve0 &amp;&amp; amount1Out &lt; _reserve1, &#39;UniswapV2: INSUFFICIENT_LIQUIDITY&#39;);</span><br><span class="line"></span><br><span class="line">    uint balance0;</span><br><span class="line">    uint balance1;</span><br><span class="line">    &#123; &#x2F;&#x2F; scope for _token&#123;0,1&#125;, avoids stack too deep errors</span><br><span class="line">    address _token0 &#x3D; token0;</span><br><span class="line">    address _token1 &#x3D; token1;</span><br><span class="line">    require(to !&#x3D; _token0 &amp;&amp; to !&#x3D; _token1, &#39;UniswapV2: INVALID_TO&#39;);</span><br><span class="line">    if (amount0Out &gt; 0) _safeTransfer(_token0, to, amount0Out); &#x2F;&#x2F; optimistically transfer tokens</span><br><span class="line">    if (amount1Out &gt; 0) _safeTransfer(_token1, to, amount1Out); &#x2F;&#x2F; optimistically transfer tokens</span><br><span class="line">    if (data.length &gt; 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);</span><br><span class="line">    balance0 &#x3D; IERC20(_token0).balanceOf(address(this));</span><br><span class="line">    balance1 &#x3D; IERC20(_token1).balanceOf(address(this));</span><br><span class="line">    &#125;</span><br><span class="line">    uint amount0In &#x3D; balance0 &gt; _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;</span><br><span class="line">    uint amount1In &#x3D; balance1 &gt; _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;</span><br><span class="line">    require(amount0In &gt; 0 || amount1In &gt; 0, &#39;UniswapV2: INSUFFICIENT_INPUT_AMOUNT&#39;);</span><br><span class="line">    &#123; &#x2F;&#x2F; scope for reserve&#123;0,1&#125;Adjusted, avoids stack too deep errors</span><br><span class="line">    uint balance0Adjusted &#x3D; balance0.mul(1000).sub(amount0In.mul(3));</span><br><span class="line">    uint balance1Adjusted &#x3D; balance1.mul(1000).sub(amount1In.mul(3));</span><br><span class="line">    &#x2F;&#x2F; x‘ * y‘ &#x3D; x * y</span><br><span class="line">    require(balance0Adjusted.mul(balance1Adjusted) &gt;&#x3D; uint(_reserve0).mul(_reserve1).mul(1000**2), &#39;UniswapV2: K&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _update(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">    emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="作为对比pancakeswap的PancakePair的swap方法代码如下：">作为对比pancakeswap的<code>PancakePair</code>的<code>swap</code>方法代码如下：</h5><p>在最后不仅有校验进入的金额大于出去的金额，也有乘积的校验。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; this low-level function should be called from a contract which performs important safety checks</span><br><span class="line">function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock &#123;</span><br><span class="line">    &#x2F;&#x2F; 至少有一个token兑换出的金额大于0</span><br><span class="line">    require(amount0Out &gt; 0 || amount1Out &gt; 0, &#39;Pancake: INSUFFICIENT_OUTPUT_AMOUNT&#39;);</span><br><span class="line">    &#x2F;&#x2F; 获取当前lp池中的两个token的储备数量</span><br><span class="line">    (uint112 _reserve0, uint112 _reserve1,) &#x3D; getReserves(); &#x2F;&#x2F; gas savings</span><br><span class="line">    &#x2F;&#x2F; 兑换出的token数量必须小于当前池中的token数量</span><br><span class="line">    require(amount0Out &lt; _reserve0 &amp;&amp; amount1Out &lt; _reserve1, &#39;Pancake: INSUFFICIENT_LIQUIDITY&#39;);</span><br><span class="line"></span><br><span class="line">    uint balance0;</span><br><span class="line">    uint balance1;</span><br><span class="line">    &#123; &#x2F;&#x2F; scope for _token&#123;0,1&#125;, avoids stack too deep errors</span><br><span class="line">    address _token0 &#x3D; token0;</span><br><span class="line">    address _token1 &#x3D; token1;</span><br><span class="line">    &#x2F;&#x2F; 接收兑换token的地址不能是当前lp池中的token中的任意一个</span><br><span class="line">    require(to !&#x3D; _token0 &amp;&amp; to !&#x3D; _token1, &#39;Pancake: INVALID_TO&#39;);</span><br><span class="line">    &#x2F;&#x2F; 如果token0兑换出的金额大于0，则把amount0Out转账给指定的地址to</span><br><span class="line">    if (amount0Out &gt; 0) _safeTransfer(_token0, to, amount0Out); &#x2F;&#x2F; optimistically transfer tokens</span><br><span class="line">    if (amount1Out &gt; 0) _safeTransfer(_token1, to, amount1Out); &#x2F;&#x2F; optimistically transfer tokens</span><br><span class="line">    &#x2F;&#x2F; 如果参数data不为空，则调用合约to的pancakeCall方法；接下来就是合约to的表演了</span><br><span class="line">    if (data.length &gt; 0) IPancakeCallee(to).pancakeCall(msg.sender, amount0Out, amount1Out, data);</span><br><span class="line">    &#x2F;&#x2F; 当合约to表演完之后，分别获取当前lp在两个token中的余额</span><br><span class="line">    balance0 &#x3D; IERC20(_token0).balanceOf(address(this));</span><br><span class="line">    balance1 &#x3D; IERC20(_token1).balanceOf(address(this));</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 如果新的余额大于（当前存储量-兑换出的数量），则amount0In等于新的余额 - （当前存储量-兑换出的数量）</span><br><span class="line">    &#x2F;&#x2F; amount0In和amount1In是在计算实际进来了多少</span><br><span class="line">    uint amount0In &#x3D; balance0 &gt; _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;</span><br><span class="line">    uint amount1In &#x3D; balance1 &gt; _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;</span><br><span class="line">    &#x2F;&#x2F; 如果两个都是0，说明新的balance都不大于（存储量-兑换出的金额）；这说明没有进来，那么就报错；</span><br><span class="line">    &#x2F;&#x2F; 其实这个校验是在说打给当前lp池的token数量必须大于兑换出去的数量</span><br><span class="line">    require(amount0In &gt; 0 || amount1In &gt; 0, &#39;Pancake: INSUFFICIENT_INPUT_AMOUNT&#39;);</span><br><span class="line">    &#123; &#x2F;&#x2F; scope for reserve&#123;0,1&#125;Adjusted, avoids stack too deep errors</span><br><span class="line">    &#x2F;&#x2F; 计算调整后的balance，此处会收取千分之二的费用</span><br><span class="line">    uint balance0Adjusted &#x3D; balance0.mul(1000).sub(amount0In.mul(2));</span><br><span class="line">    uint balance1Adjusted &#x3D; balance1.mul(1000).sub(amount1In.mul(2));</span><br><span class="line">    &#x2F;&#x2F; 调用此方法后的两个token的积必须大于等于原始储备的两个token的积；即还回来的token在收完手续费之后必须大于借出去的</span><br><span class="line">    require(balance0Adjusted.mul(balance1Adjusted) &gt;&#x3D; uint(_reserve0).mul(_reserve1).mul(1000**2), &#39;Pancake: K&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _update(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">    emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="合约DemaxPair的-safeTransfer方法如下：">合约<code>DemaxPair</code>的<code>_safeTransfer</code>方法如下：</h4><p>此方法会调用token的<code>transfer</code>方法，而本次的攻击就是攻击者自己的token的<code>transfer</code>方法又调用了<code>DemaxPlatform</code>合约的<code>swapExactTokensForTokens</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function _safeTransfer(</span><br><span class="line">    address token,</span><br><span class="line">    address to,</span><br><span class="line">    uint256 value</span><br><span class="line">) private &#123;</span><br><span class="line">    &#x2F;&#x2F; 调用token的transfer方法</span><br><span class="line">    (bool success, bytes memory data) &#x3D; token.call(abi.encodeWithSelector(SELECTOR, to, value));</span><br><span class="line">    require(success &amp;&amp; (data.length &#x3D;&#x3D; 0 || abi.decode(data, (bool))), &#39;DEMAX PAIR : TRANSFER_FAILED&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="官方后续处理">官方后续处理</h3><ol><li>创建新的**$cBURGER**并空头给满足条件的原$BURGER的持有者</li><li>使用burgerswap的收入以及原本要奖励给团队的burger建造一个价值700万美元的奖励池</li></ol>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> Exploit&amp;Attack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> solidity </tag>
            
            <tag> 智能合约 </tag>
            
            <tag> Exploit&amp;Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Belt Finance事件分析</title>
      <link href="2024/11/22/blockchain/ethereum/Exploit&amp;Attack/Belt%20Finance%E4%BA%8B%E4%BB%B6%E5%88%86%E6%9E%90/"/>
      <url>2024/11/22/blockchain/ethereum/Exploit&amp;Attack/Belt%20Finance%E4%BA%8B%E4%BB%B6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="事件总结与影响">事件总结与影响</h3><ol><li>本次一共通过8次交易，每次交易循环同样的流程7次</li><li>导致beltBUSD的价格从1.018262跌到0.800687，beltBUSD金库损失了21.36%的存款</li><li>导致4Belt LP 的价格从1.017904跌到0.961767，4Belt LP 的持有者损失了5.51%</li></ol><h3 id="事件信息">事件信息</h3><p>Belt Finance的审计由<a href="https://www.sooho.io/">SOOHO</a>和<a href="https://audit.haechi.io/">HAECHI AUDIT</a>提供</p><h4 id="涉及到的合约">涉及到的合约</h4><table><thead><tr><th>TAG</th><th>解释</th></tr></thead><tbody><tr><td><a href="https://bscscan.com/address/0xbfaaba3337c51e97ed4546b4631e8efdbab63077">BF-Attacker</a></td><td>Belt Finance事件交易发起人地址</td></tr><tr><td><a href="https://bscscan.com/address/0x4eb362934d56f2669a712cb92d316cd465921b5d">BF-A-Contract</a></td><td>Belt Finance事件交易发起人使用的合约地址</td></tr><tr><td><a href="https://bscscan.com/address/0x2354ef4DF11afacb85a5C7f98B624072ECcddbB1">PCS-USDC/BUSD</a></td><td>Pancake Swap的USDC/BUSD交易对</td></tr><tr><td><a href="https://bscscan.com/address/0x7EFaEf62fDdCCa950418312c6C91Aef321375A00">PCS-BUSDT/BUSD</a></td><td>Pancake Swap的BUSDT/BUSD交易对</td></tr><tr><td><a href="https://bscscan.com/address/0x66fdb2eccfb58cf098eaa419e5efde841368e489">PCS-DAI/BUSD</a></td><td>Pancake Swap的DAI/BUSD交易对</td></tr><tr><td><a href="https://bscscan.com/address/0x05faf555522Fa3F93959F86B41A3808666093210">PCS-UST/BUSD</a></td><td>Pancake Swap的UST/BUSD交易对</td></tr><tr><td><a href="https://bscscan.com/address/0x133ee93FE93320e1182923E1a640912eDE17C90C">PCS-VAI/BUSD</a></td><td>Pancake Swap的VAI/BUSD交易对</td></tr><tr><td><a href="https://bscscan.com/address/0x7752e1FA9F3a2e860856458517008558DEb989e3">PCS-ALPACA/BUSD</a></td><td>Pancake Swap的ALPACA/BUSD交易对</td></tr><tr><td><a href="https://bscscan.com/address/0x8937DD570e3cb32dF77e39C0805D17E88F9d14AE">BF-Attacker-2 </a></td><td>Belt Finance事件最终收款地址</td></tr><tr><td><a href="https://bscscan.com/address/0x9171bf7c050ac8b4cf7835e51f7b4841dfb2ccd0">beltBUSD</a></td><td></td></tr><tr><td><a href="https://bscscan.com/address/0x53a53a9e10abe9d18d009f6f962f51dc8b1d6edc">bVenusBUSD</a></td><td></td></tr><tr><td><a href="https://bscscan.com/address/0x95c78222b3d6e262426483d42cfa53685a67ab9d">vBUSD</a></td><td>Token Venus BUSD</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h4 id="交易：">交易：</h4><p>本次事件Attacker使用相同的方式进行了8次交易：</p><p><a href="https://bscscan.com/tx/0x50b0c05dd326022cae774623e5db17d8edbc41b4f064a3bcae105f69492ceadc">https://bscscan.com/tx/0x50b0c05dd326022cae774623e5db17d8edbc41b4f064a3bcae105f69492ceadc</a></p><p><a href="https://bscscan.com/tx/0xc4d4156aab1fca85c99e85352b836274d3c53bafe98a2c9867b68950e1eafde9">https://bscscan.com/tx/0xc4d4156aab1fca85c99e85352b836274d3c53bafe98a2c9867b68950e1eafde9</a></p><p><a href="https://bscscan.com/tx/0xb57acfeab13d52664416aa2ada9b490e340292731fced049fc8c4a730b7af700">https://bscscan.com/tx/0xb57acfeab13d52664416aa2ada9b490e340292731fced049fc8c4a730b7af700</a></p><p><a href="https://bscscan.com/tx/0xcca1ebf01e694bb4c447f6018eebb34a3b829cff9ea1ec5fce236eb3cc2ef99c">https://bscscan.com/tx/0xcca1ebf01e694bb4c447f6018eebb34a3b829cff9ea1ec5fce236eb3cc2ef99c</a></p><p><a href="https://bscscan.com/tx/0x7719e1bae25dbe80539edea37c962e941ec4141145e6eabe63540b7178ffd0d0">https://bscscan.com/tx/0x7719e1bae25dbe80539edea37c962e941ec4141145e6eabe63540b7178ffd0d0</a></p><p><a href="https://bscscan.com/tx/0xd790026feda9a16646647e9df0779dc4a7b173053369847691b8f3f678da1f66">https://bscscan.com/tx/0xd790026feda9a16646647e9df0779dc4a7b173053369847691b8f3f678da1f66</a></p><p><a href="https://bscscan.com/tx/0xf598e092ab82ce08798f9dab7ea6ade64f152aa91db897f3449b23ab591baa1d">https://bscscan.com/tx/0xf598e092ab82ce08798f9dab7ea6ade64f152aa91db897f3449b23ab591baa1d</a></p><p><a href="https://bscscan.com/tx/0x7b3b727a56d1649ee325c42416a1199f4a9b4f4eb024a60b5848a7b1485953b1">https://bscscan.com/tx/0x7b3b727a56d1649ee325c42416a1199f4a9b4f4eb024a60b5848a7b1485953b1</a></p><h3 id="事件分析">事件分析</h3><p>与AutoShark和BurgerSwap一样，本次攻击也是始于从PancakeSwap的闪电贷。<a href="https://bscscan.com/tx/0xf598e092ab82ce08798f9dab7ea6ade64f152aa91db897f3449b23ab591baa1d">0xf598…91baa1d</a>交易的攻击过程如下：</p><ol><li>从PancakeSwap的多个流动池借出大量（390,379,325）BNB<ul><li><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210601163230515.png" alt="闪电贷"></li></ul></li><li>将200,379,325个BUSD铸造成235,391,847个beltBUSD<ul><li><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210601163352965.png" alt></li></ul></li><li>使用190,000,000个BUSD兑换168,535,055个BUSDT<ul><li><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210601163634344.png" alt></li><li>这次兑换导致<strong><a href="http://Ellipsis.fi">Ellipsis.fi</a></strong>的<strong>3pool</strong>增值了3%</li></ul></li><li>burn掉235,391,847个beltBUSD，然后获得了201,383,385个BUSD<ul><li><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210601164046252.png" alt></li><li>注意此步骤使用的beltBUSD是第二部铸造的，铸造时使用了200,379,325个BUSD，此时burn之后却获得了201,383,385个BUSD，多了1,004,060 BUSD</li></ul></li><li>使用第三步兑换出的168,535,055个BUSDT兑换出189,339,377个BUSD<ul><li><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210601164413706.png" alt></li><li>这一步兑换出了189,339,377个BUSD比第三步使用的190,000,000个BUSD少了660,623个BUSD</li><li>但是第四步额外获得的1,004,060个BUSD比660,623个BUSD多了343,437个BUSD（即通过2-5步获利了343,437个BUSD）</li></ul></li><li>继续重复2-5步骤的交易（数字不完全一样，但是逻辑一样），最终额外获得7,132,461个BUSD</li><li>还闪电贷（闪电贷因为还有手续费还的必须比借的多）<ul><li><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210601165446226.png" alt></li></ul></li><li>获利离场，最终转移了1,320,605个BUSD<ul><li><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210601165515422.png" alt></li></ul></li></ol><h3 id="涉及到的代码">涉及到的代码</h3><h4 id="第二步是调用beltBUSD合约的deposit方法：">第二步是调用beltBUSD合约的<code>deposit</code>方法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function deposit(uint256 _amount)</span><br><span class="line">external</span><br><span class="line">nonReentrant</span><br><span class="line">&#123;</span><br><span class="line">    require(_amount &gt; 0, &quot;deposit must be greater than 0&quot;);</span><br><span class="line">    pool &#x3D; calcPoolValueInToken();</span><br><span class="line">    &#x2F;&#x2F; 把token（即BUSD）转给当前的合约</span><br><span class="line">    IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);</span><br><span class="line">    &#x2F;&#x2F; 计算所占的份数</span><br><span class="line">    uint256 shares &#x3D; 0;</span><br><span class="line">    if (pool &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        shares &#x3D; _amount;</span><br><span class="line">        pool &#x3D; _amount;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;0.1%(999&#x2F;1000) enterance fee </span><br><span class="line">        shares &#x3D; (_amount.mul(totalSupply())).div(pool).mul(999).div(1000);</span><br><span class="line">    &#125;</span><br><span class="line">    pool &#x3D; calcPoolValueInToken();</span><br><span class="line">    &#x2F;&#x2F; 铸造bBUSD给发送者</span><br><span class="line">    _mint(msg.sender, shares);</span><br><span class="line">    rebalance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第四步是调用beltBUSD合约的withdraw方法：">第四步是调用beltBUSD合约的<code>withdraw</code>方法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function withdraw(uint256 _shares)</span><br><span class="line">external</span><br><span class="line">nonReentrant</span><br><span class="line">&#123;</span><br><span class="line">    require(_shares &gt; 0, &quot;withdraw must be greater than 0&quot;);</span><br><span class="line">    &#x2F;&#x2F; 用户的余额</span><br><span class="line">    uint256 ibalance &#x3D; balanceOf(msg.sender);</span><br><span class="line">    &#x2F;&#x2F; 取出的份额不能超过余额</span><br><span class="line">    require(_shares &lt;&#x3D; ibalance, &quot;insufficient balance&quot;);</span><br><span class="line">    &#x2F;&#x2F; 计算当前合约和venus合约的BUSD之和</span><br><span class="line">    pool &#x3D; calcPoolValueInToken();</span><br><span class="line">    &#x2F;&#x2F; 根据份额和总发行量计算本次应该取出的BUSD金额</span><br><span class="line">    uint256 r &#x3D; (pool.mul(_shares)).div(totalSupply());</span><br><span class="line">    &#x2F;&#x2F; 销毁当前的token，即beltBUSD</span><br><span class="line">    _burn(msg.sender, _shares);</span><br><span class="line">    &#x2F;&#x2F; 获取当前地址的BUSD余额</span><br><span class="line">    uint256 b &#x3D; IERC20(token).balanceOf(address(this));</span><br><span class="line">    &#x2F;&#x2F; 如果当前合约的BUSD余额不够，则先从venus中提现出不够的那一部分</span><br><span class="line">    if (b &lt; r) &#123;</span><br><span class="line">        _withdrawSome(r.sub(b));</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 把所有的需要提现的BUSD转移给用户</span><br><span class="line">    IERC20(token).safeTransfer(msg.sender, r);</span><br><span class="line">    pool &#x3D; calcPoolValueInToken();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="提现时计算Eps3pool的稳定币数量的方法">提现时计算Eps3pool的稳定币数量的方法</h4><p>此方法是导致攻击成功的关键因素，在计算各个稳定币的数量时，直接使用了稳定币合约的balanceOf方法会使计算的值变大，因此再burn掉bBUSD时才能获得较多的BUSD。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function eps3ToWant() public view returns (uint256) &#123;</span><br><span class="line">    &#x2F;&#x2F; 获取ellipsisSwap的busd、usdc和usdt余额；</span><br><span class="line">    &#x2F;&#x2F; 在第三步时因为进行了一次兑换（BUSD-&gt;BUSDT）所以ellipsisSwapAddress地址的BUSD便多了，BUSDT变少了</span><br><span class="line">    &#x2F;&#x2F; 但是因为增加的BUSD比减少的BUSDT要更多，因此整体来说这三个稳定币只和变大了</span><br><span class="line">    uint256 busdBal &#x3D; IERC20(busdAddress).balanceOf(ellipsisSwapAddress);</span><br><span class="line">    uint256 usdcBal &#x3D; IERC20(usdcAddress).balanceOf(ellipsisSwapAddress);</span><br><span class="line">    uint256 usdtBal &#x3D; IERC20(usdtAddress).balanceOf(ellipsisSwapAddress);</span><br><span class="line">    &#x2F;&#x2F; 当前地址在ellipsisStake的有多少的Eps3</span><br><span class="line">    (uint256 curEps3Bal, )&#x3D; LpTokenStaker(ellipsisStakeAddress).userInfo(poolId, address(this));</span><br><span class="line">    &#x2F;&#x2F; Eps3一共有少个</span><br><span class="line">    uint256 totEps3Bal &#x3D; IERC20(eps3Address).totalSupply();</span><br><span class="line">    &#x2F;&#x2F; 根据当前地址的占比和busd、usdc和usdt余额，计算当前地址的busd、usdc、usdt之和</span><br><span class="line">    return busdBal.mul(curEps3Bal).div(totEps3Bal)</span><br><span class="line">        .add(</span><br><span class="line">            usdcBal.mul(curEps3Bal).div(totEps3Bal)</span><br><span class="line">        )</span><br><span class="line">        .add(</span><br><span class="line">            usdtBal.mul(curEps3Bal).div(totEps3Bal)</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="事件处理结果">事件处理结果</h3><ol><li>修改获取Eps3Pool中稳定币的方法，使用池中的方法获取而不是使用外部的ERC20代币的balanceOf方法</li></ol><p><img src="https://miro.medium.com/max/1400/0*0yEzBDQ0QYdmYDdr" alt></p><p>2、 在计算Eps3Pool对应的稳定币数量的方法中增加校验，校验的具体实现如上图，主要是校验“三个稳定币的最大的数量和最小的数量相差不能太多”。校验不成功就不允许提现</p><p><img src="https://miro.medium.com/max/1400/0*KomCpc0eglB7iubt" alt></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> Exploit&amp;Attack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> solidity </tag>
            
            <tag> 智能合约 </tag>
            
            <tag> Exploit&amp;Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AutoShark Finance被套利分析</title>
      <link href="2024/11/22/blockchain/ethereum/Exploit&amp;Attack/AutoShark-Finance%E8%A2%AB%E5%A5%97%E5%88%A9%E5%88%86%E6%9E%90/"/>
      <url>2024/11/22/blockchain/ethereum/Exploit&amp;Attack/AutoShark-Finance%E8%A2%AB%E5%A5%97%E5%88%A9%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="事件总结与影响">事件总结与影响</h3><ol><li>此次事件“攻击者”通过闪电贷借出大量BNB再利用SHARK合约逻辑漏洞操纵BNB-SHARK池来获得大量SHARK，最后把获得的SHARK兑换成BNB获利</li><li>用户质押的SHARK数量没有损失</li><li>因为生成了大量的SHARK然后将其抛售导致SHARK价格下跌，官方给的数据是从1.2跌倒0.01，目前的价格如下图：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210528145633368.png" alt></p><h3 id="事件信息">事件信息</h3><p><a href="https://medium.com/autosharkfin/how-autoshark-got-economically-exploited-3c644de5073a">AutoShark官方提供：AutoShark如何被经济利用</a></p><p><a href="https://www.jinse.com/news/blockchain/1099838.html">慢雾：AutoShark Finance 被黑分析</a></p><p><a href="https://mp.weixin.qq.com/s/lGl4mkk4MAwxaNSPeFcfYw">PeckShield分析</a></p><p><a href="https://bscscan.com/tx/0xfbe65ad3eed6b28d59bf6043debf1166d3420d214020ef54f12d2e0583a66f13">交易信息</a></p><p><a href="https://pantherswap.com/">pantherswap</a></p><p><a href="https://autoshark.finance/">autoshark.finance</a></p><p><a href="https://exchange.pancakeswap.finance/#/swap">pancakeswap</a></p><p>当前项目正在审计中，由<a href="https://www.watchpug.org/">WatchPug</a>公司<br><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210604175515326.png" alt></p><h3 id="事件分析">事件分析</h3><p>这里直接复用<a href="https://www.jinse.com/news/blockchain/1099838.html">慢雾安全团队</a>的分析步骤，我会结合token的流转和源码和具体的合约地址等再进一步解释。</p><h4 id="为了方便分析，我给涉及到的地址打上了对应的功能标签：">为了方便分析，我给涉及到的地址打上了对应的功能标签：</h4><table><thead><tr><th>address对应的tag</th><th>解释</th></tr></thead><tbody><tr><td><a href="https://bscscan.com/address/0xd9c7efe29f3e90ce3630ea1c665217c7ab298a3b">AS-Exploiter</a></td><td>AutoShark-Exploiter的地址</td></tr><tr><td><a href="https://bscscan.com/address/0x58f876857a02d6762e0101bb5c46a8c1ed44dc16">Pancake-WBNB-BUSD-LP</a></td><td>Pancake的WBNB-BUSD流动池，是本次事件的入口，在这个LP闪电贷的BNB</td></tr><tr><td><a href="https://bscscan.com/address/0x22de6648685e4e47fd944e68b264e0e0667e2e00">AS-Exploiter-Contract</a></td><td>AutoShark-Exploiter创建的合约地址</td></tr><tr><td><a href="https://bscscan.com/address/0x1fd789fa513871cb89aa655f11ec777cad1784a0">Panther-SHARK-BNB-LP</a></td><td>Panther的SHARK-BNB流动池</td></tr></tbody></table><p>攻击步骤如下：</p><h4 id="1-攻击者从-Pancake-的-WBNB-BUSD-交易对中借出大量-WBNB；">1. 攻击者从 Pancake 的 WBNB/BUSD 交易对中借出大量 WBNB；</h4><p>对应的交易中的token转移如下：<br><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210526161635589.png" alt></p><p>此处是通过调用<a href="https://bscscan.com/address/0x58f876857a02d6762e0101bb5c46a8c1ed44dc16">Pancake-WBNB-BUSD-LP</a>合约的<code>swap</code>方法来实现的，具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; this low-level function should be called from a contract which performs important safety checks</span><br><span class="line">function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock &#123;</span><br><span class="line">    &#x2F;&#x2F; 至少有一个token兑换出的金额大于0</span><br><span class="line">    require(amount0Out &gt; 0 || amount1Out &gt; 0, &#39;Pancake: INSUFFICIENT_OUTPUT_AMOUNT&#39;);</span><br><span class="line">    &#x2F;&#x2F; 获取当前lp池中的两个token的储备数量</span><br><span class="line">    (uint112 _reserve0, uint112 _reserve1,) &#x3D; getReserves(); &#x2F;&#x2F; gas savings</span><br><span class="line">    &#x2F;&#x2F; 兑换出的token数量必须小于当前池中的token数量</span><br><span class="line">    require(amount0Out &lt; _reserve0 &amp;&amp; amount1Out &lt; _reserve1, &#39;Pancake: INSUFFICIENT_LIQUIDITY&#39;);</span><br><span class="line"></span><br><span class="line">    uint balance0;</span><br><span class="line">    uint balance1;</span><br><span class="line">    &#123; &#x2F;&#x2F; scope for _token&#123;0,1&#125;, avoids stack too deep errors</span><br><span class="line">    address _token0 &#x3D; token0;</span><br><span class="line">    address _token1 &#x3D; token1;</span><br><span class="line">    &#x2F;&#x2F; 接收兑换token的地址不能是当前lp池中的token中的任意一个</span><br><span class="line">    require(to !&#x3D; _token0 &amp;&amp; to !&#x3D; _token1, &#39;Pancake: INVALID_TO&#39;);</span><br><span class="line">    &#x2F;&#x2F; 如果token0兑换出的金额大于0，则把amount0Out转账给指定的地址to</span><br><span class="line">    if (amount0Out &gt; 0) _safeTransfer(_token0, to, amount0Out); &#x2F;&#x2F; optimistically transfer tokens</span><br><span class="line">    if (amount1Out &gt; 0) _safeTransfer(_token1, to, amount1Out); &#x2F;&#x2F; optimistically transfer tokens</span><br><span class="line">    &#x2F;&#x2F; 如果参数data不为空，则调用合约to的pancakeCall方法；接下来就是合约to的表演了</span><br><span class="line">    if (data.length &gt; 0) IPancakeCallee(to).pancakeCall(msg.sender, amount0Out, amount1Out, data);</span><br><span class="line">    &#x2F;&#x2F; 当合约to表演完之后，分别获取当前lp在两个token中的余额</span><br><span class="line">    balance0 &#x3D; IERC20(_token0).balanceOf(address(this));</span><br><span class="line">    balance1 &#x3D; IERC20(_token1).balanceOf(address(this));</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 如果新的余额大于（当前存储量-兑换出的数量），则amount0In等于新的余额 - （当前存储量-兑换出的数量）</span><br><span class="line">    &#x2F;&#x2F; amount0In和amount1In是在计算实际进来了多少</span><br><span class="line">    uint amount0In &#x3D; balance0 &gt; _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;</span><br><span class="line">    uint amount1In &#x3D; balance1 &gt; _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;</span><br><span class="line">    &#x2F;&#x2F; 如果两个都是0，说明新的balance都不大于（存储量-兑换出的金额）；这说明没有进来，那么就报错；</span><br><span class="line">    &#x2F;&#x2F; 其实这个校验是在说打给当前lp池的token数量必须大于兑换出去的数量</span><br><span class="line">    require(amount0In &gt; 0 || amount1In &gt; 0, &#39;Pancake: INSUFFICIENT_INPUT_AMOUNT&#39;);</span><br><span class="line">    &#123; &#x2F;&#x2F; scope for reserve&#123;0,1&#125;Adjusted, avoids stack too deep errors</span><br><span class="line">    &#x2F;&#x2F; 计算调整后的balance，此处会收取千分之二的费用</span><br><span class="line">    uint balance0Adjusted &#x3D; balance0.mul(1000).sub(amount0In.mul(2));</span><br><span class="line">    uint balance1Adjusted &#x3D; balance1.mul(1000).sub(amount1In.mul(2));</span><br><span class="line">    &#x2F;&#x2F; 调用此方法后的两个token的积必须大于等于原始储备的两个token的积；即还回来的token在收完手续费之后必须大于借出去的</span><br><span class="line">    require(balance0Adjusted.mul(balance1Adjusted) &gt;&#x3D; uint(_reserve0).mul(_reserve1).mul(1000**2), &#39;Pancake: K&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _update(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">    emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本地事件的第一步就是调用swap，入参如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Function: swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data) ***</span><br><span class="line"></span><br><span class="line">MethodID: 0x022c0d9f</span><br><span class="line">[0]:  00000000000000000000000000000000000000000000152d02c7e14af6800000</span><br><span class="line">[1]:  0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">[2]:  00000000000000000000000022de6648685e4e47fd944e68b264e0e0667e2e00</span><br><span class="line">[3]:  0000000000000000000000000000000000000000000000000000000000000080</span><br><span class="line">[4]:  0000000000000000000000000000000000000000000000000000000000000001</span><br><span class="line">[5]:  0100000000000000000000000000000000000000000000000000000000000000</span><br></pre></td></tr></table></figure><p>前面的三个参数是在描述“兑换100000个BNB和0个BUSD给<a href="https://bscscan.com/address/0x22de6648685e4e47fd944e68b264e0e0667e2e00">AS-Exploiter-Contract</a>”，然后因为<code>data</code>参数不为空，所以会调用<a href="https://bscscan.com/address/0x22de6648685e4e47fd944e68b264e0e0667e2e00">AS-Exploiter-Contract</a>合于的<code>pancakeCall</code>方法。</p><h4 id="2-将第-1-步借出的全部-WBNB-中的一半通过-Panther-的-SHARK-WBNB-交易对兑换出大量的-SHARK，同时池中-WBNB-的数量增多；">2. 将第 1 步借出的全部 WBNB 中的一半通过 Panther 的 SHARK/WBNB 交易对兑换出大量的 SHARK，同时池中 WBNB 的数量增多；</h4><p>对应的交易中的token转移如下：<br><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210526163530873.png" alt></p><p>此处是一个兑换动作，调用合约的话其实有多种方式实现，下面是一种实现方式，调用<code>PantherPair.sol</code>的<code>swapExactTokensForTokens</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function swapExactTokensForTokens(</span><br><span class="line">    uint amountIn,</span><br><span class="line">    uint amountOutMin,</span><br><span class="line">    address[] calldata path,</span><br><span class="line">    address to,</span><br><span class="line">    uint deadline</span><br><span class="line">) external virtual override ensure(deadline) returns (uint[] memory amounts) &#123;</span><br><span class="line">    amounts &#x3D; PantherLibrary.getAmountsOut(factory, amountIn, path);</span><br><span class="line">    require(amounts[amounts.length - 1] &gt;&#x3D; amountOutMin, &#39;PantherRouter: INSUFFICIENT_OUTPUT_AMOUNT&#39;);</span><br><span class="line">    TransferHelper.safeTransferFrom(</span><br><span class="line">        path[0], msg.sender, PantherLibrary.pairFor(factory, path[0], path[1]), amounts[0]</span><br><span class="line">    );</span><br><span class="line">    _swap(amounts, path, to);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-将第-1-步和第-2-步的-WBNB-和-SHARK-打入到-SharkMinter-中，为后续攻击做准备；">3. 将第 1 步和第 2 步的 WBNB 和 SHARK 打入到 SharkMinter 中，为后续攻击做准备；</h4><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210526163723014.png" alt></p><h4 id="4-调用-AutoShark-项目中的-WBNB-SHARK-策略池中的-getReward-函数，该函数会根据用户获利的资金从中抽出一部分手续费，作为贡献值给用户奖励-SHARK-代币，这部分操作在-SharkMinter-合约中进行操作；">4. 调用 AutoShark 项目中的 WBNB/SHARK 策略池中的 getReward 函数，该函数会根据用户获利的资金从中抽出一部分手续费，作为贡献值给用户奖励 SHARK 代币，这部分操作在 SharkMinter 合约中进行操作；</h4><h4 id="5-SharkMinter-合约在收到用户收益的-LP-手续费之后，会将-LP-重新拆成对应的-WBNB-和-SHARK，重新加入到-Panther-的-WBNB-SHARK-交易池中；">5. SharkMinter 合约在收到用户收益的 LP 手续费之后，会将 LP 重新拆成对应的 WBNB 和 SHARK，重新加入到 Panther 的 WBNB/SHARK 交易池中；</h4><h4 id="6-由于第-3-步攻击者已经事先将对应的代币打入到-SharkMinter-合约中，SharkMinter-合约在移除流动性后再添加流动性的时候，使用的是-SharkMinter-合约本身的-WBNB-和-SHARK-余额进行添加，这部分余额包含攻击者在第-3-步打入-SharkMinter-的余额，导致最后合约获取的添加流动性的余额是错误的，也就是说-SharkMinter-合约误以为攻击者打入了巨量的手续费到合约中；">6. 由于第 3 步攻击者已经事先将对应的代币打入到 SharkMinter 合约中，SharkMinter 合约在移除流动性后再添加流动性的时候，使用的是 SharkMinter 合约本身的 WBNB 和 SHARK 余额进行添加，这部分余额包含攻击者在第 3 步打入 SharkMinter 的余额，导致最后合约获取的添加流动性的余额是错误的，也就是说 SharkMinter 合约误以为攻击者打入了巨量的手续费到合约中；</h4><h4 id="7-SharkMinter-合约在获取到手续费的数量后，会通过-tvlInWBNB-函数计算这部分手续费的价值，然后根据手续费的价值铸币-SHARK-代币给用户。但是在计算-LP-价值的时候，使用的是-Panther-WBNB-SHARK-池的-WBNB-实时数量除以-LP-总量来计算-LP-能兑换多少-WBNB。但是由于在第-2-步中，Panther-池中-WBNB-的数量已经非常多，导致计算出来的-LP-的价值非常高；">7. SharkMinter 合约在获取到手续费的数量后，会通过 tvlInWBNB 函数计算这部分手续费的价值，然后根据手续费的价值铸币 SHARK 代币给用户。但是在计算 LP 价值的时候，使用的是 Panther WBNB/SHARK 池的 WBNB 实时数量除以 LP 总量来计算 LP 能兑换多少 WBNB。但是由于在第 2 步中，Panther 池中 WBNB 的数量已经非常多，导致计算出来的 LP 的价值非常高；</h4><p>对应的<code>SharkMinter</code>方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function mintFor(address flip, uint _withdrawalFee, uint _performanceFee, address to, uint, uint boostRate) override external onlyMinter returns(uint mintAmount) &#123;</span><br><span class="line">    uint feeSum &#x3D; _performanceFee.add(_withdrawalFee);</span><br><span class="line">    uint tax &#x3D; 0;</span><br><span class="line">    if (flip &#x3D;&#x3D; address(PANTHER)) &#123;</span><br><span class="line">        tax &#x3D; feeSum.mul(PANTHER.transferTaxRate()).div(10000);</span><br><span class="line">    &#125;</span><br><span class="line">    IBEP20(flip).safeTransferFrom(msg.sender, address(this), feeSum.sub(tax).sub(1));</span><br><span class="line"></span><br><span class="line">    uint sharkBNBAmount &#x3D; tokenToSharkBNB(flip, IBEP20(flip).balanceOf(address(this)));</span><br><span class="line">    address flipToken &#x3D; sharkBNBFlipToken();</span><br><span class="line">    IBEP20(flipToken).safeTransfer(sharkPool, sharkBNBAmount);</span><br><span class="line">    IStakingRewards(sharkPool).notifyRewardAmount(sharkBNBAmount);</span><br><span class="line">    &#x2F;&#x2F; 这里计算的贡献变大了</span><br><span class="line">    uint contribution &#x3D; helper.tvlInBNB(flipToken, sharkBNBAmount).mul(_performanceFee).div(feeSum);</span><br><span class="line">    &#x2F;&#x2F; 所以计算出的要铸造的shark的数量也变大了</span><br><span class="line">    uint mintShark &#x3D; amountSharkToMint(contribution).mul(boostRate).div(10000);</span><br><span class="line">    mint(mintShark, to);</span><br><span class="line">    mintAmount &#x3D; mintShark;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>合约<code>StrategyHelperV1</code>的<code>tvlInBNB</code>方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function tvlInBNB(address _flip, uint amount) override public view returns (uint) &#123;</span><br><span class="line">    if (_flip &#x3D;&#x3D; address(PANTHER)) &#123;</span><br><span class="line">        return pantherPriceInBNB().mul(amount).div(1e18);</span><br><span class="line">    &#125;</span><br><span class="line">    address _token0 &#x3D; IPantherPair(_flip).token0();</span><br><span class="line">    address _token1 &#x3D; IPantherPair(_flip).token1();</span><br><span class="line">    if (_token0 &#x3D;&#x3D; address(WBNB) || _token1 &#x3D;&#x3D; address(WBNB)) &#123;</span><br><span class="line">        &#x2F;&#x2F; _flip是lp，因为此交易对的bnb很多，所以在得到的bnb就很大</span><br><span class="line">        uint bnb &#x3D; WBNB.balanceOf(address(_flip)).mul(amount).div(IBEP20(_flip).totalSupply());</span><br><span class="line">        return bnb.mul(2);</span><br><span class="line">    &#125;</span><br><span class="line">    uint balanceToken0 &#x3D; IBEP20(_token0).balanceOf(_flip);</span><br><span class="line">    &#x2F;&#x2F; 因为之前使用大量的bnb兑换token，导致price变大了</span><br><span class="line">    uint price &#x3D; tokenPriceInBNB(_token0);</span><br><span class="line">    &#x2F;&#x2F; (((balanceToken0 * price) &#x2F; 1e18) * 2 * amount) &#x2F; totalSupply</span><br><span class="line">    return balanceToken0.mul(price).div(1e18).mul(2).mul(amount).div(IBEP20(_flip).totalSupply());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-在-LP-价值错误和手续费获取数量错误的情况下，SharkMinter-合约最后在计算攻击者的贡献的时候计算出了一个非常大的值，导致-SharkMinter-合约给攻击者铸出了大量的-SHARK-代币；">8. 在 LP 价值错误和手续费获取数量错误的情况下，SharkMinter 合约最后在计算攻击者的贡献的时候计算出了一个非常大的值，导致 SharkMinter 合约给攻击者铸出了大量的 SHARK 代币；</h4><p>对应的交易中的token转移如下：图中从0地址到SharkMinter就是在铸造大量的SHARK。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210528154858329.png" alt></p><h4 id="9-攻击者后续通过卖出-SHARK-代币来换出-WBNB，偿还闪电贷。然后获利离开。">9. 攻击者后续通过卖出 SHARK 代币来换出 WBNB，偿还闪电贷。然后获利离开。</h4><p>对应的交易中的token转移如下：</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210528154659796.png" alt></p><p>此步骤的操作逻辑比较简单，主要是调用<a href="https://bscscan.com/address/0x1fd789fa513871cb89aa655f11ec777cad1784a0#code">Panther-SHARK-BNB-LP</a>合约的<code>swapTokensForExactTokens</code>方法；然后再把WBNB转给Pancake 的 WBNB/BUSD 交易对（调用<a href="https://bscscan.com/address/0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c">WBNB</a>的<code>transfer</code>方法）来偿还闪电贷。</p><h3 id="事件处理结果">事件处理结果</h3><h4 id="AutoShark官方给的补偿计划："><a href="https://medium.com/autosharkfin/how-autoshark-got-economically-exploited-3c644de5073a">AutoShark官方给的补偿计划</a>：</h4><ol><li>使用新的代币$JAW代替原来的$SHARK</li><li>以<a href="https://bscscan.com/block/7698695">被攻击前一个区块</a>作为快照将$JAW分配给此时的$SHARK持有人</li><li>在180天里将所有金库的盈利的30%给$JAW的持有者</li><li>之前每铸造100个$SHARK，然后再额外铸造15个$SHARK给研发人员；接下来的60天里每铸造100个$JAW将其中的15个$JAW给$JAW的持有者。</li><li>将在PantherSwap平台发起IPO所得的部分BNB分配给$JAW持有者（金额没说）</li><li>将自己平台持有的所有$SHARK全部销毁</li><li>集成ChainLink的资产报价</li></ol><h4 id="PantherSwap关停所有-SHARK的LP池">PantherSwap关停所有$SHARK的LP池</h4>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> Exploit&amp;Attack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> solidity </tag>
            
            <tag> 智能合约 </tag>
            
            <tag> Exploit&amp;Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Uniswap学习</title>
      <link href="2024/11/22/blockchain/ethereum/DeFi/Uniswap%E5%AD%A6%E4%B9%A0/"/>
      <url>2024/11/22/blockchain/ethereum/DeFi/Uniswap%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="uniswap-v2">uniswap v2</h3><ul><li><input type="checkbox" id="checkbox0" checked="true"><label for="checkbox0">源码下载</label></li><li><input type="checkbox" id="checkbox1" checked="true"><label for="checkbox1">源码学习</label></li><li><input type="checkbox" id="checkbox2" checked="true"><label for="checkbox2">安全审查是谁做的，怎么做的，评判标准有哪些</label></li></ul><h4 id="uniswap-的交互流程">uniswap 的交互流程</h4><p>比如Alice想要把tokenA兑换成tokenB，与合约的交互流程大体如下：</p><ol><li>Approve：Alice批准uniswap使用tokenA合约的金额</li><li>Swap：Alice调用uniswap进行兑换<ol><li>把Alice的tokenA转给LP</li><li>把LP的tokenB转给Alice</li></ol></li></ol><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/yuque_diagram.jpg" alt></p><h5 id="还有一种情况是Bob使用ETH兑换SHIB（用eth兑换token），流程如下：">还有一种情况是Bob使用ETH兑换SHIB（用eth兑换token），流程如下：</h5><ol><li>Bob调用uniswap进行swap，并把ETH转给Uniswap合约</li><li>uniswap把收到的ETH转给WETH合约，并且uniswap获得了相同金额的WETH（这一步是把ETH兑换成符合ERC20标准的WETH）</li><li>uniswap调用WETH合约把相同金额的WETH转给ETH-SHIB-LP（流动池）</li><li>ETH-SHIB-LP调用SHIB合约把相应金额的SHIB转给Bob</li></ol><p>![image-20210514162529644](/Users/apple/Library/Application Support/typora-user-images/image-20210514162529644.png)</p><h4 id="uniswap-v2的的LP是如何赚钱的？年化多少？是否稳定？">uniswap v2的的LP是如何赚钱的？年化多少？是否稳定？</h4><ul><li>收益来自于交易，如果没有交易则LP无法赚钱，不稳定</li></ul><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210513181141134.png" alt></p><p>他们标得APY是如何计算的？</p><h4 id="uniswap-v2的一些资源">uniswap v2的一些资源</h4><p><a href="https://v2.info.uniswap.org/">info.uniswap可以根据合约搜索token的数据</a></p><h4 id="一些细节问题">一些细节问题</h4><h5 id="路径上的每次计算都要收取手续费">路径上的每次计算都要收取手续费</h5><p>如果我想要用tokenA换tokenC，但是LP中只有tokenA-tokenB和tokenB-tokenC，因此在兑换路径会变成tokenA-&gt;tokenB-&gt;tokenC。在使用这样的路径兑换时tokenA-&gt;tokenB和tokenB-&gt;tokenC都会收取手续费（千分之3）</p><p><strong>手续费每次都是收取前面的token的千分之3，如上面例子的兑换路径会收取tokenA和tokenB的千分之3</strong></p><h5 id="新建流动性是有最小流动性限制的">新建流动性是有最小流动性限制的</h5><p>如果当前LP池中没有tokenA-tokenZ交易对，那么在第一次创建这个交易对时是需要满足tokenA</p><h5 id="Liquidity-Providers在提供了流动性之后得到的是什么">Liquidity Providers在提供了流动性之后得到的是什么</h5><p>会得到交易对对应的ERC20的份额</p><h5 id="无常损失"><a href="https://zhuanlan.zhihu.com/p/268435169">无常损失</a>:</h5><p>因为价格变动导致添加到LP中的资产的价格少于不提供流动性的价格。</p><h4 id="部分代码理解">部分代码理解</h4><p>swap时，根据输入tokenA的值获取应该兑换的tokenB的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset</span><br><span class="line">function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) &#123;</span><br><span class="line">    require(amountIn &gt; 0, &#39;UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT&#39;);</span><br><span class="line">    require(reserveIn &gt; 0 &amp;&amp; reserveOut &gt; 0, &#39;UniswapV2Library: INSUFFICIENT_LIQUIDITY&#39;);</span><br><span class="line">    &#x2F;&#x2F; x * y &#x3D; x&#39; * y&#39; &#x3D; k; x &#x3D; reserveIn， y &#x3D; reserveOut</span><br><span class="line">    &#x2F;&#x2F; x‘ &#x3D; amountIn的千分之997</span><br><span class="line">    uint amountInWithFee &#x3D; amountIn.mul(997);</span><br><span class="line">    &#x2F;&#x2F; numerator &#x3D; x&#39; * y</span><br><span class="line">    uint numerator &#x3D; amountInWithFee.mul(reserveOut);</span><br><span class="line">    &#x2F;&#x2F; denominator &#x3D; x + x&#39;</span><br><span class="line">    uint denominator &#x3D; reserveIn.mul(1000).add(amountInWithFee);</span><br><span class="line">    &#x2F;&#x2F; amountOut &#x3D; (x&#39; * y) &#x2F; (x + x&#39;)；推导公式如下：</span><br><span class="line">    &#x2F;&#x2F; (x + x&#39;) * (y - y&#39;) &#x3D; x * y</span><br><span class="line">    &#x2F;&#x2F; y - y&#39; &#x3D; x * y &#x2F; (x + x&#39;) </span><br><span class="line">    &#x2F;&#x2F; y&#39; &#x3D; y - x * y &#x2F; (x + x&#39;)</span><br><span class="line">    &#x2F;&#x2F; y&#39; &#x3D; (y(x + x&#39;) - x * y) &#x2F; (x + x&#39;)</span><br><span class="line">    &#x2F;&#x2F; y&#39; &#x3D; (y * x + y * x&#39; - x * y) &#x2F; x + x&#39;</span><br><span class="line">    &#x2F;&#x2F; y&#39; &#x3D; (y * x&#39;) &#x2F; (x + x&#39;)</span><br><span class="line">    &#x2F;&#x2F; amountOut &#x3D; (x&#39; * y) &#x2F; (x + x&#39;)</span><br><span class="line">    amountOut &#x3D; numerator &#x2F; denominator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="uniswap中的其他技术学习">uniswap中的其他技术学习</h4><h5 id="Canonical-WETH"><a href="https://blog.0xproject.com/canonical-weth-a9aa7d0279dd">Canonical WETH</a></h5><p>什么是WETH，原文内容总结如下：</p><ol><li>ETH是以太坊上的本地代币，而不是ERC20标准代币</li><li>因此在DApp操作符合ERC20规范的代币时，如果涉及到了ETH操作起来会比较麻烦</li><li>为了方便，DApp的开发者做了符合ERC20标准的代币来代替ETH</li><li>WETH是目前比较安全和社区支持较高的ERC20标准的ETH代币</li><li><a href="https://etherscan.io/address/0x2956356cd2a2bf3202f771f50d3d14a367b48070">mainnet合约地址</a></li></ol><h3 id="Uniswap-V3">Uniswap V3</h3><h5 id="存入资金池的数量和兑换的价格是不一样的">存入资金池的数量和兑换的价格是不一样的</h5><p>如下图，当前ETH的价格是3942.1，如果加入资金池的比例是1个ETH对应1953.42个USDT。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210513111434568.png" alt></p><h4 id="审核">审核</h4><p>trailofbits在审核uniswap时考虑了什么方面：</p><ul><li>代码是否遵循最佳实践</li><li>单元测试覆盖率</li><li>白皮书的完成程度，以及白皮书中的内容是否有错误</li><li>访问控制</li><li>算数运算</li><li>代码结构</li><li>可升级性</li><li>验证和测试</li></ul><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210513153142209.png" alt="限价单"></p><h5 id="审核时提到的一些技术或工具">审核时提到的一些技术或工具</h5><ul><li><a href="https://github.com/crytic/slither">https://github.com/crytic/slither</a></li></ul><h3 id="UniswapV2和V3版本比较">UniswapV2和V3版本比较</h3><ol><li>V3版本增加了“集中流动性”概念，LP可以只在一定的价格范围内提供流动性<ol><li>这样可以避免太多的无常损失</li><li>可以提高资金利用率</li></ol></li><li>V3版本的交易费用不再重新复投到LP池中，需要LP提供者手动“收割”</li><li>V3版本支持单一资产存入LP池，条件是设置的价格范围不在当前的市场价格范围内；（这样可以允许你设置一个期望的价格来达成交易，如下图的限价单，你可以在价格为3987.2时指定在4498～4460之间提供流动性，这样在价格到达这个范围时就会把ETH兑换成DAI）<ol><li>这是一个好用的功能，但是你必须密切注意价格，如果你想要DAI则需要在到达这个区间时手动退出，即不再提供流动性</li></ol></li></ol><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/image-20210513153142209.png" alt="限价单"></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> DeFi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> 1INCH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XVS清算事件</title>
      <link href="2024/11/22/blockchain/ethereum/Exploit&amp;Attack/XVS%E6%B8%85%E7%AE%97%E4%BA%8B%E4%BB%B6/"/>
      <url>2024/11/22/blockchain/ethereum/Exploit&amp;Attack/XVS%E6%B8%85%E7%AE%97%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="事件影响">事件影响</h3><ol><li>本次事件不是因为代码漏洞被利用，而是由于抵押资产XVS的价格波动导致清算</li><li>本次事件没有代币被偷，但是由于清算时会收取10%的清算费用，使抵押XVS进行贷款的地址损失至少10%</li><li>抵押XVS进行贷款的地址被大量清算<ol><li>清算会导致损失至少10%的清算费用</li><li>由于抵押率借出的资产是抵押资产最多的80%，因此总损失至少30%</li></ol></li><li>如果抵押的是稳定币，借出的也是稳定币，并且不是定格借出的资产的话，是不会被清算的</li></ol><h3 id="事件分析">事件分析</h3><p>此项目由<a href="https://www.certik.org/projects/swipe">certik</a>审计</p><p>Venus是一个去中心化的借贷市场。通过抵押数字资产可以借出其他数字资产。</p><h4 id="抵押借贷业务了解">抵押借贷业务了解</h4><h5 id="超额抵押">超额抵押</h5><p>根据白皮书的描述，可以借出的资产最多是抵押资产的75%。比如抵押一个BTC，当前价格为$40000，那么用户最多可以借出价值$30000（<code>40000*75%</code>）的其他资产。</p><h5 id="抵押不足">抵押不足</h5><p>如上例，如果用户借出了价值$30000（抵押物价值的75%）的USDT，那么当BTC的价格降低时就会造成抵押不足。</p><h5 id="清算">清算</h5><p>如果BTC的价格降低到$25000，那么客户是没有意愿去还款$30000来赎回1个BTC的。</p><p>因此系统设计为任何人都可以对<strong>抵押不足</strong>的借贷进行清算，进行这个动作的人称为<strong>清算人</strong>，清算人在进行清算时需要偿还借款人的债务，然后以一定的折价获得抵押物。</p><p>假如现在BTC的价格跌到了$35000，那么清算人就可以以($35000*(1-5%) =$33250)的价格获得BTC，即清算人支付了债务$30000之后就能够得到0.902256个BTC，然后清算人以当前$35000的真实价格卖出BTC就能够获利$1578.96；剩余的0.097744个BTC再还给借款人，借款人还剩余$33421.04（0.097744 * 35000+30000）。</p><h4 id="Venus事件分析">Venus事件分析</h4><h5 id="有人怀疑Venus团队监守自盗，具体操作如下">有人怀疑Venus团队监守自盗，具体操作如下</h5><p>具体分析逻辑：<a href="https://medium.com/@venus.insider/venus-io-disclosure-an-inside-job-f8ef195fe78d">Venus.IO Exploit— An Inside Job</a></p><p>总结如下：</p><ol><li>地址<a href="https://bscscan.com/address/0xef044206db68e40520bfa82d45419d498b4bc7bf"><strong>0xef0…c7bf</strong></a> （该地址与Venus团队有关）在价格低的时候累积了130万XVS</li><li>地址<a href="https://bscscan.com/address/0xef044206db68e40520bfa82d45419d498b4bc7bf"><strong>0xef0…c7bf</strong></a>抵押XVS，借出BTC和ETH</li><li>地址<a href="https://bscscan.com/address/0xef044206db68e40520bfa82d45419d498b4bc7bf"><strong>0xef0…c7bf</strong></a>把借出的BTC和ETH发送到币安交易所</li><li>从币安交易所提取XVS到地址<a href="https://bscscan.com/address/0xef044206db68e40520bfa82d45419d498b4bc7bf"><strong>0xef0…c7bf</strong></a>（怀疑是用借出的BTC和ETH又重新购买了XVS）</li><li>然后重复2～5步骤，因为地址<a href="https://bscscan.com/address/0xef044206db68e40520bfa82d45419d498b4bc7bf"><strong>0xef0…c7bf</strong></a>的XVS量非常大，导致在循环操作几次之后XVS的价格快速上涨</li><li>然后当地址<a href="https://bscscan.com/address/0xef044206db68e40520bfa82d45419d498b4bc7bf"><strong>0xef0…c7bf</strong></a>不在操作时，XVS价格下降，从而导致此地址的XVS被清算，清算又导致XVS的价格继续快速下跌；从而发生连锁反应导致其他抵押XVS的地址也被清算</li><li>虽然最后地址<a href="https://bscscan.com/address/0xef044206db68e40520bfa82d45419d498b4bc7bf"><strong>0xef0…c7bf</strong></a>的抵押资产XVS全部被清算，但是却有4000个ETH和2000个BTC未偿还（即地址<a href="https://bscscan.com/address/0xef044206db68e40520bfa82d45419d498b4bc7bf"><strong>0xef0…c7bf</strong></a>把便宜的XVS换成了ETH和BTC）</li></ol><h5 id="Venus团队的分析">Venus团队的分析</h5><p>官方发布的事故分析:<a href="https://medium.com/venusprotocolcn/venus-protocol-%E4%BA%8B%E6%95%85%E6%8A%A5%E5%91%8A-999db0009700">Venus Protocol | 事故报告</a></p><p>总结如下：</p><ol><li>没有内部人在操纵XVS价格而从中获利</li><li>本次事件是由于市场价格波动导致的大规模清算，这种清算是Venus作为借贷服务的提供者的生态逻辑问题</li><li>地址<a href="https://bscscan.com/address/0xef044206db68e40520bfa82d45419d498b4bc7bf"><strong>0xef0…c7bf</strong></a> 因为被清算，损失了$6600万</li></ol>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
          <category> ethereum </category>
          
          <category> Exploit&amp;Attack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> ethereum </tag>
            
            <tag> solidity </tag>
            
            <tag> 智能合约 </tag>
            
            <tag> Exploit&amp;Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA安装leetcode插件</title>
      <link href="2024/11/22/algorithms/IDEA%E5%AE%89%E8%A3%85leetcode%E6%8F%92%E4%BB%B6/"/>
      <url>2024/11/22/algorithms/IDEA%E5%AE%89%E8%A3%85leetcode%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么安装leetcode插件">为什么安装leetcode插件</h2><p>当然是刷题了，程序员都懂的。官方地址：<br><a href="https://leetcode-cn.com">力扣 (leetcode) 官网 - 全球极客挚爱的技术成长平台</a></p><h2 id="如何安装leetcode插件">如何安装leetcode插件</h2><h3 id="安装IDEA插件">安装IDEA插件</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/12132-leetcode-editor">leetcode editor</a>；插件如何安装略。</p><h3 id="配置插件">配置插件</h3><p>打开IDEA的Preferences，找到Tools-leetcode plugin；页面如下：</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//797ea5920c87eaf25ebb58f9a4fe249b-451940.png" alt="img"></p><h4 id="上图的序号配置依次如下：">上图的序号配置依次如下：</h4><ol><li>配置leecode网站的用户名密码</li><li>配置生成代码的地址，此处我选择的是一个专门的项目的<code>$&#123;base_dir&#125;/src/main/java/com</code>目录，此插件会自动在此路径下创建<code>leetcode/editor/cn</code>,所以最终代码会在<code>$&#123;base_dir&#125;/src/main/java/com/leetcode/editor/cn</code>路径下</li><li>配置类名和文件名，必须配置默认是中文类名(需要勾选Costom Template)</li></ol><p>贴出本人配置供参考：<br>CodeFileName:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">P$&#123;question.frontendQuestionId&#125;$!velocityTool.camelCaseName($&#123;question.titleSlug&#125;)</span><br></pre></td></tr></table></figure><p>CodeTemplate:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leetcode.editor.cn;</span><br><span class="line">$&#123;question.content&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P</span>$</span>&#123;question.frontendQuestionId&#125;$!velocityTool.camelCaseName($&#123;question.titleSlug&#125;)&#123;</span><br><span class="line">    $&#123;question.code&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何使用leetcode插件">如何使用leetcode插件</h2><h3 id="生成模板代码">生成模板代码</h3><p>1、按照下图标的顺序依次点击插件会加载各种算法</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//69f51dd49fa9f6035b1356debca9b036-217150.png" alt="img"></p><p>2、随便双击列表中的一个算法，会在配置的<code>$&#123;base_dir&#125;/src/main/java/com/leetcode/editor/cn</code>路径下生成模板代码，效果如下：<br><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//e981a38333bf3ee9d4fa3546215af97b-180334.png" alt="img"></p><h3 id="结果验证">结果验证</h3><p>码完代码之后选中相应的算法点Submit来进行验证正确性</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//f6dd4333dc34e58371cec60d8d0a1ab8-251387.png" alt="img"></p><h3 id="注意事项">注意事项</h3><p>1、下面的两个注释不能删除或修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure><p>2、提交的所有代码必须在自动生成的Solution类之内</p><p>非常感谢！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> leetcode </tag>
            
            <tag> IntelliJ </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划学习</title>
      <link href="2024/11/22/algorithms/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>2024/11/22/algorithms/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划">动态规划</h1><p>本来想用5W2H分析法来解释此问题，但是发现比较困难，还是先看例子吧。<br>动态规划的原理：动态规划先解决子问题，再逐步解决大问题。先有这个简单的概念即可，我会通过例子来说明。</p><h1 id="举例：做个小偷顾问">举例：做个小偷顾问</h1><h2 id="例1，打家劫舍（无限背包问题）">例1，打家劫舍（无限背包问题）</h2><h3 id="问题描述">问题描述</h3><p>在万恶的资本主义社会美国，有一个小偷（罗伯特），有一天晚上罗伯特与他的同伙开了一辆卡车（假如可以装无限的现金）来到了一排主人都出门旅游去了的房屋面前，每间房内都藏有一定的现金，影响罗伯特偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。 请帮他设计程序以偷取最多的现金。<br></p><h3 id="问题分析"><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/1604543616351-c27c0806-d0c7-47a7-b7f7-2e182fc1e17d.png" alt="image.png">问题分析</h3><h4 id="1、简化问题">1、简化问题</h4><ul><li>如果只有一个房子罗伯特最多能偷多少钱？</li><li>如果有两个房子罗伯特最多能偷多少钱？</li><li>如果有三个房子罗伯特最多能偷多少钱？</li><li>。。。。。。</li></ul><p><br>为了方便分析，我们把房子的数量和能够偷的钱数记录下来，我们画一个表格如下：</p><ul><li>第一列表示如果只偷前面的n个房子</li><li>第二列表示如果只偷前面的n个房子最多能偷多少钱</li><li>括号里面的是偷哪些房子</li></ul><h4 id="2、各个击破简化后的问题">2、各个击破简化后的问题</h4><p><strong>如果只有前面一个房子罗伯特最多能偷多少钱？</strong></p><table><thead><tr><th>房子数量</th><th>最多能偷多少钱？</th></tr></thead><tbody><tr><td>1</td><td>$100(1)</td></tr></tbody></table><p><strong>如果只有前面两个房子罗伯特最多能偷多少钱？</strong><br>当只有前面两个房子时，因为限制条件是不能偷相邻的房子不然会触发报警，所以偷其中金额大的那个即可。<br></p><table><thead><tr><th>房子数量</th><th>最多能偷多少钱？</th></tr></thead><tbody><tr><td>1</td><td>$100(1)</td></tr><tr><td>2</td><td>$200(2)</td></tr></tbody></table><p><strong>如果只有前面三个房子罗伯特最多能偷多少钱？</strong><br>当只有前面三个房子时，我们有两种选择，第1种：偷第三个和第一个；第2种：偷第二个。从两种选择中挑一个能偷的金额较大的方法。</p><table><thead><tr><th>房子数量</th><th>最多能偷多少钱？</th></tr></thead><tbody><tr><td>1</td><td>$100(1)</td></tr><tr><td>2</td><td>$200(2)</td></tr><tr><td>3</td><td>$200(2)</td></tr></tbody></table><p><strong>如果只有前面四个房子罗伯特最多能偷多少钱？</strong></p><p>当只有前面四个房子时，我们有两种选择：</p><ul><li>第1种：偷第四个，再加上偷前两个房子的最大值</li><li>第2种：不偷第四个，只偷前面三个房子的最大值</li></ul><p>从两种选择中挑一个能偷的金额较大的方法。</p><table><thead><tr><th>房子数量</th><th>最多能偷多少钱？</th></tr></thead><tbody><tr><td>1</td><td>$100(1)</td></tr><tr><td>2</td><td>$200(2)</td></tr><tr><td>3</td><td>$200(2)</td></tr><tr><td>4</td><td>$500 = $300(4) + $200(2)</td></tr></tbody></table><p><strong>如果只有前面五个房子罗伯特最多能偷多少钱？</strong><br>当只有前面五个房子时，我们有两种选择：</p><ul><li>第1种：偷第五个，再加上偷前三个房子的最大值</li><li>第2种：不偷第五个，只偷前面四个房子的最大值</li></ul><p>从两种选择中挑一个能偷的金额较大的方法。</p><table><thead><tr><th>房子数量</th><th>最多能偷多少钱？</th></tr></thead><tbody><tr><td>1</td><td>$100(1)</td></tr><tr><td>2</td><td>$200(2)</td></tr><tr><td>3</td><td>$200(2)</td></tr><tr><td>4</td><td>$500 = $300(4) + $200(2)</td></tr><tr><td>5</td><td>$500 = $300(4) + $200(2)</td></tr></tbody></table><h4 id="3、总结归纳">3、总结归纳</h4><p>我们通过上面的表格可以总结出来什么吗？我们在此约定一个数学公式：total(n)表示最大能偷的金额；使用amount(n)表示第n个房子有多少金额<br>根据以上的表格我们可以知道<br>total(1) = 100 = amount(1) = max(amount(1), 0)<br>total(2) = 200 = max(amount(2), amount(1))<br>total(3) = 200 = max(amount(3) + amount(1), amount(2)) = max(amount(3) + total(3-2), total(2))<br>total(4) = 500 = max(amount(4) + total(4-2), amount(3)) = max(amount(4) + total(4-2), total(3)) <br>total(n) = max(amount(n) + total(n-2), total(n-1))</p><h4 id="4、代码实现">4、代码实现</h4><p>经过上面的分析我们竟然总结出了一个公式：total(n) = max(amount(n) + total(n-2), total(n-1))<br>大家应该对斐波那契数列比较熟悉，他的公式是：f(n) = f(n-1) + f(n-2)，然后可能第一反应就想到了递归的实现，那么我们也可以使用递归的方式解决罗伯特的问题把？show you the code：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归方式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">robRecursion</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当没有房子时</span></span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(nums) || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 当只有一个房子时</span></span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums.length == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 当只有两个房子时</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 其他情况</span></span><br><span class="line">        <span class="comment">// total(n) = max(amount(n) + total(n-2), total(n-1))</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(nums[nums.length - <span class="number">1</span>] + robRecursion(Arrays.copyOf(nums, nums.length - <span class="number">2</span>)),</span><br><span class="line">                robRecursion(Arrays.copyOf(nums, nums.length - <span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，大功告成，上面的代码经过测试是没有问题的，解决了罗伯特的问题，回家睡觉。<br>等等！！！我们是不是忘了什么，这篇文章的标题不是动态规划吗，动态规划呢？<br>**<br>让我们再回头看一下递归的方式实现，每当要计算total(n)时，就先计算total(n-1)和total(n-2)，如果说我们先计算出来total(n-1)和total(n-2)是不是计算total(n)的时候就不用重新计算total(n-1)和total(n-2)了？按照这个思路我们就需要把每次计算出的total(n-1)和total(n-2)的结果记录下来，等计算total(n)的时候就可以直接用了。<br>show you the code：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态规划方式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 初始化动态规划的数组，此时的数组中的值都是0</span></span><br><span class="line"><span class="comment">     * 此数组的下标为偷取的前n个房屋的数量</span></span><br><span class="line"><span class="comment">     * 此数组的值为偷取的前n个房屋可以偷取的金钱最大值</span></span><br><span class="line"><span class="comment">     * 如果dp[5] = 100；表示偷取前面的5家房屋，最多可以偷取100刀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> amountOfNumberI = nums[i - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 如果只偷第一个房子</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">            dp[i] = amountOfNumberI;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 此时有两种选择:1、偷当前的房屋；2、不偷当前的房屋，两种选择取最大值</span></span><br><span class="line"><span class="comment">             * 如果选择1，则要计算当前房屋的金钱与当前房屋前一个不相邻的所有房屋的金钱价值</span></span><br><span class="line"><span class="comment">             * 如果选择2，则直接取当前房屋之前的所有房屋能够偷的金钱最大值</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            dp[i] = Math.max(amountOfNumberI + dp[i - <span class="number">2</span>], dp[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[nums.length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>恭喜你，上面的代码就是动态规划的方式；与递归的方式不同，每次的计算结果都保存在了dp数组中，计算下一个值时直接从数组中获取以前计算过的值即可。<a href="https://github.com/guozhe001/my-tools/blob/eb33781f6fe3613ca531ad047de60b2cb0ec8e45/my-learn/my-algorithm/src/main/java/com/nicai/algorithm/leetcode/editor/cn/P198HouseRobber.java">罗伯特偷一排房子的源码</a><br></p><h2 id="例2，背包问题">例2，背包问题</h2><h3 id="问题描述-v2">问题描述</h3><p>有一天罗伯特带着一个可以装4kg的背包，去了一家小商店，小商店里面有下面至少三个商品；请帮助他决定应该偷哪些商品。</p><table><thead><tr><th>商品名称</th><th>商品价格（单位$）</th><th>商品重量（单位kg）</th></tr></thead><tbody><tr><td>吉他</td><td>1500</td><td>1</td></tr><tr><td>音箱</td><td>3000</td><td>4</td></tr><tr><td>电脑</td><td>2000</td><td>3</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h3 id="问题分析-v2">问题分析</h3><p>首先拿到这个问题可能一眼就看出来了答案，就是偷吉他和电脑；那么如果说商品数量是100个的话是无法一眼看出答案的，那么我们应该怎么去帮罗伯特决策呢？<br><br><br>我们再来看一下问题的关键：</p><ul><li>容量4kg的背包</li><li>至少三个不同价格和不同重量的商品</li><li>一个商品要嘛全偷要嘛不偷，不能只偷一部分</li><li>偷的商品列表背包必须能装的下，并且价格最大</li></ul><h4 id="1、简化问题-v2">1、简化问题</h4><p>简化问题的过程：</p><ul><li>最简单的是什么？只有一个商品，只能装1kg的背包</li><li>增加点难度，只有一个商品，背包的重量逐渐增加到罗伯特的背包重量</li><li>继续增加难度，只有两个商品，1kg的背包能偷什么？2kg的背包能偷什么？3kg、4kg呢？</li><li>有三个商品，1kg的背包能偷什么？2kg的背包能偷什么？3kg、4kg呢？</li><li>有n个商品和能装mkg的背包</li></ul><h4 id="2、简化后的问题各个击破">2、简化后的问题各个击破</h4><h5 id="把问题最小化：只有一个商品，只能装1kg的背包">把问题最小化：只有一个商品，只能装1kg的背包</h5><p>到这里其实我们还是无法知道到底应该怎么帮罗伯特决策，那么我们可不可以把问题简化一下，假如背包容量是1，商品个数也是1只有一把吉他；如下：</p><ul><li>容量1kg的背包</li><li>1把重量是1kg价格是$1500的吉他</li></ul><p>如果是上面简化后的问题，我们是可以计算的，计算方法是：判断吉他能否装入背包，如果可以则1kg容量的背包可以偷吉他，最大价格是$1500，我们继续使用一个表格把它记录下来：<br>我们先约定好表格的内容：</p><ul><li>行表示背包的容量</li><li>列表示有哪些商品</li><li>单元格的数字表示可以偷的最大值</li><li>括号里面是偷哪些商品<br>| 商品\容量 | 1 |<br>| — | — |<br>| 吉他 | 1500（吉他） |</li></ul><p>我们是如何得到上面的表格的呢？判断吉他是否能装进容量为1kg的背包中，如果可以则偷吉他，吉他的价格也就是偷取的最大的价格。</p><h5 id="增加难度，增加背包的容量：只有一个商品，背包的重量逐渐增加到罗伯特的背包重量">增加难度，增加背包的容量：只有一个商品，背包的重量逐渐增加到罗伯特的背包重量</h5><p>我们在上面的基础上再把背包的容量增加，直到增加到与罗伯特的背包相同的容量为止，但是依然只可以偷取一把吉他；我们把这些信息记录下来如下，其中第一列为商品，第一行为背包容量，表格记录的是偷取商品的最大价格，括号里面的是偷取的商品。<br>如下表的红色部分就代表，背包容量为4只有一把吉他可偷时，可以偷取的商品最大价格是1500，偷取的商品是吉他。</p><table><thead><tr><th>商品\容量</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>吉他</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td></tr></tbody></table><h5 id="继续增加难度，增加一个商品">继续增加难度，增加一个商品</h5><p>我们再在上面的基础上，增加可以偷取的商品，再加一个音箱，然后使用相同的方法绘制上面的表格；</p><table><thead><tr><th>商品\容量</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>吉他</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td></tr><tr><td>音箱</td><td>1500（吉他）</td><td></td><td></td><td></td></tr></tbody></table><p>上面可以看到**table[音箱][容量1]**的单元格的值如上表是1500,因为容量是1的背包无法装下音箱，所以依然只能偷吉他，所以可以偷取的商品的最大的价格为1500。<br>让我们完成这个表格的填写：</p><table><thead><tr><th>商品\容量</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>吉他</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td></tr><tr><td>音箱</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td><td>3000（音箱）</td></tr></tbody></table><p>如上表所示，当背包容量为4时，可以装下音箱，并且音箱的价格3000大于**table[吉他][容量4]<strong>的1500，所以此时我们设置</strong>table[音箱][容量4]<strong>的单元格的最大价格为3000。<strong>table[音箱][容量4] = Max(当前行计算的值, table[吉他][容量4])</strong><br></strong></p><h5 id="继续增加难度，再增加一个商品再增加一个商品">继续增加难度，再增加一个商品再增加一个商品</h5><p>我们继续把电脑增加到可以偷取的商品列表中，然后继续使用相同的方法画出电脑行的前三个容量的单元格如下：此时我们可以看到**table[电脑][容量3]**的值应该是2000，因为容量是3时可以装下电脑，而且电脑的价格比吉他的价格高，所以此时罗伯特应该偷电脑而不是吉他。</p><table><thead><tr><th>商品\容量</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>吉他</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td></tr><tr><td>音箱</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td><td>3000（音箱）</td></tr><tr><td>电脑</td><td>1500（吉他）</td><td>1500（吉他）</td><td>2000（电脑）</td><td></td></tr></tbody></table><p><strong>table[电脑][容量3] = Max(当前行计算的值, table[音箱][容量3])</strong><br>我们继续看最后一个单元格（**table[电脑][容量4]）**应该填什么，如果罗伯特偷电脑，则背包容量还剩下1，而容量为1的背包可以偷取的商品价格最大值是1500，偷取的商品是吉他，所以此时可以选择偷取电脑+吉他，价格是2000+1500=3500；这比之前记录的背包容量是4时的商品最大值（3000）大，所以这个单元格的价格应该是3500，偷取的商品是电脑+吉他</p><table><thead><tr><th>商品\容量</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>吉他</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td></tr><tr><td>音箱</td><td>1500（吉他）</td><td>1500（吉他）</td><td>1500（吉他）</td><td>3000（音箱）</td></tr><tr><td>电脑</td><td>1500（吉他）</td><td>1500（吉他）</td><td>2000（电脑）</td><td>3500（电脑+吉他）</td></tr></tbody></table><p><strong>table[电脑][容量4] = Max(当前行计算的值 + 剩余容量可以偷取的最大值, table[音箱][容量3])</strong><br>OK，完成上面的表格之后我们就可以确定，罗伯特应该偷电脑+吉他，商品的价格为3500。随着我们不断的填写表格，我们可以知道结果最终保存在表格的右下角，即**table[电脑][容量4]**的单元格内。</p><h4 id="2、总结归纳">2、总结归纳</h4><p>让我们总结一下每个单元格填写的规律：<br>假设背包总容量为V，商品的数量是M，第i个商品的重量是Wi，价格是Pi，容量是v（1&lt;v&lt;=V）时我们可以使用下面的公式：<br>f(i,v) = Wi &lt;= v ? max(Pi + f(i-1, v-Wi), f(i-1, v)) : f(i-1, v)<br>分解上面的公式：</p><table><thead><tr><th>情形</th><th>值</th></tr></thead><tbody><tr><td>Wi &lt;= v</td><td>max(Pi + f(i-1, v-Wi), f(i-1, v))</td></tr><tr><td>Wi &gt; v</td><td>f(i-1, v)</td></tr></tbody></table><p><strong>3、代码实现</strong><br>我们继续用上面罗伯特打家劫舍的思路，把已经计算过的值保存下来，然后在用到的时候直接取用。因为当前问题有多个商品和多种背包容量两个限制纬度，所以在记录时需要用到二维数组。<br>show you the code：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给出商品列表和背包的容量，请计算偷取哪些商品可以达到价格最大化，最大的价格是多少？</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> products    商品列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bagCapacity 背包容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 能够偷取的商品最大的价格之和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">stealMaxPrice</span><span class="params">(Product[] products, <span class="keyword">int</span> bagCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 二维数组，记录已经计算过的最大价格</span></span><br><span class="line"><span class="comment">         * 二维数组比商品的个数多1，比背包的大小多1，原因是为了方便使用相同的公式，第0行和第0列的值都是0</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span>[][] table = <span class="keyword">new</span> <span class="keyword">int</span>[products.length + <span class="number">1</span>][bagCapacity + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= products.length; j++) &#123;</span><br><span class="line">            Product product = products[j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> currentBagCapacity = <span class="number">1</span>; currentBagCapacity &lt;= bagCapacity; currentBagCapacity++) &#123;</span><br><span class="line">                table[j][currentBagCapacity] = product.weight &lt;= currentBagCapacity ?</span><br><span class="line">                        Math.max(product.price + table[j - <span class="number">1</span>][currentBagCapacity - product.weight], table[j - <span class="number">1</span>][currentBagCapacity])</span><br><span class="line">                        : table[j - <span class="number">1</span>][currentBagCapacity];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> table[products.length][bagCapacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">(String name, <span class="keyword">int</span> price, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.price = price;</span><br><span class="line">            <span class="keyword">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 商品名称</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String name;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 商品价格(单位$)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> price;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 商品重量(单位磅)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br>代码中的table最终是这样的：</p><table><thead><tr><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th></tr></thead><tbody><tr><td>0</td><td>1500</td><td>1500</td><td>1500</td><td>1500</td><td>1500</td></tr><tr><td>0</td><td>1500</td><td>1500</td><td>1500</td><td>1500</td><td>3000</td></tr><tr><td>0</td><td>1500</td><td>1500</td><td>1500</td><td>2000</td><td>3500</td></tr></tbody></table><p>其实上面的代码我简化了一下，返回的是最大能偷的价格，而罗伯特当然是要价格最大的商品列表了，这个实现比较麻烦不贴在这里了可以看<a href="https://github.com/guozhe001/my-tools/blob/eb33781f6fe3613ca531ad047de60b2cb0ec8e45/my-learn/my-algorithm/src/main/java/com/nicai/algorithm/other/DynamicProgrammingPractice.java">源码</a></p><h1 id="什么是动态规划（英语：Dynamic-programming，简称DP）">什么是动态规划（英语：Dynamic programming，简称DP）</h1><h2 id="概念：">概念：</h2><p>动态规划是一种在<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6">数学</a>、<a href="https://zh.wikipedia.org/wiki/%E7%AE%A1%E7%90%86%E7%A7%91%E5%AD%A6">管理科学</a>、<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6">计算机科学</a>、<a href="https://zh.wikipedia.org/wiki/%E7%BB%8F%E6%B5%8E%E5%AD%A6">经济学</a>和<a href="https://zh.wikipedia.org/wiki/%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6">生物信息学</a>中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。</p><h2 id="用途：">用途：</h2><p>动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。<br>动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。</p><h3 id="适用情况">适用情况</h3><ul><li>最优子结构性质。<ul><li>如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。</li><li>最优子结构性质为动态规划算法解决问题提供了重要线索。</li></ul></li><li>无后效性。<ul><li>即子问题的解一旦确定，就不再改变，不受在这之后、包含它的更大的问题的求解决策影响。</li></ul></li><li>子问题重叠性质。<ul><li>子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。</li><li>动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是在表格中简单地查看一下结果，从而获得较高的效率，降低了时间复杂度。</li></ul></li></ul><br>### 重叠子问题：如何理解这个概念呢？Fibnacci数列<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> n &gt;=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fib(n-<span class="number">2</span>) + fib(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的斐波那契数列的递归的实现方法中，我们传入的参数n等于8或者等于10的时候，第m（m&lt;n）个数字是变化的吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> n &gt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            c[i] = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c[i] = c[i - <span class="number">2</span>] + c[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态规划是递归算法的优化方案，一般来说能用递归的都可以思考一下能不能使用动态规划的方式优化。</p><h3 id="最优子结构性质">最优子结构性质</h3><p>上面两个罗伯特的例子就是最“优自结构性质”的问题，不好解释大家可以自己体会。</p><p><strong>总结：判断是否可以用动态规划解决问题的核心是：大规模的问题是否能够通过较小规模的问题来解决。</strong></p><h2 id="效率：">效率：</h2><p>通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：一旦某个给定子问题的解已经算出，则将其<a href="https://zh.wikipedia.org/wiki/%E8%AE%B0%E5%BF%86%E5%8C%96">记忆化</a>存储，以便下次需要同一个子问题解之时直接查表。这种做法在重复子问题的数目关于输入的规模呈<a href="https://zh.wikipedia.org/wiki/%E6%8C%87%E6%95%B8%E5%A2%9E%E9%95%B7">指数增长</a>时特别有用。<br></p><h2 id="一些可以使用动态规划解决的常见题目">一些可以使用动态规划解决的常见题目</h2><ul><li>爬楼梯问题</li><li>最长子串（子串需要连续）</li><li>最长子序列（子序列不需要连续）</li><li>最长子串的变种：最长回文子串（回文：“上海自来水来自海上”）</li><li>DNA序列比对</li></ul><h2 id="动态规划不可以解决什么问题">动态规划不可以解决什么问题</h2><ul><li>可以拆分的商品（如罗伯特拿着4kg的背包偷四袋不同价格的豆子（这些商品可以拆分））</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记-《我的第一本算法书》</title>
      <link href="2024/11/22/algorithms/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8A%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9C%AC%E7%AE%97%E6%B3%95%E4%B9%A6%E3%80%8B/"/>
      <url>2024/11/22/algorithms/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8A%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9C%AC%E7%AE%97%E6%B3%95%E4%B9%A6%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章：数据结构">第一章：数据结构</h1><h2 id="链表">链表</h2><h3 id="特性">特性</h3><ul><li>呈线性排列的数据结构，元素中有字段指向下一个元素</li></ul><h3 id="内存">内存</h3><ul><li>内存空间不连续</li></ul><h3 id="时间复杂度">时间复杂度</h3><ul><li><p>删除：</p><ul><li><p>直接在最后把指向被删除的元素改为指向被删除的下一个元素修改即可</p></li><li><p>时间复杂度：O(1)</p></li></ul></li><li><p>添加：</p><ul><li><p>直接在当前列表的最后的元素的指向另一个元素即可</p></li><li><p>时间复杂度：O(1)</p></li></ul></li><li><p>查询：</p><ul><li><p>需要从最开始的元素查询</p></li><li><p>时间复杂度：O(n)</p></li></ul></li></ul><h3 id="扩展">扩展</h3><ul><li>循环链表，最后一个元素的下一个元素指向开头的元素</li><li>每个元素有两个指向，分别指向前一个元素和后一个元素</li></ul><h2 id="数组">数组</h2><h3 id="特性-v2">特性</h3><ul><li>呈线性排列的数据结构，元素有下标</li></ul><h3 id="内存-v2">内存</h3><ul><li>元素在内存中是连续的</li></ul><h3 id="时间复杂度-v2">时间复杂度</h3><ul><li><p>添加：</p><ul><li><p>首先需要在末尾增加需要的存储空间，把需要添加的位置以及以后的元素的下标全部+1，把需要添加的位置放进新的元素</p></li><li><p>时间复杂度：O(n)</p></li></ul></li><li><p>删除：</p><ul><li><p>依此把需要删除的位置的以后的元素的下标-1</p></li><li><p>时间复杂度：O(n)</p></li></ul></li><li><p>查询：</p><ul><li><p>根据下标直接随机访问</p></li><li><p>时间复杂度：O(1)</p></li></ul></li></ul><h2 id="栈">栈</h2><h3 id="特性-v3">特性</h3><ul><li><p>呈线性排列的数据结构；后进先出Last In First Out，简称 LIFO</p></li><li><p>push（入栈），pop（出栈）</p></li></ul><h3 id="时间复杂度-v3">时间复杂度</h3><ul><li>入栈和出栈，时间复杂度都是：O(1)</li></ul><h2 id="队列">队列</h2><h3 id="特性-v4">特性</h3><ul><li>呈线性排列的数据结构；先进先出First In First Out，简称FIFO</li><li>入队，出队</li></ul><h3 id="时间复杂度-v4">时间复杂度</h3><ul><li>入队和出队的时间复杂度都是：O(1)</li></ul><h2 id="哈希表">哈希表</h2><h3 id="特性-v5">特性</h3><ul><li>哈希表存储的是由键（key）和值（value）组 成的数据</li><li>如果在hash值不冲突时，哈希表的每个桶都只保存一个key；如果hash值冲突了，则会变成链表存储</li><li>先用key计算hash值，将得到的哈希值除以数组的长度，求得其余数、就找到了存储位置。这样的求余运算叫作“mod 运算”</li><li>如果两个key的hash值求余后找到的存储位置已经有值，这种存储位置重复了的情况便叫作“冲突”。遇到这种情况，可使用链表在已有数据的后面 继续存储新的数据</li></ul><h3 id="时间复杂度-v5">时间复杂度</h3><ul><li>哈希表的时间复杂度与hash算法有关<ul><li>如果hash值不会冲突（理想情况），则新增、修改、删除、查询的时间复杂度都是：O(1)</li><li>如果hash值全部一致，则hash表其实就是一个链表，时间复杂度也与链表一致</li></ul></li></ul><h3 id="补充说明">补充说明</h3><p>在存储数据的过程中，如果发生冲突，可以利用链表在已有数据的后面插入新数据 来解决冲突；这种方法被称为“链地址法”。</p><p>除了链地址法以外，还有几种解决冲突的方法。</p><p>其中，应用较为广泛的是“开放地址法”。这种方法是指当冲突发生时，立刻计算出一个候补地址（数组上的位置）并将数 据存进去。如果仍然有冲突，便继续计算下一个候补地址，直到有空地址为止。可以通过多次使用哈希函数或“线性探测法”等方法计算候补地址。</p><h2 id="堆">堆</h2><h3 id="特性-v6">特性</h3><ul><li><p>堆是一种图的树形结构，被用于实现“优先队列”（priority queues）。</p></li><li><p>优先队列是一种数据结构，可以自由添加数据，但取出数据时要从最小值开始按顺 序取出。</p></li><li><p>在堆的树形结构中，各个顶点被称为“结点”（node），数据就存储在这些结点中。</p></li><li><p>堆中的节点最多有两个子节点，节点的排序为从上到下，同一行则从左到右。</p></li><li><p>堆中存储数据的规则：子节点必须大于父节点</p></li></ul><h3 id="时间复杂度-v6">时间复杂度</h3><ul><li><p>添加数据</p><ul><li>增加节点时在最下面一行的最左边增加，如果最下面的一行没有位置则增加新的一行</li><li>如果增加的数据比父节点的数字小，则与父节点交换位置，重复此步骤直到比父节点大或者没有父节点为止</li><li>时间复杂度：O(logn)</li></ul></li><li><p>取出数据</p><ul><li>取出数据永远是取最上面节点的数据</li><li>最上面节点的数据被取走之后，需要重新调整</li><li>重新调整时，需要把最后的数据（即最下面一行最右边的节点）移动到最上面</li><li>然后与最上面的两个子节点做比较，如果数字小于两个子节点，则调整完成</li><li>如果最上面的数据大于子节点的数据，则与较小的子节点的位置进行交换，重复此操作直到所有父节点小于子节点为止</li><li>时间复杂度:O(logn)</li></ul></li></ul><h2 id="二叉查找树">二叉查找树</h2><h3 id="特性-v7">特性</h3><ul><li><p>二叉查找树（又叫作二叉搜索树或二叉排序树）是一种采用了图的树形结构的数据结构</p></li><li><p>每个节点最多有两个子节点</p></li><li><p><strong>每个节点的值大于其左子树的任意节点的值</strong></p></li><li><p><strong>每个节点的值小于其右子树的任意节点的值</strong></p></li><li><p>根据上面的特性，我们可以知道如果想要查找最小值，则在左边的最末端</p></li></ul><h3 id="时间复杂度-v7">时间复杂度</h3><ul><li><p>添加数据</p><ul><li>从顶端开始查找添加位置</li><li>如果添加的值大于顶端的值，则往右移；小于它则往左移</li><li>时间复杂度：O(logn)</li></ul></li><li><p>删除数据</p><ul><li>如果删除的节点没有子节点，则直接删除此节点</li><li>如果删除的节点有一个子节点，则删除此节点后把子节点移到当前的节点</li><li>如果删除的节点有两个子节点，则删除此节点后把左边子节点的最右端移到当前节点（也可以把右边子节点的最左端移到当前节点）</li><li>上面的一句可以理解为：把小于被删除的节点的最大值移到删除的节点；或者把大于被删除节点的最小值移到删除节点</li><li>如果移动的节点还有子节点，也按照同样的方式移动</li><li>时间复杂度：O(logn)</li></ul></li><li><p>查找数据</p><ul><li>从顶端开始查找</li><li>如果大于查找节点的值，则向右移；如果小于查找节点的值，则向左移；循环此操作</li><li>时间复杂度：O(logn)</li></ul></li></ul><h3 id="扩展-v2">扩展</h3><h4 id="关于时间复杂度">关于时间复杂度</h4><ul><li>如果数的形状比较均衡，查找的时间复杂度是O(logn)</li><li>如果不均衡极端情况下是一个链表，查找的时间复杂度是O(n)</li></ul><h4 id="以二叉查找树为基础扩展的数据结构">以二叉查找树为基础扩展的数据结构</h4><ul><li>“平衡二叉查找树”：这种数据结构可以修正形状不均衡的树，让其始终保持均衡形态，以提高查找效率</li><li>“B 树”：二叉查找树中一个结点最多有两个子结点，如果我们把子结点数扩展为 m（m 为预先设定好的常数）。像这种子结点数可以自由设定，并且形状均衡的树便是 B 树</li></ul><h1 id="第二章：排序">第二章：排序</h1><h2 id="冒泡排序">冒泡排序</h2><h3 id="算法释义">算法释义</h3><p>冒泡排序就是重复“从序列右边开始比较相邻两个数字的大小，再根据结果交换两个数字 的位置”这一操作的算法。</p><p>在这个过程中，数字会像泡泡一样，慢慢从右往左“浮”到序列的 顶端，所以这个算法才被称为“冒泡排序”。</p><h3 id="时间复杂度：O-n²">时间复杂度：O(n²)</h3><p>在冒泡排序中：</p><ul><li><p>第 1 轮需要比较 n -1 次</p></li><li><p>第 2 轮需要比较 n -2 次</p></li><li><p>第 n -1 轮需 要比较 1 次</p></li></ul><p>因此，总的比较次数为 (n -1) +(n -2) +…+1 ≈ n² /2。这个比较次数恒定为 该数值，和输入数据的排列顺序无关。</p><h3 id="Java代码实现">Java代码实现</h3><p><a href="https://github.com/guozhe001/my-tools/blob/master/my-learn/my-algorithm/src/main/java/com/nicai/algorithm/sort/BubbleSortStartFromLeft.java">冒泡排序</a></p><h2 id="选择排序">选择排序</h2><h3 id="算法释义-v2">算法释义</h3><ul><li>选择排序就是重复“从待排序的数据中寻找最小值，将其与序列最左边的数字进行交换” 这一操作的算法。</li><li>在序列中寻找最小值时使用的是线性查找。</li></ul><h3 id="时间复杂度：O-n²-v2">时间复杂度：O(n²)</h3><p>选择排序使用了线性查找来寻找最小值，因此在</p><ul><li>第 1 轮中需要比较 <em>n</em> - 1 个数字</li><li>第 2 轮需要比较 <em>n</em> - 2 个数字</li><li>到第 <em>n</em> - 1 轮的时候就只需比较 1 个数字</li><li>因此，总的比较次数与冒泡排序的相同，都是(<em>n</em>-1)+(<em>n</em>-2)+…+1 ≈ <em>n</em>2/2 次。</li></ul><h3 id="Java代码实现-v2">Java代码实现</h3><p><a href="https://github.com/guozhe001/my-tools/blob/master/my-learn/my-algorithm/src/main/java/com/nicai/algorithm/sort/SelectSort.java">选择排序</a></p><h2 id="插入排序">插入排序</h2><h3 id="算法释义-v3">算法释义</h3><p>插入排序是一种从序列左端开始依次对数据进行排序的算法。</p><p>在排序过程中，左侧的数据陆续归位，而右侧留下的就是还未被排序的数据。</p><p>插入排序的思路就是从右侧的未排序区域内取出一个数据，然后将它插入到已排序区域内合适的位置上。</p><h3 id="时间复杂度：O-n²-v3">时间复杂度：O(n²)</h3><h3 id="Java代码实现-v3">Java代码实现</h3><p><a href="https://github.com/guozhe001/my-tools/blob/master/my-learn/my-algorithm/src/main/java/com/nicai/algorithm/sort/InsertSort.java">插入排序</a></p><h2 id="堆排序">堆排序</h2><h3 id="算法释义-v4">算法释义</h3><p>堆排序的特点是利用了数据结构中的堆</p><ul><li>首先，在堆中存储所有的数据，并按降序来构建堆</li><li>然后从堆中取出数据，并把取出的数据放在最右边的空位置</li></ul><h3 id="时间复杂度：O-nlogn">时间复杂度：<em>O</em>(<em>n</em>log<em>n</em>)</h3><p>堆排序一开始需要将 <em>n</em> 个数据存进堆里，所需时间为 <em>O</em>(<em>n</em>log<em>n</em>)</p><p>每轮取出最大的数据并重构堆所需要的时间为 <em>O</em>(log<em>n</em>)</p><p>由于总共有 <em>n</em> 轮，所以重构后排序的时间也是 <em>O</em>(<em>n</em>log<em>n</em>)</p><p>因此，整体来看堆排序的时间复杂度为 <em>O</em>(<em>n</em>log<em>n</em>)</p><h3 id="Java代码实现-v4">Java代码实现</h3><p>暂无</p><h2 id="归并排序">归并排序</h2><h3 id="算法释义-v5">算法释义</h3><p>归并排序算法会把序列分成长度相同的两个子序列，当无法继续往下分时(也就是每个子序列中只有一个数据时)，就对子序列进行归并。</p><p>归并指的是把两个排好序的子序列合并成一个有序序列。</p><p>该操作会一直重复执行，直到所有子序列都归并为一个整体为止。</p><h3 id="时间复杂度-O-nlogn">时间复杂度:O(nlogn)</h3><ul><li>把数组拆分成不可分割的最小单元的数组，时间复杂度O(n)</li><li>依次把所有数组进行合并排序，每一轮的比较次数为O(n)；需要进行logn轮</li><li>最终的时间复杂度是O(nlogn)</li></ul><h3 id="Java代码实现-v5">Java代码实现</h3><p><a href="https://github.com/guozhe001/my-tools/blob/master/my-learn/my-algorithm/src/main/java/com/nicai/algorithm/sort/MergeSort.java">归并排序</a></p><h2 id="快速排序">快速排序</h2><h3 id="算法释义-v6">算法释义</h3><ul><li><p>快速排序算法首先会在序列中随机选择一个基准值（pivot）</p></li><li><p>然后将除了基准值以外的数分为“比基准值小的数”和“比基准值大的数”这两个类别，再将其排列成以下形式。</p><ul><li>[ 比基准值小的数 ] 基准值 [ 比基准值大的数 ]</li></ul></li><li><p>接着，对两个“[ ]”中的数据进行排序之后，整体的排序便完成了。对“[ ]”里面的数据进行排序时同样也会使用快速排序。</p></li></ul><h3 id="时间复杂度：O-nlogn-v2">时间复杂度：O(nlogn)</h3><ul><li>每一轮比较的次数为n次，时间复杂度O(n)</li><li>需要进行logn轮的比较</li><li>最终的时间复杂度是O(nlogn)</li></ul><h3 id="Java代码实现-v6">Java代码实现</h3><p><a href="https://github.com/guozhe001/my-tools/blob/master/my-learn/my-algorithm/src/main/java/com/nicai/algorithm/sort/FastSort.java">快速排序</a></p><h3 id="扩展-v3">扩展</h3><p>基准值约接近数组的平均值，排序的速度越快；基准值一般都使用第一个数字</p><h1 id="第三章：数组的查找">第三章：数组的查找</h1><h2 id="线性查找">线性查找</h2><h3 id="特性-v8">特性</h3><ul><li>遍历整个数组，逐个进行比较，直到找到为止</li></ul><h3 id="时间复杂度：O-n">时间复杂度：O(n)</h3><h3 id="Java代码实现-v7">Java代码实现</h3><p><a href="https://github.com/guozhe001/my-tools/blob/master/my-learn/my-algorithm/src/main/java/com/nicai/algorithm/search/LinearSearch.java">线性查找</a></p><h2 id="二分查找">二分查找</h2><h3 id="特性-v9">特性</h3><ul><li>只能查找已经排好序的数组</li><li>每次查找取中间位置的值与需要查找的数字比较，如果中间值大于待查找数据，则继续在中间值左边的数组进行查找；反之亦然</li></ul><h3 id="时间复杂度-O-logn">时间复杂度 O(logn)</h3><ul><li>每一次查找都会把待查找的范围缩小一半，直到结束为止</li><li>查找需要logn轮，每一轮比较1次；所以时间复杂度为O(logn)</li></ul><h3 id="Java代码实现-v8">Java代码实现</h3><p><a href="https://github.com/guozhe001/my-tools/blob/master/my-learn/my-algorithm/src/main/java/com/nicai/algorithm/search/BinarySearch.java">二分查找</a></p><h1 id="第四章：图的搜索">第四章：图的搜索</h1><h2 id="图的定义">图的定义</h2><p>计算机科学或离散数学中说的“图”是下面这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/null/image-20200822163332465.png" alt="image-20200822163332465"></p><p>上图中的圆圈叫作“顶点”(也叫“结点”)，连接顶点的线叫作“边”。也就是说，<strong>由顶点和连接每对顶点的边所构成的图形就是图</strong>。<em>图可以表示各种关系</em></p><h3 id="加权图">加权图</h3><p>我们可以给边加上一个值，这个值叫作边的“权重”或者“权”，加了权的图被称为“加权图”。</p><p>没有权的边只能表示两个 顶点的连接状态，而有权的边就可以表示顶点之间的“连接程度”。</p><p>所谓“程度”在不同的场景意思也不一样：</p><ul><li>地铁线路图两站之间的权是两站之间的距离</li><li>同样是地铁线路图，两站之前的权也可以是两站之间的时间</li><li>如果是高铁站线路图，两站之间的权也可以表示两站之间的乘车费</li></ul><h3 id="有向图">有向图</h3><p>当我们想在路线图中表示该路线只能单向行驶时，就可以给边加上箭头，而这样的图就叫 作“有向图”。</p><p>和无向图一样，有向图也可以在边上添加权重，而且根据方向的不同，权重也不一样。</p><p>如下图中，如果权重表示花费时间，则B点到C点是下坡路，反过来C到B就是上坡路。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/null/image-20200822164224711.png" alt="image-20200822164224711"></p><h3 id="图能给我们带来哪些便利">图能给我们带来哪些便利</h3><p>假设图中有两个顶点 <em>s</em> 和 <em>t</em>，而我们设计出了一种算法， 可以找到“从 <em>s</em> 到 <em>t</em> 的权重之和最小”的那条路径，如：</p><ul><li>寻找计算机网络中通信时间最短的路径</li><li>寻找路线图中耗时最短的路径</li><li>寻找路线图中最省乘车费的路径</li></ul><h3 id="图在代码中如何实现">图在代码中如何实现</h3><ul><li>图是用来表示节点与节点的关系的，所以可以使用Map来实现图</li><li>有向图，如上面图两个节点A和B、map中key为A的值有B，而key为B的值没有A，就可以表示方向</li><li>加权图，同样适用Map实现，区别是在value中既包含下一个节点的信息，又包含权重信息<a href="https://github.com/guozhe001/my-tools/blob/master/my-learn/my-algorithm/src/main/java/com/nicai/algorithm/map/AssignWeightsNode.java">加权图Java实现</a></li></ul><h2 id="图的搜索">图的搜索</h2><h3 id="广度优先搜索">广度优先搜索</h3><p>假设我们一开始位于某个顶点(即起点)，此时并不知道图的整体结构，而我们的目的是从起点开始顺着边搜索，直到到达指定顶点(即终点)。</p><p>在此过程中每走到一个顶点，就会判断一次它是否为终点。广度优先搜索会优先从离起点近的顶点开始搜索。</p><h4 id="Java代码实现-v9">Java代码实现</h4><p><a href="https://github.com/guozhe001/my-tools/blob/master/my-learn/my-algorithm/src/main/java/com/nicai/algorithm/map/BreadthFirstSearch.java">广度优先搜索</a></p><h3 id="深度优先搜索">深度优先搜索</h3><p>深度优先搜索会沿着一条路径不断往下搜索直到不能再继续为止，然后再折返，开始搜索下一条候补路径。</p><h4 id="Java代码实现-v10">Java代码实现</h4><p><a href="https://github.com/guozhe001/my-tools/blob/master/my-learn/my-algorithm/src/main/java/com/nicai/algorithm/map/DepthFirstSearch.java">深度优先搜索</a></p><h3 id="广度优先搜索和深度优先搜索对比">广度优先搜索和深度优先搜索对比</h3><p>广度优先搜索选择的是最早成为候补的顶点，因为顶点离起点越近就越早成为候补，所以会从离起点近的地方开始按顺序搜索;</p><p>而深度优先搜索选择的则是最新成为候补的顶点，所以会一路往下，沿着新发现的路径不断深入搜索。</p><h3 id="贝尔曼-福特算法">贝尔曼 - 福特算法</h3><h4 id="解决的问题">解决的问题</h4><ul><li><p>贝尔曼 - 福特(Bellman-Ford)算法是一种在图中求解最短路径问题的算法。</p></li><li><p>最短路径问题就是在加权图指定了起点和终点的前提下，寻找从起点到终点的路径中权重总和最小的那条路径。</p></li></ul><h4 id="求解的步骤">求解的步骤</h4><ul><li>首先设置各个顶点的初始权重 :起点为 0，其他顶点为无穷大(∞)；这个权重的意思是从起点到当前节点的最短路径暂定值。</li><li>从起点（A）开始遍历，找到子节点（B），更新子节点的权重：min(A的权重+A到B边的权重,B节点权重)</li><li>循环上面的步骤一直更新所有节点</li></ul><h4 id="时间复杂度O-nm">时间复杂度<em>O</em>(<em>nm</em>)</h4><ul><li>将图的顶点数设为 <em>n</em>、边数设为 <em>m</em>。</li><li>该算法经过 <em>n</em> 轮更新操作后就会停止，而在每轮更新操作中都需要对各个边进行 1 次确认</li><li>因此 1 轮更新所花费的时间就是 <em>O</em>(<em>m</em>)，整体的时间复杂度就是 <em>O</em>(<em>nm</em>)</li></ul><h4 id="Java代码实现-v11">Java代码实现</h4><p><a href="https://github.com/guozhe001/my-tools/blob/7629245129fcdb4422e45fe37a8c332b1244140f/my-learn/my-algorithm/src/main/java/com/nicai/algorithm/map/BellmanFord.java">贝尔曼-福特算法</a></p><h3 id="狄克斯特拉算法">狄克斯特拉算法</h3><h4 id="解决的问题-v2">解决的问题</h4><p>狄克斯特拉(Dijkstra)算法也是求解最短路径问题 的算法，使用它可以求得从起点到终点的路径中权重总和最小的那条路径。</p><h4 id="求解的步骤-v2">求解的步骤</h4><ul><li>首先设置各个顶点的初始权重 :起点为 0，其他顶点为无穷大(∞)；这个权重的意思是从起点到当前节点的最短路径暂定值。</li><li>从起点出发，寻找可以从目前所在的顶点直达且尚未被搜索过的顶点。</li><li>计算各个候补顶点的权重。计算方法是“目前所在顶点的权重+目前所在顶点到候补顶点的权重”。</li><li>如果计算结果小于候补顶点的值，就更新这个值。</li><li><strong>从候补顶点中选出权重最小的顶点，作为下一个被搜索的点</strong>，这一点与贝尔曼-福特算法不一样</li></ul><h4 id="时间复杂度-v8">时间复杂度</h4><p>将图的顶点数设为 <em>n</em>、边数设为 <em>m</em>，那么如果事先不进行任何处理，该算法的时 间复杂度就是 <em>O</em>(<em>n</em>2)。</p><p>不过，如果对数据结构进行优化，那么时间复杂度就会变为 <em>O</em>(<em>m</em> + <em>n</em>log<em>n</em>)。</p><h4 id="Java代码实现-v12">Java代码实现</h4><p><a href="https://github.com/guozhe001/my-tools/blob/master/my-learn/my-algorithm/src/main/java/com/nicai/algorithm/map/Dijkstra.java">狄克斯特拉(Dijkstra)算法</a></p><h3 id="贝尔曼福特算法和迪克斯特拉算法对比">贝尔曼福特算法和迪克斯特拉算法对比</h3><h4 id="说明">说明</h4><p>如果在一个闭环中边的权重总和是负数，那么只要不断遍历这个闭环，路径的权重就能不断减小，也就是说根本不存在最短路径。</p><p>贝尔曼 - 福特算法可以直接认定不存在最短路径，但在狄克斯特拉算法中，即便不存在最短路径，它也会 算出一个错误的最短路径出来。因此，有负数权重时不能使用狄克斯特拉算法。</p><p>总的来说，就是不存在负数权重时，更适合使用效率较高的狄克斯特拉算法，而存 在负数权重时，即便较为耗时，也应该使用可以得到正确答案的贝尔曼 - 福特算法。</p><h3 id="A-（A-Star）算法">A*（A-Star）算法</h3><h4 id="解决的问题-v3">解决的问题</h4><p>A-Start算法也是解决在图中求解最短路径问题的算法，由狄克斯特拉算法发展而来。</p><p>狄克斯特拉算法会从离起点近的顶点开始，按顺序求出起点到各个顶点的最短路径。</p><p>也就是说，一些离终点较远的顶点的最短路径也会被计算出来，但这部分其实是无用的。</p><p>与之不同，A* 就 会预先估算一个值，并利用这个值来省去一些无用的计算</p><h1 id="第五章-安全算法">第五章 安全算法</h1><h2 id="安全和算法">安全和算法</h2><h3 id="传输数据时的四个问题">传输数据时的四个问题</h3><h4 id="窃听">窃听</h4><p>A 向 B 发送的消息可能会在传输途中被 X 偷看(如下图)。这就是“窃听”。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200918183116803.png" alt="image-20200918183116803"></p><h4 id="假冒">假冒</h4><p>A 以为向 B 发送了消息，然而 B 有可能是 X 冒充的(如下图);反过来，B 以为从 A 那里收到了消息，然而 A 也有可能是 X 冒充的。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200918183227754.png" alt="image-20200918183227754"></p><h4 id="篡改">篡改</h4><p>即便 B 确实收到了 A 发送的消息，但也有可能像右图 这样，该消息的内容在途中就被 X 更改了。</p><p>除了被第三者篡改外，通 信故障导致的数据损坏也可能会使消息内容发生变化。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200918183344985.png" alt="image-20200918183344985"></p><h4 id="事后否认">事后否认</h4><p>B 从 A 那里收到了消息，但作为消息发送者的 A 可 能对 B 抱有恶意，并在事后声称“这不是我发送的消息”。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200918183430948.png" alt="image-20200918183430948"></p><h3 id="解决这些问题的安全技术">解决这些问题的安全技术</h3><ul><li><p>为了应对“窃听”，我们会使用“加密” 技术。</p></li><li><p>为了应对“假冒”，我们会使用“消息认证码”(下图左)或“数字签名”(下图右)技术。</p></li><li><p>为了应对“篡改”，我们同样会使用 “消息认证码”或“数字签名”技术。</p></li><li><p>其中“数字签名”技术还可以用于预防“事后否认”。</p></li></ul><h2 id="哈希函数">哈希函数</h2><ul><li><p>哈希函数可以把给定的数据转换成固定长度的无规律数值。</p></li><li><p>转换后的无规律数值可以作为数据摘要应用于各种各样的场景。</p></li></ul><p>希函数的特征：</p><ul><li>第一个特征是输出的哈希值数据长度不变。（不论输入的参数长短，得到的哈希值是定长的）</li><li>第二个特征是如果输入的数据相同，那么输出 的哈希值也必定相同。</li><li>第三个特征是即使输入的数据相似，但哪怕它们只有一比特的差别，那么输出的哈希值也会有很大的差异。</li><li>第四个特征是即使输入的两个数据完全不同，输 出的哈希值也有可能是相同的；这种情况叫作“哈希冲突”。</li><li>第五个特征是不可能从哈希值反向推算出原本的数据。（输入和输出不可逆）</li></ul><p>哈希函数的算法中具有代表性的是 MD5 1、SHA-1 2和 SHA-2 等。其中 SHA-2 是现 在应用较为广泛的一个，而 MD5 和 SHA-1 存在安全隐患，不推荐使用。</p><h3 id="应用示例">应用示例</h3><p>将用户输入的密码保存到服务器时也需要用到哈希函数。</p><p>如果把密码直接保存到服务器，可能会被第三者窃听，因此需要算出密码的哈希值，并只存储哈希值。</p><p>当用户输入密码时，先算出该输入密码的哈希值，再把它和服务 器中的哈希值进行比对。</p><h2 id="共享密钥加密（对称加密）">共享密钥加密（对称加密）</h2><p>共享密钥加密是加密和解密都<strong>使用相同密钥</strong>的一种加密方式。</p><p>实现共享密钥加密的算法有凯撒密码、AES 1、DES 2、动态口令等，其中 AES 的应用最 为广泛。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200918185110697.png" alt="对称加密"></p><h3 id="存在密钥分配问题">存在密钥分配问题</h3><p>如上图，如果在A给B发送密钥时，被X监听了，则X就能用相同的密钥解密截获的密文。</p><h2 id="公开密钥加密（非对称加密）">公开密钥加密（非对称加密）</h2><ul><li><p>公开密钥加密是加密和解密使用不同密钥的一种加密方法。</p></li><li><p>由于使用的密钥不同，所以这种算法也被称为“非对称加密”。</p></li><li><p>加密用的密钥叫作“公开密钥”，解密用的叫作“私有密钥”。</p></li></ul><p>实现公开密钥加密的算法有 RAS 算法、椭圆曲线加密算法等，其中使用最为广泛的是 RSA 算法。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200918185651314.png" alt="image-20200918185651314"></p><h3 id="不存在密钥分配问题">不存在密钥分配问题</h3><p>公开密钥和密文都是通过互联网传输的，因此可能会被 X 窃听。</p><p>但是，使用公开密钥无法解密密文，因此 X 也无法得到原本的数据。</p><h3 id="密钥数量不会过多">密钥数量不会过多</h3><p>只需要生成一对公私钥，就可以把公钥共享给n个人使用。</p><p>对称加密就的密钥数量会随着人的增多而增多。</p><h3 id="公开密钥加密存在公开密钥可靠性的问题">公开密钥加密存在公开密钥可靠性的问题</h3><p>如下图，加入B在把公钥Pb共享给A的时候，被X截获了；X把自己的公钥Px发送给了A。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200919111210334-20200919113122148.png" alt="image-20200919111210334"></p><p>这时A在不知情的情况下使用Px对数据进行加密发送给B时，X截获密文就可以通过私钥Sx进行解密。</p><p>然后X可以截获的通过公钥Pb加密恶意数据发送给B，B能够使用自己的密钥Sb进行解密，以为数据是A发送的。</p><p>如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200919113151447.png" alt="image-20200919113151447"></p><h3 id="非对称加密算法的条件">非对称加密算法的条件</h3><ul><li>可以使用某个数值对数据进行加密(计算)。</li><li>使用另一个数值对加密数据进行计算就可以让数据恢复原样。</li><li>无法从一种密钥推算出另一种密钥。</li></ul><h2 id="混合加密">混合加密</h2><p>共享密钥加密存在无法安全传输密钥的密钥分配问题，公开密钥加密又存在加密解密速度较慢的问题。</p><p>在混合加密中，要用处理速度较快的共享密钥加密对数据进行加密。不过，加密时使用的密钥，则需要用没有密钥分配问题的公开密钥加密进行处理。混合加密可以拆分成下面两步操作：</p><p>1、A在给B发送数据之前，先使用非对称的公钥对”对称加密的密钥“进行加密，然后把加密后的密文发送给A，A解密后就得到了”对称加密的密钥“。如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200919113611840.png" alt="image-20200919113611840"></p><p>2、发送数据时，A使用”对称加密的密钥“对数据进行加密，然后发送给B，这样B就能使用之前收到的”对称加密的密钥“对数据进行解密。如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200919114040964.png" alt="image-20200919114040964"></p><h2 id="迪菲-赫尔曼密钥交换">迪菲 - 赫尔曼密钥交换</h2><p>迪菲 - 赫尔曼(Diffie-Hellman)密钥交换是一种可以在通信双方之间安全交换密钥的方法。</p><p>这种方法通过将双方共有的秘密数值隐藏在公开数值相关的运算中，来实现双方之间密钥的安全交换。</p><h3 id="算法的概念">算法的概念</h3><p>假设有一种方法可以合成两个密钥。使用这种方法来合成密钥P和密钥S，就会得到由这两个密钥的成分所构成的密钥 P-S。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200919114844473.png" alt="image-20200919114844473"></p><p>这种合成方法有三个特征。</p><ul><li>第一，即使持有密钥 P 和合成的密钥 P-S，也无法把密钥 S 单独取出来。</li><li>第二，不管是怎样合成而来的密钥，都可以把它作为新的元素，继续与别的密钥进行合成。如下图，使用密钥 P 和密钥 P-S，还能合成出新的密钥 P-P-S。<ul><li><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200919115000979-0487431.png" alt="image-20200919115000979"></li></ul></li><li>第三，密钥的合成结果与合成顺序无关，只与用了哪些密钥有关。比如合成密钥 B 和密钥 C 后，得到的是密 钥 B-C，再将其与密钥 A 合成，得到的就是密钥 A-B-C。而合成密钥 A 和密钥 C 后，得到的是密钥 A-C， 再将其与密钥 B 合成，得到的就是密钥 B-A-C。此处的密钥 A-B-C 和密钥 B-A-C 是一样的。<ul><li><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200919115117042.png" alt="image-20200919115117042"></li></ul></li></ul><h3 id="密钥的交换">密钥的交换</h3><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200919115514893.png" alt="image-20200919115514893"></p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200919115535132.png" alt="image-20200919115535132"></p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200919115557280.png" alt="image-20200919115557280"></p><h2 id="消息认证码，MAC（Message-Authentication-Code）">消息认证码，MAC（Message Authentication Code）</h2><p>消息认证码可以实现“认证”和“检测篡改”这两个功能。</p><p>举个例子，如下图，假设 A 发送给 B 的密文（abc）在通信过程中被 X 恶意篡改了，而 B 收到密文后没有意识到这个问题。</p><p>B对密文进行解密可能无法解密或者解密后的数据是xyz。如果A在向B进行商品订购，如果B解密出的密文是xyz，就会给A发送xyz商品从而导致问题。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200919115921527.png" alt="image-20200919115921527"></p><h3 id="如何使用消息认证码解决篡改问题呢？">如何使用消息认证码解决篡改问题呢？</h3><ol><li>A在发送数据之前，先生成一个用于制作消息验证码的密钥（key），然后用安全的方法（如混合加密）发送给B</li><li>A对数据进行加密，并且使用第一步生成的key和密文生成一个数值，此值就是MAC</li><li>A把MAC和密文一起发送给B</li><li>B接收到密文和MAC后，先使用第一步A发送过来的key和密文使用同样的方法生成一个数值；并且使用此数值和收到的MAC进行比对<ol><li>如果比对一致，则说明数据未被篡改</li><li>如果比对不一致，则说明数据被篡改了，直接丢弃数据；然后通知A重发</li></ol></li></ol><h3 id="如果MAC和密文都被X截获了怎么办？">如果MAC和密文都被X截获了怎么办？</h3><ul><li>X可以修改密文，此时B使用被篡改后的密文和key生成的数值不等于MAC，就能确认通信过程中发生了篡改</li><li>X如果篡改了MAC，也与上一步一样，B也能确认通信过程中发生了篡改</li><li>X既篡改了密文也篡改了MAC，因为X没有生成MAC的key，所以B收到被篡改后的数据时同样能确认发生了篡改</li></ul><p><strong>我们可以把 MAC 想象成是由密钥和密文组成的字符串的“哈希值”。</strong></p><p><strong>计算 MAC 的算法有 HMAC 1、OMAC 2、CMAC 3等。目前，HMAC 的应用最为广泛。</strong></p><h3 id="消息验证码无法防止“事后否认”">消息验证码无法防止“事后否认”</h3><p>然而，这种方法也有缺点。在使用消息认证码的过程中，AB 双方都可以对消息进行加密并且算出 MAC。</p><p>也就是说，我们无法证明原本的消息是 A 生成的还是 B 生成的。 因此，假如 A 是坏人，他就可以在自己发出消息后声称“这条消息是 B 捏造的”，而否认自己的行为。如果 B 是坏人，他也可以自己准备一条消息，然后声称“这是 A 发 给我的消息”。</p><h2 id="数字签名">数字签名</h2><p>数字签名不仅可以实现消息认证码的认证和检测篡改功能，还可以预防事后否认问题的发生。</p><p>由于在消息认证码中使用的是共享密钥加密，所以持有密钥的收信人也有可能是消息的发 送者，这样是无法预防事后否认行为的。</p><p>而数字签名是只有发信人才能生成的，因此使用它就可以确定谁是消息的发送者了。</p><h3 id="数字签名的特征">数字签名的特征</h3><p>比如A给B发送消息，那么数字签名必须满足下面两个条件：</p><ul><li>只要发送的消息上有 A 的数字签名，就能确定消息的发送者就是 A。</li><li>B 可以验证数字签名的正确性，但无法生成数字签名。</li></ul><h3 id="如何实现数字签名">如何实现数字签名</h3><p>先回想一下非对称加密的流程，A给B发送消息时使用B提供的公钥进行加密，B使用自己的私钥进行解密。如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200919153334400.png" alt="image-20200919153334400"></p><p>那么我们把这个过程反过来，就可以做到数字签名，如下图：</p><ol><li>A 使用自己的私有密钥加密消息。加密后的消息就是数字签名。</li><li>A把数字签名和原始的数据都发送给B</li><li>B接收到数字签名和数据后，使用A提供的公钥进行解密，并把解密后的数据和发送来的数据做比对</li><li>如果一致，则说明此消息是由A发送的，因为A的公钥只能解密经有A的私钥加密的数据</li></ol><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200919153913102.png" alt="image-20200919153913102"></p><p>能够用 A 的公开密钥解密的密文，必定是由 A 生成的。因此，我们可以利用这个结论来确认消息的发送者是否为 A，消息是否被人篡改。</p><p>由于 B 只有公开密钥，无法生成 A 的签名，所以也预防了“事后否认”这一问题的 发生。</p><p><strong>在使用此方式进行加密时，A使用自己的私钥加密的数据最好没有任何意义，只是用来验证发送着是否是A，并且没有被篡改。</strong></p><h2 id="数字证书">数字证书</h2><p>“公开密钥加密”和“数字签名”无法保证公开密钥确实来自信息的发送者。因此，就算公 开密钥被第三者恶意替换，接收方也不会注意到。</p><p>而数字证书，就能保证公开密钥的正确性。</p><h3 id="如何使用数据证书发送公钥">如何使用数据证书发送公钥</h3><p>A持有公开密钥Pa 和 A私有密钥 Sa ，现在想要将公开密钥PA发送给B，如何做呢？</p><ol><li>A首先需要向认证中心 (Certification Authority， CA)申请发行证书，证明公开密钥PA 确实由自己生成</li><li>认证中心里保管着他们自己准备的公开密钥Pc和私有密钥 Sc</li><li>A将公开密钥Pa 和包含邮箱信息的个人资料发送给认证中心</li><li>认证中心对收到的资料进行确认，判断其是否为A本人的资料。确认完毕后，认证中心使用自己的私有密钥 Sc，根据 A 的资料生成数字签名。</li><li>认证中心将生成的数字签名和资料放进同一个文件中，并把这个文件发送给 A。（这个文件就是 A 的数字证书）</li><li>A 将作为公开密钥的数字证书发送给了 B。</li><li>B 收到数字证书后，确认证书里的邮件地址确实是 A 的地址。接着，B 获取了认证中心的公开密钥。</li><li>B 对证书内的签名进行验证，判断它是否为认证中心给出的签名。证书中的签名只能用认证中心的公开密钥 Pc 进行验证。如果验证结果没有异常，就能说明这份证书的确由认证中心发行。</li><li>确认了证书是由认证中心发行的，且邮件地址就是 A的之后，B从证书中取出A的公开密钥PA。这样，公开密钥便从 A 传到 了B。</li></ol><p>经过以上步骤信息的接收者B可以确认公开密钥的制作者是A。</p><h3 id="循环质疑，我们从认证中心获取的公钥Pc真的来自认证中心吗">循环质疑，我们从认证中心获取的公钥Pc真的来自认证中心吗</h3><p>由于公开密钥自身不能表示其制作者，所以有可能是冒充认证中心的 X 所生成的。也就是说，这里同样存在公开密钥问题(请参考下图)。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200919165548842.png" alt="image-20200919165548842"></p><p>实际上，认证中心的公开密钥 PC 是以数字证书的形式交付的，会有更高级别的认证 中心对这个认证中心署名(请参考下图)。</p><p>所以我们有所怀疑可以一直验证下去。</p><p>最顶端的认证中心被称为“根认证中心”(root CA)，其自身的正当性由自己证明。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss//image-20200919165633696.png" alt="image-20200919165633696"></p><h1 id="第六章-聚类">第六章 聚类</h1><h2 id="什么是聚类">什么是聚类</h2><h3 id="将相似的对象分为一组">将相似的对象分为一组</h3><p>聚类就是在输入为多个数据时，将“相似”的数据分为一组的操作。1个组就叫作1个 “簇”。</p><p>下面的示例中每个点都代表 1 个数据，在平面上位置较为相近、被圈起来的点就代表一类相似的数据。</p><p>也就是说，这些数据被分为了 3 个簇。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/null/%E6%88%AA%E5%B1%8F2020-09-21%20%E4%B8%8B%E5%8D%8811.05.28.png" alt="截屏2020-09-21 下午11.05.28"></p><h3 id="如何定义“相似”">如何定义“相似”</h3><h4 id="定义数据间的差距">定义数据间的差距</h4><p>根据数据类型不同，定义该数据是否“相似”的标准也不同。具体来说，就是要对两个数 据之间的“差距”进行定义。</p><p>如：假设某所高中的某个年级中共有 400 名学生，现在我们想要将这些学生在考试中取得的语 文、数学、英语成绩数据化，并将他们按照“擅长或不擅长的科目相似”进行聚类。</p><p>把每个学生都转换成“(语文成绩 , 数学成绩 , 英语成绩)”形式的数据后，就可以将两个数据(<em>c</em>1, <em>m</em>1, <em>e</em>1)和(<em>c</em>2, <em>m</em>2, <em>e</em>2)之间的差距定义为 (<em>c</em>1-<em>c</em>2) + (<em>m</em>1-<em>m</em>2) + (<em>e</em>1-<em>e</em>2) ，其中差距小的数据 就互为“相似的数据”。</p><h4 id="符合条件的算法">符合条件的算法</h4><p>即使定义好了数据间的差距，聚类的方法也会有很多种。我们可以设定各种各样的条件， 比如想把数据分为 10 个簇，或者想把 1 个簇内的数据定在 30~50 人之间，再或者想把簇内数据 间的最大距离设为 10，等等。而设定什么样的条件取决于进行聚类的目的。</p><h2 id="k-means-算法">k-means 算法</h2><p><em>k</em>-means 算法是聚类算法中的一种，它可以根据事先给定的簇的数量进行聚类。</p><h3 id="k-means算法步骤">k-means算法步骤</h3><ol><li>首先准备好需要聚类的数据，然后决定簇的数量（比如下面图示簇的数量为3）。</li><li>随机选择 3 个点作为簇的中心点。</li><li>计算各个数据分别和 3 个中心点中的哪一个点距离最近。</li><li>将数据分到相应的簇中。这样，3 个簇的聚类就完成了。</li><li>计算各个簇中数据的重心，然后将簇的中心点移动到这个位置。</li><li>重新计算距离最近的簇的中心点，并将数据分到相应的簇中。</li><li>重复执行“将数据分到相应的簇中”和“将中心点移到重心的位置”这两个操作，直到中心点不 再发生变化为止。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/null/image-20200921231952128.png" alt="image-20200921231952128"></p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/null/image-20200921232008317.png" alt="image-20200921232008317"></p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/null/image-20200921232023522.png" alt="image-20200921232023522"></p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/null/image-20200921232039847.png" alt="image-20200921232039847"></p><h3 id="解说：">解说：</h3><p><em>k</em>-means 算法中，随着操作的不断重复，中心点的位置必定会在某处收敛，这一点 已经在数学层面上得到证明。</p><p>前面的例子中我们将簇的数量定为 3，若现在使用同样的数据，将簇的数量定为 2， 那么聚类将如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/null/image-20200921232309104.png" alt="image-20200921232309104"></p><p>位于左边和下边的两个数据块被分到了一个簇中。就像这样，由于 <em>k</em>-means 算法需 要事先确定好簇的数量，所以设定的数量如果不合理，运行的结果就可能会不符合我们的需求。</p><p>如果对簇的数量没有明确要求，那么我们可以事先对数据进行分析，推算出一个合适的数量，或者不断改变簇的数量来试验 <em>k</em>-means 算法。</p><p>另外，如果簇的数量同样为 2，但中心点最初的位置不同，那么也可能会出现下图 这样的聚类结果。</p><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/null/image-20200921232443009.png" alt="image-20200921232443009"></p><p>与之前的情况不同，这次右上和右下的两个数据块被分到了一个簇中。也就是说， 即使簇的数量相同，只要随机设置的中心点最初的位置不同，聚类的结果也会产生变化。 因此，我们可以通过改变随机设定的中心点位置来不断尝试 <em>k</em>-means 算法，再从中选择 最合适的聚类结果。</p><h3 id="补充说明-v2">补充说明</h3><p>除了 <em>k</em>-means 算法以外，聚类算法还有很多，其中“层次聚类算法”较为有名。与 <em>k</em>-means 算法不同，层次聚类算法不需要事先设定簇的数量。</p><p>在层次聚类算法中，一开始每个数据都自成一类。也就是说，有 <em>n</em> 个数据就会形成 <em>n</em> 个簇。然后重复执行“将距离最近的两个簇合并为一个”的操作 <em>n</em>-1 次。每执行 1 次， 簇就会减少 1 个。执行 <em>n</em> - 1 次后，所有数据就都被分到了一个簇中。在这个过程中，每个阶段的簇的数量都不同，对应的聚类结果也不同。只要选择其中最为合理的 1 个结果 就好。</p><p>合并簇的时候，为了找出“距离最近的两个簇”，需要先对簇之间的距离进行定义。 根据定义方法不同，会有“最短距离法”“最长距离法”“中间距离法”等多种算法。</p><h1 id="第七章-其他算法">第七章 其他算法</h1><h2 id="欧几里得算法">欧几里得算法</h2><p>欧几里得算法(又称辗转相除法)用于计算两个数的最大公约数**(GCD:greatest common divisor)**，被称为世界上最古老的算法。</p><h3 id="使用欧几里得算法求1112和695的最大公约数">使用欧几里得算法求1112和695的最大公约数</h3><ol><li>首先用较小的数字去除较大的数字，求出余数。也就是对两个数字进行 mod 运算，除完后的余数为417。<ol><li>mod运算即取余运算，<em>A</em> mod <em>B</em> 就是算出<em>A</em>除以<em>B</em>后的余数<em>C</em>。</li></ol></li><li>接下来再用除数695和余数417进行mod运 算。结果为 278。</li><li>继续重复同样的操作，对 417 和 278 进行 mod 运算，结果为139。</li><li>对 278 和 139 进行 mod 运算，结果为 0。也就 是说，278 可以被 139 整除。</li><li>余数为 0 时，最后一次运算中的除数 139 就是 1112 和 695 的最大公约数。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/guozhe001/oss/null/image-20200921233013836.png" alt="image-20200921233013836"></p><h3 id="Java实现">Java实现</h3><p><a href="https://github.com/guozhe001/my-tools/blob/master/my-learn/my-algorithm/src/main/java/com/nicai/algorithm/other/EuclideanGreatestCommonDivisor.java">欧几里得最大公约数算法</a></p><h2 id="素性测试">素性测试</h2><p>素性测试是判断一个自然数是否为素数的测试。素数(prime number)就是只能被 1 和其自身整除，且大于 1 的自然数。</p><p>素数从小到大有 2、3、5、7、11、13…目前在加密技术中被广泛应用的 RSA 算法就会用到大素数，因此“素性测试”在该算法中起到了重要的作用。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
