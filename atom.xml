<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>滴水成涓</title>
  
  <subtitle>每天进步一点点</subtitle>
  <link href="https://guozhe001.github.io/atom.xml" rel="self"/>
  
  <link href="https://guozhe001.github.io/"/>
  <updated>2024-11-22T06:32:06.497Z</updated>
  <id>https://guozhe001.github.io/</id>
  
  <author>
    <name>guozhe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://guozhe001.github.io/2024/11/22/language/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%B7%9F%E8%B8%AA/"/>
    <id>https://guozhe001.github.io/2024/11/22/language/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%B7%9F%E8%B8%AA/</id>
    <published>2024-11-22T06:32:06.497Z</published>
    <updated>2024-11-22T06:32:06.497Z</updated>
    
    <content type="html"><![CDATA[<p>一些好的但是还没有上线（或发币）的项目跟踪</p><table><thead><tr><th>项目名称</th><th>项目描述</th><th>项目地址</th><th>个人备注</th></tr></thead><tbody><tr><td>optimism</td><td>layer 2解决方案</td><td><a href="https://optimism.io/">https://optimism.io/</a></td><td>uniswap等defi项目支持</td></tr><tr><td><strong>ZK Rollup</strong></td><td>layer 2解决方案</td><td><a href="https://zksync.io/">https://zksync.io/</a></td><td><a href="https://zhuanlan.zhihu.com/p/352515617">2021值得关注的l2</a></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一些好的但是还没有上线（或发币）的项目跟踪&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目名称&lt;/th&gt;
&lt;th&gt;项目描述&lt;/th&gt;
&lt;th&gt;项目地址&lt;/th&gt;
&lt;th&gt;个人备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;op</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker常用命令记录</title>
    <link href="https://guozhe001.github.io/2024/11/22/others/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>https://guozhe001.github.io/2024/11/22/others/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2024-11-22T06:32:06.497Z</published>
    <updated>2024-11-22T06:32:06.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker命令">docker命令</h2><h3 id="删除本地所有没有被使用的卷：">删除本地所有没有被使用的卷：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure><p>WARNING! This will remove all local volumes not used by at least one container.</p><h3 id="查看本地的所有卷：">查看本地的所有卷：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><h3 id="删除某个volume卷">删除某个volume卷</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume rm docker_orderer.supply.com</span><br></pre></td></tr></table></figure><h3 id="查看所有的容器，包括没有运行中的">查看所有的容器，包括没有运行中的</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h3 id="查看某个容器的日志">查看某个容器的日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs ead00b30e8ec</span><br></pre></td></tr></table></figure><h3 id="停止容器">停止容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 46bc78ee1f8a e8df5432a918 be15203b7835</span><br></pre></td></tr></table></figure><h3 id="删除容器">删除容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm ead00b30e8ec 46bc78ee1f8a e8df5432a918 be15203b7835</span><br></pre></td></tr></table></figure><h3 id="进入docker容器">进入docker容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it f37c61b09023 /bin/sh</span><br></pre></td></tr></table></figure><h3 id="修改容器的环境变量">修改容器的环境变量</h3><p>在配置docker-compose某个容器的环境变量时出现了错误，但是容器已经运行了，如果重新运行则数据会丢失。所以需要修正此环境变量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">peer0.s1.supply.com:</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>    <span class="attr">container_name:</span> <span class="string">peer0.s1.supply.com</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:2.2.0</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>    <span class="attr">environment:</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#Generic</span> <span class="string">peer</span> <span class="string">variables*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">\-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#</span> <span class="string">the</span> <span class="string">following</span> <span class="string">setting</span> <span class="string">starts</span> <span class="string">chaincode</span> <span class="string">containers</span> <span class="string">on</span> <span class="string">the</span> <span class="string">same*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#</span> <span class="string">bridge</span> <span class="string">network</span> <span class="string">as</span> <span class="string">the</span> <span class="string">peers*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#</span> <span class="string">https://docs.docker.com/compose/networking/*</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">\-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=_test</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">\-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line"></span><br><span class="line"><span class="string">​</span>      <span class="string">*#-</span> <span class="string">FABRIC_LOGGING_SPEC=DEBUG*</span></span><br></pre></td></tr></table></figure><p>如要修改<code>CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE</code>为<code>docker_test</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、进入容器</span></span><br><span class="line">docker exec -it f37c61b09023 /bin/sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、修改环境变量</span></span><br><span class="line">echo &quot;export CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker_test&quot; &gt;&gt; /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、重新启动容器即可</span></span><br></pre></td></tr></table></figure><h3 id="查看docker启动的网络">查看docker启动的网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><h2 id="docker-compose命令">docker-compose命令</h2><h3 id="使用docker-compose启动docker镜像">使用docker-compose启动docker镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> --f 指定文件, -d指定后台运行</span></span><br><span class="line">docker-compose --f docker-compose.yml up -d</span><br></pre></td></tr></table></figure><h3 id="使用docker-compose启动指定的名称的容器">使用docker-compose启动指定的名称的容器</h3><p>在一个<code>docker-compose.yaml</code>配置文件下可能有多个<code>serevice</code>，可以指定名称来启动其中的一个，命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up ca-tls</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker命令&quot;&gt;docker命令&lt;/h2&gt;
&lt;h3 id=&quot;删除本地所有没有被使用的卷：&quot;&gt;删除本地所有没有被使用的卷：&lt;/h3&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    <category term="Cloud" scheme="https://guozhe001.github.io/categories/Cloud/"/>
    
    
    <category term="Docker" scheme="https://guozhe001.github.io/tags/Docker/"/>
    
    <category term="docker-compose" scheme="https://guozhe001.github.io/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>Gradle常用命令记录</title>
    <link href="https://guozhe001.github.io/2024/11/22/others/Gradle%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://guozhe001.github.io/2024/11/22/others/Gradle%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2024-11-22T06:32:06.497Z</published>
    <updated>2024-11-22T06:32:06.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gradle常用命令记录">Gradle常用命令记录:</h2><h4 id="运行gradle-help-task-someTask来显示帮助，如：">运行<code>gradle help --task someTask</code>来显示帮助，如：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew help --task test</span><br></pre></td></tr></table></figure><h4 id="clean">clean</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew clean</span><br></pre></td></tr></table></figure><h4 id="build">build</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build</span><br></pre></td></tr></table></figure><h4 id="test">test</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew test</span><br></pre></td></tr></table></figure><h4 id="排除指定的task-exclude-task">排除指定的task<code>--exclude-task</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew clean build --exclude-task test</span><br></pre></td></tr></table></figure><h4 id="多模块指定模块运行task">多模块指定模块运行task</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./gradlew :my-subproject:taskName</span><br><span class="line">./gradlew my-subproject:taskName</span><br></pre></td></tr></table></figure><h4 id="测试失败继续执行">测试失败继续执行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew test --continue</span><br></pre></td></tr></table></figure><h4 id="检查，会执行test和linting">检查，会执行test和linting</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew check</span><br></pre></td></tr></table></figure><h4 id="显示当前的项目层次">显示当前的项目层次</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew project</span><br></pre></td></tr></table></figure><h4 id="列出所有的task">列出所有的task</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew tasks</span><br></pre></td></tr></table></figure><h4 id="列出项目所有的依赖：">列出项目所有的依赖：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew dependencies</span><br></pre></td></tr></table></figure><p>去<a href="https://docs.gradle.org/current/userguide/command_line_interface.html">官网</a>查看更多</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Gradle常用命令记录&quot;&gt;Gradle常用命令记录:&lt;/h2&gt;
&lt;h4 id=&quot;运行gradle-help-task-someTask来显示帮助，如：&quot;&gt;运行&lt;code&gt;gradle help --task someTask&lt;/code&gt;来显示帮助，如：&lt;/h4</summary>
      
    
    
    
    <category term="Java" scheme="https://guozhe001.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://guozhe001.github.io/tags/Java/"/>
    
    <category term="Gradle" scheme="https://guozhe001.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Homebrew配置为国内镜像</title>
    <link href="https://guozhe001.github.io/2024/11/22/others/Homebrew%E9%85%8D%E7%BD%AE%E4%B8%BA%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/"/>
    <id>https://guozhe001.github.io/2024/11/22/others/Homebrew%E9%85%8D%E7%BD%AE%E4%B8%BA%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/</id>
    <published>2024-11-22T06:32:06.497Z</published>
    <updated>2024-11-22T06:32:06.497Z</updated>
    
    <content type="html"><![CDATA[<p>本人的Mac电脑按照<a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">清华大学开源软件镜像站</a>的设置时报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git</span><br><span class="line">fatal: cannot change to &#x27;/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask&#x27;: No such file or directory</span><br></pre></td></tr></table></figure><p>解决方案是先change到对应的目录下，在执行替换脚本，操作如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"></span><br><span class="line">cd $(brew --repo homebrew/core)</span><br><span class="line">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure><h2 id="卸载homebrew">卸载homebrew</h2><p>执行卸载脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;</span><br></pre></td></tr></table></figure><p>如果报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</span><br></pre></td></tr></table></figure><p>需要配置一下host；去往<a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a>，输入<a href="https://raw.githubusercontent.com">raw.githubusercontent.com</a>查看ip地址，然后配置host之后重试。</p><h2 id="安装bash-completion">安装bash_completion</h2><p>卸载homebrew后发现自动补全的功能也没有了，报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi awk: can&#x27;t open file /usr/local/etc/bash_completion</span><br></pre></td></tr></table></figure><p>解决方法是重新安装homebrew后，安装bash-completion：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install bash-completion</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本人的Mac电脑按照&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/&quot;&gt;清华大学开源软件镜像站&lt;/a&gt;的设置时报错如下：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="Mac" scheme="https://guozhe001.github.io/categories/Mac/"/>
    
    
    <category term="Mac" scheme="https://guozhe001.github.io/tags/Mac/"/>
    
    <category term="Homebrew" scheme="https://guozhe001.github.io/tags/Homebrew/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令记录</title>
    <link href="https://guozhe001.github.io/2024/11/22/others/Linux%20Shell%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>https://guozhe001.github.io/2024/11/22/others/Linux%20Shell%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2024-11-22T06:32:06.497Z</published>
    <updated>2024-11-22T06:32:06.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tar-解压，压缩，帮助：tar-h">tar(解压，压缩，帮助：tar -h)</h2><p>解压，<code>-C</code>标签指定解压到哪个目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xf -C ./test</span><br></pre></td></tr></table></figure><p>压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cf &lt;archive-filename&gt; [filenames...]</span><br></pre></td></tr></table></figure><h2 id="shasum（hash，帮助shasum-h）">shasum（hash，帮助shasum -h）</h2><p>生成hash，<code>-a</code>标签指定使用哪个算法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shasum -a 256 README.md</span><br></pre></td></tr></table></figure><h2 id="修改终端显示，不显示用户名和电脑名称">修改终端显示，不显示用户名和电脑名称</h2><p>修改<code>/etc/bashrc</code>：PS1='\w $ ’</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> more /etc/bashrc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> System-wide .bashrc file <span class="keyword">for</span> interactive bash(1) shells.</span></span><br><span class="line">if [ -z &quot;$PS1&quot; ]; then</span><br><span class="line">   return</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">PS1=<span class="string">&#x27;\h:\W \u\$ &#x27;</span></span></span><br><span class="line">PS1=&#x27;\w \$ &#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> Make bash check its window size after a process completes</span></span><br><span class="line">shopt -s checkwinsize</span><br><span class="line"></span><br><span class="line">[ -r &quot;/etc/bashrc_$TERM_PROGRAM&quot; ] &amp;&amp; . &quot;/etc/bashrc_$TERM_PROGRAM&quot;</span><br></pre></td></tr></table></figure><p>其他参数：</p><ul><li>\d ：代表日期，格式为weekday month date，例如：“Mon Aug 1”</li><li>\H ：完整的主机名称。例如：我的机器名称为：fc4.linux，则这个名称就是fc4.linux</li><li>\h ：仅取主机的第一个名字，如上例，则为fc4，.linux则被省略</li><li>\t ：显示时间为24小时格式，如：HH：MM：SS</li><li>\T ：显示时间为12小时格式\A ：显示时间为24小时格式：HH：MM</li><li>\u ：当前用户的账号名称\v ：BASH的版本信息</li><li>\w ：完整的工作目录名称。家目录会以 ~代替</li><li>\W ：利用basename取得工作目录名称，所以只会列出最后一个目录</li><li># ：下达的第几个命令</li><li>$ ：提示字符，如果是root时，提示符为：# ，普通用户则为：$</li></ul><h3 id="crontab（定时任务-man-crontab）">crontab（定时任务,man crontab）</h3><ul><li>查看：<code>crontab -l</code></li><li>编辑：<code>crontab -e</code></li></ul><p>crontab配置举例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 每天十点30分执行hello.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 分 时 日 月 星期 <span class="built_in">command</span></span></span><br><span class="line">30 10 * * * ～/hello.sh</span><br></pre></td></tr></table></figure><h3 id="grep">grep</h3><p>屏蔽grep命令本身</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep python |grep -v grep</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;tar-解压，压缩，帮助：tar-h&quot;&gt;tar(解压，压缩，帮助：tar -h)&lt;/h2&gt;
&lt;p&gt;解压，&lt;code&gt;-C&lt;/code&gt;标签指定解压到哪个目录&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="Linux" scheme="https://guozhe001.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://guozhe001.github.io/tags/Linux/"/>
    
    <category term="shell" scheme="https://guozhe001.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Mac安装多版本golang</title>
    <link href="https://guozhe001.github.io/2024/11/22/others/Mac%E5%AE%89%E8%A3%85%E5%A4%9A%E7%89%88%E6%9C%ACgolang/"/>
    <id>https://guozhe001.github.io/2024/11/22/others/Mac%E5%AE%89%E8%A3%85%E5%A4%9A%E7%89%88%E6%9C%ACgolang/</id>
    <published>2024-11-22T06:32:06.497Z</published>
    <updated>2024-11-22T06:32:06.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因">起因</h2><p>最近在运行一些源软件时，因为golang的版本问题而报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">compile: version &quot;go1.15.7&quot; does not match go tool version &quot;go1.16&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> golang.org/x/net/html/atom</span></span><br><span class="line">compile: version &quot;go1.15.7&quot; does not match go tool version &quot;go1.16&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> golang.org/x/text/internal/utf8internal</span></span><br><span class="line">compile: version &quot;go1.15.7&quot; does not match go tool version &quot;go1.16&quot;</span><br></pre></td></tr></table></figure><h2 id="安装不同版本的golang">安装不同版本的golang</h2><h3 id="首先安装gvm">首先安装gvm</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)</span><br></pre></td></tr></table></figure><p>安装完成之后重启终端。</p><h3 id="查看当前已经安装了哪些版本的go">查看当前已经安装了哪些版本的go</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install go@1.15</span><br></pre></td></tr></table></figure><p><em>注意：指定版本时可以先运行<code>brew search go</code>来查看有哪些版本，如果直接指定go1.15.7小版本可能报错。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;
&lt;p&gt;最近在运行一些源软件时，因为golang的版本问题而报错：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    <category term="Mac" scheme="https://guozhe001.github.io/categories/Mac/"/>
    
    
    <category term="Mac" scheme="https://guozhe001.github.io/tags/Mac/"/>
    
    <category term="golang" scheme="https://guozhe001.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>MySQL主从复制切换</title>
    <link href="https://guozhe001.github.io/2024/11/22/others/MYSQL%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%88%87%E6%8D%A2/"/>
    <id>https://guozhe001.github.io/2024/11/22/others/MYSQL%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%88%87%E6%8D%A2/</id>
    <published>2024-11-22T06:32:06.497Z</published>
    <updated>2024-11-22T06:32:06.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>由于公司iaas人员在操作虚拟ip时手误，导致应该指向mysql主库的虚拟ip指向了从库。因为业务app使用的是虚拟ip链接的数据库，因此导致所有的业务数据都写入了从库，而主库的数据从此没有任何变化。</p><p>为了解决此问题，需要把原来的主库变成从库，从而继续保持mysql数据库的高可用。</p><h3 id="基本信息">基本信息</h3><p>旧主库ip：172.99.0.32</p><p>旧从库ip：172.99.0.31</p><h2 id="具体操作如下">具体操作如下</h2><h3 id="验证当前的主从复制状态">验证当前的主从复制状态</h3><p>旧的主库数据是否全部同步到从库，在原主库执行主从同步状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sys@172.99.0.32:(none) 17:54:52&gt;show processlist;</span><br><span class="line">+-------+------------+-------------------+------+-------------+--------+-----------------------------------------------------------------------+------------------+----------+</span><br><span class="line">| Id    | User       | Host              | db   | Command     | Time   | State                                                                 | Info             | Progress |</span><br><span class="line">+-------+------------+-------------------+------+-------------+--------+-----------------------------------------------------------------------+------------------+----------+</span><br><span class="line">| 11679 | rep   | 172.99.0.31:8609  | NULL | Binlog Dump | 279575 | Master has sent all binlog to slave; waiting for binlog to be updated | NULL             |    0.000 |</span><br><span class="line">+-------+------------+-------------------+------+-------------+--------+-----------------------------------------------------------------------+------------------+----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查看从库是否可以做主库">查看从库是否可以做主库</h3><p>主要是查看bin-log是否打开，结论：31服务器可以作为主库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sys@172.99.0.31:(none) 17:57:01&gt;show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">| mysql-bin.000153 |  2786181 |              |                  |</span><br><span class="line">+------------------+----------+--------------+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查看从哪里进行主从复制">查看从哪里进行主从复制</h3><h4 id="查看旧主库最后一条bin-log位置">查看旧主库最后一条bin-log位置</h4><p>因为重新启动过，并且重新启动之后主库没有执行过sql，所以最新的bin-log并没有sql，因此查看上一个bin-log的最后的位置。</p><h5 id="把二进制的bin-log转换成人类语言">把二进制的bin-log转换成人类语言</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog --base64-output=decode-rows -v mysql-bin.000706 &gt; mysql-bin.000706.txt</span><br></pre></td></tr></table></figure><h5 id="查看bin-log最后的位置如下：">查看bin-log最后的位置如下：</h5><p><code>tail -200 mysql-bin.000706.txt</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">&#x2F;*!*&#x2F;;</span><br><span class="line"># at 32438411</span><br><span class="line"># at 32438848</span><br><span class="line"># at 32438939</span><br><span class="line">#220317 15:00:00 server id 533307  end_log_pos 32438848 Annotate_rows:</span><br><span class="line">#Q&gt; update job_log set</span><br><span class="line">#Q&gt; job_name&#x3D;&#39;detail_NoticeJob&#39;,</span><br><span class="line">#Q&gt; job_cron_expression&#x3D;&#39;0 0 1,10,15,21 * * ?&#39;,</span><br><span class="line">#Q&gt; create_time&#x3D;&#39;2022-03-17 15:00:00&#39;,</span><br><span class="line">#Q&gt; job_class_name&#x3D;&#39;com.hello.lease.job.NoticeJob&#39;,</span><br><span class="line">#Q&gt; staff_name&#x3D;&#39;系统操作&#39;,</span><br><span class="line">#Q&gt; update_time&#x3D;&#39;2022-03-17 15:00:00&#39;,</span><br><span class="line">#Q&gt; staff_id&#x3D;0,</span><br><span class="line">#Q&gt; job_msg&#x3D;&#39;通知-每日1、10、15、21点&#39;,</span><br><span class="line">#Q&gt; status&#x3D;&#39;end&#39;</span><br><span class="line">#Q&gt;  wher</span><br><span class="line">#220317 15:00:00 server id 533307  end_log_pos 32438939 Table_map: &#96;db&#96;.&#96;job_log&#96; mapped to number 3857</span><br><span class="line">#220317 15:00:00 server id 533307  end_log_pos 32439375 Update_rows: table id 3857 flags: STMT_END_F</span><br><span class="line">### UPDATE &#96;db&#96;.&#96;job_log&#96;</span><br><span class="line">### WHERE</span><br><span class="line">###   @1&#x3D;14424</span><br><span class="line">###   @2&#x3D;&#39;detail_NoticeJob&#39;</span><br><span class="line">###   @3&#x3D;&#39;0 0 1,10,15,21 * * ?&#39;</span><br><span class="line">###   @4&#x3D;&#39;com.hello.lease.job.NoticeJob&#39;</span><br><span class="line">###   @5&#x3D;&#39;通知-每日1、10、15、21点&#39;</span><br><span class="line">###   @6&#x3D;&#39;start&#39;</span><br><span class="line">###   @7&#x3D;0</span><br><span class="line">###   @8&#x3D;&#39;系统操作&#39;</span><br><span class="line">###   @9&#x3D;2022-03-17 15:00:00</span><br><span class="line">###   @10&#x3D;1647500400</span><br><span class="line">### SET</span><br><span class="line">###   @1&#x3D;14424</span><br><span class="line">###   @2&#x3D;&#39;detail_NoticeJob&#39;</span><br><span class="line">###   @3&#x3D;&#39;0 0 1,10,15,21 * * ?&#39;</span><br><span class="line">###   @4&#x3D;&#39;com.hello.lease.job.NoticeJob&#39;</span><br><span class="line">###   @5&#x3D;&#39;通知-每日1、10、15、21点&#39;</span><br><span class="line">###   @6&#x3D;&#39;end&#39;</span><br><span class="line">###   @7&#x3D;0</span><br><span class="line">###   @8&#x3D;&#39;系统操作&#39;</span><br><span class="line">###   @9&#x3D;2022-03-17 15:00:00</span><br><span class="line">###   @10&#x3D;1647500400</span><br><span class="line"># at 32439375</span><br><span class="line">#220317 15:00:00 server id 533307  end_log_pos 32439402 Xid &#x3D; 825866165</span><br><span class="line">COMMIT&#x2F;*!*&#x2F;;</span><br><span class="line">DELIMITER ;</span><br><span class="line"># End of log file</span><br></pre></td></tr></table></figure><h5 id="旧从库同步最后一条数据时的bin-log位置">旧从库同步最后一条数据时的bin-log位置</h5><p>根据主库的最后一条bin-log信息找到从库对应的bin-log位置如下：</p><p>mysql-bin.000703</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">&#x2F;*!*&#x2F;;</span><br><span class="line"># at 132131716</span><br><span class="line"># at 132131807</span><br><span class="line">#220317 15:00:00 server id 533307  end_log_pos 132131807        Table_map: &#96;db&#96;.&#96;job_log&#96; mapped to number 54116</span><br><span class="line">#220317 15:00:00 server id 533307  end_log_pos 132132243        Update_rows: table id 54116 flags: STMT_END_F</span><br><span class="line">### UPDATE &#96;db&#96;.&#96;job_log&#96;</span><br><span class="line">### WHERE</span><br><span class="line">###   @1&#x3D;14424</span><br><span class="line">###   @2&#x3D;&#39;detail_NoticeJob&#39;</span><br><span class="line">###   @3&#x3D;&#39;0 0 1,10,15,21 * * ?&#39;</span><br><span class="line">###   @4&#x3D;&#39;com.hello.lease.job.NoticeJob&#39;</span><br><span class="line">###   @5&#x3D;&#39;通知-每日1、10、15、21点&#39;</span><br><span class="line">###   @6&#x3D;&#39;start&#39;</span><br><span class="line">###   @7&#x3D;0</span><br><span class="line">###   @8&#x3D;&#39;系统操作&#39;</span><br><span class="line">###   @9&#x3D;2022-03-17 15:00:00</span><br><span class="line">###   @10&#x3D;1647500400</span><br><span class="line">### SET</span><br><span class="line">###   @1&#x3D;14424</span><br><span class="line">###   @2&#x3D;&#39;detail_NoticeJob&#39;</span><br><span class="line">###   @3&#x3D;&#39;0 0 1,10,15,21 * * ?&#39;</span><br><span class="line">###   @4&#x3D;&#39;com.hello.lease.job.NoticeJob&#39;</span><br><span class="line">###   @5&#x3D;&#39;通知-每日1、10、15、21点&#39;</span><br><span class="line">###   @6&#x3D;&#39;end&#39;</span><br><span class="line">###   @7&#x3D;0</span><br><span class="line">###   @8&#x3D;&#39;系统操作&#39;</span><br><span class="line">###   @9&#x3D;2022-03-17 15:00:00</span><br><span class="line">###   @10&#x3D;1647500400</span><br><span class="line"># at 132132243</span><br><span class="line">#220317 15:00:00 server id 533307  end_log_pos 132132270        Xid &#x3D; 49158632</span><br><span class="line">COMMIT&#x2F;*!*&#x2F;;</span><br><span class="line"># at 132132270</span><br></pre></td></tr></table></figure><h3 id="进行主从切换">进行主从切换</h3><h4 id="验证31上是否有主从复制的用户">验证31上是否有主从复制的用户</h4><p>如果没有需要新建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sys@172.99.0.31:mysql 16:07:25&gt;select user,host from user where user&#x3D;&#39;rep&#39;;</span><br><span class="line">+----------+------+</span><br><span class="line">| user     | host |</span><br><span class="line">+----------+------+</span><br><span class="line">| rep | %    |</span><br><span class="line">+----------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="停掉31的主从复制">停掉31的主从复制</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 停止同步</span><br><span class="line">stop slave;</span><br><span class="line"># 重置同步：https:<span class="operator">/</span><span class="operator">/</span>mariadb.com<span class="operator">/</span>kb<span class="operator">/</span>en<span class="operator">/</span>reset<span class="operator">-</span>replica<span class="operator">/</span></span><br><span class="line">RESET SLAVE;</span><br><span class="line"># 验证同步状态</span><br><span class="line"><span class="keyword">show</span> slave status \G</span><br></pre></td></tr></table></figure><h4 id="启动32的主从复制">启动32的主从复制</h4><p>MASTER_LOG_FILE和MASTER_LOG_POS的值是从上面的旧从库的bin-log中获取的。位置是旧主库的最后一条bin-log执行的sql的位置。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 添加主从同步配置</span><br><span class="line">CHANGE MASTER <span class="keyword">TO</span></span><br><span class="line">  MASTER_HOST<span class="operator">=</span><span class="string">&#x27;172.99.0.31&#x27;</span>,</span><br><span class="line">  MASTER_USER<span class="operator">=</span><span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">  MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  MASTER_PORT<span class="operator">=</span><span class="number">3308</span>,</span><br><span class="line">  MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;mysql-bin.000703&#x27;</span>,</span><br><span class="line">  MASTER_LOG_POS<span class="operator">=</span><span class="number">132132270</span>,</span><br><span class="line">  MASTER_CONNECT_RETRY<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"># 启动主从同步</span><br><span class="line"><span class="keyword">start</span> slave;</span><br><span class="line"></span><br><span class="line"># 验证同步状态</span><br><span class="line"><span class="keyword">show</span> slave status \G</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;由于公司iaas人员在操作虚拟ip时手误，导致应该指向mysql主库的虚拟ip指向了从库。因为业务app使用的是虚拟ip链接的数据库，因此导致所有的业务数据都写入了从库，而主库的数据从此没有任何变化。&lt;/p&gt;
&lt;p&gt;为了解决此问题，需</summary>
      
    
    
    
    <category term="MySQL" scheme="https://guozhe001.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://guozhe001.github.io/tags/MySQL/"/>
    
    <category term="主从复制" scheme="https://guozhe001.github.io/tags/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Gradle学习踩坑记录</title>
    <link href="https://guozhe001.github.io/2024/11/22/others/gradle%E5%AD%A6%E4%B9%A0%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://guozhe001.github.io/2024/11/22/others/gradle%E5%AD%A6%E4%B9%A0%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2024-11-22T06:32:06.497Z</published>
    <updated>2024-11-22T06:32:06.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gradle学习踩坑记录">gradle学习踩坑记录</h1><p>最近想学习一下Java11，使用gradle搭建了一个项目，但是在执行打包命令<code>./gradlew clean build</code>时报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not target platform: &#x27;Java SE 11&#x27; using tool chain: &#x27;JDK 8 (1.8)&#x27;</span><br></pre></td></tr></table></figure><p>原因是因为我本地的JAVA_HOME配置的JDK版本是1.8，但是项目中指定的编译版本为Java11：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sourceCompatibility = JavaVersion.VERSION_11</span><br><span class="line">targetCompatibility = JavaVersion.VERSION_11</span><br></pre></td></tr></table></figure><p>解决方式是在项目的根目录下新建gradle.properties文件，并写入以下配置，问题解决</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.gradle.java.home</span> = <span class="string">/Library/Java/JavaVirtualMachines/jdk-11.0.9.jdk/Contents/Home</span></span><br></pre></td></tr></table></figure><p>gradle的<a href="https://www.jetbrains.com/help/idea/gradle-jvm-selection.html#jdk_existing_project">官方文档</a>解释如下：</p><h3 id="Resolve-the-Gradle-JVM-version-for-the-existing-project">Resolve the Gradle JVM version for the existing project</h3><ol><li>IntelliJ IDEA checks the <code>gradle.properties</code> file for the appropriate Gradle JVM specified in <code>org.gradle.java.home</code> and uses it for the project.</li><li>Then it checks the <code>JAVA_HOME</code> environment variable.</li><li>Then it checks the closest appropriate JDK version for the existing Gradle version.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;gradle学习踩坑记录&quot;&gt;gradle学习踩坑记录&lt;/h1&gt;
&lt;p&gt;最近想学习一下Java11，使用gradle搭建了一个项目，但是在执行打包命令&lt;code&gt;./gradlew clean build&lt;/code&gt;时报错如下：&lt;/p&gt;
&lt;figure class</summary>
      
    
    
    
    <category term="Java" scheme="https://guozhe001.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://guozhe001.github.io/tags/Java/"/>
    
    <category term="Gradle" scheme="https://guozhe001.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu20.04设置静态ip</title>
    <link href="https://guozhe001.github.io/2024/11/22/others/ubuntu20.04%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/"/>
    <id>https://guozhe001.github.io/2024/11/22/others/ubuntu20.04%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/</id>
    <published>2024-11-22T06:32:06.497Z</published>
    <updated>2024-11-22T06:32:06.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置静态IP">设置静态IP</h2><h3 id="修改-etc-netplan-01-network-manager-all-yaml文件如下：">修改<code>/etc/netplan/01-network-manager-all.yaml</code>文件如下：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Let NetworkManager manage all devices on this system</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">NetworkManager</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">        <span class="attr">wlp7s0:</span></span><br><span class="line">            <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.0</span><span class="number">.107</span><span class="string">/24</span>, ]</span><br><span class="line">            <span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line">            <span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line">            <span class="attr">gateway4:</span>  <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">            <span class="attr">nameservers:</span></span><br><span class="line">                <span class="attr">addresses:</span> [<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>, <span class="number">9.9</span><span class="number">.9</span><span class="number">.9</span>]</span><br></pre></td></tr></table></figure><p>其中的<code>wlp7s0</code>是网卡信息，可以通过<code>ifconfig</code>获得。</p><h3 id="设置生效：">设置生效：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure><h2 id="启动ssh">启动ssh</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install openssh-service</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设置静态IP&quot;&gt;设置静态IP&lt;/h2&gt;
&lt;h3 id=&quot;修改-etc-netplan-01-network-manager-all-yaml文件如下：&quot;&gt;修改&lt;code&gt;/etc/netplan/01-network-manager-all.yaml&lt;/code&gt;</summary>
      
    
    
    
    <category term="Linux" scheme="https://guozhe001.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://guozhe001.github.io/tags/Linux/"/>
    
    <category term="ubuntu" scheme="https://guozhe001.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu如何挂载硬盘</title>
    <link href="https://guozhe001.github.io/2024/11/22/others/ubuntu%E5%A6%82%E4%BD%95%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/"/>
    <id>https://guozhe001.github.io/2024/11/22/others/ubuntu%E5%A6%82%E4%BD%95%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/</id>
    <published>2024-11-22T06:32:06.497Z</published>
    <updated>2024-11-22T06:32:06.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看已经挂载了哪些">查看已经挂载了哪些</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> df -l</span></span><br><span class="line">文件系统           1K-块     已用      可用 已用% 挂载点</span><br><span class="line">udev            16362980        0  16362980    0% /dev</span><br><span class="line">tmpfs            3285100     2364   3282736    1% /run</span><br><span class="line">/dev/nvme0n1p7 200537360 18016188 172264740   10% /</span><br><span class="line">tmpfs           16425488   408624  16016864    3% /dev/shm</span><br><span class="line">tmpfs               5120        4      5116    1% /run/lock</span><br><span class="line">tmpfs           16425488        0  16425488    0% /sys/fs/cgroup</span><br><span class="line">/dev/loop0         56832    56832         0  100% /snap/core18/1988</span><br><span class="line">/dev/loop1         66432    66432         0  100% /snap/gtk-common-themes/1514</span><br><span class="line">/dev/loop2         33152    33152         0  100% /snap/snapd/11402</span><br><span class="line">/dev/loop3         52352    52352         0  100% /snap/snap-store/518</span><br><span class="line">/dev/loop4         31872    31872         0  100% /snap/snapd/11036</span><br><span class="line">/dev/loop5        224256   224256         0  100% /snap/gnome-3-34-1804/66</span><br><span class="line">/dev/nvme0n1p1     98304    33555     64749   35% /boot/efi</span><br><span class="line">tmpfs            3285096       20   3285076    1% /run/user/125</span><br><span class="line">tmpfs            3285096       92   3285004    1% /run/user/1000</span><br><span class="line">/dev/loop6        101632   101632         0  100% /snap/core/10908</span><br><span class="line">/dev/loop7        435968   435968         0  100% /snap/pycharm-community/233</span><br><span class="line">/dev/loop8        680192   680192         0  100% /snap/intellij-idea-community/289</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查看有哪些">查看有哪些</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo fdisk -l</span></span><br><span class="line">Disk /dev/loop0：55.48 MiB，58159104 字节，113592 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop1：64.79 MiB，67915776 字节，132648 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop2：32.28 MiB，33841152 字节，66096 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop3：51.4 MiB，53522432 字节，104536 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop4：31.9 MiB，32595968 字节，63664 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop5：218.102 MiB，229629952 字节，448496 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop6：99.22 MiB，104030208 字节，203184 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop7：425.67 MiB，446328832 字节，871736 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/nvme0n1：931.53 GiB，1000204886016 字节，1953525168 个扇区</span><br><span class="line">Disk model: WDC WDS100T2B0C-00PXH0                  </span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line">磁盘标签类型：gpt</span><br><span class="line">磁盘标识符：C12B6754-9D12-4F54-92FA-086CE249C548</span><br><span class="line"></span><br><span class="line">设备                 起点       末尾      扇区   大小 类型</span><br><span class="line">/dev/nvme0n1p1       2048     206847    204800   100M EFI 系统</span><br><span class="line">/dev/nvme0n1p2     206848     239615     32768    16M Microsoft 保留</span><br><span class="line">/dev/nvme0n1p3     239616  408449302 408209687 194.7G Microsoft 基本数据</span><br><span class="line">/dev/nvme0n1p4  408451072  409597951   1146880   560M Windows 恢复环境</span><br><span class="line">/dev/nvme0n1p5  409597952 1134321663 724723712 345.6G Microsoft 基本数据</span><br><span class="line">/dev/nvme0n1p6 1134321664 1543921663 409600000 195.3G Microsoft 基本数据</span><br><span class="line">/dev/nvme0n1p7 1543921664 1953523711 409602048 195.3G Linux 文件系统</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sda：7.28 TiB，8001563222016 字节，15628053168 个扇区</span><br><span class="line">Disk model: HGST HUS728T8TAL</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 4096 字节</span><br><span class="line">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class="line">磁盘标签类型：gpt</span><br><span class="line">磁盘标识符：F654D976-A27E-49D1-B0FD-5DCB3914D51D</span><br><span class="line"></span><br><span class="line">设备             起点        末尾       扇区  大小 类型</span><br><span class="line">/dev/sda1          34       32767      32734   16M Microsoft 保留</span><br><span class="line">/dev/sda2       32768  4096032767 4096000000  1.9T Microsoft 基本数据</span><br><span class="line">/dev/sda3  4096032768  8192032767 4096000000  1.9T Microsoft 基本数据</span><br><span class="line">/dev/sda4  8192032768 15628050431 7436017664  3.5T Microsoft 基本数据</span><br><span class="line"></span><br><span class="line">分区 1 未起始于物理扇区边界。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop8：664.17 MiB，696426496 字节，1360208 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查看想要挂载的硬盘的uuid">查看想要挂载的硬盘的uuid</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lsblk -f</span></span><br><span class="line">NAME        FSTYPE   LABEL    UUID                                 FSAVAIL FSUSE% MOUNTPOINT</span><br><span class="line">loop0       squashfs                                                     0   100% /snap/core18/1988</span><br><span class="line">loop1       squashfs                                                     0   100% /snap/gtk-common-themes/1514</span><br><span class="line">loop2       squashfs                                                     0   100% /snap/snapd/11402</span><br><span class="line">loop3       squashfs                                                     0   100% /snap/snap-store/518</span><br><span class="line">loop4       squashfs                                                     0   100% /snap/snapd/11036</span><br><span class="line">loop5       squashfs                                                     0   100% /snap/gnome-3-34-1804/66</span><br><span class="line">loop6       squashfs                                                     0   100% /snap/core/10908</span><br><span class="line">loop7       squashfs                                                     0   100% /snap/pycharm-community/233</span><br><span class="line">loop8       squashfs                                                     0   100% /snap/intellij-idea-community/289</span><br><span class="line">sda                                                                               </span><br><span class="line">├─sda1                                                                            </span><br><span class="line">├─sda2      ntfs     数据     38C09128C090ECFE                                    </span><br><span class="line">├─sda3      ntfs     新加卷   2A9E99709E993573                                    </span><br><span class="line">└─sda4      ntfs     新加卷   C25E9EB25E9E9F2B                                    </span><br><span class="line">nvme0n1                                                                           </span><br><span class="line">├─nvme0n1p1 vfat              2E15-C03F                              63.2M    34% /boot/efi</span><br><span class="line">├─nvme0n1p2                                                                       </span><br><span class="line">├─nvme0n1p3 ntfs              A4AA2056AA2026F0                                    </span><br><span class="line">├─nvme0n1p4 ntfs              FE347AD2347A8D81                                    </span><br><span class="line">├─nvme0n1p5 ntfs     娱乐     E848526348523114                                    </span><br><span class="line">├─nvme0n1p6 ntfs     学习工作 EA1E592A1E58F155                                    </span><br><span class="line">└─nvme0n1p7 ext4              12354a11-9bf9-4882-a202-3e3e675b3158  164.3G     9% /</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>比如我想要挂载<code>/dev/sda4</code>的uuid为<code>C25E9EB25E9E9F2B</code></p><h2 id="修改-etc-fstab进行挂载">修改<code>/etc/fstab</code>进行挂载</h2><p>参考：<a href="https://blog.51cto.com/13570193/2070157">https://blog.51cto.com/13570193/2070157</a></p><p>比如我的添加了一行：<code>UUID=C25E9EB25E9E9F2B /data ntfs defaults 0 0</code></p><h2 id="重启">重启</h2><h2 id="验证">验证</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> df -h</span></span><br><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">udev             16G     0   16G    0% /dev</span><br><span class="line">tmpfs           3.2G  2.3M  3.2G    1% /run</span><br><span class="line">/dev/nvme0n1p7  192G   18G  165G   10% /</span><br><span class="line">tmpfs            16G     0   16G    0% /dev/shm</span><br><span class="line">tmpfs           5.0M  4.0K  5.0M    1% /run/lock</span><br><span class="line">tmpfs            16G     0   16G    0% /sys/fs/cgroup</span><br><span class="line">/dev/loop0       56M   56M     0  100% /snap/core18/1988</span><br><span class="line">/dev/loop1      100M  100M     0  100% /snap/core/10908</span><br><span class="line">/dev/loop2       33M   33M     0  100% /snap/snapd/11402</span><br><span class="line">/dev/loop4       52M   52M     0  100% /snap/snap-store/518</span><br><span class="line">/dev/loop3      426M  426M     0  100% /snap/pycharm-community/233</span><br><span class="line">/dev/loop5       32M   32M     0  100% /snap/snapd/11036</span><br><span class="line">/dev/loop6       65M   65M     0  100% /snap/gtk-common-themes/1514</span><br><span class="line">/dev/loop7      219M  219M     0  100% /snap/gnome-3-34-1804/66</span><br><span class="line">/dev/loop8      665M  665M     0  100% /snap/intellij-idea-community/289</span><br><span class="line">/dev/nvme0n1p1   96M   33M   64M   35% /boot/efi</span><br><span class="line">/dev/sda4       3.5T  211M  3.5T    1% /data</span><br><span class="line">tmpfs           3.2G   16K  3.2G    1% /run/user/125</span><br><span class="line">tmpfs           3.2G   24K  3.2G    1% /run/user/1000</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">UUID=80A467CBA467C270 /chia/temp1 ntfs defaults 0 0</span><br><span class="line">UUID=A4186E0A186DDBB4 /chia/temp2 ntfs defaults 0 0</span><br><span class="line">UUID=089E5CA89E5C8FD4 /chia/temp3 ntfs defaults 0 0</span><br><span class="line">UUID=38C09128C090ECFE /chia/data1 ntfs defaults 0 0</span><br><span class="line">UUID=2A9E99709E993573 /chia/data2 ntfs defaults 0 0</span><br><span class="line">UUID=C25E9EB25E9E9F2B /chia/data3 ntfs defaults 0</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;查看已经挂载了哪些&quot;&gt;查看已经挂载了哪些&lt;/h2&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl</summary>
      
    
    
    
    <category term="Linux" scheme="https://guozhe001.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://guozhe001.github.io/tags/Linux/"/>
    
    <category term="ubuntu" scheme="https://guozhe001.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu系统下nvidia显卡超频设置</title>
    <link href="https://guozhe001.github.io/2024/11/22/others/ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8Bnvidia%E6%98%BE%E5%8D%A1%E8%B6%85%E9%A2%91%E8%AE%BE%E7%BD%AE/"/>
    <id>https://guozhe001.github.io/2024/11/22/others/ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8Bnvidia%E6%98%BE%E5%8D%A1%E8%B6%85%E9%A2%91%E8%AE%BE%E7%BD%AE/</id>
    <published>2024-11-22T06:32:06.497Z</published>
    <updated>2024-11-22T06:32:06.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="必要条件是先安装nvidia的官方驱动">必要条件是先安装<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn">nvidia的官方驱动</a></h2><h3 id="卸载全部nvidia驱动">卸载全部nvidia驱动</h3><p><a href="https://az764295.vo.msecnd.net/stable/379476f0e13988d90fab105c5c19e7abc8b1dea8/VSCode-darwin-universal.zip">https://az764295.vo.msecnd.net/stable/379476f0e13988d90fab105c5c19e7abc8b1dea8/VSCode-darwin-universal.zip</a></p><h3 id="报错解决1：">报错解决1：</h3><h4 id="错误信息：">错误信息：</h4><p><code>ERROR: The Nouveau kernel driver is currently in use by your system. This driver is incompatible with the NVIDIA driver……</code></p><h4 id="解决方法：">解决方法：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建文件</span></span><br><span class="line">sudo vim /etc/modprobe.d/blacklist-nouveau.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加内容</span></span><br><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br></pre></td></tr></table></figure><p>更新使其生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure><p>重启机器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h3 id="报错解决2：">报错解决2：</h3><h4 id="错误信息：-v2">错误信息：</h4><p><code>Unable to find the development tool </code>cc<code> in your path; please make sure that you have the</code></p><p>或：</p><p><code>Unable to find the development tool </code>make<code> in your path; please make sure that you have t</code></p><h4 id="解决方法：-v2">解决方法：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc</span><br><span class="line">sudo apt install make</span><br></pre></td></tr></table></figure><h3 id="报错解决3">报错解决3:</h3><h4 id="错误信息：-v3">错误信息：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">An NVIDIA kernel module &#x27;nvidia-drm&#x27; appears to already be loaded in your kernel.  This may be because it is in use (for example, by an X server, a CUDA program, or the</span><br><span class="line">         NVIDIA Persistence Daemon), but this may also happen if your kernel was configured without support for module unloading.  Please be sure to exit any programs that may be</span><br><span class="line">         using the GPU(s) before attempting to upgrade your driver.  If no GPU-based programs are running, you know that your kernel supports module unloading, and you still</span><br><span class="line">         receive this message, then an error may have occurred that has corrupted an NVIDIA kernel module&#x27;s usage count, for which the simplest remedy is to reboot your computer.</span><br></pre></td></tr></table></figure><h4 id="解决方法：-v3">解决方法：</h4><p>卸载驱动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/nvidia-uninstall</span><br></pre></td></tr></table></figure><h3 id="安装完毕之后检查">安装完毕之后检查</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><h2 id="注意事项">注意事项</h2><p>在开始之前先打开ssh，并且设置静态ip否则可能无法进入桌面；如果无法进入桌面使用ssh链接然后把<code>/etc/X11/xorg.conf</code>文件删除之后重启即可。</p><p>参考：</p><p><a href="https://www.youtube.com/watch?v=5XaWVQ1GDVY">https://www.youtube.com/watch?v=5XaWVQ1GDVY</a></p><p><a href="https://bitcointalk.org/index.php?topic=2848723.0">https://bitcointalk.org/index.php?topic=2848723.0</a></p><p><a href="https://blog.csdn.net/liufunan/article/details/52090382">https://blog.csdn.net/liufunan/article/details/52090382</a></p><p><a href="https://askubuntu.com/questions/1251920/overclock-nvidia-gpu-to-achieve-undervolting">https://askubuntu.com/questions/1251920/overclock-nvidia-gpu-to-achieve-undervolting</a></p><h3 id="查看显卡信息：">查看显卡信息：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><h3 id="设置显卡功率">设置显卡功率</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置第一个显卡的功率为125w</span></span><br><span class="line">sudo nvidia-smi -i 0 -pl 125</span><br></pre></td></tr></table></figure><h3 id="开启超频">开启超频</h3><h4 id="生成xorg-conf文件">生成xorg.conf文件</h4><p>查看有没有<code>/etc/X11/xorg.conf</code>文件，如果没有则生成，命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果只有一张显卡，可以执行下面这一行。</span></span><br><span class="line">sudo nvidia-xconfig</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果是多个显卡，但是有一个显卡是用来视频输出的，则不要执行下面这一行。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo nvidia-xconfig --enable-all-gpus</span></span><br></pre></td></tr></table></figure><h4 id="设置-cool-bits-28">设置<code>--cool-bits=28</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nvidia-xconfig --cool-bits&#x3D;28</span><br><span class="line"># sudo nvidia-xconfig -a --cool-bits&#x3D;28</span><br></pre></td></tr></table></figure><p>具体的cool-bits的意思如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cool-bits的值的每一位都代表不同的含义，可以根据自己的需要组合，具体含义摘抄如下。</span><br><span class="line">Coolbits的值是所有位的组合成的二进制数对应的10进制数值：</span><br><span class="line">- 1 (bit0) 允许老的（Fermi核心）之前的显卡超频</span><br><span class="line">- 2 (bit1) 当使用不同显存的GPU需要设置成SLI时，可以设置这一位</span><br><span class="line">- 4 (bit2) 允许手动设置显卡风扇的转速</span><br><span class="line">- 8 (bit3) 允许超频，驱动版本要比337.12新，架构要比Fermi新</span><br><span class="line">- 16 (bit4) 允许超电压，驱动版本要比346.16新，架构要比Fermi新</span><br></pre></td></tr></table></figure><p>设置完成之后查看<code>/etc/X11/xorg.conf</code>文件，我的<code>Device</code>和<code>Screen</code>如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Section &quot;Device&quot;</span><br><span class="line">    Identifier     &quot;Device0&quot;</span><br><span class="line">    Driver         &quot;nvidia&quot;</span><br><span class="line">    VendorName     &quot;NVIDIA Corporation&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;Screen&quot;</span><br><span class="line">    Identifier     &quot;Screen0&quot;</span><br><span class="line">    Device         &quot;Device0&quot;</span><br><span class="line">    Monitor        &quot;Monitor0&quot;</span><br><span class="line">    DefaultDepth    24</span><br><span class="line">    Option         &quot;Coolbits&quot; &quot;28&quot;</span><br><span class="line">    SubSection     &quot;Display&quot;</span><br><span class="line">        Depth       24</span><br><span class="line">    EndSubSection</span><br></pre></td></tr></table></figure><p>需要把<code>Section &quot;Screen&quot;</code>下的<code>Option         &quot;Coolbits&quot; &quot;28&quot;</code>这一行移动到<code>Section Device</code>下面，如果不移动我的会导致显示器黑屏。移动之后如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Section &quot;Device&quot;</span><br><span class="line">    Identifier     &quot;Device0&quot;</span><br><span class="line">    Driver         &quot;nvidia&quot;</span><br><span class="line">    Option         &quot;Coolbits&quot; &quot;28&quot;</span><br><span class="line">    VendorName     &quot;NVIDIA Corporation&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;Screen&quot;</span><br><span class="line">    Identifier     &quot;Screen0&quot;</span><br><span class="line">    Device         &quot;Device0&quot;</span><br><span class="line">    Monitor        &quot;Monitor0&quot;</span><br><span class="line">    DefaultDepth    24</span><br><span class="line">    SubSection     &quot;Display&quot;</span><br><span class="line">        Depth       24</span><br><span class="line">    EndSubSection</span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure><h4 id="重启">重启</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h4 id="超频">超频</h4><h5 id="3070超频设置：">3070超频设置：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvidia-settings -c :0 -a &quot;[gpu:0]/GPUMemoryTransferRateOffset[4]=2500&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:0]/GPUGraphicsClockOffset[4]=-350&quot;</span><br></pre></td></tr></table></figure><h5 id="1660超频">1660超频</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">nvidia-settings -c :0 -a &quot;[gpu:0]/GPUMemoryTransferRateOffset[4]=1200&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:0]/GPUGraphicsClockOffset[4]=-80&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:1]/GPUMemoryTransferRateOffset[4]=1400&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:1]/GPUGraphicsClockOffset[4]=-100&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:2]/GPUMemoryTransferRateOffset[4]=1200&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:2]/GPUGraphicsClockOffset[4]=-80&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:3]/GPUMemoryTransferRateOffset[4]=1200&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:3]/GPUGraphicsClockOffset[4]=-80&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:4]/GPUMemoryTransferRateOffset[4]=1200&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:4]/GPUGraphicsClockOffset[4]=-80&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:5]/GPUMemoryTransferRateOffset[4]=1200&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:5]/GPUGraphicsClockOffset[4]=-80&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:6]/GPUMemoryTransferRateOffset[4]=1200&quot;</span><br><span class="line">nvidia-settings -c :0 -a &quot;[gpu:6]/GPUGraphicsClockOffset[4]=-80&quot;</span><br></pre></td></tr></table></figure><h2 id="ubuntu安装-deb软件">ubuntu安装.deb软件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 指定安装包安装</span></span><br><span class="line">sudo dpkg -i teamviewer_15.16.8_amd64.deb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果上面的命令报错说缺少依赖，则执行：</span></span><br><span class="line">sudo apt -f -y install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖之后，重新安装</span></span><br><span class="line">sudo dpkg -i teamviewer_15.16.8_amd64.deb</span><br></pre></td></tr></table></figure><h3 id="ubuntu更新已经安装的软件">ubuntu更新已经安装的软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查更新</span></span><br><span class="line">sudo apt update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出可更新软件</span></span><br><span class="line">apt list --upgradable</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新</span></span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;必要条件是先安装nvidia的官方驱动&quot;&gt;必要条件是先安装&lt;a href=&quot;https://www.nvidia.cn/Download/index.aspx?lang=cn&quot;&gt;nvidia的官方驱动&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;卸载全部nvidia驱动&quot;&gt;</summary>
      
    
    
    
    <category term="Linux" scheme="https://guozhe001.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://guozhe001.github.io/tags/Linux/"/>
    
    <category term="ubuntu" scheme="https://guozhe001.github.io/tags/ubuntu/"/>
    
    <category term="nvidia" scheme="https://guozhe001.github.io/tags/nvidia/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库备份并添加主从复制</title>
    <link href="https://guozhe001.github.io/2024/11/22/others/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>https://guozhe001.github.io/2024/11/22/others/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</id>
    <published>2024-11-22T06:32:06.497Z</published>
    <updated>2024-11-22T06:32:06.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>由于公司iaas人员在操作虚拟ip时手误，导致应该指向mysql主库的虚拟ip指向了从库。因为业务app使用的是虚拟ip链接的数据库，因此导致所有的业务数据都写入了从库，而主库的数据从此没有任何变化。</p><p>为了解决此问题，需要把原来的主库变成从库，从而继续保持mysql数据库的高可用；但是在处理的时候发现由于旧从库配置的bin-log超时时间为：<code>expire-logs-days  =  3</code>，这导致了3天前的bin-log已经因为过期而被清除。所以如果直接把旧的主库当作从库来进行主从复制，会导数据不一致。</p><p>因此最终需要把旧主库的数据全部清除，然后从旧从库导出所有数据再导入旧主库，最后再添加主从复制来达到此目的。</p><h3 id="基本信息">基本信息</h3><p>旧主库ip：172.99.0.32</p><p>旧从库ip：172.99.0.31</p><h2 id="具体操作如下">具体操作如下</h2><p>因为一共有三个数据库，查看数据库的data目录共200G以上的数据量，因此不能使用mysqldump来进行导入和导出备份。最终确定使用Percona XtraBackup工具进行备份和恢复数据。</p><h3 id="安装Percona-XtraBackup">安装<em>Percona XtraBackup</em></h3><p>参考<a href="https://www.percona.com/doc/percona-xtrabackup/2.4/installation/yum_repo.html">官方文档</a>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.Install the percona-release configuration tool</span></span><br><span class="line">yum install https://repo.percona.com/yum/percona-release-latest.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.Testing the repository</span></span><br><span class="line">yum list | grep percona</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.Enable the repository:</span></span><br><span class="line">percona-release enable-only tools release</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.Install Percona XtraBackup</span></span><br><span class="line">yum install percona-xtrabackup-24</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="错误处理">错误处理</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install https://repo.percona.com/yum/percona-release-latest.noarch.rpm</span></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Setting up Install Process</span><br><span class="line">percona-release-latest.noarch.rpm                                                                                                                                                    |  20 kB     00:00</span><br><span class="line">Examining /var/tmp/yum-root-3a5UYo/percona-release-latest.noarch.rpm: percona-release-1.0-27.noarch</span><br><span class="line">Marking /var/tmp/yum-root-3a5UYo/percona-release-latest.noarch.rpm to be installed</span><br><span class="line">Determining fastest mirrors</span><br><span class="line">YumRepo Error: All mirror URLs are not using ftp, http[s] or file.</span><br><span class="line"> Eg. Invalid release/repo/arch combination/</span><br><span class="line">removing mirrorlist with no valid mirrors: /var/cache/yum/x86_64/6/base/mirrorlist.txt</span><br><span class="line">Error: Cannot find a valid baseurl for repo: base</span><br></pre></td></tr></table></figure><p>解决方案：</p><ul><li>把源替换为清华大学源，<a href="https://mirror.tuna.tsinghua.edu.cn/help/centos-vault/">参考文档</a></li><li>查看当前系统的版本：<code>more /etc/issue</code></li><li>如果<code>sudo yum makecache</code>报错，先执行<code>yum clean all</code></li><li>如果<code>sudo yum makecache</code>依旧报错（[Errno 14] Peer cert cannot be verified or peer cert invalid），追加<code>sslverify=false</code>导<code>/etc/yum.conf</code>文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum makecache</span></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Determining fastest mirrors</span><br><span class="line">epel/metalink                                                                                                                                                                        | 4.4 kB     00:00</span><br><span class="line"> * epel: ftp.iij.ad.jp</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.8/os/x86_64/repodata/repomd.xml: [Errno 14] Peer cert cannot be verified or peer cert invalid</span><br><span class="line">Trying other mirror.</span><br><span class="line">It was impossible to connect to the Red Hat servers.</span><br><span class="line">This could mean a connectivity issue in your environment, such as the requirement to configure a proxy,</span><br><span class="line">or a transparent proxy that tampers with TLS security, or an incorrect system clock.</span><br><span class="line">Please collect information about the specific failure that occurs in your environment,</span><br><span class="line">using the instructions in: https://access.redhat.com/solutions/1527033 and open a ticket with Red Hat Support.</span><br><span class="line"></span><br><span class="line">Error: Cannot retrieve repository metadata (repomd.xml) for repository: base. Please verify its path and try again</span><br></pre></td></tr></table></figure><h3 id="使用Percona-XtraBackup">使用<em>Percona XtraBackup</em></h3><p>参考<a href="https://www.percona.com/doc/percona-xtrabackup/2.4/index.html">官方文档</a></p><h4 id="备份master">备份master</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --defaults-file=/data/mysql/mysql_3306/my_3306.cnf --host=127.0.0.1 --port=3306 --user=root --password=123456 /data/backup</span><br></pre></td></tr></table></figure><p>查看备份文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ll</span></span><br><span class="line">total 8</span><br><span class="line">drwxr-x--- 5 root root 4096 Mar 25 11:34 2022-03-25_10-56-55</span><br><span class="line">drwxr-x--- 7 root root 4096 Mar 25 15:10 2022-03-25_14-49-59</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ll 2022-03-25_14-49-59</span></span><br><span class="line">total 2108548</span><br><span class="line">-rw-r----- 1 root root        437 Mar 25 15:10 backup-my.cnf</span><br><span class="line">drwxr-x--- 2 root root      16384 Mar 25 15:10 db1</span><br><span class="line">drwxr-x--- 2 root root     176128 Mar 25 15:10 db2</span><br><span class="line">drwxr-x--- 2 root root       8192 Mar 25 15:10 db3</span><br><span class="line">-rw-r----- 1 root root   10656571 Mar 25 15:10 ib_buffer_pool</span><br><span class="line">-rw-r----- 1 root root 2147483648 Mar 25 14:50 ibdata1</span><br><span class="line">drwxr-x--- 2 root root       4096 Mar 25 15:10 mysql</span><br><span class="line">drwxr-x--- 2 root root       4096 Mar 25 15:10 performance_schema</span><br><span class="line">-rw-r----- 1 root root         46 Mar 25 15:10 xtrabackup_binlog_info</span><br><span class="line">-rw-r----- 1 root root        150 Mar 25 15:10 xtrabackup_checkpoints</span><br><span class="line">-rw-r----- 1 root root        630 Mar 25 15:10 xtrabackup_info</span><br><span class="line">-rw-r----- 1 root root     731648 Mar 25 15:10 xtrabackup_logfile</span><br></pre></td></tr></table></figure><h4 id="数据文件一致性">数据文件一致性</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --apply-log /data/backup/2022-03-25_14-49-59</span><br></pre></td></tr></table></figure><h4 id="数据恢复">数据恢复</h4><h5 id="把备份数据copy导32服务器">把备份数据copy导32服务器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r /data/backup/2022-03-25_14-49-59/ iaas@172.99.0.32:/data/backup_20220325</span><br></pre></td></tr></table></figure><h5 id="停止mysql">停止mysql</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line"></span><br><span class="line">mysqladmin --port=3306 -uroot -p12345 -h127.0.0.1 shutdown</span><br></pre></td></tr></table></figure><h5 id="备份和删除历史数据">备份和删除历史数据</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /data/mysql/mysql_3306 /data/mysql/mysql_3306_backup_20220325</span><br></pre></td></tr></table></figure><h5 id="创建新的数据文件夹">创建新的数据文件夹</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/mysql/mysql_3306</span><br></pre></td></tr></table></figure><h5 id="数据恢复-v2">数据恢复</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --defaults-file=/data/mysql/mysql_3306/my_3306.cnf --host=127.0.0.1 --port=3306 --user=root --password=123456 --copy-back /data/backup_20220325/2022-03-25_14-49-59</span><br></pre></td></tr></table></figure><h5 id="授权数据文件夹给mysql用户">授权数据文件夹给mysql用户</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /data/mysql</span><br><span class="line"></span><br><span class="line">chown -R mysql:mysql mysql_3306</span><br></pre></td></tr></table></figure><h5 id="启动数据库">启动数据库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /data/mysql/mysql_3306</span><br><span class="line">sh start.sh</span><br></pre></td></tr></table></figure><h4 id="添加主从复制配置">添加主从复制配置</h4><p>查看data/xtrabackup_binlog_pos_innodb获取主从同步的位置。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"># 添加主从配置</span><br><span class="line">CHANGE MASTER <span class="keyword">TO</span></span><br><span class="line">  MASTER_HOST<span class="operator">=</span><span class="string">&#x27;172.99.0.31&#x27;</span>,</span><br><span class="line">  MASTER_USER<span class="operator">=</span><span class="string">&#x27;rep&#x27;</span>,</span><br><span class="line">  MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  MASTER_PORT<span class="operator">=</span><span class="number">3306</span>,</span><br><span class="line">  MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;mysql-bin.003637&#x27;</span>,</span><br><span class="line">  MASTER_LOG_POS<span class="operator">=</span><span class="number">103905709</span>,</span><br><span class="line">  MASTER_CONNECT_RETRY<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"># 查看主从同步配置</span><br><span class="line"><span class="keyword">show</span> slave status \G</span><br><span class="line"># 启动主从同步</span><br><span class="line"><span class="keyword">start</span> slave;</span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line"><span class="keyword">show</span> slave status \G</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> slave status \G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master <span class="keyword">to</span> send event</span><br><span class="line">                  Master_Host: <span class="number">172.99</span><span class="number">.0</span><span class="number">.31</span></span><br><span class="line">                  Master_User: rep</span><br><span class="line">                  Master_Port: <span class="number">3306</span></span><br><span class="line">                Connect_Retry: <span class="number">10</span></span><br><span class="line">              Master_Log_File: mysql<span class="operator">-</span>bin<span class="number">.003637</span></span><br><span class="line">          Read_Master_Log_Pos: <span class="number">108431943</span></span><br><span class="line">               Relay_Log_File: relay<span class="operator">-</span>log<span class="number">.000002</span></span><br><span class="line">                Relay_Log_Pos: <span class="number">749241</span></span><br><span class="line">        Relay_Master_Log_File: mysql<span class="operator">-</span>bin<span class="number">.003637</span></span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB: mysql,test,information_schema</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: <span class="number">0</span></span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: <span class="number">0</span></span><br><span class="line">          Exec_Master_Log_Pos: <span class="number">105389363</span></span><br><span class="line">              Relay_Log_Space: <span class="number">2847004</span></span><br><span class="line">              Until_Condition: <span class="keyword">None</span></span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: <span class="number">0</span></span><br><span class="line">           Master_SSL_Allowed: <span class="keyword">No</span></span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: <span class="number">3177</span></span><br><span class="line">Master_SSL_Verify_Server_Cert: <span class="keyword">No</span></span><br><span class="line">                Last_IO_Errno: <span class="number">0</span></span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: <span class="number">0</span></span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: <span class="number">523306</span></span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">           Master_SSL_Crlpath:</span><br><span class="line">                   Using_Gtid: <span class="keyword">No</span></span><br><span class="line">                  Gtid_IO_Pos:</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><h2 id="错误记录">错误记录</h2><h3 id="xtrabackup-Can’t-change-dir-to-‘-var-lib-mysql’-Errcode-2-No-such-file-or-directory">xtrabackup: Can’t change dir to ‘/var/lib/mysql’ (Errcode: 2 - No such file or directory)</h3><h5 id="错误场景">错误场景</h5><p>在运行备份命令<code>innobackupex --defaults-file=/root/master/config-file.cnf --host=127.0.0.1 --port=3306 --user=root --password=123456 /root/backup</code>时报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost master]# innobackupex --defaults-file=/root/master/config-file.cnf --host=127.0.0.1 --port=3306 --user=root --password=123456 /root/backup</span><br><span class="line">xtrabackup: recognized server arguments: --log_bin --server-id=2481903306</span><br><span class="line">xtrabackup: recognized client arguments:</span><br><span class="line">220324 18:36:59 innobackupex: Starting the backup operation</span><br><span class="line"></span><br><span class="line">IMPORTANT: Please check that the backup run completes successfully.</span><br><span class="line">           At the end of a successful backup run innobackupex</span><br><span class="line">           prints &quot;completed OK!&quot;.</span><br><span class="line"></span><br><span class="line">220324 18:36:59  version_check Connecting to MySQL server with DSN &#x27;dbi:mysql:;mysql_read_default_group=xtrabackup;host=127.0.0.1;port=3306&#x27; as &#x27;root&#x27;  (using password: YES).</span><br><span class="line">220324 18:36:59  version_check Connected to MySQL server</span><br><span class="line">220324 18:36:59  version_check Executing a version check against the server...</span><br><span class="line">220324 18:36:59  version_check Done.</span><br><span class="line">220324 18:36:59 Connecting to MySQL server host: 127.0.0.1, user: root, password: set, port: 3306, socket: not set</span><br><span class="line">Using server version 10.1.32-MariaDB-1~jessie</span><br><span class="line">innobackupex version 2.4.24 based on MySQL server 5.7.35 Linux (x86_64) (revision id: b4ee263)</span><br><span class="line">xtrabackup: uses posix_fadvise().</span><br><span class="line">innobackupex: Can&#x27;t change dir to &#x27;/var/lib/mysql/&#x27; (Errcode: 2 - No such file or directory)</span><br><span class="line">xtrabackup: cannot my_setwd /var/lib/mysql/</span><br></pre></td></tr></table></figure><h5 id="解决方案">解决方案</h5><p>不可以在其他服务器上运行innobackupex命令对mysql进行备份</p><p>参考：<a href="https://serverfault.com/questions/685279/can-i-run-percona-xtrabackup-on-my-desktop">https://serverfault.com/questions/685279/can-i-run-percona-xtrabackup-on-my-desktop</a></p><h3 id="ERROR-Can’t-start-server-Bind-on-TCP-IP-port-Got-error-98-Address-already-in-use">[ERROR] Can’t start server: Bind on TCP/IP port. Got error: 98: Address already in use</h3><p>第一次启动数据库报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">220325 16:16:17 mysqld_safe Starting mysqld daemon with databases from &#x2F;data&#x2F;mysql&#x2F;mysql_3306&#x2F;data</span><br><span class="line">220325 16:16:17 [Note] &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqld (mysqld 10.0.28-MariaDB-enterprise) starting as process 19969 ...</span><br><span class="line">220325 16:16:17 [Note] InnoDB: Using mutexes to ref count buffer pool pages</span><br><span class="line">220325 16:16:17 [Note] InnoDB: The InnoDB memory heap is disabled</span><br><span class="line">220325 16:16:17 [Note] InnoDB: Mutexes and rw_locks use GCC atomic builtins</span><br><span class="line">220325 16:16:17 [Note] InnoDB: GCC builtin __sync_synchronize() is used for memory barrier</span><br><span class="line">220325 16:16:17 [Note] InnoDB: Compressed tables use zlib 1.2.3</span><br><span class="line">220325 16:16:17 [Note] InnoDB: Using Linux native AIO</span><br><span class="line">220325 16:16:17 [Note] InnoDB: Using CPU crc32 instructions</span><br><span class="line">220325 16:16:17 [Note] InnoDB: Initializing buffer pool, size &#x3D; 50.0G</span><br><span class="line">220325 16:16:19 [Note] InnoDB: Completed initialization of buffer pool</span><br><span class="line">220325 16:16:19 [Note] InnoDB: Highest supported file format is Barracuda.</span><br><span class="line">220325 16:16:20 [Note] InnoDB: 128 rollback segment(s) are active.</span><br><span class="line">220325 16:16:20 [Note] InnoDB:  Percona XtraDB (http:&#x2F;&#x2F;www.percona.com) 5.6.32-79.0 started; log sequence number 836023388696</span><br><span class="line">2022-03-25 16:16:20 7f6e1bfe8700 InnoDB: Loading buffer pool(s) from .&#x2F;&#x2F;ib_buffer_pool</span><br><span class="line">220325 16:16:20 [Note] Server socket created on IP: &#39;::&#39;.</span><br><span class="line">220325 16:16:20 [ERROR] Can&#39;t start server: Bind on TCP&#x2F;IP port. Got error: 98: Address already in use</span><br><span class="line">220325 16:16:20 [ERROR] Do you already have another mysqld server running on port: 3306 ?</span><br><span class="line">220325 16:16:20 [ERROR] Aborting</span><br><span class="line"></span><br><span class="line">220325 16:16:20 [Note] unregister_replicator OK</span><br><span class="line">220325 16:16:20 [Note] InnoDB: FTS optimize thread exiting.</span><br><span class="line">220325 16:16:20 [Note] InnoDB: Starting shutdown...</span><br><span class="line">2022-03-25 16:16:20 7f6e1bfe8700 InnoDB: Buffer pool(s) load completed at 220325 16:16:20</span><br><span class="line">2022-03-25 16:16:20 7f6e1bfe8700 InnoDB: Dumping buffer pool(s) to .&#x2F;&#x2F;ib_buffer_pool</span><br><span class="line">2022-03-25 16:16:20 7f6e1bfe8700 InnoDB: Buffer pool(s) dump completed at 220325 16:16:20</span><br><span class="line">220325 16:16:21 [Note] InnoDB: Waiting for page_cleaner to finish flushing of buffer pool</span><br><span class="line">220325 16:16:23 [Note] InnoDB: Shutdown completed; log sequence number 836023391393</span><br><span class="line">220325 16:16:23 [Note] &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqld: Shutdown complete</span><br><span class="line"></span><br><span class="line">220325 16:16:23 mysqld_safe mysqld from pid file &#x2F;data&#x2F;mysql&#x2F;mysql_3306&#x2F;data&#x2F;172-22-0-32.pid ended</span><br></pre></td></tr></table></figure><h4 id="解决方案-v2">解决方案</h4><p>查看占用3306端口的进程（<code>lsof -i TCP:3306</code>)，杀掉此进程之后再重新启动。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;由于公司iaas人员在操作虚拟ip时手误，导致应该指向mysql主库的虚拟ip指向了从库。因为业务app使用的是虚拟ip链接的数据库，因此导致所有的业务数据都写入了从库，而主库的数据从此没有任何变化。&lt;/p&gt;
&lt;p&gt;为了解决此问题，需</summary>
      
    
    
    
    <category term="MySQL" scheme="https://guozhe001.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://guozhe001.github.io/tags/MySQL/"/>
    
    <category term="主从复制" scheme="https://guozhe001.github.io/tags/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    
    <category term="MySQL备份" scheme="https://guozhe001.github.io/tags/MySQL%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-《你的第一本保险指南》</title>
    <link href="https://guozhe001.github.io/2024/11/22/others/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8A%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9C%AC%E4%BF%9D%E9%99%A9%E6%8C%87%E5%8D%97%E3%80%8B/"/>
    <id>https://guozhe001.github.io/2024/11/22/others/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8A%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9C%AC%E4%BF%9D%E9%99%A9%E6%8C%87%E5%8D%97%E3%80%8B/</id>
    <published>2024-11-22T06:32:06.497Z</published>
    <updated>2024-11-22T06:32:06.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、破除误会，我们真的了解保险吗">1、破除误会，我们真的了解保险吗</h1><h2 id="我们对保险的认识：理赔似乎特别难">我们对保险的认识：理赔似乎特别难</h2><ul><li>发生的事故不在保险范围，不能赔付</li><li>客户未如实告知自身情况，不能赔付</li><li>条款过于严苛，不能赔付</li></ul><h2 id="什么是核保师与健康告知">什么是核保师与健康告知</h2><h3 id="健康告知">健康告知</h3><h4 id="健康告知问询">健康告知问询</h4><ul><li>健康问询：是否有疾病或住院记录等</li><li>职业问询：是否从事高危行业</li><li>生活问询：是否吸烟、酗酒（酒精依赖），是否有极限运动等危险性高的业余爱好等</li></ul><h4 id="核保结论">核保结论</h4><ul><li>结论一：标准体。恭喜，你完美地符合健康告知中的所有要求，可以直接投保，无须做补充告知</li><li>结论二：次标准体。可能有少数几条不符合健康告知，但考虑到基本在可接受范围内，保险公司就“勉为其难”地允许你投保了<ul><li>接受除外责任：保险公司考虑到投保人当前的健康状况，将特定疾病排除在责任范围之外</li><li>增加保费</li></ul></li><li>结论三：延期。保险公司考虑到你的某个健康问题，暂不接受你的本次投保申请，建议过一段时间再来试试</li><li>结论四：拒保</li></ul><h4 id="到底怎么健康告知？">到底怎么健康告知？</h4><p>说实话，当保险公司把重疾险、医疗险这类保障型产品放到网上销售的时候，其实只是想卖给标准体客户。</p><p>至于次标准体和非标准体客户，对不起，这类产品不是为他们准备的。</p><h2 id="买保险一定要返本吗？">买保险一定要返本吗？</h2><h3 id="当你想要返还的时候，你到底想要什么">当你想要返还的时候，你到底想要什么</h3><ul><li>第一，拿回保费。如果没有发生保险事故，请把我交的保费还给我</li><li>第二，获得赔偿。既然我购买了保险，总归是希望能派上用场。</li></ul><h3 id="追求保费返还，切莫因小失大">追求保费返还，切莫因小失大</h3><ul><li>反本保险一般会比不反本（消费型）保险更贵</li><li>在追求保费返还时，想一下自己购买保险的初心：当初你说要买保险的时候，到底是用来做什么的？保费和保额，哪个才是你的初心？</li></ul><h3 id="非要拿到保费，不妨这样选择">非要拿到保费，不妨这样选择</h3><ul><li>提前给付型重疾险：身患重疾或不幸身故，哪个提前发生，都可给付赔偿，但是代价依然是支付更多保费</li><li>保障终身只是保险产品的一个功能设置，而不应被视为一个优点，因为你为此支付了更多的保费</li></ul><h2 id="保险公司会不会破产">保险公司会不会破产</h2><h3 id="保险公司会破产，却不会完蛋">保险公司会破产，却不会完蛋</h3><ul><li>保险公司破产时，人寿保险合同及责任准备金，必须转让给其他经营有人寿保险业务的保险公司</li><li>保险保障基金：来源是81家财险公司和88家寿险公司，保险公司每年需向其缴纳一定数额的资金，这也是被写进《保险法》的强制性要求。</li></ul><h3 id="政府在做的，是拼命预防保险公司破产">政府在做的，是拼命预防保险公司破产</h3><p>一家保险公司从计划成立之初，就不得不接受一系列监管。这些监管措施和规定就像一道道防火墙，确保公司在正确轨道上运转。</p><ul><li>第一道防火墙是极高的公司设立标准</li><li>第二道防火墙是全面科学的偿付能力监管<ul><li>所谓偿付能力，指的是当保险公司遭遇极端情况时，是否仍有能力履行赔付责任。每个年度和季度，保险公司的精算、财务等专业人士都会编制公司偿付能力报告，涉及一系列数学模型和压力测试</li><li>根据偿付能力情况，保险公司会得到从优到差的评级，包括A、B、C、D4个等级。评级可以在保险公司官网的“公开信息查询”栏目查到，我们将它视为判断保险公司是否“靠谱”的一个重要标志。长期来看，只要评级稳定在A和B的公司，我们都可以放心购买其产品</li></ul></li><li>第三道防火墙是频率高、强度大的现场检查<ul><li>监管部门会随时进驻保险公司总公司和分公司，通过调取档案、查询系统等方式实施现场检查</li></ul></li><li>当然，上述的防火墙虽好，如果因为贪污腐败而让保险公司蒙混过关，这是我们无法改变的事情，暂时只能接受</li></ul><h3 id="如何选择一家保险公司？">如何选择一家保险公司？</h3><ul><li>对比不同保险公司的投诉情况</li><li>监管部门每年都会对各家保险公司的投诉情况进行通报、评分，并发布在官网上（比如保监会官网）</li><li>销售人员口碑如何，信息技术实力如何（比如官网和手机软件的使用体验），客服电话能否快速接通，诸如此类</li><li>最重要的是保险产品的性价比</li></ul><h1 id="2、购前指南：买保险的正确方法">2、购前指南：买保险的正确方法</h1><ul><li><p>买保险和吃麦当劳是一样的，保险产品一般都是很多保险组成的。</p></li><li><p>一份保险计划通常由一款主险和若干款附加险构成，主险就像一位大哥，带着一帮作为附加险的小弟。</p><ul><li>这种充分利用和客户接触的机会推销尽可能多的产品，是一种普遍的保险销售模式</li></ul></li><li><p>但是有时候，单点比套餐更好，毕竟保险公司定的产品并非根据我们的需求定，附加险可能并非我们需要的。</p></li></ul><h2 id="责任的多少、保额的高低、期限的长短，这三大因素直接决定了保险产品的价格。">责任的多少、保额的高低、期限的长短，这三大因素直接决定了保险产品的价格。</h2><h3 id="保额：真到用时方恨少">保额：真到用时方恨少</h3><h3 id="期限：从一天到一辈子">期限：从一天到一辈子</h3><h4 id="短期产品">短期产品</h4><ul><li>保险期限不超过一年</li><li>以一年为一期计，产品的定价就要参考当下被保险人的年龄来计算了。30岁时购买，价格可能是100元；5年后，价格可能就会涨到400元。这种随年龄增加而上涨的定价策略，叫作自然费率。客户每年交的钱，只负责承担当年的风险。</li></ul><h4 id="长期产品">长期产品</h4><ul><li>10年、20年甚至终身</li><li>定价方法遵循两个原则：一是均衡费率原则，二是保证费率原则</li><li>均衡费率，指的是保险公司将被保险人未来很长一段时间的风险，归并到一起进行定价，而不只是一年的风险<ul><li>比如，保到70岁或保终身，投保人未来几十年的疾病发生率或者死亡率被累计后算出保费，再按照20年或30年交费的方式进行均摊，价格就确定了</li><li>在这样一种模式下，长期产品的停售只意味着不接受新客户的购买，但并不影响已经投保的客户</li></ul></li><li>保证费率：指的是在你投保的一瞬间，价格便已确定，后期不会增加。对于长期重疾险来说，即使投保人未来的发病率上升，保险公司也不会涨价</li></ul><h4 id="长期产品和短期产品费用比较">长期产品和短期产品费用比较</h4><ul><li>整体来看，购买短期险费用要比长期险费用高</li><li>人到中年，就有可能无法购买短期险</li><li>人到老年，则根本不能购买短期险</li><li>对于已经有长期险庇护的人来说，额外购买一份一年期产品，可以在一定时间内增加保额</li><li>短期险在年轻时比较便宜</li></ul><h3 id="保险产品的价格由谁决定">保险产品的价格由谁决定</h3><h4 id="我们有哪些需求需要保险解决？">我们有哪些需求需要保险解决？</h4><ol><li>得了重疾，有钱治病</li><li>得了重疾，弥补治疗期间的收入</li><li>不幸身故，给爸妈留一笔养老费</li><li>意外受伤，解决医保不包含的费用</li></ol><h4 id="保险这种产品不是一次性的，它是陪伴你度过漫长人生的一种风险规划">保险这种产品不是一次性的，它是陪伴你度过漫长人生的一种风险规划</h4><h2 id="如何与保险业务员打交道">如何与保险业务员打交道</h2><p>保险公司会不遗余力地增加产品的“人情味”，比如将保险塑造成爱与责任的象征，让你把对子女、父母的爱寄托于保险产品之上，让购买行为更加顺理成章</p><h3 id="保险销售人员到底指的是谁">保险销售人员到底指的是谁</h3><ul><li>第一，保险代理人。全国约800万，他们代表各自所在的保险公司，只销售某一家保险公司的产品。</li><li>第二，保险经纪人。和代理人最大的不同是，经纪人代表的不是某一家保险公司，而是保险中介公司，他们可以销售多家保险公司产品</li><li>第三，银行理财经理</li><li>第四，互联网第三方平台</li></ul><h3 id="和业务员打交道，要遵循两个原则">和业务员打交道，要遵循两个原则</h3><h4 id="想一下我们有时候会不会因为下面的情况而买保险">想一下我们有时候会不会因为下面的情况而买保险</h4><ul><li>第一，卖保险的人是亲戚，抹不开面子，买吧。</li><li>第二，邻居都给孩子买的这个，我也买一个吧</li><li>第三，他答应我把佣金返还给我，省了不少钱，买吧。</li><li>第四，小伙子口才好，人也帅，卖的保险不会差。</li><li>第五，就算被骗一年才损失1000多块钱，买吧</li></ul><p>好面子、从众心理、贪图小便宜、忽略产品的本质，这类问题经常发生，也间接催生了一批不靠谱的保险业务员</p><h4 id="第一个原则：互相尊重，学会提问。">第一个原则：互相尊重，学会提问。</h4><ul><li>条款能给我看一下吗？</li><li>为什么我需要这款产品？</li><li>为什么这类产品你们家的最好？</li><li>能比较一下不同产品吗？</li><li>为什么要保终身？</li><li>为什么这个附加险值得购买？</li><li>如果你发现这位保险业务员面对你提出的一个个问题，要么答不出来，要么逻辑混乱，要么不分青红皂白地敌视及贬损其他保险公司，最好立即更换业务员</li></ul><h4 id="第二个原则：充分信任，要有主见">第二个原则：充分信任，要有主见</h4><h3 id="卖保险简单吗">卖保险简单吗</h3><ul><li><p>产品贵不贵（同类产品的定价和费率对比）？</p></li><li><p>到底有哪些保障（保险责任的解读）？</p></li><li><p>退保能拿到多少保费（保单现金价值的解读）？</p></li><li><p>买完后哪些信息可以修改（对保单保全功能的讲解）？</p></li><li><p>这个产品能实现多高收益（如何计算分红险、万能险、年金等产品的投资收益）？</p></li><li><p>缴费期限怎么选择（现金流贴现原理）？</p></li><li><p>保险条款里有没有所谓的坑（除外责任做重点说明）？</p></li><li><p>遇到纠纷的时候如何处理？</p></li></ul><p>如果他真的做了产品对比，但如果他推销的产品价格没有竞争力，该怎么办？他真的算清楚了产品收益，但客户觉得收益率不如想象的那么高，该怎么办？他真的一条一条地解释清楚除外责任，客户却产生“保险公司推卸责任”的情绪化误解，该怎么办？他因为客户的健康问题而拒绝其投保，之前的工作不就白忙活了吗？<br>这些假设似乎暗示了保险销售人员“能力越强越卖不出去产品”的观点，但我想表达的绝不是“知识无用论”，它们只是在一定程度上反映了当前保险销售领域存在的弊病。而这些极端的例子恰恰凸显了“你”的重要性。</p><h3 id="你的公司给你买保险了吗">你的公司给你买保险了吗</h3><h4 id="企业团体保险">企业团体保险</h4><p>团险通常由4个保险产品组成：</p><ul><li>定期寿险</li><li>重大疾病险</li><li>意外险</li><li>医疗险</li></ul><p>团险计划可以涵盖以下责任：</p><ol><li>罹患重大疾病：保额50万元（重大疾病险的重疾责任50万元）。</li><li>疾病导致身故：保额50万元（定期寿险身故责任50万元）。</li><li>意外导致身故：保额150万元（定期寿险身故责任50万元+意外险身故责任100万元）。</li><li>门诊责任：保额2万元（医疗险包含的门急诊医疗责任2万元）。</li><li>住院责任：保额30万元（医疗险包含的住院医疗责任30万元）。</li></ol><p>团险价格之所以“亲民”，主要原因如下：</p><ul><li>第一，团险可以简单类比为团购，买的人数多，节省了一部分管理成本，自然就能获得一定的优惠</li><li>第二，团险的主要销售对象是企业人力资源部，只要负责人拍板，100个员工就直接购买了，不用一个一个地宣传、介绍，间接降低了产品的销售费用，最终的实惠落在了每一位参保员工身上</li><li>第三，以企业名义投保，参保人员的工作环境和性质相对一致，外部风险可控，何况不少企业还有入职体检，可以很好解决客户的逆选择和健康问题</li></ul><h4 id="团险带来的“保险幻觉”">团险带来的“保险幻觉”</h4><p>一般公司团险的保险产品的保障期限都是一年，如果完全依赖公司保险，我们一旦离职就会面临保险“裸奔”的情况<br>所以，建议大家用客观的态度看待公司为员工购买的团险。它是一种极好的员工福利，它应该是员工自身已购保险的有力补充，却不能被当作全部。</p><h4 id="了解公司的团险政策">了解公司的团险政策</h4><ul><li>这份团险计划里有涵盖身故责任的产品吗？</li><li>如果有，保额是多少？</li><li>如果员工获得晋升，保额会随之提高吗？</li></ul><h1 id="03-重点关注：中产必备的“四大保险金刚”">03 重点关注：中产必备的“四大保险金刚”</h1><h2 id="重大疾病险：为了不被改变的人生">重大疾病险：为了不被改变的人生</h2><p>重疾险的诞生，本质上是为了解决收入中断的风险，站在患者及其家人的角度，为已在重病深渊的家庭提供雪中送炭般的经济补偿</p><h3 id="重疾险究竟保什么">重疾险究竟保什么</h3><h4 id="什么叫“重大疾病”？">什么叫“重大疾病”？</h4><p>保监会安排中国保险行业协会和中国医师协会，在2007年拿出了一版25种重疾标准，囊括所有高发重疾类型（其实，只要是重疾险就都包括这25种）</p><p>保监会设定的这25种重大疾病，其发生概率超过95%的疾病种类。</p><p>所以如果一个保险说他包含更多的重疾，然后让我们多花钱买它，其实没有太必要。</p><h4 id="什么叫“罹患”？">什么叫“罹患”？</h4><ul><li>第一，病情达到某个标准，相当于确诊即赔，比如恶性肿瘤</li><li>第二，投保人为治疗某种疾病而接受了某种治疗方法。比如心脏瓣膜手术</li><li>第三，某种状态持续了一段时间。比如脑中风后遗症</li></ul><h3 id="除了重大疾病，重疾险还保这些">除了重大疾病，重疾险还保这些</h3><p>当重疾险的责任只有重大疾病时，消费者理所当然地提出了一个振聋发聩的问题：如果我一辈子没得重疾，这保费岂不是白交了？</p><p>好，为了不让你白交，保险公司索性增加了很多其他责任，<strong>“顺便”提升了保费</strong>。买卖双方都高兴，这种商业模式堪称完美。</p><ul><li>在新增的责任里，第一类是“身故责任”。这种包含身故责任的重疾险，基本上都可以“提前给付”。<ul><li>这里的提前指的是重疾、身故二者中哪个先发生，就给付哪个。</li><li>提前给付不过是一种产品设计罢了，千万别觉得它是一项独特的优势。</li></ul></li><li>第二类新增责任是轻症和中症责任</li><li>第三类新增责任是针对重大疾病的花样赔付方式。比如重疾和轻症可以赔付多次，又比如挑出某几个病种额外赔付50%的保额，再比如投保后前10年享受保额额外增加50%。</li></ul><p>上面说的这些都是在<strong>增加保费的基础上</strong>增加了更多的责任，所以当保险公司说我们保的多的时候除非和别人价格一样，否则只是在骗我们花更多钱而已。</p><h3 id="重疾险的保额及其他">重疾险的保额及其他</h3><h4 id="如何确定保额">如何确定保额</h4><ul><li>患重疾后，患者普遍面临的是3~5年的治疗康复期</li><li>与此同时，重疾导致收入中断将为家庭带来更大的压力</li><li>因此，重疾险的<strong>保额应至少覆盖投保人3~5年的收入</strong></li><li>如年收入20万元的保额应该在60万以上</li><li>而且只要确保这款重疾险能提供60万元的重疾保额，有没有身故责任、多次赔付、投保人豁免，都无关紧要</li></ul><h4 id="重疾险应该保障多久和交多少年保费。">重疾险应该保障多久和交多少年保费。</h4><p>讨论这个问题有一个前提：我们选择的是长期产品。</p><p>对于重疾险、定期寿险，可以保终身或者保到70岁左右的长期产品，是我们的首选——不仅价格更划算，也不会出现保险中断的情况。</p><p>长期重疾险的<strong>缴费期</strong>往往有多种选择：</p><ul><li>趸交（一次性交完）</li><li>10年交</li><li>20年交</li><li>少数产品甚至还设计了30年交</li></ul><p><strong>保障期限</strong>：</p><p>保障期限的延长，会带来保费的升高；没办法，一个人年龄越大，罹患重疾的概率就越高。如果预算充足，保终身当然是最好的选择。</p><p>在确保保额充足的情况下，我们可以把保额拆成两个产品来实现，一个保到退休，另一个保终身</p><p>如：对于需要60万元重疾险保额的小王来说，可以选择买<strong>一份保终身的30万元保额</strong>的重疾险，再买<strong>一份保到70岁的30万元保额</strong>的重疾险。这比直接购买一份保终身的60万元保额的重疾险，花费更少</p><h2 id="定期寿险：解决人生中最大的风险">定期寿险：解决人生中最大的风险</h2><h3 id="谁适合买寿险">谁适合买寿险</h3><p>如果说重疾险的赌注是病，寿险的赌注就是命。定期寿险赌的则是一段时间的命。比如投保人于30年内身故，受益人即可获得理赔款。</p><p>一般的定期寿险，除了保障身故，还会把全残也视作与身故等同的责任。</p><ul><li>单身的人理应关心父母的养老问题</li><li>新婚的人会增加对另一半的考虑</li><li>有了孩子后，责任更重</li></ul><h4 id="意外险和寿险对比">意外险和寿险对比</h4><p>这里需要额外强调一点。谈到身故风险，很多人会联想到意外险，因为它不是也有身故保障吗？</p><p>“疾病”和“意外”为占比最大的两类死亡原因，分别为79.3%和18.9%。</p><p>所以，单纯购买意外险，是无法解决身故的风险的。</p><h3 id="如何选购定期寿险？">如何选购定期寿险？</h3><h4 id="确定保额是关键性的第一步">确定保额是关键性的第一步</h4><p>保额的高低，决定了投保人身故后他的妻子、父母或者孩子能拿到多少补偿。定期寿险的保额，主要取决于三个因素。</p><ul><li>一是个人和家庭的债务额度，比如房贷、车贷等，确保一方身故后，债务不转嫁到另一方或父母身上</li><li>二是家庭成员的基本生活成本。如果家庭每年的开销为20万元，那么身故理赔金至少应为100万元，以负担家庭未来5—10年的基本生活开销。</li><li>三是父母的养老支出，这笔费用的计算逻辑和上一个类似。</li></ul><h4 id="定期寿险还要考虑的问题是保障期限">定期寿险还要考虑的问题是保障期限</h4><p>到底要保到多大年龄呢？我个人建议，以退休年龄为标准，60岁或70岁皆可。</p><p>至于缴费年限的选择，我建议尽可能拉长，20年交或30年交皆可。缴费年限越长，年均保费越低，从而做到用尽可能少的钱去撬动尽可能高的保额。</p><h4 id="保额、保障期限和缴费年限都确定后，我们在选购具体产品时，还要格外关注三个方面：">保额、保障期限和缴费年限都确定后，我们在选购具体产品时，还要格外关注三个方面：</h4><ul><li>第一，核保是否宽松。这是最重要的，因为如果健康告知非常严格，想买也买不了，何谈其他？比如，有的定期寿险不接受乙肝小三阳患者，有的不接受高危职业从业者。所以我们一定要弄清楚投保要求再买，尽量避免理赔时的潜在纠纷，才能真正做到安心。</li><li>第二，除外责任多不多。前文在分析如何阅读保险条款的时候，专门强调要关注除外责任。比如，有的定期寿险明确指出，因为战争、军事暴乱导致的死亡，它们概不负责。那么，对于去中东、非洲等地区旅游或工作的中国人来说，这种定期寿险就得慎重考虑购买了。</li><li>第三，价格低不低。如果上面几条标准比较起来都差不多，问题就变简单了：哪个产品便宜就选择哪个。</li></ul><h2 id="商业医疗险：让高额医疗开支不再可怕">商业医疗险：让高额医疗开支不再可怕</h2><h3 id="社会医疗保险">社会医疗保险</h3><p>在用医保卡看病的过程中，我们都接触过一些陌生的名词，比如起付线、药品目录、自费药、报销额度等。</p><ul><li>起付线：的意思是，每年只有花到一定金额，才能开始报销，否则就都是自费</li><li>药品目录：指的是在医保系统中，对于医疗机构开具的药品做了不同分类，不同类型的药品报销额度也不一样，有的可全部报销，有的则只可报销一部分，还有的药全部要自费购买</li><li>销额度很好理解，即使药品、治疗等都在报销范围内，医保也不是无限制的报销，整体来看，每年的报销额度范围为20万~30万元；对于罹患重大疾病的患者来说，这一额度根本无法满足他们长期、昂贵的治疗需求。</li></ul><h3 id="医保不管的，让商业医疗保险来管">医保不管的，让商业医疗保险来管</h3><p>医疗险其实只包括两种产品</p><h4 id="第一种是包含门诊责任的商业医疗保险，可暂且称之为门诊医疗保险">第一种是包含门诊责任的商业医疗保险，可暂且称之为门诊医疗保险</h4><p>这种产品保额不高，一般是几千元。有的门诊医疗保险会设置一个免赔额，比如单次100元或者累计500元。免赔额和政府医保起付线是同一个概念，都是为了减少理赔支出，实际上也起到了降低保费的作用。</p><h4 id="第二种是包含住院责任的商业医疗保险，我们称之为住院医疗保险。">第二种是包含住院责任的商业医疗保险，我们称之为住院医疗保险。</h4><p>这类产品的保额就高多了，几十万元甚至上百万元都很常见。和门诊医疗保险相比，住院医疗保险是下文要重点介绍的产品。</p><p>能被称作风险的，必然意味着财务上的巨大影响。所以和几十万甚至上百万元的医疗支出相比，几千元的门诊、住院费用，真的称不上风险。</p><h3 id="买了重疾险，还要买医疗险吗">买了重疾险，还要买医疗险吗</h3><h4 id="重疾险和商业医疗最重要的区别，是保险公司的理赔方式不一样">重疾险和商业医疗最重要的区别，是保险公司的理赔方式不一样</h4><ul><li><p>重疾险有点儿像一锤子买卖，只要符合条款规定，保险公司就会把理赔款一次性打给你，无论是几万元还是几十万元。</p></li><li><p>商业医保就不一样了，花多少才能赔多少，保额仅代表可报销额度的上限，而你不一定能花掉这么多钱</p></li></ul><p>如果一个人罹患影响正常生活的重大疾病，那他主要面临的问题有两个：一是治疗费用太高，掏空家底；二是无法继续工作，失去收入。前者可以靠商业医疗保险解决，后者则只能靠重疾险解决，两类保险的功能不一样。</p><h4 id="重疾险和商业医疗保险在定价方面的区别">重疾险和商业医疗保险在定价方面的区别</h4><p>长期重疾险每年的保费是恒定的，商业医疗保险的保费则会随着被保险人年龄的增加而上调</p><h4 id="重疾险和商业医疗保险在续保方面的区别">重疾险和商业医疗保险在续保方面的区别</h4><p>目前市场上大多数医疗险都是一年期产品，如果第二年你想继续投保，得先看看保险条款是怎么规定的，通常有以下两种情况：</p><ul><li>第一种是，卖不卖给你，我说了算。投保人的续保申请须经保险人审核同意，投保人申请续保时，保险人有权对费率进行调整。</li><li>第二种规定是，只要这个产品还在销售，保险公司就肯定会卖给你。连续投保时，保险人不会因为某一被保险人的健康状况变化或历史理赔情况而单独调整该被保险人的连续投保费率。</li></ul><h2 id="意外险：不容忽视的“小”保险">意外险：不容忽视的“小”保险</h2><h3 id="意外险保什么、不保什么">意外险保什么、不保什么</h3><p>遭受外来的、突发的、非本意的、非疾病的使身体受到伤害的客观事件。自然死亡、疾病身故、猝死、自杀及自伤均不属于意外伤害。</p><p>在每份意外险的保险条款里，你都能看到这样的描述。这段话表达了两层意思：</p><ul><li><p>第一，外来的、突发的、非本意的、非疾病的使身体受到伤害的客观事件，属于意外；</p></li><li><p>第二，自然死亡、疾病身故、猝死、自杀及自伤，不属于意外。</p></li></ul><p>除了猝死，意外险还有一些“不保”：</p><ul><li>意外险通常不保高危职业从业者</li><li>除了特定人群“不保”，还有某类地区“不保”。关于意外医疗责任，保险条款中往往会有一个补充描述：只承担中华人民共和国国境内（不包括港澳台地区）医院产生的医疗费用和支出。</li><li>最后一个“不保”，是某些行为不保。被保险人从事潜水、跳伞、攀岩运动、探险活动、武术比赛、摔跤比赛、特技表演、赛马、赛车等高风险活动期间发生的意外，不在意外险的责任范围内</li></ul><h3 id="配置意外险的几条原则">配置意外险的几条原则</h3><h4 id="原则一：必须涵盖意外医疗责任。">原则一：必须涵盖意外医疗责任。</h4><p>意外导致的结果无非两种：伤残和死亡。因此，意外险保障的责任有三个必选项：身故、伤残、医疗。</p><p>意外受伤后，我们最大的需求就是医疗费用补偿。考虑到很多意外产生的医疗费用医保都无法报销，意外险的医疗责任就更重要了。</p><p>至于意外医疗的保额，一两万就足够了。如果是一两万元都治不好的意外受伤，一定已经严重到需要做手术或者长期住院治疗了，这时理赔的责任就可以交给上文提到的住院医疗保险了。</p><p>另外，你可能听说过住院津贴或住院保险金，它的作用是，投保人每住一天院，保险公司就会支付给他几百元钱，主要是为了弥补住院期间的收入损失，颇为贴心，本质上也属于意外医疗的责任范围。住院津贴属于锦上添花型保险，而且要花钱购买，所以有没有都无所谓。</p><h4 id="原则二：一般意外身故的保额应足够高。">原则二：一般意外身故的保额应足够高。</h4><p>在这里我要提醒大家注意某些保险公司的“套路”。当你看到一个类似于“百万身价意外险”的打折产品时，请一定弄清楚它所说的百万身价到底是什么意思。举个例子，有个产品页面是这么描述该产品的：</p><ul><li><p>一般意外身故：10万元</p></li><li><p>航空意外身故：100万元</p></li></ul><p>我更喜欢以下这类保险：</p><ul><li><p>一般意外身故：100万元</p></li><li><p>航空意外身故：200万元</p></li></ul><h4 id="原则三：不同人群的意外险，侧重点不一样。">原则三：不同人群的意外险，侧重点不一样。</h4><ul><li><p>对于职场白领来说，意外险既要有足够的身故补偿（用于弥补家庭经济损失），也要保证受伤后有钱治疗；</p></li><li><p>但对于孩子和老人来说，身故补偿就没有医疗费用补偿重要，毕竟他们不是家里的顶梁柱。</p></li><li><p>因此，孩子和老人的意外险，应侧重于考虑提升意外医疗的保额，而没有必要追求意外身故的高保额。</p></li></ul><h4 id="原则四：保障时间一年就够了。">原则四：保障时间一年就够了。</h4><p>之前在介绍一年期产品特征的时候我提过，意外险和医疗险大多会设计成短期险，这样一来，就可以随时按照意外发生率和医疗成本的波动进行价格调整。因此，每年各家公司的意外险层出不穷，可能去年买的产品，到了明年就没什么竞争力了，这时直接换一家公司购买就好。由于意外险的几个基本责任都没有等待期这一说，所以可以做到无缝衔接。</p><h1 id="04-优化配置：给保险升个级">04　优化配置：给保险升个级</h1><h2 id="像有钱人一样看病">像有钱人一样看病</h2><h3 id="高端医疗，高端在哪里？">高端医疗，高端在哪里？</h3><ul><li>第一，保额更高。几十万元甚至几百万元的保额都是小菜一碟，从几千万元到不设限，高端医疗的保额完全超乎你的想象。</li><li>第二，医院更多、更高端。从三甲医院的特需部、国际部，到私立医院、国际医院，而且不限中国地区，从亚太地区到全球，基本覆盖所有类型的医疗机构。</li><li>第三，保障更全面。除了传统的门诊、住院两大块之外，高端医疗险还包含分娩、牙科、眼科、体检等责任，要知道，这些治疗通常都在常规医疗险的除外项目里，一般医疗险都不管。</li><li>第四，增值服务更多。</li><li>第五，理赔体验更好。</li></ul><h2 id="保险能为我的养老做什么？">保险能为我的养老做什么？</h2><h3 id="该不该买养老保险？">该不该买养老保险？</h3><h3 id="可不可以把保险当作投资方式">可不可以把保险当作投资方式</h3><p>要回答上面两个问题，需要使用excel中的IRR公式计算内部收益率，如果内部收益率能够达到预期并且现在手头有钱就可以买。</p><p>比如年复利6%以上就能达到预期，否则不如买债券基金或者指数型基金。</p><h2 id="该去香港买保险吗？">该去香港买保险吗？</h2><p>略</p><h1 id="05-个性化定制：保险方案，你自己说了算">05 个性化定制：保险方案，你自己说了算</h1><h2 id="如何给孩子买保险">如何给孩子买保险</h2><h3 id="先别着急买商业保险">先别着急买商业保险</h3><p>和大人一样，孩子也是可以参加政府医保的。在配置商业保险之前，父母一定要参考当地的医保政策为孩子办理少儿医保。</p><p>少儿医保本质上是针对儿童罹患重大疾病提供的风险保障。</p><p>有没有医保也会影响孩子投保商业保险的价格。尤其是医疗险，被保险人有医保的医疗险价格更低。</p><h3 id="孩子会面临哪些风险">孩子会面临哪些风险</h3><ul><li>风险一：身患危重疾病<ul><li>孩子一旦患危重疾病，除了需要长期投入高额治疗费用，父母也可能为了照顾孩子而辞掉工作。</li><li>因此，重疾险和高保额住院医疗险是应该首先为孩子配置的保险。</li><li>重疾险的价值在于，罹患重疾后一次性获得定额赔偿，可作为自费治疗费用和家庭收入中断的补偿。</li><li>高额住院医疗险的价值在于应对高额的医疗费用，尤其是许多医保范围外的自费项目</li></ul></li><li>风险二：发生意外受伤</li><li>风险三：身患一般疾病</li></ul><h3 id="配置儿童商业保险">配置儿童商业保险</h3><h4 id="孩子不该买哪些保险">孩子不该买哪些保险</h4><ul><li>包含身故责任的意外险不在我们的讨论范围内</li><li>定期寿险、终身寿险也无需购买</li><li>除意义不大的身故责任外，为孩子购买教育金、养老金，优先级也不高</li></ul><p><strong>孩子真正需要的商业保险其实只有三款：重大疾病险、意外险、高额住院医疗险。</strong></p><h4 id="关于孩子的重疾险">关于孩子的重疾险</h4><p>请记住一个事实：少儿罹患重大疾病的概率非常低。这直接决定了儿童重疾险的价格十分便宜。因此，为孩子配置重疾险，一定要抓住价格优势，尽可能提高保额，拉长期限。都是100万元的终身重疾险保额，30多岁男性的购买价格，可以达到小孩子的两倍多。</p><p>孩子的重疾险应该买保终身或者70岁的，不要买保障30年，三十年之后孩子才三、四十岁，那时断保再新买保险会更贵。</p><h4 id="孩子最好的保险是父母">孩子最好的保险是父母</h4><p>父母自身的健康以及稳定、持续的赚钱能力，是孩子最重要的保险。</p><p><strong>总结一下为孩子配置保险的几个关键点。</strong></p><ol><li><p><strong>作为父母，先把自己的保险配置好，因为你才是孩子最大的“保险”；</strong></p></li><li><p><strong>在购买任何商业保险之前，先为孩子办理好当地的少儿医保，这是政府给予的福利，一定要充分利用；</strong></p></li><li><p><strong>结合自身预算，首先配置高保额的重大疾病险和住院医疗险，其他的保险则量力购买。</strong></p></li></ol><h2 id="如何给父母买保险">如何给父母买保险</h2><h3 id="一个不断妥协退让的过程">一个不断妥协退让的过程</h3><p>其实父母面临的风险非常简单，就是疾病引发的财务风险。</p><p>这样看来，给父母配置保险，主要考虑的应该是重疾险、医疗险和意外险。</p><p>年龄超过60岁的人想要投保重疾险和医疗险会有很多限制：</p><ul><li>第一，年龄限制。<ul><li>几乎所有重疾险和医疗险的投保年龄都在0~60岁。对重疾险而言，55岁的投保年龄上限是普遍规则。</li></ul></li><li>第二，保额限制。<ul><li>同样一份保险，30岁的人和50岁的人可享受的保额上限是不一样的。</li><li>以重疾险为例，如果在网上直接投保，30岁的被保险人的保额上限基本为50万~60万元，而50岁的被保险人的保额上限只有10万元。</li></ul></li><li>第三，保费倒挂。<ul><li>一位55岁的男性购买保额为10万元的重疾险，每年需要交3500元左右，交20年，总计7万元的支出和10万元的保额相比，差别不大。</li></ul></li><li>第四，健康告知不符。<ul><li>患有高血压、心脏病、糖尿病的老年人，可以直接和重大疾病险、住院医疗险说再见了</li><li>保险公司也意识到了这个问题，于是想了一个办法：双方各退一步。保险公司把保障范围缩小，限制也随之减少。但这个保障范围不能太小，得有存在的意义。</li><li>于是，防癌类保险应运而生。重疾险涵盖的几十种疾病，只保留第一项，即恶性肿瘤；住院医疗险涵盖的所有疾病的住院责任，也只保留一项，即癌症住院责任。</li><li>这种做法最大的好处，就是健康告知的内容大幅减少。只要不是易引发癌症的症状（肝部疾病、器官或组织的结节等），保险公司都不介意，高血压、糖尿病患者也可以投保。毕竟，高血压导致的急性心梗和糖尿病导致的终末期肾病或截肢，都不在防癌类保险的责任范围内。</li></ul></li></ul><h3 id="六分靠规划，四分靠心态">六分靠规划，四分靠心态</h3><p>哪怕有那么多的限制，我们还是可以购买意外险、防癌险、防癌医疗险和糖尿病特定疾病重疾险。</p><h4 id="如果你想简明扼要地掌握给父母买保险的技巧，请记住以下几点。">如果你想简明扼要地掌握给父母买保险的技巧，请记住以下几点。</h4><ul><li><p>第一，确保父母双方都有社会医疗保险。不管是城市的居民医保，还是农村的“新农合”，没有的话，赶紧先把社会医保办好。</p></li><li><p>第二，遇到疑难杂症，不少人会选择带父母来北上广等大城市就诊。所以，请提前研究好医保的异地结算流程，确保不让医保“白交”，这一点非常有必要。</p></li><li><p>第三，详细了解爸妈的身体健康情况，对症下药买保险。</p></li></ul><h2 id="如何给自己买保险">如何给自己买保险</h2><h3 id="18岁保险清单">18岁保险清单</h3><ul><li>学生团体保险：包含意外身故/伤残责任，意外医疗责任，住院医疗责任；预算为200元。</li><li>或自己投保：<ul><li>意外险：包含意外身故/伤残责任，意外医疗责任；预算为200元（保额为50万元）。</li><li>医疗险：包含疾病导致的住院医疗责任，预算为200元。</li></ul></li></ul><h4 id="18岁保障速览">18岁保障速览</h4><ul><li><p>身故补偿（仅限意外原因）：50万元。</p></li><li><p>意外医疗补偿：1万元（上限）。</p></li><li><p>住院医疗补偿：100万元（上限）。</p></li></ul><h3 id="22岁新增保险情况">22岁新增保险情况</h3><p>定期寿险A：受益人为父母，保额大约相当于父母5年的退休金；预算为每年500元（保额50万元，保障期30年，缴费期30年）。</p><h4 id="保障速览">保障速览</h4><ul><li><p>身故补偿（不限死亡原因）：50万元。</p></li><li><p>额外身故补偿（仅限意外原因）：50万元。</p></li><li><p>意外医疗补偿：1万元（上限）。</p></li><li><p>住院医疗补偿：100万元（上限）。</p></li></ul><h3 id="28岁新增保险情况"><strong>28岁</strong>新增保险情况</h3><ul><li><p>定期寿险B：受益人为法定受益人，保额约等于5倍年薪；</p></li><li><p>预算为每年1000元（保额80万元，保到60岁，缴费期30年）。</p></li><li><p>重大疾病险A：保额约等于购买时的3倍年薪；预算为每年5000元（保额50万元，保到70岁，缴费期30年）。</p></li></ul><h4 id="28岁保障速览">28岁保障速览</h4><ul><li><p>身故补偿（不限死亡原因）：130万元。</p></li><li><p>额外身故补偿（仅限意外原因）：50万元。</p></li><li><p>意外医疗补偿：1万元（上限）。</p></li><li><p>住院医疗补偿：100万元（上限）。</p></li><li><p>重大疾病补偿：50万元。</p></li></ul><h3 id="32岁新增保险情况"><strong>32岁</strong>新增保险情况</h3><ul><li><p>意外险：包含意外身故/伤残责任；预算为每年400元（保额100万元）。</p></li><li><p>减额定期寿险C：受益人为法定受益人，保额等于房贷总额；预算为每年2000元（保额150万元，保障期30年，缴费期20年）。（有房贷才买）</p></li><li><p>重大疾病险B：提升重疾保额；预算为每年5000元（保额30万元，保终身，缴费期30年）。</p></li></ul><h4 id="32岁保障速览"><strong>32岁</strong>保障速览</h4><ul><li><p>身故补偿（不限死亡原因）：130万元。</p></li><li><p>额外身故补偿（仅限意外原因）：150万元。</p></li><li><p>意外医疗补偿：1万元（上限）。</p></li><li><p>住院医疗补偿：100万元（上限）。</p></li><li><p>重大疾病补偿：80万元。</p></li></ul><h3 id="34岁"><strong>34岁</strong></h3><ul><li><p>意外险：包含意外身故/伤残责任，意外医疗责任；预算为每年200元（保额50万元）。</p></li><li><p>意外险：包含意外身故/伤残责任；预算为每年400元（保额100万元）。</p></li><li><p>医疗险：包含疾病导致的住院医疗责任；预算为每年200元。定期寿险A：受益人为父母，保额相当于父母5年的退休金；预算为每年500元（保额50万元，保障期30年，缴费期30年）。</p></li><li><p>定期寿险B：受益人为法定受益人，保额相当于自己5倍的年薪。预算为每年1000元（保额80万元，保到60岁，缴费期30年）。</p></li><li><p>减额定期寿险C：受益人为法定受益人，保额等于房贷总额；预算为每年2000元（保额150万元，保障期30年，缴费期20年）。</p></li><li><p>定期寿险D：受益人为子女，保额相当于孩子5年的生活费；预算为每年4000元（保额100万元，保到60岁，缴费期20年）。</p></li><li><p>重大疾病险A：保额相当于自己当时的3倍年薪；预算为每年5000元（保额50万元，保到70岁，缴费期30年）。重大疾病险B：提升重疾险保额；预算为每年5000元（保额30万元，保终身，缴费期30年）。</p></li><li><p>养老保险（60岁领取）：预算为每年60000元（每月5000元）。</p></li></ul><p>给自己买保险，不能一蹴而就，应随着人生进入不同阶段而分步实施。在这个过程中，我们需要对自己的情感进行再分配，说到底就是，回答“为谁买保险”的问题。比如，涉及医疗补偿的保险（如住院医疗险、重大疾病险），是为了让自己不至于被疾病掏空腰包；再比如，涉及身故补偿的保险（如定期寿险、意外险），是为了让家人能够继续维持原来的生活水准。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、破除误会，我们真的了解保险吗&quot;&gt;1、破除误会，我们真的了解保险吗&lt;/h1&gt;
&lt;h2 id=&quot;我们对保险的认识：理赔似乎特别难&quot;&gt;我们对保险的认识：理赔似乎特别难&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;发生的事故不在保险范围，不能赔付&lt;/li&gt;
&lt;li&gt;客户未如实告知自身</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://guozhe001.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="读书笔记" scheme="https://guozhe001.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="保险" scheme="https://guozhe001.github.io/tags/%E4%BF%9D%E9%99%A9/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://guozhe001.github.io/2024/11/22/language/d%20/"/>
    <id>https://guozhe001.github.io/2024/11/22/language/d%20/</id>
    <published>2024-11-22T06:32:06.496Z</published>
    <updated>2024-11-22T06:32:06.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="runtime-cgo">runtime/cgo</h1><p>xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;runtime-cgo&quot;&gt;runtime/cgo&lt;/h1&gt;
&lt;p&gt;xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python总结</title>
    <link href="https://guozhe001.github.io/2024/11/22/language/Python%E6%80%BB%E7%BB%93/"/>
    <id>https://guozhe001.github.io/2024/11/22/language/Python%E6%80%BB%E7%BB%93/</id>
    <published>2024-11-22T06:32:06.496Z</published>
    <updated>2024-11-22T06:32:06.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jupyter">Jupyter</h2><h3 id="启动">启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><h3 id="ModuleNotFoundError-No-module-named-‘okex’">ModuleNotFoundError: No module named ‘okex’</h3><p>在导入本地文件夹的文件时报错如上，可以在import这个模块之前添加以下代码，然后再import</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module_path = os.path.abspath(os.path.join(<span class="string">&#x27;..&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;module_path=&quot;</span>, module_path)</span><br><span class="line"><span class="keyword">if</span> module_path <span class="keyword">not</span> <span class="keyword">in</span> sys.path:</span><br><span class="line">    sys.path.append(module_path)</span><br></pre></td></tr></table></figure><h3 id="AttributeError-module-‘util-file-util’-has-no-attribute-‘exists’"><a href="https://www.528btc.com/bk/160265922370218.html">AttributeError</a>: module ‘util.file_util’ has no attribute ‘exists’</h3><p>如果本地的python代码已经修改，如果不重启（刷新）jupyter会报错如上，刷新一下即可。</p><h2 id="Pydoc">Pydoc</h2><p>本地启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pydoc -p 6789</span><br></pre></td></tr></table></figure><h2 id="pip-install报错">pip install报错</h2><p>错误信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip3.9 install cytoolz</span></span><br><span class="line">Looking in indexes: http://mirrors.cloud.aliyuncs.com/pypi/simple/</span><br><span class="line">Collecting cytoolz</span><br><span class="line">  Downloading http://mirrors.cloud.aliyuncs.com/pypi/packages/58/67/1c60da8ba831bfefedb64c78b9f6820bdf58972797c95644ee3191daf27a/cytoolz-0.11.0.tar.gz (477 kB)</span><br><span class="line">     |████████████████████████████████| 477 kB 2.6 MB/s</span><br><span class="line">Requirement already satisfied: toolz&gt;=0.8.0 in /usr/local/lib/python3.9/site-packages (from cytoolz) (0.11.1)</span><br><span class="line">Using legacy &#x27;setup.py install&#x27; for cytoolz, since package &#x27;wheel&#x27; is not installed.</span><br><span class="line">Installing collected packages: cytoolz</span><br><span class="line">    Running setup.py install for cytoolz ... error</span><br><span class="line">    ERROR: Command errored out with exit status 1:</span><br><span class="line">     command: /usr/bin/python3.9 -u -c &#x27;import io, os, sys, setuptools, tokenize; sys.argv[0] = &#x27;&quot;&#x27;&quot;&#x27;/tmp/pip-install-x0b5qh9y/cytoolz_939a8fed01cc43dc979d68c8072b3af1/setup.py&#x27;&quot;&#x27;&quot;&#x27;; __file__=&#x27;&quot;&#x27;&quot;&#x27;/tmp/pip-install-x0b5qh9y/cytoolz_939a8fed01cc43dc979d68c8072b3af1/setup.py&#x27;&quot;&#x27;&quot;&#x27;;f = getattr(tokenize, &#x27;&quot;&#x27;&quot;&#x27;open&#x27;&quot;&#x27;&quot;&#x27;, open)(__file__) if os.path.exists(__file__) else io.StringIO(&#x27;&quot;&#x27;&quot;&#x27;from setuptools import setup; setup()&#x27;&quot;&#x27;&quot;&#x27;);code = f.read().replace(&#x27;&quot;&#x27;&quot;&#x27;\r\n&#x27;&quot;&#x27;&quot;&#x27;, &#x27;&quot;&#x27;&quot;&#x27;\n&#x27;&quot;&#x27;&quot;&#x27;);f.close();exec(compile(code, __file__, &#x27;&quot;&#x27;&quot;&#x27;exec&#x27;&quot;&#x27;&quot;&#x27;))&#x27; install --record /tmp/pip-record-sp17_zhm/install-record.txt --single-version-externally-managed --compile --install-headers /usr/local/include/python3.9/cytoolz</span><br><span class="line">         cwd: /tmp/pip-install-x0b5qh9y/cytoolz_939a8fed01cc43dc979d68c8072b3af1/</span><br><span class="line">    Complete output (63 lines):</span><br><span class="line">    [1/5] Cythonizing cytoolz/dicttoolz.pyx</span><br><span class="line">    [2/5] Cythonizing cytoolz/functoolz.pyx</span><br><span class="line">    [3/5] Cythonizing cytoolz/itertoolz.pyx</span><br><span class="line">    [4/5] Cythonizing cytoolz/recipes.pyx</span><br><span class="line">    [5/5] Cythonizing cytoolz/utils.pyx</span><br><span class="line">    /usr/local/lib/python3.9/site-packages/setuptools/dist.py:691: UserWarning: Usage of dash-separated &#x27;index-url&#x27; will not be supported in future versions. Please use the underscore name &#x27;index_url&#x27; instead</span><br><span class="line">      warnings.warn(</span><br><span class="line">    running install</span><br><span class="line">    running build</span><br><span class="line">    running build_py</span><br><span class="line">    creating build</span><br><span class="line">    creating build/lib.linux-x86_64-3.9</span><br><span class="line">    creating build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/__init__.py -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/_signatures.py -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/_version.py -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/compatibility.py -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/utils_test.py -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    creating build/lib.linux-x86_64-3.9/cytoolz/curried</span><br><span class="line">    copying cytoolz/curried/__init__.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/curried</span><br><span class="line">    copying cytoolz/curried/exceptions.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/curried</span><br><span class="line">    copying cytoolz/curried/operator.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/curried</span><br><span class="line">    copying cytoolz/dicttoolz.pyx -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/functoolz.pyx -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/itertoolz.pyx -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/recipes.pyx -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/utils.pyx -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/__init__.pxd -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/cpython.pxd -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/dicttoolz.pxd -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/functoolz.pxd -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/itertoolz.pxd -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/recipes.pxd -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    copying cytoolz/utils.pxd -&gt; build/lib.linux-x86_64-3.9/cytoolz</span><br><span class="line">    creating build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/dev_skip_test.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_compatibility.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_curried.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_curried_toolzlike.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_dev_skip_test.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_dicttoolz.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_docstrings.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_doctests.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_embedded_sigs.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_functoolz.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_inspect_args.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_itertoolz.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_none_safe.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_recipes.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_serialization.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_signatures.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_tlz.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    copying cytoolz/tests/test_utils.py -&gt; build/lib.linux-x86_64-3.9/cytoolz/tests</span><br><span class="line">    running build_ext</span><br><span class="line">    building &#x27;cytoolz.dicttoolz&#x27; extension</span><br><span class="line">    creating build/temp.linux-x86_64-3.9</span><br><span class="line">    creating build/temp.linux-x86_64-3.9/cytoolz</span><br><span class="line">    gcc -pthread -Wno-unused-result -Wsign-compare -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DNDEBUG -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -D_GNU_SOURCE -fPIC -fwrapv -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -D_GNU_SOURCE -fPIC -fwrapv -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -D_GNU_SOURCE -fPIC -fwrapv -fPIC -I/usr/include/python3.9 -c cytoolz/dicttoolz.c -o build/temp.linux-x86_64-3.9/cytoolz/dicttoolz.o</span><br><span class="line">    cytoolz/dicttoolz.c:19:10: fatal error: Python.h: No such file or directory</span><br><span class="line">     #include &quot;Python.h&quot;</span><br><span class="line">              ^~~~~~~~~~</span><br><span class="line">    compilation terminated.</span><br><span class="line">    error: command &#x27;/usr/bin/gcc&#x27; failed with exit code 1</span><br><span class="line">    ----------------------------------------</span><br><span class="line">ERROR: Command errored out with exit status 1: /usr/bin/python3.9 -u -c &#x27;import io, os, sys, setuptools, tokenize; sys.argv[0] = &#x27;&quot;&#x27;&quot;&#x27;/tmp/pip-install-x0b5qh9y/cytoolz_939a8fed01cc43dc979d68c8072b3af1/setup.py&#x27;&quot;&#x27;&quot;&#x27;; __file__=&#x27;&quot;&#x27;&quot;&#x27;/tmp/pip-install-x0b5qh9y/cytoolz_939a8fed01cc43dc979d68c8072b3af1/setup.py&#x27;&quot;&#x27;&quot;&#x27;;f = getattr(tokenize, &#x27;&quot;&#x27;&quot;&#x27;open&#x27;&quot;&#x27;&quot;&#x27;, open)(__file__) if os.path.exists(__file__) else io.StringIO(&#x27;&quot;&#x27;&quot;&#x27;from setuptools import setup; setup()&#x27;&quot;&#x27;&quot;&#x27;);code = f.read().replace(&#x27;&quot;&#x27;&quot;&#x27;\r\n&#x27;&quot;&#x27;&quot;&#x27;, &#x27;&quot;&#x27;&quot;&#x27;\n&#x27;&quot;&#x27;&quot;&#x27;);f.close();exec(compile(code, __file__, &#x27;&quot;&#x27;&quot;&#x27;exec&#x27;&quot;&#x27;&quot;&#x27;))&#x27; install --record /tmp/pip-record-sp17_zhm/install-record.txt --single-version-externally-managed --compile --install-headers /usr/local/include/python3.9/cytoolz Check the logs for full command output.</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install python39-devel</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.cnblogs.com/johnthegreat/p/13058230.html">redhat</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Jupyter&quot;&gt;Jupyter&lt;/h2&gt;
&lt;h3 id=&quot;启动&quot;&gt;启动&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s</summary>
      
    
    
    
    <category term="language" scheme="https://guozhe001.github.io/categories/language/"/>
    
    <category term="Python" scheme="https://guozhe001.github.io/categories/language/Python/"/>
    
    
    <category term="language" scheme="https://guozhe001.github.io/tags/language/"/>
    
    <category term="Python" scheme="https://guozhe001.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>使用Redis自增特性创建唯一id生成器</title>
    <link href="https://guozhe001.github.io/2024/11/22/language/java/%E4%BD%BF%E7%94%A8redis%E8%87%AA%E5%A2%9E%E7%89%B9%E6%80%A7%E5%88%9B%E5%BB%BA%E5%94%AF%E4%B8%80id%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>https://guozhe001.github.io/2024/11/22/language/java/%E4%BD%BF%E7%94%A8redis%E8%87%AA%E5%A2%9E%E7%89%B9%E6%80%A7%E5%88%9B%E5%BB%BA%E5%94%AF%E4%B8%80id%E7%94%9F%E6%88%90%E5%99%A8/</id>
    <published>2024-11-22T06:32:06.496Z</published>
    <updated>2024-11-22T06:32:06.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求说明">需求说明</h1><h2 id="产品要求实现一个订单编号，此编号规则如下">产品要求实现一个订单编号，此编号规则如下</h2><h3 id="订单编号规则：">订单编号规则：</h3><p>“字母” + “日期” + “自增ID”</p><h3 id="订单编号举例">订单编号举例</h3><p>比如业务A，在2020-08-04日有三个订单，那么订单编号如下：</p><ul><li>A202008040001</li><li>A202008040002</li><li>A202008040003</li></ul><p>比如业务A，在2020-08-05日有4个订单，那么订单编号如下：</p><ul><li>A202008050001</li><li>A202008050002</li><li>A202008050003</li><li>A202008050003</li></ul><p>通过上面的例子可以看到，后面的“自增ID”每天都会从1开始增加，在一个分布式系统中，要做到每天从1开始不重复并且自增的效果；想到的第一个实现方案就是redis的Incr命令（Redis Incr 命令将 key 中储存的数字值增一）。</p><h1 id="需求实现">需求实现</h1><h2 id="配置redis">配置redis</h2><h3 id="依赖redis相关jar包">依赖redis相关jar包</h3><p>因为此模块继承了spring-boot-starter-parent，所以不需要指定版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写配置redis的config">编写配置redis的config</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nicai.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.data.redis.RedisProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisClusterConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis集群配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/08/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RedisProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisClusterConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisProperties redisProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisClusterConfig</span><span class="params">(RedisProperties redisProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisProperties = redisProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread-safe factory of Redis connections配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> factory of Redis</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisConnectionFactory <span class="title">redisConnectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisClusterConfiguration redisClusterConfiguration = <span class="keyword">new</span> RedisClusterConfiguration(redisProperties.getCluster().getNodes());</span><br><span class="line">        redisClusterConfiguration.setPassword(redisProperties.getPassword());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JedisConnectionFactory(redisClusterConfiguration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建String类型的redis模板</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisConnectionFactory factory of Redis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String-focused extension of RedisTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate(redisConnectionFactory);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是配置范型的RedisTemplate，需要设置值的序列化规则为：<strong>StringRedisSerializer</strong>，原因可以参考此文章：<a href="https://blog.csdn.net/tyyh08/article/details/80267261">Spring Boot中使用RedisTemplate优雅的操作Redis，并且解决RedisTemplate泛型注入失败的问题</a></p><h3 id="测试redis的config代码">测试redis的config代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nicai.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.BaseAdminSpringTest;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.Constants;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/08/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = AdminApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisClusterConfigTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEST_KEY = Constants.REDIS_KEY_PREFIX + <span class="string">&quot;test:hello&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEST_VALUE = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStringRedisTemplateGetAndSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(TEST_KEY, TEST_VALUE);</span><br><span class="line">        String value = stringRedisTemplate.opsForValue().get(TEST_KEY);</span><br><span class="line">        Assert.assertEquals(TEST_VALUE, value);</span><br><span class="line">        stringRedisTemplate.delete(TEST_KEY);</span><br><span class="line">        Assert.assertNull(stringRedisTemplate.opsForValue().get(TEST_KEY));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIncr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String key = TEST_KEY;</span><br><span class="line">        ValueOperations&lt;String, String&gt; valueOperations = stringRedisTemplate.opsForValue();</span><br><span class="line">        valueOperations.set(key, <span class="string">&quot;1&quot;</span>, <span class="number">24</span>, TimeUnit.HOURS);</span><br><span class="line">        String initValue = valueOperations.get(key);</span><br><span class="line">        log.info(<span class="string">&quot;key=&#123;&#125;, init value=&#123;&#125;&quot;</span>, key, initValue);</span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;1&quot;</span>, initValue);</span><br><span class="line">        Long increment = valueOperations.increment(key);</span><br><span class="line">        log.info(<span class="string">&quot;key=&#123;&#125;, after increment=&#123;&#125;&quot;</span>, key, increment);</span><br><span class="line">        Assert.assertEquals(Long.valueOf(<span class="number">2</span>), increment);</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">        Assert.assertNull(valueOperations.get(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于redis编写唯一ID生成服务">基于redis编写唯一ID生成服务</h2><h3 id="添加抽象的唯一id生成服务">添加抽象的唯一id生成服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nicai.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.BooleanUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分布式ID生成服务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/08/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRedisDistributedIDGenerateService</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">AbstractRedisDistributedIDGenerateService</span>.<span class="title">Context</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化key时的默认值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DEFAULT_VALUE = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractRedisDistributedIDGenerateService</span><span class="params">(StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一个ID，直接从redis中获取自增后的值；</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 下一个ID, 如果redis出现异常则返回null，请使用者自行处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Optional&lt;Long&gt; <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从redis中获取自增id</span></span><br><span class="line">        Long id = incr(getKey());</span><br><span class="line">        <span class="keyword">return</span> Objects.isNull(id) ? Optional.empty() : Optional.of(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一个ID，根据传入的上下文和redis中自增后的值最终组装成下一个ID；</span></span><br><span class="line"><span class="comment">     * 获取之后会交给子类检查此ID是否重复，如果重复会从子类中获取最新的ID，然后更新redis中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 拼装id时需要的上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 下一个ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">nextId</span><span class="params">(T context)</span> </span>&#123;</span><br><span class="line">        Optional&lt;Long&gt; id = nextId();</span><br><span class="line">        <span class="comment">// 如果可以从redis中获取值，则说明redis服务正常，需要判重；否则直接从数据库中获取下一个id</span></span><br><span class="line">        String nextId = id.isPresent() ? ifDuplicatedThenUpdate(context, assemblyNextId(context, id.get())) :</span><br><span class="line">                getNewIdFromDbAndUpdateRedis(context, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;context=&#123;&#125;,redisIncrId=&#123;&#125; nextId=&#123;&#125;&quot;</span>, JSON.toJSONString(context), id, nextId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查获取到的ID是否重复</span></span><br><span class="line"><span class="comment">     * 如果重复则说明由于redis的一些原因导致的重复，返回最新的redis中应该存在的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextId 下一个ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果当前ID没有重复，则返回null，否则如果重复了则返回redis中应该有的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">checkIfDuplicated</span><span class="params">(String nextId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数据库获取下一个id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> duplicatedId 重复的id，此入参可能为null，子类需要自己处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据库获取下一个id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Long <span class="title">maxIdFromDatabase</span><span class="params">(String duplicatedId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子类根据redis当前的值自行组装最终的ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context    上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisValue redis当前的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最终的ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">assemblyNextId</span><span class="params">(T context, Long redisValue)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取redis自增的key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> redis自增的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">getKey</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用redis的自增方法</span></span><br><span class="line"><span class="comment">     * 如果key不存在则先设置key，再调用自增方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 需要自增的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 自增之后的值，如果redis出现异常则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">incr</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Long increment = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 先检查redis中是否有key,如果没有,先设置key并且设置过期时间</span></span><br><span class="line">            <span class="keyword">if</span> (BooleanUtil.isFalse(redisTemplate.hasKey(key))) &#123;</span><br><span class="line">                initOrUpdateValue(key, getKeyInitValue());</span><br><span class="line">            &#125;</span><br><span class="line">            increment = redisTemplate.opsForValue().increment(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;调用redis的自增方法异常，error_message=&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">&quot;key = &#123;&#125;, increment=&#123;&#125;&quot;</span>, key, increment);</span><br><span class="line">        <span class="keyword">return</span> increment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取初始化key时的value值，默认是0，自增之后id从1开始；</span></span><br><span class="line"><span class="comment">     * 如果子类想从其他数字开始则自己覆盖此方法即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 初始化key时的value值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">getKeyInitValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DEFAULT_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取key的超时时间，单位是小时，由子类设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 超时时间，单位小时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">getTimeOutHours</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否重复，如果重复则从别的渠道（由子类自己决定从哪个渠道）更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 拼装id时需要的上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextId  下一个id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果重复则返回新的nextId，否则返回入参传入的nextId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">ifDuplicatedThenUpdate</span><span class="params">(T context, String nextId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否重复，如果重复则从数据库中获取，否则直接返回当前值</span></span><br><span class="line">        <span class="keyword">return</span> checkIfDuplicated(nextId) ? getNewIdFromDbAndUpdateRedis(context, nextId) : nextId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数据库获取新id并更新redis中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 拼装id时需要的上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextId  下一个id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 根据数据库的id获得的新id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getNewIdFromDbAndUpdateRedis</span><span class="params">(T context, String nextId)</span> </span>&#123;</span><br><span class="line">        Long maxIdFromDatabase = maxIdFromDatabase(nextId);</span><br><span class="line">        String newId = assemblyNextId(context, maxIdFromDatabase);</span><br><span class="line">        log.warn(<span class="string">&quot;nextId=&#123;&#125; 在数据库中已经存在，maxIdFromDatabase=&#123;&#125; 重新获取新的newId=&#123;&#125;&quot;</span>, nextId, maxIdFromDatabase, newId);</span><br><span class="line">        initOrUpdateValue(getKey(), maxIdFromDatabase);</span><br><span class="line">        <span class="keyword">return</span> newId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化或者更新redis中的自增的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   redis中的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 需要设置的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initOrUpdateValue</span><span class="params">(String key, Long value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, String.valueOf(value), getTimeOutHours(), TimeUnit.HOURS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;设置redis值异常，value=&#123;&#125; error_message=&#123;&#125;&quot;</span>, value, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上下文；子类自己定义上下文，然后根据上下文的数据来最终组装ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 凭证编号上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AContext</span> <span class="keyword">implements</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 业务类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String businessType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加一个A服务的唯一id生成服务实现">添加一个A服务的唯一id生成服务实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nicai.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DatePattern;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.Constants;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.dao.ManualVoucherDAO;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.entity.ManualVoucherEntity;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.exception.AccountingException;</span><br><span class="line"><span class="keyword">import</span> com.yuanfeng.accounting.service.AbstractRedisDistributedIDGenerateService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分布式唯一ID生成-A实现类</span></span><br><span class="line"><span class="comment"> * 编号规则：用途+日期+自增ID，如：A202007310001；A202007310002；A202008070001；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/08/04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedIDGenerateServiceAImpl</span> <span class="keyword">extends</span> <span class="title">AbstractRedisDistributedIDGenerateService</span>&lt;<span class="title">AbstractRedisDistributedIDGenerateService</span>.<span class="title">AContext</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BUSINESS_TYPE = <span class="string">&quot;A:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ID长度不足4位时在前面填充的字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> FILLED_CHAR = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最后的自增ID的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INCREMENT_LENGTH = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期小时数，即在24小时候过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXPIRATION_HOURS = <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DistributedIDGenerateServiceAImpl</span><span class="params">(StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(redisTemplate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">checkIfDuplicated</span><span class="params">(String nextId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Long <span class="title">maxIdFromDatabase</span><span class="params">(String duplicatedId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">assemblyNextId</span><span class="params">(VoucherNumberContext context, Long redisValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.join(Constants.BLANK, context.getBusinessType(), getDatePeriod(),</span><br><span class="line">                StrUtil.fillBefore(String.valueOf(redisValue), FILLED_CHAR, INCREMENT_LENGTH));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.join(Constants.REDIS_KEY_DELIMITER, Constants.REDIS_KEY_PREFIX, BUSINESS_TYPE, getDatePeriod());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">getTimeOutHours</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EXPIRATION_HOURS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;需求说明&quot;&gt;需求说明&lt;/h1&gt;
&lt;h2 id=&quot;产品要求实现一个订单编号，此编号规则如下&quot;&gt;产品要求实现一个订单编号，此编号规则如下&lt;/h2&gt;
&lt;h3 id=&quot;订单编号规则：&quot;&gt;订单编号规则：&lt;/h3&gt;
&lt;p&gt;“字母” + “日期” + “自增ID”&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="Java" scheme="https://guozhe001.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://guozhe001.github.io/tags/Java/"/>
    
    <category term="Redis" scheme="https://guozhe001.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Java实现Redis分布式锁</title>
    <link href="https://guozhe001.github.io/2024/11/22/language/java/Java%E5%AE%9E%E7%8E%B0redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://guozhe001.github.io/2024/11/22/language/java/Java%E5%AE%9E%E7%8E%B0redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2024-11-22T06:32:06.496Z</published>
    <updated>2024-11-22T06:32:06.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>在实际的业务中遇到用户账户充值、提现等业务，需要防止并发来达到账户余额变动的正确性。</p><p>旧的实现是通过mysql悲观锁来完成的，在充值和提现等账户余额会变化的功能操作之前，先使用用户账户ID做<code>for update</code>，来锁定用户账户。但是这种实现方式把所有的压力都放在数据库上面，随着业务的不断发展，数据库压力也越来越大，因此我对分布式锁进行了改造，使用redis来实现。</p><h2 id="具体实现">具体实现</h2><h3 id="分布式锁主逻辑">分布式锁主逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guozhe.core.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.rholder.retry.*;</span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Joiner;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.exception.AssetCommonException;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.utils.CommonPreconditions;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.utils.CommonUtil;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.utils.UUIDUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisCallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis分布式锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-09-11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis锁key的前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String REDIS_LOCK_PREFIX = <span class="string">&quot;CORE_LOCK&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis默认的分割字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String REDIS_DEFAULT_SPLIT = <span class="string">&quot;:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis的ttl命令如果有key没有失效时间的返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TTL_NO_EXPIRE_RESPONSE = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁尝试retryer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Retryer&lt;Boolean&gt; retryer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis锁的超时时长，单位秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> redisLockExpireSeconds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    RedisLock(RedisTemplate&lt;String, String&gt; redisTemplate, <span class="keyword">int</span> redisLockExpireSeconds) &#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="keyword">this</span>.redisLockExpireSeconds = redisLockExpireSeconds;</span><br><span class="line">        <span class="keyword">this</span>.retryer = getRetryer((<span class="keyword">this</span>.redisLockExpireSeconds * <span class="number">1000</span>) / <span class="number">100</span>, <span class="number">100L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用分布式redis锁</span></span><br><span class="line"><span class="comment">     * 默认每隔200毫秒尝试一次枷锁，一共尝试10次</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beforeLock      可以为null，加锁之前处理的逻辑，如果有返回值则直接返回，如果得到的是null则继续执行业务逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beforeBizCalled 可以为null，业务处理之前处理的逻辑，如果有返回值则直接返回，如果得到的是null则继续执行业务逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizCallable     业务处理逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> businessName    当前业务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key             redis加锁的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 业务处理结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AssetCommonException 有两种情况会抛此异常：</span></span><br><span class="line"><span class="comment">     *                              0、如果一直获取不到锁会抛此异常</span></span><br><span class="line"><span class="comment">     *                              1、如果业务处理包括beforeLock、beforeBizCalled、bizCallable时有异常，则直接转成此异常抛出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">lockAndCall</span><span class="params">(Callable&lt;T&gt; beforeLock, Callable&lt;T&gt; beforeBizCalled, Callable&lt;T&gt; bizCallable, String businessName, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CommonUtil.isNotNull(beforeLock)) &#123;</span><br><span class="line">            T result = call(beforeLock);</span><br><span class="line">            <span class="keyword">if</span> (CommonUtil.isNotNull(result)) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> String uuid = UUIDUtils.getUUID();</span><br><span class="line">        <span class="comment">// 此方法会阻塞线程往下运行，除非已经获得锁才会继续执行，否则一直尝试获取锁或者最终获取锁失败抛异常</span></span><br><span class="line">        retryLock(businessName, key, uuid);</span><br><span class="line">        <span class="keyword">return</span> lockSuccessDoBiz(beforeBizCalled, bizCallable, businessName, key, uuid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用分布式redis锁，只尝试加锁一次，</span></span><br><span class="line"><span class="comment">     * 需要自定义Retryer实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beforeLock      可以为null，加锁之前处理的逻辑，如果有返回值则直接返回，如果得到的是null则继续执行业务逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beforeBizCalled 可以为null，业务处理之前处理的逻辑，如果有返回值则直接返回，如果得到的是null则继续执行业务逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizCallable     业务处理逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> businessName    当前业务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key             redis加锁的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 业务处理结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AssetCommonException 有两种情况会抛此异常：</span></span><br><span class="line"><span class="comment">     *                              0、如果一直获取不到锁会抛此异常</span></span><br><span class="line"><span class="comment">     *                              1、如果业务处理包括beforeLock、beforeBizCalled、bizCallable时有异常，则直接转成此异常抛出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">lockAndCallNoRetry</span><span class="params">(Callable&lt;T&gt; beforeLock, Callable&lt;T&gt; beforeBizCalled, Callable&lt;T&gt; bizCallable, String businessName, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CommonUtil.isNotNull(beforeLock)) &#123;</span><br><span class="line">            T result = call(beforeLock);</span><br><span class="line">            <span class="keyword">if</span> (CommonUtil.isNotNull(result)) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> String uuid = UUIDUtils.getUUID();</span><br><span class="line">        <span class="comment">// 此方法不会阻塞线程，如果加锁成功则处理业务，否则直接返回null</span></span><br><span class="line">        <span class="keyword">if</span> (tryLock(businessName, key, uuid)) &#123;</span><br><span class="line">            <span class="keyword">return</span> lockSuccessDoBiz(beforeBizCalled, bizCallable, businessName, key, uuid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁成功之后的业务处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beforeBizCalled 可以为null，业务处理之前处理的逻辑，如果有返回值则直接返回，如果得到的是null则继续执行业务逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizCallable     业务处理逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> businessName    当前业务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key             redis加锁的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value           redis锁的value值，为了解锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;             自定义返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 业务处理结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">lockSuccessDoBiz</span><span class="params">(Callable&lt;T&gt; beforeBizCalled, Callable&lt;T&gt; bizCallable, String businessName, String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (CommonUtil.isNotNull(beforeBizCalled)) &#123;</span><br><span class="line">                T call = beforeBizCalled.call();</span><br><span class="line">                <span class="keyword">if</span> (CommonUtil.isNotNull(call)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> call;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            CommonPreconditions.checkArgument(CommonUtil.isNotNull(bizCallable), <span class="string">&quot;businessName=%s,key=%s业务处理逻辑为null&quot;</span>, businessName, key);</span><br><span class="line">            <span class="keyword">return</span> bizCallable.call();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssetCommonException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;&#123;&#125;业务处理完成，解锁key=&#123;&#125;,value=&#123;&#125;&quot;</span>, businessName, key, value);</span><br><span class="line">            unlocked(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行，如果成功则返回结果；如果有异常则抛出AssetCommonException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callable callable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;      自定义返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 业务处理结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">call</span><span class="params">(Callable&lt;T&gt; callable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> callable.call();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssetCommonException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取加锁的redis的key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 需要加锁的原始key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最终处理后的key字节数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">byte</span>[] getRedisKey(String key) &#123;</span><br><span class="line">        <span class="keyword">return</span> getRedisKeyString(key).getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取加锁的redis的key字符串,使用:把传入的字符串拼接起来</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> first 第一个字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rest  其他的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最终处理后的key字节数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">getRedisKeyString</span><span class="params">(String first, String... rest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Joiner.on(REDIS_DEFAULT_SPLIT).join(REDIS_LOCK_PREFIX, first, rest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁，删除redis中的key如果value的值和此实例的值一样的话</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   redis锁的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 锁的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unlocked</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] redisKey = getRedisKey(key);</span><br><span class="line">        redisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = connection.get(redisKey);</span><br><span class="line">            <span class="keyword">if</span> (Arrays.equals(value.getBytes(), bytes)) &#123;</span><br><span class="line">                connection.del(redisKey);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重试的多次尝试加锁,如果获取到锁则继续往下执行，否则会阻断线程直到获得锁或者抛异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> businessName 业务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key          redis锁的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value        锁的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AssetCommonException 如果加锁失败或者重复次数达到最大的尝试次数，则抛此异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">retryLock</span><span class="params">(String businessName, String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            retryer.call(() -&gt; tryLock(businessName, key, value));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RetryException e) &#123;</span><br><span class="line">            <span class="comment">// 重试失败说明没有获取到锁，所以直接抛异常不再往下执行</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssetCommonException(String.format(<span class="string">&quot;业务%s,key=%s正在处理中，请稍后重试&quot;</span>, businessName, key));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            <span class="comment">// 执行加锁时失败，有些未知原因，如redis连不上之类的，此时为了不影响业务接着往下执行</span></span><br><span class="line">            log.error(<span class="string">&quot;businessName=&#123;&#125;,key=&#123;&#125;执行redis加锁异常 errorMsg=&#123;&#125;&quot;</span>, businessName, key, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单次尝试加锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> businessName 业务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key          redis锁的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value        锁的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果加锁成功返回true，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String businessName, String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tryLock(businessName, key, value, <span class="keyword">this</span>.redisTemplate, <span class="keyword">this</span>.redisLockExpireSeconds);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单次尝试加锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> businessName 业务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key          redis锁的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value        锁的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果加锁成功返回true，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String businessName, String key, String value, RedisTemplate&lt;String, String&gt; redisTemplate, <span class="keyword">long</span> redisLockExpireSeconds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] redisKey = getRedisKey(key);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="comment">// 加锁，只有在key不存在的情况下才能加锁成功</span></span><br><span class="line">            <span class="keyword">boolean</span> result = connection.setNX(redisKey, value.getBytes());</span><br><span class="line">            <span class="keyword">if</span> (result) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;businessName=&#123;&#125; key=&#123;&#125; value=&#123;&#125;,设置锁的失效时间=&#123;&#125;s&quot;</span>, businessName, key, value, redisLockExpireSeconds);</span><br><span class="line">                <span class="comment">// 如果加锁成功设置锁的超时时间</span></span><br><span class="line">                connection.expire(redisKey, redisLockExpireSeconds);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                如果没有加锁成功，检查这个key是否有超时时间，如果没有超时时间则设置超时时间</span></span><br><span class="line"><span class="comment">                ttl的官方文档如下：</span></span><br><span class="line"><span class="comment">                Returns the remaining time to live of a key that has a timeout.</span></span><br><span class="line"><span class="comment">                In Redis 2.6 or older the command returns -1 if the key does not exist or if the key exist but has no associated expire.</span></span><br><span class="line"><span class="comment">                Starting with Redis 2.8 the return value in case of error changed:</span></span><br><span class="line"><span class="comment">                The command returns -2 if the key does not exist.</span></span><br><span class="line"><span class="comment">                The command returns -1 if the key exists but has no associated expire.</span></span><br><span class="line"><span class="comment">                测试环境redis_version:4.0.1 生产环境redis_version:4.0.13 @2019-09-20</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (TTL_NO_EXPIRE_RESPONSE == connection.ttl(redisKey)) &#123;</span><br><span class="line">                    connection.expire(redisKey, redisLockExpireSeconds);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有些业务不需要一直等待重试，如果第一次获取锁不成功则马上不处理即可；</span></span><br><span class="line"><span class="comment">     * 所以本方法即是</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> retryTimes    尝试枷锁次数 必须大于0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fixedWaitTime 固定等待时长,单位MILLISECONDS</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Retryer实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Retryer&lt;Boolean&gt; <span class="title">getRetryer</span><span class="params">(<span class="keyword">int</span> retryTimes, <span class="keyword">long</span> fixedWaitTime)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 加锁尝试retryer</span></span><br><span class="line"><span class="comment">         * 最多尝试10次，每次不成功等待100ms，所以最多等待一秒钟如果获取不到锁就不再尝试</span></span><br><span class="line"><span class="comment">         * 2019-09-11查询生产环境日志，放款接口处理时间几乎没有超过500ms，所以时间是够用的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> RetryerBuilder.&lt;Boolean&gt;newBuilder()</span><br><span class="line">                <span class="comment">// 每次尝试加锁失败后等待100ms</span></span><br><span class="line">                .withWaitStrategy(WaitStrategies.fixedWait(fixedWaitTime, TimeUnit.MILLISECONDS))</span><br><span class="line">                <span class="comment">// 最多尝试10次</span></span><br><span class="line">                .withStopStrategy(StopStrategies.stopAfterAttempt(retryTimes))</span><br><span class="line">                <span class="comment">// 如果返回false则继续重试</span></span><br><span class="line">                .retryIfResult(aBoolean -&gt; aBoolean == <span class="keyword">null</span> || !aBoolean).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="构建分布式锁">构建分布式锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guozhe.core.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.utils.CommonPreconditions;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.utils.CommonUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的redis分布式锁构建器</span></span><br><span class="line"><span class="comment"> * 必须设置RedisTemplate</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis锁的超时时长，单位秒;默认1s，客户端可以根据自身业务自己设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> redisLockExpireSeconds = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RedisLockBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RedisLockBuilder <span class="title">newBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisLockBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisLockBuilder <span class="title">redisTemplate</span><span class="params">(RedisTemplate&lt;String, String&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置加锁时长，默认1s，客户端可以根据自身业务自己设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconds 超时时间，单位秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前RedisLockBuilder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisLockBuilder <span class="title">redisLockExpireSeconds</span><span class="params">(<span class="keyword">int</span> seconds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisLockExpireSeconds = seconds;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisLock <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CommonPreconditions.checkArgument(CommonUtil.isNotNull(redisTemplate), <span class="string">&quot;构建redis分布式锁时，redisTemplate不允许为null&quot;</span>);</span><br><span class="line">        CommonPreconditions.checkArgument(redisLockExpireSeconds &gt; <span class="number">0</span>, <span class="string">&quot;构建redis分布式锁时，超时时间必须大于0seconds=%s&quot;</span>, <span class="keyword">this</span>.redisLockExpireSeconds);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisLock(redisTemplate, redisLockExpireSeconds);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何使用">如何使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.guozhe.core.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Sets;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.manager.CoreCommonApiNotifyRecordManagerService;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.model.CoreCommonApiNotifyRecord;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.remote.BaseRemoteApiNotifyService;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.service.CommonApiNotifyService;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.service.ServiceLocator;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.utils.CommonPreconditions;</span><br><span class="line"><span class="keyword">import</span> com.guozhe.core.utils.CommonUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.BooleanUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> guozhe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonApiNotifyServiceImpl</span> <span class="keyword">implements</span> <span class="title">CommonApiNotifyService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis加锁时key标示的业务名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String REDIS_LOCK_BUSINESS_NAME = <span class="string">&quot;COMMON_API_NOTIFY&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis加锁时的超时时长，为了防止业务方的接口处理时间过长导致并发，此处设置的时间比较长</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REDIS_LOCK_EXPIRE_SECONDS = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis分布式锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisLock redisLockService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CoreCommonApiNotifyRecordManagerService coreCommonApiNotifyRecordManagerService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonApiNotifyServiceImpl</span><span class="params">(RedisTemplate&lt;String, String&gt; redisTemplate, CoreCommonApiNotifyRecordManagerService coreCommonApiNotifyRecordManagerService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.coreCommonApiNotifyRecordManagerService = coreCommonApiNotifyRecordManagerService;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="keyword">this</span>.redisLockService = RedisLockBuilder.newBuilder().redisTemplate(redisTemplate).redisLockExpireSeconds(REDIS_LOCK_EXPIRE_SECONDS).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyWithLock</span><span class="params">(CoreCommonApiNotifyRecord record)</span> </span>&#123;</span><br><span class="line">        BaseRemoteApiNotifyService remoteApiNotifyService = getBaseRemoteApiNotifyService(record);</span><br><span class="line">        <span class="comment">// 此处是为了防止并发，如果本次通知成功或已经通知成功result是true;如果本次通知失败则返回false;如果正在处理则返回null</span></span><br><span class="line">        <span class="comment">// 此处不只是为了防并发，此处也有如果已经通知过了就不再通知的逻辑，因此在加锁之前和加锁之后业务处理之前都做检查</span></span><br><span class="line">        Boolean result = redisLockService.lockAndCallNoRetry(</span><br><span class="line">                () -&gt; checkIfNotified(record),</span><br><span class="line">                () -&gt; checkIfNotified(record),</span><br><span class="line">                () -&gt; remoteApiNotifyService.bizNotify(record),</span><br><span class="line">                REDIS_LOCK_BUSINESS_NAME,</span><br><span class="line">                String.valueOf(record.getId()));</span><br><span class="line">        <span class="keyword">if</span> (CommonUtil.isNull(result)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;API通知recordId=&#123;&#125;, coreLendRequestId=&#123;&#125;, businessType=&#123;&#125; 正在通知无需重复&quot;</span>, record.getId(), record.getCoreLendRequestId(), record.getBusinessType());</span><br><span class="line">        &#125;</span><br><span class="line">        executeResult(record, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;在实际的业务中遇到用户账户充值、提现等业务，需要防止并发来达到账户余额变动的正确性。&lt;/p&gt;
&lt;p&gt;旧的实现是通过mysql悲观锁来完成的，在充值和提现等账户余额会变化的功能操作之前，先使用用户账户ID做&lt;code&gt;for updat</summary>
      
    
    
    
    <category term="Java" scheme="https://guozhe001.github.io/categories/Java/"/>
    
    
    <category term="Redis" scheme="https://guozhe001.github.io/tags/Redis/"/>
    
    <category term="分布式锁" scheme="https://guozhe001.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>为什么我们在使用Spring的时候应该使用构造方法注入bean</title>
    <link href="https://guozhe001.github.io/2024/11/22/language/java/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E6%9E%84%E9%80%A0%E5%99%A8%E6%B3%A8%E5%85%A5%E8%80%8C%E4%B8%8D%E6%98%AF@Autoware/"/>
    <id>https://guozhe001.github.io/2024/11/22/language/java/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E6%9E%84%E9%80%A0%E5%99%A8%E6%B3%A8%E5%85%A5%E8%80%8C%E4%B8%8D%E6%98%AF@Autoware/</id>
    <published>2024-11-22T06:32:06.496Z</published>
    <updated>2024-11-22T06:32:06.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题">问题</h1><p>对于使用Spring框架的java开发人员对下面的代码应该很熟悉：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> HelloService helloService;</span><br></pre></td></tr></table></figure><p>但是对于上面的代码，Sonar会提示：<code>Remove this annotation and use constructor injection instead.</code></p><p>翻译成中文即：移除<code>@Autowired</code>注解使用构造器注入方式替代。</p><p>IntelliJ IDEA也会提示<code>Field injection is not recommended</code></p><p>翻译成中文即：不推荐使用字段注入</p><h1 id="那么他们为什么这么建议呢？">那么他们为什么这么建议呢？</h1><h2 id="首先我们先看一下Spring有哪些注入bean的方式">首先我们先看一下Spring有哪些注入bean的方式</h2><ol><li>构造方法注入</li><li>set方法注入</li><li>字段注入，即<code>@Autowired</code>注解</li></ol><h2 id="如何使用这些方式">如何使用这些方式</h2><h3 id="构造方法注入">构造方法注入</h3><p>在Spring4.3版本之前，我们必须要在构造方法上加<code>@Autowired</code>注解；在新版本中如果当前类只有一个构造方法<code>@Autowired</code>注解就是可选的。</p><p>只有一个构造方法示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidationController</span><span class="params">(HelloService helloService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloService = helloService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个构造方法示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidationController</span><span class="params">(HelloService helloService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloService = helloService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidationController</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="set方法注入">set方法注入</h3><p>这种方式Spring会找到 <code>@Autowired</code> 注解并且调用set方法来注入所需的依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">getHelloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloService</span><span class="params">(HelloService helloService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloService = helloService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字段注入">字段注入</h3><p>通过基于字段的注入，Spring在使用<code>@Autowired</code>注释进行注释时，直接将所需的依赖项分配给字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="这些方式有什么优缺点">这些方式有什么优缺点</h2><p>既然要<em><strong>移除<code>@Autowired</code>注解使用构造器注入方式替代</strong></em>，那么我们主要讨一下这些方式的优缺点。</p><h3 id="字段注入方式的优点">字段注入方式的优点</h3><p>相比较另外两种方式，字段注入方式的代码量更少、更整齐、更简洁</p><h3 id="构造方法注入的优点">构造方法注入的优点</h3><h4 id="容易发现代码的坏味道">容易发现代码的坏味道</h4><p>set方法注入和字段注入会<em><strong>间接</strong></em>违反<strong>单一职责原则</strong>。</p><p>因为在一个类依赖很多其他类的时候，如果使用构造方法注入就会发现构造方法的参数太多，这会让开发人员反思这个类真的需要这么多依赖吗？当前类是不是职责过多？</p><p>而使用字段注入时，就会把一些例如sonar的提示屏蔽掉，让开发人员误以为这样做没有问题</p><h4 id="可以创建不可变类">可以创建不可变类</h4><p>在使用构造方法注入时因为构造方法是创建依赖对象的唯一方式，这非常有助于让我们创建不可变的对象。</p><p>想象一下创建一个bean之后你可以通过set方法随意修改此类的依赖，在出现问题时是很难定位的。</p><p><code>@Autowired</code>的源码有一段注释如下：<code>Fields are injected right after construction of a bean, before any config methods are invoked. Such a config field does not have to be public.</code><br>大意是使用<code>@Autowired</code>注解时，bean是在构造当前的bean之后，并且在任何的其他方法调用之前注入，因此无法设置成final类型的字段。</p><h4 id="更明显的声明所有的依赖">更明显的声明所有的依赖</h4><p>使用构造方法注入，在使用这个类时就会暴露给使用者说我要依赖构造方法中的类。</p><p>但是使用字段注入时，使用者其实并不知道这个类依赖了哪些类，除非我到此类中查看这个类有多少个字段是有<code>@Autowired</code>注解。</p><h4 id="不方便迁移">不方便迁移</h4><p>spring实现了DI（控制反转），但并非是DI本身；<br>使用构造方法注入时，除了在类上面有<code>@Service</code>、<code>@Component</code>等的注解，没有其他的Spring相关的更多的注解。</p><p>使用字段注入时，除了在类上面有<code>@Service</code>、<code>@Component</code>等的注解之外又使用了Spring的<code>@Autowired</code>注解，如果把此类迁移到其他没有spring的环境时是完成不了注入的。</p><h4 id="不方便测试">不方便测试</h4><p>在使用构造方法注入时，单元测试时开发人员可以直接传入一个mock的类或者其他的任何被测试类依赖的子类；</p><p>当然我们也可以使用set方式注入一个mock的类，但是如果代码修改了新增了一个依赖，那么我们很容易忘掉在测试代码中set新增的依赖，直到运行的时候我们才会看到可能有NPE异常爆出；但是构造方法就不必有这种烦恼，因为如果新增了一个依赖，测试方法会马上编译不通过。</p><p>使用字段注入，必须依赖Spring去帮助注入依赖的类</p><h1 id="总结">总结</h1><p>通过构造方法注入bean是我们更容易创建不可变类，代码更健壮、更具有可测试性、更容易避免NPE。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题&quot;&gt;问题&lt;/h1&gt;
&lt;p&gt;对于使用Spring框架的java开发人员对下面的代码应该很熟悉：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="Java" scheme="https://guozhe001.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://guozhe001.github.io/tags/Java/"/>
    
    <category term="Spring" scheme="https://guozhe001.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>线程池无法捕获线程的异常踩坑复盘</title>
    <link href="https://guozhe001.github.io/2024/11/22/language/java/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%97%A0%E6%B3%95%E6%8D%95%E8%8E%B7%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BC%82%E5%B8%B8%E8%B8%A9%E5%9D%91%E5%A4%8D%E7%9B%98/"/>
    <id>https://guozhe001.github.io/2024/11/22/language/java/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%97%A0%E6%B3%95%E6%8D%95%E8%8E%B7%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BC%82%E5%B8%B8%E8%B8%A9%E5%9D%91%E5%A4%8D%E7%9B%98/</id>
    <published>2024-11-22T06:32:06.496Z</published>
    <updated>2024-11-22T06:32:06.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><h3 id="需求信息">需求信息</h3><p>最近在工作中有个需求，先在A服务页面增加一条数据，然后去B服务查询此数据的详细信息</p><h3 id="解决方案">解决方案</h3><p>为了使A服务的新增数据接口快速响应，在查询B服务数据详情的地方使用了线程池异步查询与更新。</p><h3 id="问题现象">问题现象</h3><p>在验证时发现数据库中的数据字段不全，经分析缺少的都是需要从B服务查询并更新的字段</p><h3 id="初步定位">初步定位</h3><p>猜测应该是查询B服务时出了一些异常，而由于不规范使用线程池导致异常没有抛出，直接打到了控制台，故A服务的日志系统并看不到错误日志。</p><h2 id="问题解决">问题解决</h2><ol><li>查询B服务数据详情时暂时去掉使用线程池，改为同步调用</li><li>增加容错定时任务，定时查询需要从B服务获取缺失字段的数据进行更新</li></ol><p>上线后观察，新增的数据不再有部分字段缺失的情况；问题解决。</p><h2 id="问题复盘">问题复盘</h2><h3 id="A服务线程池的使用">A服务线程池的使用</h3><p>线程池定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询B服务数据详情的线程池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService executorService = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0L</span>, TimeUnit.MICROSECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(), <span class="keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="string">&quot;queryDataDetail-%d&quot;</span>).build());</span><br></pre></td></tr></table></figure><p>线程池使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String contract)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 0、检查合同必须不存在</span></span><br><span class="line">    checkIfExist(contract);</span><br><span class="line">    <span class="comment">// 1、保存合同数据</span></span><br><span class="line">    Entity entity = saveData(contract);</span><br><span class="line">    <span class="comment">// 2、从B服务查询缺失信息</span></span><br><span class="line">    executorService.execute(() -&gt; queryDataDetail(entity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如此使用有何问题">如此使用有何问题</h3><p>我重新写了一个测试方法如下：</p><p>1、定义一个会一直抛异常的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引入SystemOutRule，监听程序日志输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Rule</span></span><br><span class="line"><span class="keyword">public</span> SystemOutRule systemOutRule = <span class="keyword">new</span> SystemOutRule().enableLog();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引入SystemOutRule，监听程序日志输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">runWithException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread thread = Thread.currentThread();</span><br><span class="line">    log.info(<span class="string">&quot;thread is &#123;&#125;&quot;</span>, thread);</span><br><span class="line">    log.info(<span class="string">&quot;eh=&#123;&#125;&quot;</span>, thread.getUncaughtExceptionHandler());</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NicaiException(<span class="string">&quot;出错啦！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、使用线程池调用上面的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(<span class="keyword">this</span>::runWithException);</span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">100L</span>);</span><br><span class="line">    <span class="comment">// 断言程序打印的日志不包含“出错啦！”</span></span><br><span class="line">    Assert.assertFalse(systemOutRule.getLog().contains(<span class="string">&quot;出错啦！&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、上面的单测断言是成功的，那么异常跑哪里去了？上面的单测在控制台的输出如下：</p><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master//image-20200807110851677.png" alt="image-20200807110851677"></p><p>4、可以看出上面的异常信息是直接输出到了控制台，而不是由程序输出到控制台，主要原因是主程序没有捕获到此异常导致的。（具体原因还没有深入）</p><h3 id="如何解决线程池的异常捕获问题">如何解决线程池的异常捕获问题</h3><p>上面的测试可以说明到为什么日志里面查不到错误日志，那么如何捕获线程里的异常呢？</p><h4 id="方法1-使用UncaughtExceptionHandler">方法1:使用UncaughtExceptionHandler</h4><p>1、在创建线程池的时候，设置传入的ThreadFactory的UncaughtExceptionHandler属性，此UncaughtExceptionHandler会处理线程中的异常；下面的例子我直接打印了出来异常原因和异常栈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runWithUncaughtExceptionHandler</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool(</span><br><span class="line">            <span class="keyword">new</span> ThreadFactoryBuilder()</span><br><span class="line">                    .setUncaughtExceptionHandler((t, e) -&gt; log.info(<span class="string">&quot;UncaughtExceptionHandler caught, error_message=&#123;&#125;&quot;</span>, e.getMessage(), e))</span><br><span class="line">                    .build());</span><br><span class="line">    executorService.execute(<span class="keyword">this</span>::runWithException);</span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">100L</span>);</span><br><span class="line">    Assert.assertTrue(systemOutRule.getLog().contains(<span class="string">&quot;出错啦！&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、上面的单测运行结果如下：（可以和上面的运行结果进行比对）</p><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master//image-20200807111728213.png" alt="image-20200807111728213"></p><p>3、从上面的运行结果可以看出异常信息是由程序捕获后再输出出来，这样就不会导致查不到异常日志了。</p><h4 id="方法2-使用guava扩展的FutureCallback">方法2:使用guava扩展的FutureCallback</h4><p>1、guava对jdk的线程做了一些扩展，其中一个就是FutureCallback，使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runWithGuavaThreadPool</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ListeningExecutorService executorService = MoreExecutors.listeningDecorator(Executors.newCachedThreadPool());</span><br><span class="line">    ListenableFuture&lt;String&gt; listenableFuture = executorService.submit(<span class="keyword">this</span>::runWithException);</span><br><span class="line">    Futures.addCallback(listenableFuture, <span class="keyword">new</span> FutureCallback&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;success! result = &#123;&#125;&quot;</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">            log.error(<span class="string">&quot;guava FutureCallback caught, error_message=&#123;&#125;&quot;</span>, t.getMessage(), t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, executorService);</span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">100L</span>);</span><br><span class="line">    Assert.assertTrue(systemOutRule.getLog().contains(<span class="string">&quot;出错啦！&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、上面的单测运行结果如下：</p><p><img src="https://gitee.com/zheshiyigegexingwangzhan/images/raw/master//image-20200807112535447.png" alt="image-20200807112535447"></p><h2 id="问题总结">问题总结</h2><p>1、通过上面的测试，优化A服务的线程池定义，使之在遇到异常时能够正常被捕获，能输出，方便问题定位；补偿定时任务也能对第一次查询异常进行容错，保证数据能够同步过来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询B服务数据详情的线程池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService executorService = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0L</span>, TimeUnit.MICROSECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(), <span class="keyword">new</span> ThreadFactoryBuilder()</span><br><span class="line">        .setUncaughtExceptionHandler((t, e) -&gt; log.error(<span class="string">&quot;查询数据详情的线程池异常,error_message=&#123;&#125;&quot;</span>, e.getMessage(), e))</span><br><span class="line">        .setNameFormat(<span class="string">&quot;queryDataDetail-%d&quot;</span>).build());</span><br></pre></td></tr></table></figure><p>2、当然此问题更深层的问题还没有完全解答</p><ul><li>为什么线程里的异常不会被捕获？</li><li>UncaughtExceptionHandler的运行原理是什么？</li><li>Guava的FutureCallback是如何运行的？</li></ul><p>3、<a href="https://github.com/guozhe001/my-tools/blob/master/my-learn/my-experience/src/test/java/com/nicai/experience/concurrency/ExceptionThreadTest.java">测试代码源码地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;问题描述&lt;/h2&gt;
&lt;h3 id=&quot;需求信息&quot;&gt;需求信息&lt;/h3&gt;
&lt;p&gt;最近在工作中有个需求，先在A服务页面增加一条数据，然后去B服务查询此数据的详细信息&lt;/p&gt;
&lt;h3 id=&quot;解决方案&quot;&gt;解决方案&lt;/h3&gt;
&lt;p&gt;为了使A服务的新增数据接口快速响</summary>
      
    
    
    
    <category term="Java" scheme="https://guozhe001.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://guozhe001.github.io/tags/Java/"/>
    
    <category term="线程池" scheme="https://guozhe001.github.io/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>SUMMARY-供应链金融</title>
    <link href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/summary/"/>
    <id>https://guozhe001.github.io/2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/summary/</id>
    <published>2024-11-22T06:32:06.496Z</published>
    <updated>2024-11-22T06:32:06.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目背景">项目背景</h2><p>为了学习Fabric，模拟搭建一个供应链金融的区块链项目。</p><p>为了简单起见，此项目有以下四个组织：</p><ul><li>核心企业</li><li>一级供应商</li><li>二级供应商1</li><li>二级供应商2</li></ul><h2 id="操作步骤：">操作步骤：</h2><ol start="0"><li><a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/">设置环境变量</a></li><li><a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BA%E7%BD%91%E7%BB%9C/">创建网络</a></li><li><a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%88%9B%E5%BB%BAchannel/">创建channel</a></li><li><a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E5%BC%80%E5%8F%91%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/">开发智能合约</a></li><li><a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%88%B0channel/">部署智能合约到channel并进行交易</a></li><li>[交易与验证](file://部署智能合约到channel.md)：查看“部署supply-v8到alljoinchannel通道”部分</li><li><a href="https://guozhe001.github.io/2024/11/22/blockchain/fabric/%E9%80%9A%E8%BF%87%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D%E7%BB%83%E4%B9%A0Fabric/%E9%9A%90%E7%A7%98%E4%BA%A4%E6%98%93/">隐秘交易</a></li><li><a href="https://github.com/guozhe001/supply-finance.git">源码地址</a></li></ol><h2 id="总结：">总结：</h2><p>本项目成功的在测试环境自己部署网络，自己写智能合约并进行调用；完成了入门练习。</p><h2 id="存在的问题：">存在的问题：</h2><h3 id="问题1">问题1</h3><p>目前此程序把所有的组织都加入了同一个渠道，所以账本是对所有组织都是公开的；现实生活中每个企业之间的交易应该都是私密的，不能被其他企业所见。</p><h4 id="解决方案1：">解决方案1：</h4><p>使用通道隔离，每两个需要交易的组织之间都创建一个通道。</p><p><strong>可行性：</strong> <em>初步判断此方法不可行，因为不同通道之间无法交易资产？如果可以交易需要从原来的channel销毁此资产，然后在新channel创建一个新的可被信任的新资产</em></p><h4 id="解决方案2：">解决方案2：</h4><p>使用私密资产交易的方式解决,参考文档<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/secured_asset_transfer/secured_private_asset_transfer_tutorial.html">Secured asset transfer in Fabric</a></p><p><strong>可行性：</strong> 可以，查看[隐秘交易](file://隐秘交易.md)</p><h3 id="问题2">问题2:</h3><p>同一个智能合约如何限制只能由指定的人调用？如本例中，发行方法应该只能由核心企业调用。</p><h3 id="解决方案">解决方案</h3><p>同一个智能合约可以由部署智能合约的成员调用，所以无法限制，除非智能合约里面写死。</p><p>在应收账款供应链金融的demo中，我们写的智能合约可以由任何人发行应收账款，但是这只是生成了私有的数据，别人认不认可是否跟发行应收账款的组织交易是链下解决的问题。</p><h3 id="问题3：">问题3：</h3><p>使用安全的方式交易资产之后，除了资产的拥有者之外其他任何人都无法知道资产的金额等私有信息。但是现实中的供应链金融应该是允许凭证资产的发行人知道资产归属是谁、资产的金额是多少；只有这样发行人才能够在凭证资产到期时进行还款。</p><h4 id="解决方案-v2">解决方案</h4><p>修改智能合约，待完成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;项目背景&quot;&gt;项目背景&lt;/h2&gt;
&lt;p&gt;为了学习Fabric，模拟搭建一个供应链金融的区块链项目。&lt;/p&gt;
&lt;p&gt;为了简单起见，此项目有以下四个组织：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心企业&lt;/li&gt;
&lt;li&gt;一级供应商&lt;/li&gt;
&lt;li&gt;二级供应商1&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/"/>
    
    <category term="项目实践-供应链金融" scheme="https://guozhe001.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/Hyperledger-Fabric/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5-%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="blockchain" scheme="https://guozhe001.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Hyperledger-Fabric" scheme="https://guozhe001.github.io/tags/Hyperledger-Fabric/"/>
    
    <category term="供应链金融" scheme="https://guozhe001.github.io/tags/%E4%BE%9B%E5%BA%94%E9%93%BE%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
</feed>
